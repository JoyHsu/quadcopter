   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.memset,"ax",%progbits
  20              		.align	2
  21              		.global	memset
  22              		.thumb
  23              		.thumb_func
  25              	memset:
  26              	.LFB110:
  27              		.file 1 "src/string-util.c"
   1:src/string-util.c **** #include <stddef.h>
   2:src/string-util.c **** #include <stdint.h>
   3:src/string-util.c **** #include <limits.h>
   4:src/string-util.c **** 
   5:src/string-util.c **** #define ALIGN (sizeof(size_t))
   6:src/string-util.c **** #define ONES ((size_t)-1/UCHAR_MAX)                                                                
   7:src/string-util.c **** #define HIGHS (ONES * (UCHAR_MAX/2+1))
   8:src/string-util.c **** #define HASZERO(x) ((x)-ONES & ~(x) & HIGHS)
   9:src/string-util.c **** 
  10:src/string-util.c **** #define SS (sizeof(size_t))
  11:src/string-util.c **** 
  12:src/string-util.c **** #include <stdarg.h>
  13:src/string-util.c **** 
  14:src/string-util.c **** /* Scheduler includes. */
  15:src/string-util.c **** #include "FreeRTOS.h"
  16:src/string-util.c **** #include "task.h"
  17:src/string-util.c **** #include "queue.h"
  18:src/string-util.c **** #include "semphr.h"
  19:src/string-util.c **** 
  20:src/string-util.c **** void *memset(void *dest, int c, size_t n)
  21:src/string-util.c **** {
  28              		.loc 1 21 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 32
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 89B0     		sub	sp, sp, #36
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 40
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 F860     		str	r0, [r7, #12]
  44 0008 B960     		str	r1, [r7, #8]
  45 000a 7A60     		str	r2, [r7, #4]
  22:src/string-util.c **** 	unsigned char *s = dest;
  46              		.loc 1 22 0
  47 000c FB68     		ldr	r3, [r7, #12]
  48 000e FB61     		str	r3, [r7, #28]
  23:src/string-util.c **** 	c = (unsigned char)c;
  49              		.loc 1 23 0
  50 0010 BB68     		ldr	r3, [r7, #8]
  51 0012 DBB2     		uxtb	r3, r3
  52 0014 BB60     		str	r3, [r7, #8]
  24:src/string-util.c **** 	for (; ((uintptr_t)s & ALIGN) && n; n--) *s++ = c;
  53              		.loc 1 24 0
  54 0016 0BE0     		b	.L2
  55              	.L4:
  56              		.loc 1 24 0 is_stmt 0 discriminator 1
  57 0018 BB68     		ldr	r3, [r7, #8]
  58 001a DAB2     		uxtb	r2, r3
  59 001c FB69     		ldr	r3, [r7, #28]
  60 001e 1A70     		strb	r2, [r3, #0]
  61 0020 FB69     		ldr	r3, [r7, #28]
  62 0022 03F10103 		add	r3, r3, #1
  63 0026 FB61     		str	r3, [r7, #28]
  64 0028 7B68     		ldr	r3, [r7, #4]
  65 002a 03F1FF33 		add	r3, r3, #-1
  66 002e 7B60     		str	r3, [r7, #4]
  67              	.L2:
  68 0030 FB69     		ldr	r3, [r7, #28]
  69 0032 03F00403 		and	r3, r3, #4
  70 0036 002B     		cmp	r3, #0
  71 0038 02D0     		beq	.L3
  72              		.loc 1 24 0 discriminator 2
  73 003a 7B68     		ldr	r3, [r7, #4]
  74 003c 002B     		cmp	r3, #0
  75 003e EBD1     		bne	.L4
  76              	.L3:
  25:src/string-util.c **** 	if (n) {
  77              		.loc 1 25 0 is_stmt 1
  78 0040 7B68     		ldr	r3, [r7, #4]
  79 0042 002B     		cmp	r3, #0
  80 0044 2BD0     		beq	.L5
  81              	.LBB2:
  26:src/string-util.c **** 		size_t *w, k = ONES * c;
  82              		.loc 1 26 0
  83 0046 BA68     		ldr	r2, [r7, #8]
  84 0048 1346     		mov	r3, r2
  85 004a 4FEA0323 		lsl	r3, r3, #8
  86 004e 9B18     		adds	r3, r3, r2
  87 0050 4FEA0342 		lsl	r2, r3, #16
  88 0054 9B18     		adds	r3, r3, r2
  89 0056 7B61     		str	r3, [r7, #20]
  27:src/string-util.c **** 		for (w = (void *)s; n>=SS; n-=SS, w++) *w = k;
  90              		.loc 1 27 0
  91 0058 FB69     		ldr	r3, [r7, #28]
  92 005a BB61     		str	r3, [r7, #24]
  93 005c 0AE0     		b	.L6
  94              	.L7:
  95              		.loc 1 27 0 is_stmt 0 discriminator 2
  96 005e BB69     		ldr	r3, [r7, #24]
  97 0060 7A69     		ldr	r2, [r7, #20]
  98 0062 1A60     		str	r2, [r3, #0]
  99 0064 7B68     		ldr	r3, [r7, #4]
 100 0066 A3F10403 		sub	r3, r3, #4
 101 006a 7B60     		str	r3, [r7, #4]
 102 006c BB69     		ldr	r3, [r7, #24]
 103 006e 03F10403 		add	r3, r3, #4
 104 0072 BB61     		str	r3, [r7, #24]
 105              	.L6:
 106              		.loc 1 27 0 discriminator 1
 107 0074 7B68     		ldr	r3, [r7, #4]
 108 0076 032B     		cmp	r3, #3
 109 0078 F1D8     		bhi	.L7
  28:src/string-util.c **** 		for (s = (void *)w; n; n--, s++) *s = c;
 110              		.loc 1 28 0 is_stmt 1
 111 007a BB69     		ldr	r3, [r7, #24]
 112 007c FB61     		str	r3, [r7, #28]
 113 007e 0BE0     		b	.L8
 114              	.L9:
 115              		.loc 1 28 0 is_stmt 0 discriminator 2
 116 0080 BB68     		ldr	r3, [r7, #8]
 117 0082 DAB2     		uxtb	r2, r3
 118 0084 FB69     		ldr	r3, [r7, #28]
 119 0086 1A70     		strb	r2, [r3, #0]
 120 0088 7B68     		ldr	r3, [r7, #4]
 121 008a 03F1FF33 		add	r3, r3, #-1
 122 008e 7B60     		str	r3, [r7, #4]
 123 0090 FB69     		ldr	r3, [r7, #28]
 124 0092 03F10103 		add	r3, r3, #1
 125 0096 FB61     		str	r3, [r7, #28]
 126              	.L8:
 127              		.loc 1 28 0 discriminator 1
 128 0098 7B68     		ldr	r3, [r7, #4]
 129 009a 002B     		cmp	r3, #0
 130 009c F0D1     		bne	.L9
 131              	.L5:
 132              	.LBE2:
  29:src/string-util.c **** 	}
  30:src/string-util.c **** 	return dest;
 133              		.loc 1 30 0 is_stmt 1
 134 009e FB68     		ldr	r3, [r7, #12]
  31:src/string-util.c **** }
 135              		.loc 1 31 0
 136 00a0 1846     		mov	r0, r3
 137 00a2 07F12407 		add	r7, r7, #36
 138 00a6 BD46     		mov	sp, r7
 139 00a8 80BC     		pop	{r7}
 140 00aa 7047     		bx	lr
 141              		.cfi_endproc
 142              	.LFE110:
 144              		.section	.text.memcpy,"ax",%progbits
 145              		.align	2
 146              		.global	memcpy
 147              		.thumb
 148              		.thumb_func
 150              	memcpy:
 151              	.LFB111:
  32:src/string-util.c **** 
  33:src/string-util.c **** void *memcpy(void *dest, const void *src, size_t n)
  34:src/string-util.c **** {
 152              		.loc 1 34 0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 40
 155              		@ frame_needed = 1, uses_anonymous_args = 0
 156              		@ link register save eliminated.
 157 0000 80B4     		push	{r7}
 158              	.LCFI3:
 159              		.cfi_def_cfa_offset 4
 160              		.cfi_offset 7, -4
 161 0002 8BB0     		sub	sp, sp, #44
 162              	.LCFI4:
 163              		.cfi_def_cfa_offset 48
 164 0004 00AF     		add	r7, sp, #0
 165              	.LCFI5:
 166              		.cfi_def_cfa_register 7
 167 0006 F860     		str	r0, [r7, #12]
 168 0008 B960     		str	r1, [r7, #8]
 169 000a 7A60     		str	r2, [r7, #4]
  35:src/string-util.c **** 	void *ret = dest;
 170              		.loc 1 35 0
 171 000c FB68     		ldr	r3, [r7, #12]
 172 000e 7B61     		str	r3, [r7, #20]
  36:src/string-util.c **** 	
  37:src/string-util.c **** 	//Cut rear
  38:src/string-util.c **** 	uint8_t *dst8 = dest;
 173              		.loc 1 38 0
 174 0010 FB68     		ldr	r3, [r7, #12]
 175 0012 7B62     		str	r3, [r7, #36]
  39:src/string-util.c **** 	const uint8_t *src8 = src;
 176              		.loc 1 39 0
 177 0014 BB68     		ldr	r3, [r7, #8]
 178 0016 3B62     		str	r3, [r7, #32]
  40:src/string-util.c **** 	switch (n % 4) {
 179              		.loc 1 40 0
 180 0018 7B68     		ldr	r3, [r7, #4]
 181 001a 03F00303 		and	r3, r3, #3
 182 001e 022B     		cmp	r3, #2
 183 0020 10D0     		beq	.L13
 184 0022 032B     		cmp	r3, #3
 185 0024 02D0     		beq	.L14
 186 0026 012B     		cmp	r3, #1
 187 0028 18D0     		beq	.L12
 188 002a 23E0     		b	.L11
 189              	.L14:
  41:src/string-util.c **** 		case 3 : *dst8++ = *src8++;
 190              		.loc 1 41 0
 191 002c 3B6A     		ldr	r3, [r7, #32]
 192 002e 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 193 0030 7B6A     		ldr	r3, [r7, #36]
 194 0032 1A70     		strb	r2, [r3, #0]
 195 0034 7B6A     		ldr	r3, [r7, #36]
 196 0036 03F10103 		add	r3, r3, #1
 197 003a 7B62     		str	r3, [r7, #36]
 198 003c 3B6A     		ldr	r3, [r7, #32]
 199 003e 03F10103 		add	r3, r3, #1
 200 0042 3B62     		str	r3, [r7, #32]
 201              	.L13:
  42:src/string-util.c **** 		case 2 : *dst8++ = *src8++;
 202              		.loc 1 42 0
 203 0044 3B6A     		ldr	r3, [r7, #32]
 204 0046 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 205 0048 7B6A     		ldr	r3, [r7, #36]
 206 004a 1A70     		strb	r2, [r3, #0]
 207 004c 7B6A     		ldr	r3, [r7, #36]
 208 004e 03F10103 		add	r3, r3, #1
 209 0052 7B62     		str	r3, [r7, #36]
 210 0054 3B6A     		ldr	r3, [r7, #32]
 211 0056 03F10103 		add	r3, r3, #1
 212 005a 3B62     		str	r3, [r7, #32]
 213              	.L12:
  43:src/string-util.c **** 		case 1 : *dst8++ = *src8++;
 214              		.loc 1 43 0
 215 005c 3B6A     		ldr	r3, [r7, #32]
 216 005e 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 217 0060 7B6A     		ldr	r3, [r7, #36]
 218 0062 1A70     		strb	r2, [r3, #0]
 219 0064 7B6A     		ldr	r3, [r7, #36]
 220 0066 03F10103 		add	r3, r3, #1
 221 006a 7B62     		str	r3, [r7, #36]
 222 006c 3B6A     		ldr	r3, [r7, #32]
 223 006e 03F10103 		add	r3, r3, #1
 224 0072 3B62     		str	r3, [r7, #32]
 225              	.L11:
  44:src/string-util.c **** 		case 0 : ;
  45:src/string-util.c **** 	}
  46:src/string-util.c **** 	
  47:src/string-util.c **** 	//stm32 data bus width
  48:src/string-util.c **** 	uint32_t *dst32 = (void *)dst8;
 226              		.loc 1 48 0
 227 0074 7B6A     		ldr	r3, [r7, #36]
 228 0076 FB61     		str	r3, [r7, #28]
  49:src/string-util.c **** 	const uint32_t *src32 = (void *)src8;
 229              		.loc 1 49 0
 230 0078 3B6A     		ldr	r3, [r7, #32]
 231 007a BB61     		str	r3, [r7, #24]
  50:src/string-util.c **** 	n = n / 4;
 232              		.loc 1 50 0
 233 007c 7B68     		ldr	r3, [r7, #4]
 234 007e 4FEA9303 		lsr	r3, r3, #2
 235 0082 7B60     		str	r3, [r7, #4]
  51:src/string-util.c **** 	while (n--) {
 236              		.loc 1 51 0
 237 0084 0BE0     		b	.L15
 238              	.L16:
  52:src/string-util.c **** 		*dst32++ = *src32++;
 239              		.loc 1 52 0
 240 0086 BB69     		ldr	r3, [r7, #24]
 241 0088 1A68     		ldr	r2, [r3, #0]
 242 008a FB69     		ldr	r3, [r7, #28]
 243 008c 1A60     		str	r2, [r3, #0]
 244 008e FB69     		ldr	r3, [r7, #28]
 245 0090 03F10403 		add	r3, r3, #4
 246 0094 FB61     		str	r3, [r7, #28]
 247 0096 BB69     		ldr	r3, [r7, #24]
 248 0098 03F10403 		add	r3, r3, #4
 249 009c BB61     		str	r3, [r7, #24]
 250              	.L15:
  51:src/string-util.c **** 	while (n--) {
 251              		.loc 1 51 0 discriminator 1
 252 009e 7B68     		ldr	r3, [r7, #4]
 253 00a0 002B     		cmp	r3, #0
 254 00a2 0CBF     		ite	eq
 255 00a4 0023     		moveq	r3, #0
 256 00a6 0123     		movne	r3, #1
 257 00a8 DBB2     		uxtb	r3, r3
 258 00aa 7A68     		ldr	r2, [r7, #4]
 259 00ac 02F1FF32 		add	r2, r2, #-1
 260 00b0 7A60     		str	r2, [r7, #4]
 261 00b2 002B     		cmp	r3, #0
 262 00b4 E7D1     		bne	.L16
  53:src/string-util.c **** 	}
  54:src/string-util.c **** 	
  55:src/string-util.c **** 	return ret;
 263              		.loc 1 55 0
 264 00b6 7B69     		ldr	r3, [r7, #20]
  56:src/string-util.c **** }
 265              		.loc 1 56 0
 266 00b8 1846     		mov	r0, r3
 267 00ba 07F12C07 		add	r7, r7, #44
 268 00be BD46     		mov	sp, r7
 269 00c0 80BC     		pop	{r7}
 270 00c2 7047     		bx	lr
 271              		.cfi_endproc
 272              	.LFE111:
 274              		.section	.text.strchr,"ax",%progbits
 275              		.align	2
 276              		.global	strchr
 277              		.thumb
 278              		.thumb_func
 280              	strchr:
 281              	.LFB112:
  57:src/string-util.c **** 
  58:src/string-util.c **** char *strchr(const char *s, int c)
  59:src/string-util.c **** {
 282              		.loc 1 59 0
 283              		.cfi_startproc
 284              		@ args = 0, pretend = 0, frame = 8
 285              		@ frame_needed = 1, uses_anonymous_args = 0
 286              		@ link register save eliminated.
 287 0000 80B4     		push	{r7}
 288              	.LCFI6:
 289              		.cfi_def_cfa_offset 4
 290              		.cfi_offset 7, -4
 291 0002 83B0     		sub	sp, sp, #12
 292              	.LCFI7:
 293              		.cfi_def_cfa_offset 16
 294 0004 00AF     		add	r7, sp, #0
 295              	.LCFI8:
 296              		.cfi_def_cfa_register 7
 297 0006 7860     		str	r0, [r7, #4]
 298 0008 3960     		str	r1, [r7, #0]
  60:src/string-util.c **** 	for (; *s && *s != c; s++);
 299              		.loc 1 60 0
 300 000a 03E0     		b	.L18
 301              	.L20:
 302              		.loc 1 60 0 is_stmt 0 discriminator 1
 303 000c 7B68     		ldr	r3, [r7, #4]
 304 000e 03F10103 		add	r3, r3, #1
 305 0012 7B60     		str	r3, [r7, #4]
 306              	.L18:
 307 0014 7B68     		ldr	r3, [r7, #4]
 308 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 309 0018 002B     		cmp	r3, #0
 310 001a 05D0     		beq	.L19
 311              		.loc 1 60 0 discriminator 2
 312 001c 7B68     		ldr	r3, [r7, #4]
 313 001e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 314 0020 1A46     		mov	r2, r3
 315 0022 3B68     		ldr	r3, [r7, #0]
 316 0024 9A42     		cmp	r2, r3
 317 0026 F1D1     		bne	.L20
 318              	.L19:
  61:src/string-util.c **** 	return (*s == c) ? (char *)s : NULL;
 319              		.loc 1 61 0 is_stmt 1
 320 0028 7B68     		ldr	r3, [r7, #4]
 321 002a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 322 002c 1A46     		mov	r2, r3
 323 002e 3B68     		ldr	r3, [r7, #0]
 324 0030 9A42     		cmp	r2, r3
 325 0032 01D1     		bne	.L21
 326              		.loc 1 61 0 is_stmt 0 discriminator 1
 327 0034 7B68     		ldr	r3, [r7, #4]
 328 0036 01E0     		b	.L22
 329              	.L21:
 330              		.loc 1 61 0 discriminator 2
 331 0038 4FF00003 		mov	r3, #0
 332              	.L22:
  62:src/string-util.c **** }
 333              		.loc 1 62 0 is_stmt 1 discriminator 3
 334 003c 1846     		mov	r0, r3
 335 003e 07F10C07 		add	r7, r7, #12
 336 0042 BD46     		mov	sp, r7
 337 0044 80BC     		pop	{r7}
 338 0046 7047     		bx	lr
 339              		.cfi_endproc
 340              	.LFE112:
 342              		.section	.text.strcpy,"ax",%progbits
 343              		.align	2
 344              		.global	strcpy
 345              		.thumb
 346              		.thumb_func
 348              	strcpy:
 349              	.LFB113:
  63:src/string-util.c **** 
  64:src/string-util.c **** char *strcpy(char *dest, const char *src)
  65:src/string-util.c **** {
 350              		.loc 1 65 0
 351              		.cfi_startproc
 352              		@ args = 0, pretend = 0, frame = 16
 353              		@ frame_needed = 1, uses_anonymous_args = 0
 354              		@ link register save eliminated.
 355 0000 80B4     		push	{r7}
 356              	.LCFI9:
 357              		.cfi_def_cfa_offset 4
 358              		.cfi_offset 7, -4
 359 0002 85B0     		sub	sp, sp, #20
 360              	.LCFI10:
 361              		.cfi_def_cfa_offset 24
 362 0004 00AF     		add	r7, sp, #0
 363              	.LCFI11:
 364              		.cfi_def_cfa_register 7
 365 0006 7860     		str	r0, [r7, #4]
 366 0008 3960     		str	r1, [r7, #0]
  66:src/string-util.c **** 	const unsigned char *s = src;
 367              		.loc 1 66 0
 368 000a 3B68     		ldr	r3, [r7, #0]
 369 000c FB60     		str	r3, [r7, #12]
  67:src/string-util.c **** 	unsigned char *d = dest;
 370              		.loc 1 67 0
 371 000e 7B68     		ldr	r3, [r7, #4]
 372 0010 BB60     		str	r3, [r7, #8]
  68:src/string-util.c **** 	while ((*d++ = *s++));
 373              		.loc 1 68 0
 374 0012 00BF     		nop
 375              	.L24:
 376              		.loc 1 68 0 is_stmt 0 discriminator 1
 377 0014 FB68     		ldr	r3, [r7, #12]
 378 0016 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 379 0018 BB68     		ldr	r3, [r7, #8]
 380 001a 1A70     		strb	r2, [r3, #0]
 381 001c BB68     		ldr	r3, [r7, #8]
 382 001e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 383 0020 002B     		cmp	r3, #0
 384 0022 0CBF     		ite	eq
 385 0024 0023     		moveq	r3, #0
 386 0026 0123     		movne	r3, #1
 387 0028 DBB2     		uxtb	r3, r3
 388 002a BA68     		ldr	r2, [r7, #8]
 389 002c 02F10102 		add	r2, r2, #1
 390 0030 BA60     		str	r2, [r7, #8]
 391 0032 FA68     		ldr	r2, [r7, #12]
 392 0034 02F10102 		add	r2, r2, #1
 393 0038 FA60     		str	r2, [r7, #12]
 394 003a 002B     		cmp	r3, #0
 395 003c EAD1     		bne	.L24
  69:src/string-util.c **** 	return dest;
 396              		.loc 1 69 0 is_stmt 1
 397 003e 7B68     		ldr	r3, [r7, #4]
  70:src/string-util.c **** }
 398              		.loc 1 70 0
 399 0040 1846     		mov	r0, r3
 400 0042 07F11407 		add	r7, r7, #20
 401 0046 BD46     		mov	sp, r7
 402 0048 80BC     		pop	{r7}
 403 004a 7047     		bx	lr
 404              		.cfi_endproc
 405              	.LFE113:
 407              		.section	.text.strncpy,"ax",%progbits
 408              		.align	2
 409              		.global	strncpy
 410              		.thumb
 411              		.thumb_func
 413              	strncpy:
 414              	.LFB114:
  71:src/string-util.c **** 
  72:src/string-util.c **** char *strncpy(char *dest, const char *src, size_t n)
  73:src/string-util.c **** {
 415              		.loc 1 73 0
 416              		.cfi_startproc
 417              		@ args = 0, pretend = 0, frame = 24
 418              		@ frame_needed = 1, uses_anonymous_args = 0
 419              		@ link register save eliminated.
 420 0000 80B4     		push	{r7}
 421              	.LCFI12:
 422              		.cfi_def_cfa_offset 4
 423              		.cfi_offset 7, -4
 424 0002 87B0     		sub	sp, sp, #28
 425              	.LCFI13:
 426              		.cfi_def_cfa_offset 32
 427 0004 00AF     		add	r7, sp, #0
 428              	.LCFI14:
 429              		.cfi_def_cfa_register 7
 430 0006 F860     		str	r0, [r7, #12]
 431 0008 B960     		str	r1, [r7, #8]
 432 000a 7A60     		str	r2, [r7, #4]
  74:src/string-util.c **** 	const unsigned char *s = src;
 433              		.loc 1 74 0
 434 000c BB68     		ldr	r3, [r7, #8]
 435 000e 7B61     		str	r3, [r7, #20]
  75:src/string-util.c **** 	unsigned char *d = dest;
 436              		.loc 1 75 0
 437 0010 FB68     		ldr	r3, [r7, #12]
 438 0012 3B61     		str	r3, [r7, #16]
  76:src/string-util.c **** 	while (n-- && (*d++ = *s++));
 439              		.loc 1 76 0
 440 0014 00BF     		nop
 441              	.L27:
 442              		.loc 1 76 0 is_stmt 0 discriminator 1
 443 0016 7B68     		ldr	r3, [r7, #4]
 444 0018 002B     		cmp	r3, #0
 445 001a 0CBF     		ite	eq
 446 001c 0023     		moveq	r3, #0
 447 001e 0123     		movne	r3, #1
 448 0020 DBB2     		uxtb	r3, r3
 449 0022 7A68     		ldr	r2, [r7, #4]
 450 0024 02F1FF32 		add	r2, r2, #-1
 451 0028 7A60     		str	r2, [r7, #4]
 452 002a 002B     		cmp	r3, #0
 453 002c 14D0     		beq	.L26
 454              		.loc 1 76 0 discriminator 2
 455 002e 7B69     		ldr	r3, [r7, #20]
 456 0030 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 457 0032 3B69     		ldr	r3, [r7, #16]
 458 0034 1A70     		strb	r2, [r3, #0]
 459 0036 3B69     		ldr	r3, [r7, #16]
 460 0038 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 461 003a 002B     		cmp	r3, #0
 462 003c 0CBF     		ite	eq
 463 003e 0023     		moveq	r3, #0
 464 0040 0123     		movne	r3, #1
 465 0042 DBB2     		uxtb	r3, r3
 466 0044 3A69     		ldr	r2, [r7, #16]
 467 0046 02F10102 		add	r2, r2, #1
 468 004a 3A61     		str	r2, [r7, #16]
 469 004c 7A69     		ldr	r2, [r7, #20]
 470 004e 02F10102 		add	r2, r2, #1
 471 0052 7A61     		str	r2, [r7, #20]
 472 0054 002B     		cmp	r3, #0
 473 0056 DED1     		bne	.L27
 474              	.L26:
  77:src/string-util.c **** 	return dest;
 475              		.loc 1 77 0 is_stmt 1
 476 0058 FB68     		ldr	r3, [r7, #12]
  78:src/string-util.c **** }
 477              		.loc 1 78 0
 478 005a 1846     		mov	r0, r3
 479 005c 07F11C07 		add	r7, r7, #28
 480 0060 BD46     		mov	sp, r7
 481 0062 80BC     		pop	{r7}
 482 0064 7047     		bx	lr
 483              		.cfi_endproc
 484              	.LFE114:
 486 0066 00BF     		.section	.text.strncmp,"ax",%progbits
 487              		.align	2
 488              		.global	strncmp
 489              		.thumb
 490              		.thumb_func
 492              	strncmp:
 493              	.LFB115:
  79:src/string-util.c **** 
  80:src/string-util.c **** int strncmp(const char *s1, const char *s2, size_t n)
  81:src/string-util.c **** {
 494              		.loc 1 81 0
 495              		.cfi_startproc
 496              		@ args = 0, pretend = 0, frame = 16
 497              		@ frame_needed = 1, uses_anonymous_args = 0
 498              		@ link register save eliminated.
 499 0000 80B4     		push	{r7}
 500              	.LCFI15:
 501              		.cfi_def_cfa_offset 4
 502              		.cfi_offset 7, -4
 503 0002 85B0     		sub	sp, sp, #20
 504              	.LCFI16:
 505              		.cfi_def_cfa_offset 24
 506 0004 00AF     		add	r7, sp, #0
 507              	.LCFI17:
 508              		.cfi_def_cfa_register 7
 509 0006 F860     		str	r0, [r7, #12]
 510 0008 B960     		str	r1, [r7, #8]
 511 000a 7A60     		str	r2, [r7, #4]
  82:src/string-util.c ****     for ( ; n > 0; s1++, s2++, --n)
 512              		.loc 1 82 0
 513 000c 1FE0     		b	.L29
 514              	.L33:
  83:src/string-util.c **** 	    if (*s1 != *s2)
 515              		.loc 1 83 0
 516 000e FB68     		ldr	r3, [r7, #12]
 517 0010 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 518 0012 BB68     		ldr	r3, [r7, #8]
 519 0014 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 520 0016 9A42     		cmp	r2, r3
 521 0018 06D0     		beq	.L30
  84:src/string-util.c **** 	        return *(unsigned char *)s1 - *(unsigned char *)s2;
 522              		.loc 1 84 0
 523 001a FB68     		ldr	r3, [r7, #12]
 524 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 525 001e 1A46     		mov	r2, r3
 526 0020 BB68     		ldr	r3, [r7, #8]
 527 0022 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 528 0024 D31A     		subs	r3, r2, r3
 529 0026 17E0     		b	.L31
 530              	.L30:
  85:src/string-util.c **** 	    else if (*s1 == '\0')
 531              		.loc 1 85 0
 532 0028 FB68     		ldr	r3, [r7, #12]
 533 002a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 534 002c 002B     		cmp	r3, #0
 535 002e 02D1     		bne	.L32
  86:src/string-util.c **** 	        return 0;
 536              		.loc 1 86 0
 537 0030 4FF00003 		mov	r3, #0
 538 0034 10E0     		b	.L31
 539              	.L32:
  82:src/string-util.c ****     for ( ; n > 0; s1++, s2++, --n)
 540              		.loc 1 82 0
 541 0036 FB68     		ldr	r3, [r7, #12]
 542 0038 03F10103 		add	r3, r3, #1
 543 003c FB60     		str	r3, [r7, #12]
 544 003e BB68     		ldr	r3, [r7, #8]
 545 0040 03F10103 		add	r3, r3, #1
 546 0044 BB60     		str	r3, [r7, #8]
 547 0046 7B68     		ldr	r3, [r7, #4]
 548 0048 03F1FF33 		add	r3, r3, #-1
 549 004c 7B60     		str	r3, [r7, #4]
 550              	.L29:
  82:src/string-util.c ****     for ( ; n > 0; s1++, s2++, --n)
 551              		.loc 1 82 0 is_stmt 0 discriminator 1
 552 004e 7B68     		ldr	r3, [r7, #4]
 553 0050 002B     		cmp	r3, #0
 554 0052 DCD1     		bne	.L33
  87:src/string-util.c ****     return 0;
 555              		.loc 1 87 0 is_stmt 1
 556 0054 4FF00003 		mov	r3, #0
 557              	.L31:
  88:src/string-util.c **** }
 558              		.loc 1 88 0
 559 0058 1846     		mov	r0, r3
 560 005a 07F11407 		add	r7, r7, #20
 561 005e BD46     		mov	sp, r7
 562 0060 80BC     		pop	{r7}
 563 0062 7047     		bx	lr
 564              		.cfi_endproc
 565              	.LFE115:
 567              		.section	.text.atoi,"ax",%progbits
 568              		.align	2
 569              		.global	atoi
 570              		.thumb
 571              		.thumb_func
 573              	atoi:
 574              	.LFB116:
  89:src/string-util.c **** 
  90:src/string-util.c **** int atoi(const char *str){
 575              		.loc 1 90 0
 576              		.cfi_startproc
 577              		@ args = 0, pretend = 0, frame = 16
 578              		@ frame_needed = 1, uses_anonymous_args = 0
 579              		@ link register save eliminated.
 580 0000 80B4     		push	{r7}
 581              	.LCFI18:
 582              		.cfi_def_cfa_offset 4
 583              		.cfi_offset 7, -4
 584 0002 85B0     		sub	sp, sp, #20
 585              	.LCFI19:
 586              		.cfi_def_cfa_offset 24
 587 0004 00AF     		add	r7, sp, #0
 588              	.LCFI20:
 589              		.cfi_def_cfa_register 7
 590 0006 7860     		str	r0, [r7, #4]
  91:src/string-util.c ****         int result = 0;
 591              		.loc 1 91 0
 592 0008 4FF00003 		mov	r3, #0
 593 000c FB60     		str	r3, [r7, #12]
  92:src/string-util.c ****         while (*str != '\0'){
 594              		.loc 1 92 0
 595 000e 13E0     		b	.L35
 596              	.L36:
  93:src/string-util.c ****                 result = result * 10;
 597              		.loc 1 93 0
 598 0010 FA68     		ldr	r2, [r7, #12]
 599 0012 1346     		mov	r3, r2
 600 0014 4FEA8303 		lsl	r3, r3, #2
 601 0018 9B18     		adds	r3, r3, r2
 602 001a 4FEA4303 		lsl	r3, r3, #1
 603 001e FB60     		str	r3, [r7, #12]
  94:src/string-util.c ****                 result = result + *str - '0';
 604              		.loc 1 94 0
 605 0020 7B68     		ldr	r3, [r7, #4]
 606 0022 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 607 0024 1A46     		mov	r2, r3
 608 0026 FB68     		ldr	r3, [r7, #12]
 609 0028 D318     		adds	r3, r2, r3
 610 002a A3F13003 		sub	r3, r3, #48
 611 002e FB60     		str	r3, [r7, #12]
  95:src/string-util.c ****                 str++;
 612              		.loc 1 95 0
 613 0030 7B68     		ldr	r3, [r7, #4]
 614 0032 03F10103 		add	r3, r3, #1
 615 0036 7B60     		str	r3, [r7, #4]
 616              	.L35:
  92:src/string-util.c ****         while (*str != '\0'){
 617              		.loc 1 92 0 discriminator 1
 618 0038 7B68     		ldr	r3, [r7, #4]
 619 003a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 620 003c 002B     		cmp	r3, #0
 621 003e E7D1     		bne	.L36
  96:src/string-util.c ****         }
  97:src/string-util.c ****         return result;
 622              		.loc 1 97 0
 623 0040 FB68     		ldr	r3, [r7, #12]
  98:src/string-util.c **** }
 624              		.loc 1 98 0
 625 0042 1846     		mov	r0, r3
 626 0044 07F11407 		add	r7, r7, #20
 627 0048 BD46     		mov	sp, r7
 628 004a 80BC     		pop	{r7}
 629 004c 7047     		bx	lr
 630              		.cfi_endproc
 631              	.LFE116:
 633 004e 00BF     		.section	.text._toa,"ax",%progbits
 634              		.align	2
 635              		.global	_toa
 636              		.thumb
 637              		.thumb_func
 639              	_toa:
 640              	.LFB117:
  99:src/string-util.c **** 
 100:src/string-util.c **** #define MaxDigit 6
 101:src/string-util.c **** /*
 102:src/string-util.c **** * Main part of itoa and xtoa
 103:src/string-util.c **** * Utilize the concept of long division to implement
 104:src/string-util.c **** */
 105:src/string-util.c **** void _toa(int in_num, char *out_str, int base, int digit){
 641              		.loc 1 105 0
 642              		.cfi_startproc
 643              		@ args = 0, pretend = 0, frame = 32
 644              		@ frame_needed = 1, uses_anonymous_args = 0
 645              		@ link register save eliminated.
 646 0000 80B4     		push	{r7}
 647              	.LCFI21:
 648              		.cfi_def_cfa_offset 4
 649              		.cfi_offset 7, -4
 650 0002 89B0     		sub	sp, sp, #36
 651              	.LCFI22:
 652              		.cfi_def_cfa_offset 40
 653 0004 00AF     		add	r7, sp, #0
 654              	.LCFI23:
 655              		.cfi_def_cfa_register 7
 656 0006 F860     		str	r0, [r7, #12]
 657 0008 B960     		str	r1, [r7, #8]
 658 000a 7A60     		str	r2, [r7, #4]
 659 000c 3B60     		str	r3, [r7, #0]
 106:src/string-util.c **** 	
 107:src/string-util.c ****     int Mdigit = digit;
 660              		.loc 1 107 0
 661 000e 3B68     		ldr	r3, [r7, #0]
 662 0010 7B61     		str	r3, [r7, #20]
 108:src/string-util.c ****     int neg = 0;
 663              		.loc 1 108 0
 664 0012 4FF00003 		mov	r3, #0
 665 0016 FB61     		str	r3, [r7, #28]
 109:src/string-util.c ****     out_str[digit--] = '\0';
 666              		.loc 1 109 0
 667 0018 3B68     		ldr	r3, [r7, #0]
 668 001a BA68     		ldr	r2, [r7, #8]
 669 001c D318     		adds	r3, r2, r3
 670 001e 4FF00002 		mov	r2, #0
 671 0022 1A70     		strb	r2, [r3, #0]
 672 0024 3B68     		ldr	r3, [r7, #0]
 673 0026 03F1FF33 		add	r3, r3, #-1
 674 002a 3B60     		str	r3, [r7, #0]
 110:src/string-util.c ****     
 111:src/string-util.c ****     if(in_num == 0) out_str[digit--] = '0';    
 675              		.loc 1 111 0
 676 002c FB68     		ldr	r3, [r7, #12]
 677 002e 002B     		cmp	r3, #0
 678 0030 0AD1     		bne	.L38
 679              		.loc 1 111 0 is_stmt 0 discriminator 1
 680 0032 3B68     		ldr	r3, [r7, #0]
 681 0034 BA68     		ldr	r2, [r7, #8]
 682 0036 D318     		adds	r3, r2, r3
 683 0038 4FF03002 		mov	r2, #48
 684 003c 1A70     		strb	r2, [r3, #0]
 685 003e 3B68     		ldr	r3, [r7, #0]
 686 0040 03F1FF33 		add	r3, r3, #-1
 687 0044 3B60     		str	r3, [r7, #0]
 112:src/string-util.c ****     else if(in_num < 0){
 113:src/string-util.c ****         in_num = -in_num;
 114:src/string-util.c ****         neg = 1;
 115:src/string-util.c ****     }
 116:src/string-util.c **** 
 117:src/string-util.c ****     while(in_num > 0){
 688              		.loc 1 117 0 is_stmt 1 discriminator 1
 689 0046 45E0     		b	.L40
 690              	.L38:
 112:src/string-util.c ****     else if(in_num < 0){
 691              		.loc 1 112 0
 692 0048 FB68     		ldr	r3, [r7, #12]
 693 004a 002B     		cmp	r3, #0
 694 004c 42DA     		bge	.L40
 113:src/string-util.c ****         in_num = -in_num;
 695              		.loc 1 113 0
 696 004e FB68     		ldr	r3, [r7, #12]
 697 0050 C3F10003 		rsb	r3, r3, #0
 698 0054 FB60     		str	r3, [r7, #12]
 114:src/string-util.c ****         neg = 1;
 699              		.loc 1 114 0
 700 0056 4FF00103 		mov	r3, #1
 701 005a FB61     		str	r3, [r7, #28]
 702              		.loc 1 117 0
 703 005c 3AE0     		b	.L40
 704              	.L43:
 118:src/string-util.c **** 
 119:src/string-util.c ****         if(base == 16 && in_num % base >= 10)
 705              		.loc 1 119 0
 706 005e 7B68     		ldr	r3, [r7, #4]
 707 0060 102B     		cmp	r3, #16
 708 0062 1ED1     		bne	.L41
 709              		.loc 1 119 0 is_stmt 0 discriminator 1
 710 0064 FB68     		ldr	r3, [r7, #12]
 711 0066 7A68     		ldr	r2, [r7, #4]
 712 0068 93FBF2F2 		sdiv	r2, r3, r2
 713 006c 7968     		ldr	r1, [r7, #4]
 714 006e 01FB02F2 		mul	r2, r1, r2
 715 0072 9B1A     		subs	r3, r3, r2
 716 0074 092B     		cmp	r3, #9
 717 0076 14DD     		ble	.L41
 120:src/string-util.c ****             out_str[digit--] = (in_num % base) + 'A' - 10;
 718              		.loc 1 120 0 is_stmt 1
 719 0078 3B68     		ldr	r3, [r7, #0]
 720 007a BA68     		ldr	r2, [r7, #8]
 721 007c D218     		adds	r2, r2, r3
 722 007e FB68     		ldr	r3, [r7, #12]
 723 0080 7968     		ldr	r1, [r7, #4]
 724 0082 93FBF1F1 		sdiv	r1, r3, r1
 725 0086 7868     		ldr	r0, [r7, #4]
 726 0088 00FB01F1 		mul	r1, r0, r1
 727 008c 5B1A     		subs	r3, r3, r1
 728 008e DBB2     		uxtb	r3, r3
 729 0090 03F13703 		add	r3, r3, #55
 730 0094 DBB2     		uxtb	r3, r3
 731 0096 1370     		strb	r3, [r2, #0]
 732 0098 3B68     		ldr	r3, [r7, #0]
 733 009a 03F1FF33 		add	r3, r3, #-1
 734 009e 3B60     		str	r3, [r7, #0]
 735 00a0 13E0     		b	.L42
 736              	.L41:
 121:src/string-util.c ****         else
 122:src/string-util.c ****             out_str[digit--] = (in_num % base) + '0';
 737              		.loc 1 122 0
 738 00a2 3B68     		ldr	r3, [r7, #0]
 739 00a4 BA68     		ldr	r2, [r7, #8]
 740 00a6 D218     		adds	r2, r2, r3
 741 00a8 FB68     		ldr	r3, [r7, #12]
 742 00aa 7968     		ldr	r1, [r7, #4]
 743 00ac 93FBF1F1 		sdiv	r1, r3, r1
 744 00b0 7868     		ldr	r0, [r7, #4]
 745 00b2 00FB01F1 		mul	r1, r0, r1
 746 00b6 5B1A     		subs	r3, r3, r1
 747 00b8 DBB2     		uxtb	r3, r3
 748 00ba 03F13003 		add	r3, r3, #48
 749 00be DBB2     		uxtb	r3, r3
 750 00c0 1370     		strb	r3, [r2, #0]
 751 00c2 3B68     		ldr	r3, [r7, #0]
 752 00c4 03F1FF33 		add	r3, r3, #-1
 753 00c8 3B60     		str	r3, [r7, #0]
 754              	.L42:
 123:src/string-util.c ****         
 124:src/string-util.c ****         in_num /= base;
 755              		.loc 1 124 0
 756 00ca FA68     		ldr	r2, [r7, #12]
 757 00cc 7B68     		ldr	r3, [r7, #4]
 758 00ce 92FBF3F3 		sdiv	r3, r2, r3
 759 00d2 FB60     		str	r3, [r7, #12]
 760              	.L40:
 117:src/string-util.c ****     while(in_num > 0){
 761              		.loc 1 117 0 discriminator 1
 762 00d4 FB68     		ldr	r3, [r7, #12]
 763 00d6 002B     		cmp	r3, #0
 764 00d8 C1DC     		bgt	.L43
 125:src/string-util.c ****     }//End of while(in_num > 0)
 126:src/string-util.c ****     
 127:src/string-util.c ****     if(base == 16){
 765              		.loc 1 127 0
 766 00da 7B68     		ldr	r3, [r7, #4]
 767 00dc 102B     		cmp	r3, #16
 768 00de 13D1     		bne	.L44
 128:src/string-util.c ****         out_str[digit--] = 'x';
 769              		.loc 1 128 0
 770 00e0 3B68     		ldr	r3, [r7, #0]
 771 00e2 BA68     		ldr	r2, [r7, #8]
 772 00e4 D318     		adds	r3, r2, r3
 773 00e6 4FF07802 		mov	r2, #120
 774 00ea 1A70     		strb	r2, [r3, #0]
 775 00ec 3B68     		ldr	r3, [r7, #0]
 776 00ee 03F1FF33 		add	r3, r3, #-1
 777 00f2 3B60     		str	r3, [r7, #0]
 129:src/string-util.c ****         out_str[digit--] = '0';
 778              		.loc 1 129 0
 779 00f4 3B68     		ldr	r3, [r7, #0]
 780 00f6 BA68     		ldr	r2, [r7, #8]
 781 00f8 D318     		adds	r3, r2, r3
 782 00fa 4FF03002 		mov	r2, #48
 783 00fe 1A70     		strb	r2, [r3, #0]
 784 0100 3B68     		ldr	r3, [r7, #0]
 785 0102 03F1FF33 		add	r3, r3, #-1
 786 0106 3B60     		str	r3, [r7, #0]
 787              	.L44:
 130:src/string-util.c ****     }    
 131:src/string-util.c **** 
 132:src/string-util.c ****     if(neg) out_str[digit--] = '-'; //negative number
 788              		.loc 1 132 0
 789 0108 FB69     		ldr	r3, [r7, #28]
 790 010a 002B     		cmp	r3, #0
 791 010c 09D0     		beq	.L45
 792              		.loc 1 132 0 is_stmt 0 discriminator 1
 793 010e 3B68     		ldr	r3, [r7, #0]
 794 0110 BA68     		ldr	r2, [r7, #8]
 795 0112 D318     		adds	r3, r2, r3
 796 0114 4FF02D02 		mov	r2, #45
 797 0118 1A70     		strb	r2, [r3, #0]
 798 011a 3B68     		ldr	r3, [r7, #0]
 799 011c 03F1FF33 		add	r3, r3, #-1
 800 0120 3B60     		str	r3, [r7, #0]
 801              	.L45:
 133:src/string-util.c **** 
 134:src/string-util.c **** 	digit++;
 802              		.loc 1 134 0 is_stmt 1
 803 0122 3B68     		ldr	r3, [r7, #0]
 804 0124 03F10103 		add	r3, r3, #1
 805 0128 3B60     		str	r3, [r7, #0]
 135:src/string-util.c ****     //reorder
 136:src/string-util.c ****     int j = 0;
 806              		.loc 1 136 0
 807 012a 4FF00003 		mov	r3, #0
 808 012e BB61     		str	r3, [r7, #24]
 137:src/string-util.c ****     while(digit < Mdigit + 1){
 809              		.loc 1 137 0
 810 0130 0FE0     		b	.L46
 811              	.L47:
 138:src/string-util.c ****         out_str[j++] = out_str[digit++];
 812              		.loc 1 138 0
 813 0132 BB69     		ldr	r3, [r7, #24]
 814 0134 BA68     		ldr	r2, [r7, #8]
 815 0136 D318     		adds	r3, r2, r3
 816 0138 3A68     		ldr	r2, [r7, #0]
 817 013a B968     		ldr	r1, [r7, #8]
 818 013c 8A18     		adds	r2, r1, r2
 819 013e 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 820 0140 1A70     		strb	r2, [r3, #0]
 821 0142 BB69     		ldr	r3, [r7, #24]
 822 0144 03F10103 		add	r3, r3, #1
 823 0148 BB61     		str	r3, [r7, #24]
 824 014a 3B68     		ldr	r3, [r7, #0]
 825 014c 03F10103 		add	r3, r3, #1
 826 0150 3B60     		str	r3, [r7, #0]
 827              	.L46:
 137:src/string-util.c ****     while(digit < Mdigit + 1){
 828              		.loc 1 137 0 discriminator 1
 829 0152 7B69     		ldr	r3, [r7, #20]
 830 0154 03F10102 		add	r2, r3, #1
 831 0158 3B68     		ldr	r3, [r7, #0]
 832 015a 9A42     		cmp	r2, r3
 833 015c E9DC     		bgt	.L47
 139:src/string-util.c ****     } 
 140:src/string-util.c **** }
 834              		.loc 1 140 0
 835 015e 07F12407 		add	r7, r7, #36
 836 0162 BD46     		mov	sp, r7
 837 0164 80BC     		pop	{r7}
 838 0166 7047     		bx	lr
 839              		.cfi_endproc
 840              	.LFE117:
 842              		.section	.text.xtoa,"ax",%progbits
 843              		.align	2
 844              		.global	xtoa
 845              		.thumb
 846              		.thumb_func
 848              	xtoa:
 849              	.LFB118:
 141:src/string-util.c **** 
 142:src/string-util.c **** void xtoa(int in_num, char *out_str){
 850              		.loc 1 142 0
 851              		.cfi_startproc
 852              		@ args = 0, pretend = 0, frame = 8
 853              		@ frame_needed = 1, uses_anonymous_args = 0
 854 0000 80B5     		push	{r7, lr}
 855              	.LCFI24:
 856              		.cfi_def_cfa_offset 8
 857              		.cfi_offset 14, -4
 858              		.cfi_offset 7, -8
 859 0002 82B0     		sub	sp, sp, #8
 860              	.LCFI25:
 861              		.cfi_def_cfa_offset 16
 862 0004 00AF     		add	r7, sp, #0
 863              	.LCFI26:
 864              		.cfi_def_cfa_register 7
 865 0006 7860     		str	r0, [r7, #4]
 866 0008 3960     		str	r1, [r7, #0]
 143:src/string-util.c ****     
 144:src/string-util.c ****     _toa(in_num, out_str, 16, MaxDigit + 4);//MaxDigit + 4 that can contain address
 867              		.loc 1 144 0
 868 000a 7868     		ldr	r0, [r7, #4]
 869 000c 3968     		ldr	r1, [r7, #0]
 870 000e 4FF01002 		mov	r2, #16
 871 0012 4FF00A03 		mov	r3, #10
 872 0016 FFF7FEFF 		bl	_toa
 145:src/string-util.c **** }
 873              		.loc 1 145 0
 874 001a 07F10807 		add	r7, r7, #8
 875 001e BD46     		mov	sp, r7
 876 0020 80BD     		pop	{r7, pc}
 877              		.cfi_endproc
 878              	.LFE118:
 880 0022 00BF     		.section	.text.itoa,"ax",%progbits
 881              		.align	2
 882              		.global	itoa
 883              		.thumb
 884              		.thumb_func
 886              	itoa:
 887              	.LFB119:
 146:src/string-util.c **** 
 147:src/string-util.c **** 
 148:src/string-util.c **** void itoa(int in_num, char *out_str){
 888              		.loc 1 148 0
 889              		.cfi_startproc
 890              		@ args = 0, pretend = 0, frame = 8
 891              		@ frame_needed = 1, uses_anonymous_args = 0
 892 0000 80B5     		push	{r7, lr}
 893              	.LCFI27:
 894              		.cfi_def_cfa_offset 8
 895              		.cfi_offset 14, -4
 896              		.cfi_offset 7, -8
 897 0002 82B0     		sub	sp, sp, #8
 898              	.LCFI28:
 899              		.cfi_def_cfa_offset 16
 900 0004 00AF     		add	r7, sp, #0
 901              	.LCFI29:
 902              		.cfi_def_cfa_register 7
 903 0006 7860     		str	r0, [r7, #4]
 904 0008 3960     		str	r1, [r7, #0]
 149:src/string-util.c ****    
 150:src/string-util.c ****     _toa(in_num, out_str, 10, MaxDigit);
 905              		.loc 1 150 0
 906 000a 7868     		ldr	r0, [r7, #4]
 907 000c 3968     		ldr	r1, [r7, #0]
 908 000e 4FF00A02 		mov	r2, #10
 909 0012 4FF00603 		mov	r3, #6
 910 0016 FFF7FEFF 		bl	_toa
 151:src/string-util.c **** }
 911              		.loc 1 151 0
 912 001a 07F10807 		add	r7, r7, #8
 913 001e BD46     		mov	sp, r7
 914 0020 80BD     		pop	{r7, pc}
 915              		.cfi_endproc
 916              	.LFE119:
 918 0022 00BF     		.section	.rodata
 919              		.align	2
 920              	.LC0:
 921 0000 0A       		.byte	10
 922 0001 0D       		.byte	13
 923 0002 00       		.byte	0
 924              		.section	.text.qprintf,"ax",%progbits
 925              		.align	2
 926              		.global	qprintf
 927              		.thumb
 928              		.thumb_func
 930              	qprintf:
 931              	.LFB120:
 152:src/string-util.c **** 
 153:src/string-util.c **** 
 154:src/string-util.c **** void qprintf(xQueueHandle tx_queue, const char *format, ...){
 932              		.loc 1 154 0
 933              		.cfi_startproc
 934              		@ args = 4, pretend = 12, frame = 48
 935              		@ frame_needed = 1, uses_anonymous_args = 1
 936 0000 0EB4     		push	{r1, r2, r3}
 937              	.LCFI30:
 938              		.cfi_def_cfa_offset 12
 939              		.cfi_offset 3, -4
 940              		.cfi_offset 2, -8
 941              		.cfi_offset 1, -12
 942 0002 80B5     		push	{r7, lr}
 943              	.LCFI31:
 944              		.cfi_def_cfa_offset 20
 945              		.cfi_offset 14, -16
 946              		.cfi_offset 7, -20
 947 0004 8DB0     		sub	sp, sp, #52
 948              	.LCFI32:
 949              		.cfi_def_cfa_offset 72
 950 0006 00AF     		add	r7, sp, #0
 951              	.LCFI33:
 952              		.cfi_def_cfa_register 7
 953 0008 7860     		str	r0, [r7, #4]
 155:src/string-util.c ****     va_list ap;
 156:src/string-util.c ****     va_start(ap, format);
 954              		.loc 1 156 0
 955 000a 07F14003 		add	r3, r7, #64
 956 000e 3B62     		str	r3, [r7, #32]
 157:src/string-util.c ****     int curr_ch = 0;
 957              		.loc 1 157 0
 958 0010 4FF00003 		mov	r3, #0
 959 0014 FB62     		str	r3, [r7, #44]
 158:src/string-util.c ****     char out_ch[2] = {'\0', '\0'};
 960              		.loc 1 158 0
 961 0016 4FF00003 		mov	r3, #0
 962 001a 3B77     		strb	r3, [r7, #28]
 963 001c 4FF00003 		mov	r3, #0
 964 0020 7B77     		strb	r3, [r7, #29]
 159:src/string-util.c ****     char newLine[3] = {'\n' , '\r', '\0'};
 965              		.loc 1 159 0
 966 0022 40F20003 		movw	r3, #:lower16:.LC0
 967 0026 C0F20003 		movt	r3, #:upper16:.LC0
 968 002a 1988     		ldrh	r1, [r3, #0]	@ unaligned
 969 002c 9A78     		ldrb	r2, [r3, #2]
 970 002e 07F11803 		add	r3, r7, #24
 971 0032 1980     		strh	r1, [r3, #0]	@ unaligned
 972 0034 9A70     		strb	r2, [r3, #2]
 160:src/string-util.c ****     char percentage[] = "%";
 973              		.loc 1 160 0
 974 0036 4FF02503 		mov	r3, #37
 975 003a BB82     		strh	r3, [r7, #20]	@ movhi
 161:src/string-util.c ****     char *str;
 162:src/string-util.c ****     char str_num[10];
 163:src/string-util.c ****     int out_int;
 164:src/string-util.c **** 
 165:src/string-util.c ****     /* Block for 1ms. */
 166:src/string-util.c ****      const portTickType xDelay = 0.1; // portTICK_RATE_MS;
 976              		.loc 1 166 0
 977 003c 4FF00003 		mov	r3, #0
 978 0040 BB62     		str	r3, [r7, #40]
 167:src/string-util.c **** 
 168:src/string-util.c ****     while( format[curr_ch] != '\0' ){
 979              		.loc 1 168 0
 980 0042 CDE0     		b	.L51
 981              	.L67:
 169:src/string-util.c ****         vTaskDelay( xDelay ); 
 982              		.loc 1 169 0
 983 0044 B86A     		ldr	r0, [r7, #40]
 984 0046 FFF7FEFF 		bl	vTaskDelay
 170:src/string-util.c ****         if(format[curr_ch] == '%'){
 985              		.loc 1 170 0
 986 004a FB6A     		ldr	r3, [r7, #44]
 987 004c FA6B     		ldr	r2, [r7, #60]
 988 004e D318     		adds	r3, r2, r3
 989 0050 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 990 0052 252B     		cmp	r3, #37
 991 0054 40F09880 		bne	.L52
 171:src/string-util.c ****             if(format[curr_ch + 1] == 's'){
 992              		.loc 1 171 0
 993 0058 FB6A     		ldr	r3, [r7, #44]
 994 005a 03F10103 		add	r3, r3, #1
 995 005e FA6B     		ldr	r2, [r7, #60]
 996 0060 D318     		adds	r3, r2, r3
 997 0062 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 998 0064 732B     		cmp	r3, #115
 999 0066 12D1     		bne	.L53
 172:src/string-util.c ****                 str = va_arg(ap, char *);
 1000              		.loc 1 172 0
 1001 0068 3B6A     		ldr	r3, [r7, #32]
 1002 006a 03F10402 		add	r2, r3, #4
 1003 006e 3A62     		str	r2, [r7, #32]
 1004 0070 1B68     		ldr	r3, [r3, #0]
 1005 0072 7B62     		str	r3, [r7, #36]
 173:src/string-util.c ****                 while (!xQueueSendToBack(tx_queue, str, portMAX_DELAY)); 
 1006              		.loc 1 173 0
 1007 0074 00BF     		nop
 1008              	.L54:
 1009              		.loc 1 173 0 is_stmt 0 discriminator 1
 1010 0076 7868     		ldr	r0, [r7, #4]
 1011 0078 796A     		ldr	r1, [r7, #36]
 1012 007a 4FF0FF32 		mov	r2, #-1
 1013 007e 4FF00003 		mov	r3, #0
 1014 0082 FFF7FEFF 		bl	xQueueGenericSend
 1015 0086 0346     		mov	r3, r0
 1016 0088 002B     		cmp	r3, #0
 1017 008a F4D0     		beq	.L54
 1018              		.loc 1 173 0
 1019 008c 77E0     		b	.L55
 1020              	.L53:
 174:src/string-util.c ****                 //parameter(...,The address of a string which is put in the queue,...)
 175:src/string-util.c ****             }else if(format[curr_ch + 1] == 'd'){
 1021              		.loc 1 175 0 is_stmt 1
 1022 008e FB6A     		ldr	r3, [r7, #44]
 1023 0090 03F10103 		add	r3, r3, #1
 1024 0094 FA6B     		ldr	r2, [r7, #60]
 1025 0096 D318     		adds	r3, r2, r3
 1026 0098 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1027 009a 642B     		cmp	r3, #100
 1028 009c 19D1     		bne	.L56
 176:src/string-util.c ****                 itoa(va_arg(ap, int), str_num);
 1029              		.loc 1 176 0
 1030 009e 3B6A     		ldr	r3, [r7, #32]
 1031 00a0 03F10402 		add	r2, r3, #4
 1032 00a4 3A62     		str	r2, [r7, #32]
 1033 00a6 1B68     		ldr	r3, [r3, #0]
 1034 00a8 1846     		mov	r0, r3
 1035 00aa 07F10803 		add	r3, r7, #8
 1036 00ae 1946     		mov	r1, r3
 1037 00b0 FFF7FEFF 		bl	itoa
 177:src/string-util.c ****                 while (!xQueueSendToBack(tx_queue, str_num, portMAX_DELAY));                
 1038              		.loc 1 177 0
 1039 00b4 00BF     		nop
 1040              	.L57:
 1041              		.loc 1 177 0 is_stmt 0 discriminator 1
 1042 00b6 7868     		ldr	r0, [r7, #4]
 1043 00b8 07F10803 		add	r3, r7, #8
 1044 00bc 1946     		mov	r1, r3
 1045 00be 4FF0FF32 		mov	r2, #-1
 1046 00c2 4FF00003 		mov	r3, #0
 1047 00c6 FFF7FEFF 		bl	xQueueGenericSend
 1048 00ca 0346     		mov	r3, r0
 1049 00cc 002B     		cmp	r3, #0
 1050 00ce F2D0     		beq	.L57
 1051              		.loc 1 177 0
 1052 00d0 55E0     		b	.L55
 1053              	.L56:
 178:src/string-util.c ****             }else if(format[curr_ch + 1] == 'c'){
 1054              		.loc 1 178 0 is_stmt 1
 1055 00d2 FB6A     		ldr	r3, [r7, #44]
 1056 00d4 03F10103 		add	r3, r3, #1
 1057 00d8 FA6B     		ldr	r2, [r7, #60]
 1058 00da D318     		adds	r3, r2, r3
 1059 00dc 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1060 00de 632B     		cmp	r3, #99
 1061 00e0 15D1     		bne	.L58
 179:src/string-util.c ****                 out_ch[0] = (char)va_arg(ap, int);
 1062              		.loc 1 179 0
 1063 00e2 3B6A     		ldr	r3, [r7, #32]
 1064 00e4 03F10402 		add	r2, r3, #4
 1065 00e8 3A62     		str	r2, [r7, #32]
 1066 00ea 1B68     		ldr	r3, [r3, #0]
 1067 00ec DBB2     		uxtb	r3, r3
 1068 00ee 3B77     		strb	r3, [r7, #28]
 180:src/string-util.c ****                 while (!xQueueSendToBack(tx_queue, out_ch, portMAX_DELAY));                        
 1069              		.loc 1 180 0
 1070 00f0 00BF     		nop
 1071              	.L59:
 1072              		.loc 1 180 0 is_stmt 0 discriminator 1
 1073 00f2 7868     		ldr	r0, [r7, #4]
 1074 00f4 07F11C03 		add	r3, r7, #28
 1075 00f8 1946     		mov	r1, r3
 1076 00fa 4FF0FF32 		mov	r2, #-1
 1077 00fe 4FF00003 		mov	r3, #0
 1078 0102 FFF7FEFF 		bl	xQueueGenericSend
 1079 0106 0346     		mov	r3, r0
 1080 0108 002B     		cmp	r3, #0
 1081 010a F2D0     		beq	.L59
 1082              		.loc 1 180 0
 1083 010c 37E0     		b	.L55
 1084              	.L58:
 181:src/string-util.c ****            }else if(format[curr_ch + 1] == 'x'){
 1085              		.loc 1 181 0 is_stmt 1
 1086 010e FB6A     		ldr	r3, [r7, #44]
 1087 0110 03F10103 		add	r3, r3, #1
 1088 0114 FA6B     		ldr	r2, [r7, #60]
 1089 0116 D318     		adds	r3, r2, r3
 1090 0118 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1091 011a 782B     		cmp	r3, #120
 1092 011c 19D1     		bne	.L60
 182:src/string-util.c ****                 xtoa(va_arg(ap, int), str_num);
 1093              		.loc 1 182 0
 1094 011e 3B6A     		ldr	r3, [r7, #32]
 1095 0120 03F10402 		add	r2, r3, #4
 1096 0124 3A62     		str	r2, [r7, #32]
 1097 0126 1B68     		ldr	r3, [r3, #0]
 1098 0128 1846     		mov	r0, r3
 1099 012a 07F10803 		add	r3, r7, #8
 1100 012e 1946     		mov	r1, r3
 1101 0130 FFF7FEFF 		bl	xtoa
 183:src/string-util.c ****                 while (!xQueueSendToBack(tx_queue, str_num, portMAX_DELAY));                       
 1102              		.loc 1 183 0
 1103 0134 00BF     		nop
 1104              	.L61:
 1105              		.loc 1 183 0 is_stmt 0 discriminator 1
 1106 0136 7868     		ldr	r0, [r7, #4]
 1107 0138 07F10803 		add	r3, r7, #8
 1108 013c 1946     		mov	r1, r3
 1109 013e 4FF0FF32 		mov	r2, #-1
 1110 0142 4FF00003 		mov	r3, #0
 1111 0146 FFF7FEFF 		bl	xQueueGenericSend
 1112 014a 0346     		mov	r3, r0
 1113 014c 002B     		cmp	r3, #0
 1114 014e F2D0     		beq	.L61
 1115              		.loc 1 183 0
 1116 0150 15E0     		b	.L55
 1117              	.L60:
 184:src/string-util.c ****             }else if(format[curr_ch + 1] == '%'){
 1118              		.loc 1 184 0 is_stmt 1
 1119 0152 FB6A     		ldr	r3, [r7, #44]
 1120 0154 03F10103 		add	r3, r3, #1
 1121 0158 FA6B     		ldr	r2, [r7, #60]
 1122 015a D318     		adds	r3, r2, r3
 1123 015c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1124 015e 252B     		cmp	r3, #37
 1125 0160 0DD1     		bne	.L55
 185:src/string-util.c ****                 while (!xQueueSendToBack(tx_queue, percentage, portMAX_DELAY));                    
 1126              		.loc 1 185 0
 1127 0162 00BF     		nop
 1128              	.L62:
 1129              		.loc 1 185 0 is_stmt 0 discriminator 1
 1130 0164 7868     		ldr	r0, [r7, #4]
 1131 0166 07F11403 		add	r3, r7, #20
 1132 016a 1946     		mov	r1, r3
 1133 016c 4FF0FF32 		mov	r2, #-1
 1134 0170 4FF00003 		mov	r3, #0
 1135 0174 FFF7FEFF 		bl	xQueueGenericSend
 1136 0178 0346     		mov	r3, r0
 1137 017a 002B     		cmp	r3, #0
 1138 017c F2D0     		beq	.L62
 1139              	.L55:
 186:src/string-util.c ****             }
 187:src/string-util.c ****             curr_ch++;
 1140              		.loc 1 187 0 is_stmt 1
 1141 017e FB6A     		ldr	r3, [r7, #44]
 1142 0180 03F10103 		add	r3, r3, #1
 1143 0184 FB62     		str	r3, [r7, #44]
 1144 0186 27E0     		b	.L63
 1145              	.L52:
 188:src/string-util.c ****         }else if(format[curr_ch] == '\n'){
 1146              		.loc 1 188 0
 1147 0188 FB6A     		ldr	r3, [r7, #44]
 1148 018a FA6B     		ldr	r2, [r7, #60]
 1149 018c D318     		adds	r3, r2, r3
 1150 018e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1151 0190 0A2B     		cmp	r3, #10
 1152 0192 0ED1     		bne	.L64
 189:src/string-util.c ****             while (!xQueueSendToBack(tx_queue, newLine, portMAX_DELAY));
 1153              		.loc 1 189 0
 1154 0194 00BF     		nop
 1155              	.L65:
 1156              		.loc 1 189 0 is_stmt 0 discriminator 1
 1157 0196 7868     		ldr	r0, [r7, #4]
 1158 0198 07F11803 		add	r3, r7, #24
 1159 019c 1946     		mov	r1, r3
 1160 019e 4FF0FF32 		mov	r2, #-1
 1161 01a2 4FF00003 		mov	r3, #0
 1162 01a6 FFF7FEFF 		bl	xQueueGenericSend
 1163 01aa 0346     		mov	r3, r0
 1164 01ac 002B     		cmp	r3, #0
 1165 01ae F2D0     		beq	.L65
 1166              		.loc 1 189 0
 1167 01b0 12E0     		b	.L63
 1168              	.L64:
 190:src/string-util.c ****         }else{
 191:src/string-util.c ****             out_ch[0] = format[curr_ch];
 1169              		.loc 1 191 0 is_stmt 1
 1170 01b2 FB6A     		ldr	r3, [r7, #44]
 1171 01b4 FA6B     		ldr	r2, [r7, #60]
 1172 01b6 D318     		adds	r3, r2, r3
 1173 01b8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1174 01ba 3B77     		strb	r3, [r7, #28]
 192:src/string-util.c ****             while (!xQueueSendToBack(tx_queue, out_ch, portMAX_DELAY));         
 1175              		.loc 1 192 0
 1176 01bc 00BF     		nop
 1177              	.L66:
 1178              		.loc 1 192 0 is_stmt 0 discriminator 1
 1179 01be 7868     		ldr	r0, [r7, #4]
 1180 01c0 07F11C03 		add	r3, r7, #28
 1181 01c4 1946     		mov	r1, r3
 1182 01c6 4FF0FF32 		mov	r2, #-1
 1183 01ca 4FF00003 		mov	r3, #0
 1184 01ce FFF7FEFF 		bl	xQueueGenericSend
 1185 01d2 0346     		mov	r3, r0
 1186 01d4 002B     		cmp	r3, #0
 1187 01d6 F2D0     		beq	.L66
 1188              	.L63:
 193:src/string-util.c ****         }
 194:src/string-util.c ****         curr_ch++;
 1189              		.loc 1 194 0 is_stmt 1
 1190 01d8 FB6A     		ldr	r3, [r7, #44]
 1191 01da 03F10103 		add	r3, r3, #1
 1192 01de FB62     		str	r3, [r7, #44]
 1193              	.L51:
 168:src/string-util.c ****     while( format[curr_ch] != '\0' ){
 1194              		.loc 1 168 0 discriminator 1
 1195 01e0 FB6A     		ldr	r3, [r7, #44]
 1196 01e2 FA6B     		ldr	r2, [r7, #60]
 1197 01e4 D318     		adds	r3, r2, r3
 1198 01e6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1199 01e8 002B     		cmp	r3, #0
 1200 01ea 7FF42BAF 		bne	.L67
 195:src/string-util.c ****     }//End of while
 196:src/string-util.c ****     va_end(ap);
 197:src/string-util.c **** }
 1201              		.loc 1 197 0
 1202 01ee 07F13407 		add	r7, r7, #52
 1203 01f2 BD46     		mov	sp, r7
 1204 01f4 BDE88040 		pop	{r7, lr}
 1205 01f8 03B0     		add	sp, sp, #12
 1206 01fa 7047     		bx	lr
 1207              		.cfi_endproc
 1208              	.LFE120:
 1210              		.section	.text.strlen,"ax",%progbits
 1211              		.align	2
 1212              		.global	strlen
 1213              		.thumb
 1214              		.thumb_func
 1216              	strlen:
 1217              	.LFB121:
 198:src/string-util.c **** 
 199:src/string-util.c **** 
 200:src/string-util.c **** //Ref from zzz0072 -----------------------------------------------
 201:src/string-util.c **** size_t strlen(const char *string)
 202:src/string-util.c **** {
 1218              		.loc 1 202 0
 1219              		.cfi_startproc
 1220              		@ args = 0, pretend = 0, frame = 16
 1221              		@ frame_needed = 1, uses_anonymous_args = 0
 1222              		@ link register save eliminated.
 1223 0000 80B4     		push	{r7}
 1224              	.LCFI34:
 1225              		.cfi_def_cfa_offset 4
 1226              		.cfi_offset 7, -4
 1227 0002 85B0     		sub	sp, sp, #20
 1228              	.LCFI35:
 1229              		.cfi_def_cfa_offset 24
 1230 0004 00AF     		add	r7, sp, #0
 1231              	.LCFI36:
 1232              		.cfi_def_cfa_register 7
 1233 0006 7860     		str	r0, [r7, #4]
 203:src/string-util.c ****     size_t chars = 0;
 1234              		.loc 1 203 0
 1235 0008 4FF00003 		mov	r3, #0
 1236 000c FB60     		str	r3, [r7, #12]
 204:src/string-util.c **** 
 205:src/string-util.c ****     while(*string++) {
 1237              		.loc 1 205 0
 1238 000e 03E0     		b	.L69
 1239              	.L70:
 206:src/string-util.c ****         chars++;
 1240              		.loc 1 206 0
 1241 0010 FB68     		ldr	r3, [r7, #12]
 1242 0012 03F10103 		add	r3, r3, #1
 1243 0016 FB60     		str	r3, [r7, #12]
 1244              	.L69:
 205:src/string-util.c ****     while(*string++) {
 1245              		.loc 1 205 0 discriminator 1
 1246 0018 7B68     		ldr	r3, [r7, #4]
 1247 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1248 001c 002B     		cmp	r3, #0
 1249 001e 0CBF     		ite	eq
 1250 0020 0023     		moveq	r3, #0
 1251 0022 0123     		movne	r3, #1
 1252 0024 DBB2     		uxtb	r3, r3
 1253 0026 7A68     		ldr	r2, [r7, #4]
 1254 0028 02F10102 		add	r2, r2, #1
 1255 002c 7A60     		str	r2, [r7, #4]
 1256 002e 002B     		cmp	r3, #0
 1257 0030 EED1     		bne	.L70
 207:src/string-util.c ****     }
 208:src/string-util.c ****     return chars;
 1258              		.loc 1 208 0
 1259 0032 FB68     		ldr	r3, [r7, #12]
 209:src/string-util.c **** }
 1260              		.loc 1 209 0
 1261 0034 1846     		mov	r0, r3
 1262 0036 07F11407 		add	r7, r7, #20
 1263 003a BD46     		mov	sp, r7
 1264 003c 80BC     		pop	{r7}
 1265 003e 7047     		bx	lr
 1266              		.cfi_endproc
 1267              	.LFE121:
 1269              		.section	.text.strcat,"ax",%progbits
 1270              		.align	2
 1271              		.global	strcat
 1272              		.thumb
 1273              		.thumb_func
 1275              	strcat:
 1276              	.LFB122:
 210:src/string-util.c **** 
 211:src/string-util.c **** 
 212:src/string-util.c **** 
 213:src/string-util.c **** 
 214:src/string-util.c **** char *strcat(char *dest, const char *src)
 215:src/string-util.c **** {
 1277              		.loc 1 215 0
 1278              		.cfi_startproc
 1279              		@ args = 0, pretend = 0, frame = 16
 1280              		@ frame_needed = 1, uses_anonymous_args = 0
 1281 0000 80B5     		push	{r7, lr}
 1282              	.LCFI37:
 1283              		.cfi_def_cfa_offset 8
 1284              		.cfi_offset 14, -4
 1285              		.cfi_offset 7, -8
 1286 0002 84B0     		sub	sp, sp, #16
 1287              	.LCFI38:
 1288              		.cfi_def_cfa_offset 24
 1289 0004 00AF     		add	r7, sp, #0
 1290              	.LCFI39:
 1291              		.cfi_def_cfa_register 7
 1292 0006 7860     		str	r0, [r7, #4]
 1293 0008 3960     		str	r1, [r7, #0]
 216:src/string-util.c ****     size_t src_len = strlen(src);
 1294              		.loc 1 216 0
 1295 000a 3868     		ldr	r0, [r7, #0]
 1296 000c FFF7FEFF 		bl	strlen
 1297 0010 F860     		str	r0, [r7, #12]
 217:src/string-util.c ****     size_t dest_len = strlen(dest);
 1298              		.loc 1 217 0
 1299 0012 7868     		ldr	r0, [r7, #4]
 1300 0014 FFF7FEFF 		bl	strlen
 1301 0018 B860     		str	r0, [r7, #8]
 218:src/string-util.c **** 
 219:src/string-util.c ****     if (!dest || !src) {
 1302              		.loc 1 219 0
 1303 001a 7B68     		ldr	r3, [r7, #4]
 1304 001c 002B     		cmp	r3, #0
 1305 001e 02D0     		beq	.L72
 1306              		.loc 1 219 0 is_stmt 0 discriminator 1
 1307 0020 3B68     		ldr	r3, [r7, #0]
 1308 0022 002B     		cmp	r3, #0
 1309 0024 01D1     		bne	.L73
 1310              	.L72:
 220:src/string-util.c ****         return dest;
 1311              		.loc 1 220 0 is_stmt 1
 1312 0026 7B68     		ldr	r3, [r7, #4]
 1313 0028 0BE0     		b	.L74
 1314              	.L73:
 221:src/string-util.c ****     }
 222:src/string-util.c **** 
 223:src/string-util.c ****     memcpy(dest + dest_len, src, src_len + 1);
 1315              		.loc 1 223 0
 1316 002a 7A68     		ldr	r2, [r7, #4]
 1317 002c BB68     		ldr	r3, [r7, #8]
 1318 002e D218     		adds	r2, r2, r3
 1319 0030 FB68     		ldr	r3, [r7, #12]
 1320 0032 03F10103 		add	r3, r3, #1
 1321 0036 1046     		mov	r0, r2
 1322 0038 3968     		ldr	r1, [r7, #0]
 1323 003a 1A46     		mov	r2, r3
 1324 003c FFF7FEFF 		bl	memcpy
 224:src/string-util.c ****     return dest;
 1325              		.loc 1 224 0
 1326 0040 7B68     		ldr	r3, [r7, #4]
 1327              	.L74:
 225:src/string-util.c **** }
 1328              		.loc 1 225 0
 1329 0042 1846     		mov	r0, r3
 1330 0044 07F11007 		add	r7, r7, #16
 1331 0048 BD46     		mov	sp, r7
 1332 004a 80BD     		pop	{r7, pc}
 1333              		.cfi_endproc
 1334              	.LFE122:
 1336              		.section	.text.puts,"ax",%progbits
 1337              		.align	2
 1338              		.global	puts
 1339              		.thumb
 1340              		.thumb_func
 1342              	puts:
 1343              	.LFB123:
 226:src/string-util.c **** 
 227:src/string-util.c **** int puts(const char *msg)
 228:src/string-util.c **** {
 1344              		.loc 1 228 0
 1345              		.cfi_startproc
 1346              		@ args = 0, pretend = 0, frame = 8
 1347              		@ frame_needed = 1, uses_anonymous_args = 0
 1348 0000 80B5     		push	{r7, lr}
 1349              	.LCFI40:
 1350              		.cfi_def_cfa_offset 8
 1351              		.cfi_offset 14, -4
 1352              		.cfi_offset 7, -8
 1353 0002 82B0     		sub	sp, sp, #8
 1354              	.LCFI41:
 1355              		.cfi_def_cfa_offset 16
 1356 0004 00AF     		add	r7, sp, #0
 1357              	.LCFI42:
 1358              		.cfi_def_cfa_register 7
 1359 0006 7860     		str	r0, [r7, #4]
 229:src/string-util.c ****     if (!msg) {
 1360              		.loc 1 229 0
 1361 0008 7B68     		ldr	r3, [r7, #4]
 1362 000a 002B     		cmp	r3, #0
 1363 000c 02D1     		bne	.L76
 230:src/string-util.c ****         return -1;
 1364              		.loc 1 230 0
 1365 000e 4FF0FF33 		mov	r3, #-1
 1366 0012 0AE0     		b	.L77
 1367              	.L76:
 231:src/string-util.c ****     }
 232:src/string-util.c **** 
 233:src/string-util.c ****     return (int)fio_write(1, msg, strlen(msg));
 1368              		.loc 1 233 0
 1369 0014 7868     		ldr	r0, [r7, #4]
 1370 0016 FFF7FEFF 		bl	strlen
 1371 001a 0346     		mov	r3, r0
 1372 001c 4FF00100 		mov	r0, #1
 1373 0020 7968     		ldr	r1, [r7, #4]
 1374 0022 1A46     		mov	r2, r3
 1375 0024 FFF7FEFF 		bl	fio_write
 1376 0028 0346     		mov	r3, r0
 1377              	.L77:
 234:src/string-util.c **** }
 1378              		.loc 1 234 0
 1379 002a 1846     		mov	r0, r3
 1380 002c 07F10807 		add	r7, r7, #8
 1381 0030 BD46     		mov	sp, r7
 1382 0032 80BD     		pop	{r7, pc}
 1383              		.cfi_endproc
 1384              	.LFE123:
 1386              		.section	.text.printf_cb,"ax",%progbits
 1387              		.align	2
 1388              		.thumb
 1389              		.thumb_func
 1391              	printf_cb:
 1392              	.LFB124:
 235:src/string-util.c **** 
 236:src/string-util.c **** static int printf_cb(char *dest, const char *src)
 237:src/string-util.c **** {
 1393              		.loc 1 237 0
 1394              		.cfi_startproc
 1395              		@ args = 0, pretend = 0, frame = 8
 1396              		@ frame_needed = 1, uses_anonymous_args = 0
 1397 0000 80B5     		push	{r7, lr}
 1398              	.LCFI43:
 1399              		.cfi_def_cfa_offset 8
 1400              		.cfi_offset 14, -4
 1401              		.cfi_offset 7, -8
 1402 0002 82B0     		sub	sp, sp, #8
 1403              	.LCFI44:
 1404              		.cfi_def_cfa_offset 16
 1405 0004 00AF     		add	r7, sp, #0
 1406              	.LCFI45:
 1407              		.cfi_def_cfa_register 7
 1408 0006 7860     		str	r0, [r7, #4]
 1409 0008 3960     		str	r1, [r7, #0]
 238:src/string-util.c ****     return puts(src);
 1410              		.loc 1 238 0
 1411 000a 3868     		ldr	r0, [r7, #0]
 1412 000c FFF7FEFF 		bl	puts
 1413 0010 0346     		mov	r3, r0
 239:src/string-util.c **** }
 1414              		.loc 1 239 0
 1415 0012 1846     		mov	r0, r3
 1416 0014 07F10807 		add	r7, r7, #8
 1417 0018 BD46     		mov	sp, r7
 1418 001a 80BD     		pop	{r7, pc}
 1419              		.cfi_endproc
 1420              	.LFE124:
 1422              		.section	.text.sprintf_cb,"ax",%progbits
 1423              		.align	2
 1424              		.thumb
 1425              		.thumb_func
 1427              	sprintf_cb:
 1428              	.LFB125:
 240:src/string-util.c **** 
 241:src/string-util.c **** static int sprintf_cb(char *dest, const char *src)
 242:src/string-util.c **** {
 1429              		.loc 1 242 0
 1430              		.cfi_startproc
 1431              		@ args = 0, pretend = 0, frame = 8
 1432              		@ frame_needed = 1, uses_anonymous_args = 0
 1433 0000 80B5     		push	{r7, lr}
 1434              	.LCFI46:
 1435              		.cfi_def_cfa_offset 8
 1436              		.cfi_offset 14, -4
 1437              		.cfi_offset 7, -8
 1438 0002 82B0     		sub	sp, sp, #8
 1439              	.LCFI47:
 1440              		.cfi_def_cfa_offset 16
 1441 0004 00AF     		add	r7, sp, #0
 1442              	.LCFI48:
 1443              		.cfi_def_cfa_register 7
 1444 0006 7860     		str	r0, [r7, #4]
 1445 0008 3960     		str	r1, [r7, #0]
 243:src/string-util.c ****     return (int)strcat(dest, src);
 1446              		.loc 1 243 0
 1447 000a 7868     		ldr	r0, [r7, #4]
 1448 000c 3968     		ldr	r1, [r7, #0]
 1449 000e FFF7FEFF 		bl	strcat
 1450 0012 0346     		mov	r3, r0
 244:src/string-util.c **** }
 1451              		.loc 1 244 0
 1452 0014 1846     		mov	r0, r3
 1453 0016 07F10807 		add	r7, r7, #8
 1454 001a BD46     		mov	sp, r7
 1455 001c 80BD     		pop	{r7, pc}
 1456              		.cfi_endproc
 1457              	.LFE125:
 1459 001e 00BF     		.section	.text.base_printf,"ax",%progbits
 1460              		.align	2
 1461              		.thumb
 1462              		.thumb_func
 1464              	base_printf:
 1465              	.LFB126:
 245:src/string-util.c **** 
 246:src/string-util.c **** typedef int (*proc_str_func_t)(char *, const char *);
 247:src/string-util.c **** 
 248:src/string-util.c **** /* Common body for sprintf and printf */
 249:src/string-util.c **** static int base_printf(proc_str_func_t proc_str, \
 250:src/string-util.c ****                 char *dest, const char *fmt_str, va_list param)
 251:src/string-util.c **** {
 1466              		.loc 1 251 0
 1467              		.cfi_startproc
 1468              		@ args = 0, pretend = 0, frame = 56
 1469              		@ frame_needed = 1, uses_anonymous_args = 0
 1470 0000 80B5     		push	{r7, lr}
 1471              	.LCFI49:
 1472              		.cfi_def_cfa_offset 8
 1473              		.cfi_offset 14, -4
 1474              		.cfi_offset 7, -8
 1475 0002 8EB0     		sub	sp, sp, #56
 1476              	.LCFI50:
 1477              		.cfi_def_cfa_offset 64
 1478 0004 00AF     		add	r7, sp, #0
 1479              	.LCFI51:
 1480              		.cfi_def_cfa_register 7
 1481 0006 F860     		str	r0, [r7, #12]
 1482 0008 B960     		str	r1, [r7, #8]
 1483 000a 7A60     		str	r2, [r7, #4]
 1484 000c 3B60     		str	r3, [r7, #0]
 252:src/string-util.c ****     char param_chr[] = {0, 0};
 1485              		.loc 1 252 0
 1486 000e 4FF00003 		mov	r3, #0
 1487 0012 87F82430 		strb	r3, [r7, #36]
 1488 0016 4FF00003 		mov	r3, #0
 1489 001a 87F82530 		strb	r3, [r7, #37]
 253:src/string-util.c ****     int param_int = 0;
 1490              		.loc 1 253 0
 1491 001e 4FF00003 		mov	r3, #0
 1492 0022 7B63     		str	r3, [r7, #52]
 254:src/string-util.c ****     
 255:src/string-util.c ****     long int param_lint = 0;
 1493              		.loc 1 255 0
 1494 0024 4FF00003 		mov	r3, #0
 1495 0028 BB62     		str	r3, [r7, #40]
 256:src/string-util.c **** 
 257:src/string-util.c ****     char *str_to_output = 0;
 1496              		.loc 1 257 0
 1497 002a 4FF00003 		mov	r3, #0
 1498 002e 3B63     		str	r3, [r7, #48]
 258:src/string-util.c ****     char itoa_buf[20] = {0};
 1499              		.loc 1 258 0
 1500 0030 07F11003 		add	r3, r7, #16
 1501 0034 4FF00002 		mov	r2, #0
 1502 0038 1A60     		str	r2, [r3, #0]
 1503 003a 03F10403 		add	r3, r3, #4
 1504 003e 4FF00002 		mov	r2, #0
 1505 0042 1A60     		str	r2, [r3, #0]
 1506 0044 03F10403 		add	r3, r3, #4
 1507 0048 4FF00002 		mov	r2, #0
 1508 004c 1A60     		str	r2, [r3, #0]
 1509 004e 03F10403 		add	r3, r3, #4
 1510 0052 4FF00002 		mov	r2, #0
 1511 0056 1A60     		str	r2, [r3, #0]
 1512 0058 03F10403 		add	r3, r3, #4
 1513 005c 4FF00002 		mov	r2, #0
 1514 0060 1A60     		str	r2, [r3, #0]
 1515 0062 03F10403 		add	r3, r3, #4
 259:src/string-util.c ****     int curr_char = 0;
 1516              		.loc 1 259 0
 1517 0066 4FF00003 		mov	r3, #0
 1518 006a FB62     		str	r3, [r7, #44]
 260:src/string-util.c **** 
 261:src/string-util.c ****     /* Make sure strlen(dest) is 0
 262:src/string-util.c **** * for first strcat */
 263:src/string-util.c ****     if (dest) {
 1519              		.loc 1 263 0
 1520 006c BB68     		ldr	r3, [r7, #8]
 1521 006e 002B     		cmp	r3, #0
 1522 0070 00F0DE80 		beq	.L94
 264:src/string-util.c ****         dest[0] = 0;
 1523              		.loc 1 264 0
 1524 0074 BB68     		ldr	r3, [r7, #8]
 1525 0076 4FF00002 		mov	r2, #0
 1526 007a 1A70     		strb	r2, [r3, #0]
 265:src/string-util.c ****     }
 266:src/string-util.c **** 
 267:src/string-util.c ****     /* Let's parse */
 268:src/string-util.c ****     while (fmt_str[curr_char]) {
 1527              		.loc 1 268 0
 1528 007c D8E0     		b	.L94
 1529              	.L93:
 269:src/string-util.c ****         /* Deal with normal string
 270:src/string-util.c **** * increase index by 1 here */
 271:src/string-util.c ****         if (fmt_str[curr_char++] != '%') {
 1530              		.loc 1 271 0
 1531 007e FB6A     		ldr	r3, [r7, #44]
 1532 0080 7A68     		ldr	r2, [r7, #4]
 1533 0082 D318     		adds	r3, r2, r3
 1534 0084 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1535 0086 252B     		cmp	r3, #37
 1536 0088 0CBF     		ite	eq
 1537 008a 0023     		moveq	r3, #0
 1538 008c 0123     		movne	r3, #1
 1539 008e DBB2     		uxtb	r3, r3
 1540 0090 FA6A     		ldr	r2, [r7, #44]
 1541 0092 02F10102 		add	r2, r2, #1
 1542 0096 FA62     		str	r2, [r7, #44]
 1543 0098 002B     		cmp	r3, #0
 1544 009a 0BD0     		beq	.L83
 272:src/string-util.c ****             param_chr[0] = fmt_str[curr_char - 1];
 1545              		.loc 1 272 0
 1546 009c FB6A     		ldr	r3, [r7, #44]
 1547 009e 03F1FF33 		add	r3, r3, #-1
 1548 00a2 7A68     		ldr	r2, [r7, #4]
 1549 00a4 D318     		adds	r3, r2, r3
 1550 00a6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1551 00a8 87F82430 		strb	r3, [r7, #36]
 273:src/string-util.c ****             str_to_output = param_chr;
 1552              		.loc 1 273 0
 1553 00ac 07F12403 		add	r3, r7, #36
 1554 00b0 3B63     		str	r3, [r7, #48]
 1555 00b2 B8E0     		b	.L84
 1556              	.L83:
 274:src/string-util.c ****         }
 275:src/string-util.c ****         /* % case-> retrive latter params */
 276:src/string-util.c ****         else {
 277:src/string-util.c ****             switch (fmt_str[curr_char]) {
 1557              		.loc 1 277 0
 1558 00b4 FB6A     		ldr	r3, [r7, #44]
 1559 00b6 7A68     		ldr	r2, [r7, #4]
 1560 00b8 D318     		adds	r3, r2, r3
 1561 00ba 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1562 00bc A3F14303 		sub	r3, r3, #67
 1563 00c0 352B     		cmp	r3, #53
 1564 00c2 00F2A380 		bhi	.L85
 1565 00c6 01A2     		adr	r2, .L91
 1566 00c8 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1567              		.align	2
 1568              	.L91:
 1569 00cc F5010000 		.word	.L86+1
 1570 00d0 B3010000 		.word	.L87+1
 1571 00d4 0D020000 		.word	.L85+1
 1572 00d8 0D020000 		.word	.L85+1
 1573 00dc 0D020000 		.word	.L85+1
 1574 00e0 0D020000 		.word	.L85+1
 1575 00e4 0D020000 		.word	.L85+1
 1576 00e8 0D020000 		.word	.L85+1
 1577 00ec 0D020000 		.word	.L85+1
 1578 00f0 0D020000 		.word	.L85+1
 1579 00f4 0D020000 		.word	.L85+1
 1580 00f8 0D020000 		.word	.L85+1
 1581 00fc 0D020000 		.word	.L85+1
 1582 0100 DF010000 		.word	.L88+1
 1583 0104 0D020000 		.word	.L85+1
 1584 0108 0D020000 		.word	.L85+1
 1585 010c A5010000 		.word	.L89+1
 1586 0110 0D020000 		.word	.L85+1
 1587 0114 0D020000 		.word	.L85+1
 1588 0118 0D020000 		.word	.L85+1
 1589 011c 0D020000 		.word	.L85+1
 1590 0120 C9010000 		.word	.L90+1
 1591 0124 0D020000 		.word	.L85+1
 1592 0128 0D020000 		.word	.L85+1
 1593 012c 0D020000 		.word	.L85+1
 1594 0130 0D020000 		.word	.L85+1
 1595 0134 0D020000 		.word	.L85+1
 1596 0138 0D020000 		.word	.L85+1
 1597 013c 0D020000 		.word	.L85+1
 1598 0140 0D020000 		.word	.L85+1
 1599 0144 0D020000 		.word	.L85+1
 1600 0148 0D020000 		.word	.L85+1
 1601 014c F5010000 		.word	.L86+1
 1602 0150 B3010000 		.word	.L87+1
 1603 0154 0D020000 		.word	.L85+1
 1604 0158 0D020000 		.word	.L85+1
 1605 015c 0D020000 		.word	.L85+1
 1606 0160 0D020000 		.word	.L85+1
 1607 0164 0D020000 		.word	.L85+1
 1608 0168 0D020000 		.word	.L85+1
 1609 016c 0D020000 		.word	.L85+1
 1610 0170 0D020000 		.word	.L85+1
 1611 0174 0D020000 		.word	.L85+1
 1612 0178 0D020000 		.word	.L85+1
 1613 017c 0D020000 		.word	.L85+1
 1614 0180 DF010000 		.word	.L88+1
 1615 0184 0D020000 		.word	.L85+1
 1616 0188 0D020000 		.word	.L85+1
 1617 018c A5010000 		.word	.L89+1
 1618 0190 0D020000 		.word	.L85+1
 1619 0194 B3010000 		.word	.L87+1
 1620 0198 0D020000 		.word	.L85+1
 1621 019c 0D020000 		.word	.L85+1
 1622 01a0 C9010000 		.word	.L90+1
 1623              	.L89:
 278:src/string-util.c ****                 case 'S':
 279:src/string-util.c ****                 case 's':
 280:src/string-util.c ****                     {
 281:src/string-util.c ****                         str_to_output = va_arg(param, char *);
 1624              		.loc 1 281 0
 1625 01a4 3B68     		ldr	r3, [r7, #0]
 1626 01a6 03F10402 		add	r2, r3, #4
 1627 01aa 3A60     		str	r2, [r7, #0]
 1628 01ac 1B68     		ldr	r3, [r3, #0]
 1629 01ae 3B63     		str	r3, [r7, #48]
 282:src/string-util.c ****                     }
 283:src/string-util.c ****                     break;
 1630              		.loc 1 283 0
 1631 01b0 35E0     		b	.L92
 1632              	.L87:
 284:src/string-util.c **** 
 285:src/string-util.c ****                 case 'd':
 286:src/string-util.c ****                 case 'D':
 287:src/string-util.c ****                 case 'u':
 288:src/string-util.c ****                     {
 289:src/string-util.c ****                        param_int = va_arg(param, int);
 1633              		.loc 1 289 0
 1634 01b2 3B68     		ldr	r3, [r7, #0]
 1635 01b4 03F10402 		add	r2, r3, #4
 1636 01b8 3A60     		str	r2, [r7, #0]
 1637 01ba 1B68     		ldr	r3, [r3, #0]
 1638 01bc 7B63     		str	r3, [r7, #52]
 290:src/string-util.c ****                        itoa(param_int, str_to_output);
 1639              		.loc 1 290 0
 1640 01be 786B     		ldr	r0, [r7, #52]
 1641 01c0 396B     		ldr	r1, [r7, #48]
 1642 01c2 FFF7FEFF 		bl	itoa
 291:src/string-util.c ****                     }
 292:src/string-util.c ****                     break;
 1643              		.loc 1 292 0
 1644 01c6 2AE0     		b	.L92
 1645              	.L90:
 293:src/string-util.c **** 
 294:src/string-util.c ****                 case 'X':
 295:src/string-util.c ****                 case 'x':
 296:src/string-util.c ****                     {
 297:src/string-util.c ****                        param_int = va_arg(param, int);
 1646              		.loc 1 297 0
 1647 01c8 3B68     		ldr	r3, [r7, #0]
 1648 01ca 03F10402 		add	r2, r3, #4
 1649 01ce 3A60     		str	r2, [r7, #0]
 1650 01d0 1B68     		ldr	r3, [r3, #0]
 1651 01d2 7B63     		str	r3, [r7, #52]
 298:src/string-util.c ****                        xtoa(param_int, str_to_output);
 1652              		.loc 1 298 0
 1653 01d4 786B     		ldr	r0, [r7, #52]
 1654 01d6 396B     		ldr	r1, [r7, #48]
 1655 01d8 FFF7FEFF 		bl	xtoa
 299:src/string-util.c ****                     }
 300:src/string-util.c ****                     break;
 1656              		.loc 1 300 0
 1657 01dc 1FE0     		b	.L92
 1658              	.L88:
 301:src/string-util.c **** 
 302:src/string-util.c ****                 case 'P':
 303:src/string-util.c ****                 case 'p':
 304:src/string-util.c ****                     {
 305:src/string-util.c ****                        param_lint = va_arg(param, long int);
 1659              		.loc 1 305 0
 1660 01de 3B68     		ldr	r3, [r7, #0]
 1661 01e0 03F10402 		add	r2, r3, #4
 1662 01e4 3A60     		str	r2, [r7, #0]
 1663 01e6 1B68     		ldr	r3, [r3, #0]
 1664 01e8 BB62     		str	r3, [r7, #40]
 306:src/string-util.c ****                        xtoa(param_int, str_to_output);
 1665              		.loc 1 306 0
 1666 01ea 786B     		ldr	r0, [r7, #52]
 1667 01ec 396B     		ldr	r1, [r7, #48]
 1668 01ee FFF7FEFF 		bl	xtoa
 307:src/string-util.c ****                     }
 308:src/string-util.c ****                     break;
 1669              		.loc 1 308 0
 1670 01f2 14E0     		b	.L92
 1671              	.L86:
 309:src/string-util.c **** 
 310:src/string-util.c ****                 case 'c':
 311:src/string-util.c ****                 case 'C':
 312:src/string-util.c ****                     {
 313:src/string-util.c ****                         param_chr[0] = (char) va_arg(param, int);
 1672              		.loc 1 313 0
 1673 01f4 3B68     		ldr	r3, [r7, #0]
 1674 01f6 03F10402 		add	r2, r3, #4
 1675 01fa 3A60     		str	r2, [r7, #0]
 1676 01fc 1B68     		ldr	r3, [r3, #0]
 1677 01fe DBB2     		uxtb	r3, r3
 1678 0200 87F82430 		strb	r3, [r7, #36]
 314:src/string-util.c ****                         str_to_output = param_chr;
 1679              		.loc 1 314 0
 1680 0204 07F12403 		add	r3, r7, #36
 1681 0208 3B63     		str	r3, [r7, #48]
 315:src/string-util.c ****                         break;
 1682              		.loc 1 315 0
 1683 020a 08E0     		b	.L92
 1684              	.L85:
 316:src/string-util.c ****                     }
 317:src/string-util.c **** 
 318:src/string-util.c ****                 default:
 319:src/string-util.c ****                     {
 320:src/string-util.c ****                         param_chr[0] = fmt_str[curr_char];
 1685              		.loc 1 320 0
 1686 020c FB6A     		ldr	r3, [r7, #44]
 1687 020e 7A68     		ldr	r2, [r7, #4]
 1688 0210 D318     		adds	r3, r2, r3
 1689 0212 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1690 0214 87F82430 		strb	r3, [r7, #36]
 321:src/string-util.c ****                         str_to_output = param_chr;
 1691              		.loc 1 321 0
 1692 0218 07F12403 		add	r3, r7, #36
 1693 021c 3B63     		str	r3, [r7, #48]
 1694              	.L92:
 322:src/string-util.c ****                     }
 323:src/string-util.c ****             } /* switch (fmt_str[curr_char]) */
 324:src/string-util.c ****             curr_char++;
 1695              		.loc 1 324 0
 1696 021e FB6A     		ldr	r3, [r7, #44]
 1697 0220 03F10103 		add	r3, r3, #1
 1698 0224 FB62     		str	r3, [r7, #44]
 1699              	.L84:
 325:src/string-util.c ****         } /* if (fmt_str[curr_char++] == '%') */
 326:src/string-util.c ****         proc_str(dest, str_to_output);
 1700              		.loc 1 326 0
 1701 0226 FB68     		ldr	r3, [r7, #12]
 1702 0228 B868     		ldr	r0, [r7, #8]
 1703 022a 396B     		ldr	r1, [r7, #48]
 1704 022c 9847     		blx	r3
 1705 022e 00E0     		b	.L82
 1706              	.L94:
 268:src/string-util.c ****     while (fmt_str[curr_char]) {
 1707              		.loc 1 268 0
 1708 0230 00BF     		nop
 1709              	.L82:
 268:src/string-util.c ****     while (fmt_str[curr_char]) {
 1710              		.loc 1 268 0 is_stmt 0 discriminator 1
 1711 0232 FB6A     		ldr	r3, [r7, #44]
 1712 0234 7A68     		ldr	r2, [r7, #4]
 1713 0236 D318     		adds	r3, r2, r3
 1714 0238 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1715 023a 002B     		cmp	r3, #0
 1716 023c 7FF41FAF 		bne	.L93
 327:src/string-util.c ****     } /* while (fmt_str[curr_char]) */
 328:src/string-util.c **** 
 329:src/string-util.c ****     return curr_char;
 1717              		.loc 1 329 0 is_stmt 1
 1718 0240 FB6A     		ldr	r3, [r7, #44]
 330:src/string-util.c **** }
 1719              		.loc 1 330 0
 1720 0242 1846     		mov	r0, r3
 1721 0244 07F13807 		add	r7, r7, #56
 1722 0248 BD46     		mov	sp, r7
 1723 024a 80BD     		pop	{r7, pc}
 1724              		.cfi_endproc
 1725              	.LFE126:
 1727              		.section	.text.sprintf,"ax",%progbits
 1728              		.align	2
 1729              		.global	sprintf
 1730              		.thumb
 1731              		.thumb_func
 1733              	sprintf:
 1734              	.LFB127:
 331:src/string-util.c **** 
 332:src/string-util.c **** int sprintf(char *str, const char *format, ...)
 333:src/string-util.c **** {
 1735              		.loc 1 333 0
 1736              		.cfi_startproc
 1737              		@ args = 4, pretend = 12, frame = 16
 1738              		@ frame_needed = 1, uses_anonymous_args = 1
 1739 0000 0EB4     		push	{r1, r2, r3}
 1740              	.LCFI52:
 1741              		.cfi_def_cfa_offset 12
 1742              		.cfi_offset 3, -4
 1743              		.cfi_offset 2, -8
 1744              		.cfi_offset 1, -12
 1745 0002 80B5     		push	{r7, lr}
 1746              	.LCFI53:
 1747              		.cfi_def_cfa_offset 20
 1748              		.cfi_offset 14, -16
 1749              		.cfi_offset 7, -20
 1750 0004 85B0     		sub	sp, sp, #20
 1751              	.LCFI54:
 1752              		.cfi_def_cfa_offset 40
 1753 0006 00AF     		add	r7, sp, #0
 1754              	.LCFI55:
 1755              		.cfi_def_cfa_register 7
 1756 0008 7860     		str	r0, [r7, #4]
 334:src/string-util.c ****     int rval = 0;
 1757              		.loc 1 334 0
 1758 000a 4FF00003 		mov	r3, #0
 1759 000e FB60     		str	r3, [r7, #12]
 335:src/string-util.c ****     va_list param = {0};
 1760              		.loc 1 335 0
 1761 0010 4FF00003 		mov	r3, #0
 1762 0014 BB60     		str	r3, [r7, #8]
 336:src/string-util.c **** 
 337:src/string-util.c ****     va_start(param, format);
 1763              		.loc 1 337 0
 1764 0016 07F12003 		add	r3, r7, #32
 1765 001a BB60     		str	r3, [r7, #8]
 338:src/string-util.c ****     rval = base_printf(sprintf_cb, (char *)str, format, param);
 1766              		.loc 1 338 0
 1767 001c 40F20000 		movw	r0, #:lower16:sprintf_cb
 1768 0020 C0F20000 		movt	r0, #:upper16:sprintf_cb
 1769 0024 7968     		ldr	r1, [r7, #4]
 1770 0026 FA69     		ldr	r2, [r7, #28]
 1771 0028 BB68     		ldr	r3, [r7, #8]
 1772 002a FFF7FEFF 		bl	base_printf
 1773 002e F860     		str	r0, [r7, #12]
 339:src/string-util.c ****     va_end(param);
 340:src/string-util.c **** 
 341:src/string-util.c ****     return rval;
 1774              		.loc 1 341 0
 1775 0030 FB68     		ldr	r3, [r7, #12]
 342:src/string-util.c **** }
 1776              		.loc 1 342 0
 1777 0032 1846     		mov	r0, r3
 1778 0034 07F11407 		add	r7, r7, #20
 1779 0038 BD46     		mov	sp, r7
 1780 003a BDE88040 		pop	{r7, lr}
 1781 003e 03B0     		add	sp, sp, #12
 1782 0040 7047     		bx	lr
 1783              		.cfi_endproc
 1784              	.LFE127:
 1786              		.comm	xQueueUARTSend,4,4
 1787              		.comm	xQueueUARTRecvie,4,4
 1788              		.comm	xQueueShell2PWM,4,4
 1789 0042 00BF     		.section	.text.receive_byte,"ax",%progbits
 1790              		.align	2
 1791              		.global	receive_byte
 1792              		.thumb
 1793              		.thumb_func
 1795              	receive_byte:
 1796              	.LFB128:
 1797              		.file 2 "src/main.c"
   1:src/main.c    **** /**
   2:src/main.c    ****   ******************************************************************************
   3:src/main.c    ****   * @file    STM32F4-Discovery FreeRTOS demo\main.c
   4:src/main.c    ****   * @author  T.O.M.A.S. Team
   5:src/main.c    ****   * @version V1.1.0
   6:src/main.c    ****   * @date    14-October-2011
   7:src/main.c    ****   * @brief   Main program body
   8:src/main.c    ****   ******************************************************************************
   9:src/main.c    ****   * @attention
  10:src/main.c    ****   *
  11:src/main.c    ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:src/main.c    ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:src/main.c    ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:src/main.c    ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:src/main.c    ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:src/main.c    ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:src/main.c    ****   *
  18:src/main.c    ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:src/main.c    ****   ******************************************************************************
  20:src/main.c    ****   */ 
  21:src/main.c    **** 
  22:src/main.c    **** /* Includes ------------------------------------------------------------------*/
  23:src/main.c    **** #include "stm32f4xx.h"
  24:src/main.c    **** 
  25:src/main.c    **** /* FreeRTOS includes */
  26:src/main.c    **** #include "FreeRTOS.h"
  27:src/main.c    **** #include "task.h"
  28:src/main.c    **** #include "semphr.h"
  29:src/main.c    **** 
  30:src/main.c    **** #include <math.h>
  31:src/main.c    **** #include <stdio.h>
  32:src/main.c    **** #include <stdlib.h>
  33:src/main.c    **** 
  34:src/main.c    **** #include "hw_config.h"  //all hardware configuration was setted here
  35:src/main.c    **** #include "main.h"
  36:src/main.c    **** #include "shell.h"
  37:src/main.c    **** 
  38:src/main.c    **** #include "string-util.c"
  39:src/main.c    **** 
  40:src/main.c    **** /* variable parameter function*/
  41:src/main.c    **** #include <stdarg.h>
  42:src/main.c    **** 
  43:src/main.c    **** /** @addtogroup STM32F4-Discovery_Demo
  44:src/main.c    ****   * @{
  45:src/main.c    ****   */
  46:src/main.c    **** 
  47:src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  48:src/main.c    **** /* Private define ------------------------------------------------------------*/
  49:src/main.c    **** #define DELAY 125     /* msec */
  50:src/main.c    **** #define queueSIZE	6
  51:src/main.c    **** 
  52:src/main.c    **** /*brushless motor PWM max and min duty cycle*/
  53:src/main.c    **** #define PWM_MOTOR_MIN 100
  54:src/main.c    **** #define PWM_MOTOR_MAX 1000
  55:src/main.c    **** #define TEST 200
  56:src/main.c    **** 
  57:src/main.c    **** /* angle */
  58:src/main.c    **** #define G 2
  59:src/main.c    **** 
  60:src/main.c    **** /* Private macro -------------------------------------------------------------*/
  61:src/main.c    **** /*PWM signal to drive brushless motor*/
  62:src/main.c    **** #define PWM_Motor1 TIM4->CCR1   
  63:src/main.c    **** #define PWM_Motor2 TIM4->CCR2   
  64:src/main.c    **** #define PWM_Motor3 TIM4->CCR3   
  65:src/main.c    **** #define PWM_Motor4 TIM4->CCR4   
  66:src/main.c    **** 
  67:src/main.c    **** /* Task functions declarations */
  68:src/main.c    **** static void pwmctrl(void *pvParameters);
  69:src/main.c    **** static void vMEMSTask(void *pvParameters);
  70:src/main.c    **** 
  71:src/main.c    **** static void UsartTask(void *pvParameters);
  72:src/main.c    **** static void Usartrecive(void *pvParameters);
  73:src/main.c    **** 
  74:src/main.c    **** /* semaphores, queues declarations */
  75:src/main.c    **** xQueueHandle xQueueUARTSend;
  76:src/main.c    **** xQueueHandle xQueueUARTRecvie;
  77:src/main.c    **** xQueueHandle xQueueShell2PWM;
  78:src/main.c    **** 
  79:src/main.c    **** 
  80:src/main.c    **** /* Private variables ---------------------------------------------------------*/
  81:src/main.c    **** /* Queue structure used for passing messages. */
  82:src/main.c    **** typedef struct {
  83:src/main.c    **** 	char str[100];
  84:src/main.c    **** } serial_str_msg;
  85:src/main.c    **** 
  86:src/main.c    **** typedef struct {
  87:src/main.c    ****         char ch;
  88:src/main.c    **** } serial_ch_msg;
  89:src/main.c    **** 
  90:src/main.c    **** 
  91:src/main.c    **** char receive_byte()
  92:src/main.c    **** {
 1798              		.loc 2 92 0
 1799              		.cfi_startproc
 1800              		@ args = 0, pretend = 0, frame = 8
 1801              		@ frame_needed = 1, uses_anonymous_args = 0
 1802 0000 80B5     		push	{r7, lr}
 1803              	.LCFI56:
 1804              		.cfi_def_cfa_offset 8
 1805              		.cfi_offset 14, -4
 1806              		.cfi_offset 7, -8
 1807 0002 82B0     		sub	sp, sp, #8
 1808              	.LCFI57:
 1809              		.cfi_def_cfa_offset 16
 1810 0004 00AF     		add	r7, sp, #0
 1811              	.LCFI58:
 1812              		.cfi_def_cfa_register 7
  93:src/main.c    ****         serial_ch_msg msg;
  94:src/main.c    **** 
  95:src/main.c    ****         /* Wait for a byte to be queued by the receive interrupts handler. */
  96:src/main.c    ****         while (!xQueueReceive(xQueueUARTRecvie, &msg, portMAX_DELAY));
 1813              		.loc 2 96 0
 1814 0006 00BF     		nop
 1815              	.L97:
 1816              		.loc 2 96 0 is_stmt 0 discriminator 1
 1817 0008 40F20003 		movw	r3, #:lower16:xQueueUARTRecvie
 1818 000c C0F20003 		movt	r3, #:upper16:xQueueUARTRecvie
 1819 0010 1B68     		ldr	r3, [r3, #0]
 1820 0012 1846     		mov	r0, r3
 1821 0014 07F10403 		add	r3, r7, #4
 1822 0018 1946     		mov	r1, r3
 1823 001a 4FF0FF32 		mov	r2, #-1
 1824 001e 4FF00003 		mov	r3, #0
 1825 0022 FFF7FEFF 		bl	xQueueGenericReceive
 1826 0026 0346     		mov	r3, r0
 1827 0028 002B     		cmp	r3, #0
 1828 002a EDD0     		beq	.L97
  97:src/main.c    **** 
  98:src/main.c    ****         return msg.ch;
 1829              		.loc 2 98 0 is_stmt 1
 1830 002c 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
  99:src/main.c    **** }
 1831              		.loc 2 99 0
 1832 002e 1846     		mov	r0, r3
 1833 0030 07F10807 		add	r7, r7, #8
 1834 0034 BD46     		mov	sp, r7
 1835 0036 80BD     		pop	{r7, pc}
 1836              		.cfi_endproc
 1837              	.LFE128:
 1839              		.section	.text.receive_byte_noblock,"ax",%progbits
 1840              		.align	2
 1841              		.global	receive_byte_noblock
 1842              		.thumb
 1843              		.thumb_func
 1845              	receive_byte_noblock:
 1846              	.LFB129:
 100:src/main.c    **** 
 101:src/main.c    **** /* for fg ref zzz0072*/
 102:src/main.c    **** int receive_byte_noblock(char *ch)
 103:src/main.c    **** {
 1847              		.loc 2 103 0
 1848              		.cfi_startproc
 1849              		@ args = 0, pretend = 0, frame = 16
 1850              		@ frame_needed = 1, uses_anonymous_args = 0
 1851 0000 80B5     		push	{r7, lr}
 1852              	.LCFI59:
 1853              		.cfi_def_cfa_offset 8
 1854              		.cfi_offset 14, -4
 1855              		.cfi_offset 7, -8
 1856 0002 84B0     		sub	sp, sp, #16
 1857              	.LCFI60:
 1858              		.cfi_def_cfa_offset 24
 1859 0004 00AF     		add	r7, sp, #0
 1860              	.LCFI61:
 1861              		.cfi_def_cfa_register 7
 1862 0006 7860     		str	r0, [r7, #4]
 104:src/main.c    ****     serial_ch_msg msg;
 105:src/main.c    ****     int rval = xQueueReceive(xQueueUARTRecvie, &msg, 10);
 1863              		.loc 2 105 0
 1864 0008 40F20003 		movw	r3, #:lower16:xQueueUARTRecvie
 1865 000c C0F20003 		movt	r3, #:upper16:xQueueUARTRecvie
 1866 0010 1B68     		ldr	r3, [r3, #0]
 1867 0012 1846     		mov	r0, r3
 1868 0014 07F10803 		add	r3, r7, #8
 1869 0018 1946     		mov	r1, r3
 1870 001a 4FF00A02 		mov	r2, #10
 1871 001e 4FF00003 		mov	r3, #0
 1872 0022 FFF7FEFF 		bl	xQueueGenericReceive
 1873 0026 F860     		str	r0, [r7, #12]
 106:src/main.c    ****     if ( rval == 1) {
 1874              		.loc 2 106 0
 1875 0028 FB68     		ldr	r3, [r7, #12]
 1876 002a 012B     		cmp	r3, #1
 1877 002c 02D1     		bne	.L99
 107:src/main.c    ****         *ch = msg.ch;
 1878              		.loc 2 107 0
 1879 002e 3A7A     		ldrb	r2, [r7, #8]	@ zero_extendqisi2
 1880 0030 7B68     		ldr	r3, [r7, #4]
 1881 0032 1A70     		strb	r2, [r3, #0]
 1882              	.L99:
 108:src/main.c    ****     }
 109:src/main.c    ****     return rval;
 1883              		.loc 2 109 0
 1884 0034 FB68     		ldr	r3, [r7, #12]
 110:src/main.c    **** }
 1885              		.loc 2 110 0
 1886 0036 1846     		mov	r0, r3
 1887 0038 07F11007 		add	r7, r7, #16
 1888 003c BD46     		mov	sp, r7
 1889 003e 80BD     		pop	{r7, pc}
 1890              		.cfi_endproc
 1891              	.LFE129:
 1893              		.section	.text.pwmctrl,"ax",%progbits
 1894              		.align	2
 1895              		.thumb
 1896              		.thumb_func
 1898              	pwmctrl:
 1899              	.LFB130:
 111:src/main.c    **** 
 112:src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 113:src/main.c    **** 
 114:src/main.c    **** /* Private functions ---------------------------------------------------------*/
 115:src/main.c    **** 
 116:src/main.c    **** static void pwmctrl(void *pvParameters)
 117:src/main.c    **** {
 1900              		.loc 2 117 0
 1901              		.cfi_startproc
 1902              		@ args = 0, pretend = 0, frame = 16
 1903              		@ frame_needed = 1, uses_anonymous_args = 0
 1904 0000 90B5     		push	{r4, r7, lr}
 1905              	.LCFI62:
 1906              		.cfi_def_cfa_offset 12
 1907              		.cfi_offset 14, -4
 1908              		.cfi_offset 7, -8
 1909              		.cfi_offset 4, -12
 1910 0002 85B0     		sub	sp, sp, #20
 1911              	.LCFI63:
 1912              		.cfi_def_cfa_offset 32
 1913 0004 00AF     		add	r7, sp, #0
 1914              	.LCFI64:
 1915              		.cfi_def_cfa_register 7
 1916 0006 7860     		str	r0, [r7, #4]
 118:src/main.c    ****   const portTickType xDelay = 1000; // portTICK_RATE_MS;
 1917              		.loc 2 118 0
 1918 0008 4FF47A73 		mov	r3, #1000
 1919 000c FB60     		str	r3, [r7, #12]
 119:src/main.c    **** 
 120:src/main.c    **** 
 121:src/main.c    ****   Motor_Control(PWM_MOTOR_MAX, PWM_MOTOR_MAX, PWM_MOTOR_MAX, PWM_MOTOR_MAX);
 1920              		.loc 2 121 0
 1921 000e 40F20004 		movw	r4, #:lower16:Motor_Control
 1922 0012 C0F20004 		movt	r4, #:upper16:Motor_Control
 1923 0016 4FF47A70 		mov	r0, #1000
 1924 001a 4FF47A71 		mov	r1, #1000
 1925 001e 4FF47A72 		mov	r2, #1000
 1926 0022 4FF47A73 		mov	r3, #1000
 1927 0026 A047     		blx	r4
 122:src/main.c    **** 
 123:src/main.c    ****   Motor_Control(PWM_MOTOR_MIN, PWM_MOTOR_MIN, PWM_MOTOR_MIN, PWM_MOTOR_MIN);
 1928              		.loc 2 123 0
 1929 0028 40F20004 		movw	r4, #:lower16:Motor_Control
 1930 002c C0F20004 		movt	r4, #:upper16:Motor_Control
 1931 0030 4FF06400 		mov	r0, #100
 1932 0034 4FF06401 		mov	r1, #100
 1933 0038 4FF06402 		mov	r2, #100
 1934 003c 4FF06403 		mov	r3, #100
 1935 0040 A047     		blx	r4
 1936              	.L101:
 124:src/main.c    ****   
 125:src/main.c    **** 
 126:src/main.c    **** 
 127:src/main.c    ****   while(1)  // Do not exit
 128:src/main.c    ****   {
 129:src/main.c    ****    Motor_Control(TEST, TEST, TEST, TEST);
 1937              		.loc 2 129 0 discriminator 1
 1938 0042 40F20004 		movw	r4, #:lower16:Motor_Control
 1939 0046 C0F20004 		movt	r4, #:upper16:Motor_Control
 1940 004a 4FF0C800 		mov	r0, #200
 1941 004e 4FF0C801 		mov	r1, #200
 1942 0052 4FF0C802 		mov	r2, #200
 1943 0056 4FF0C803 		mov	r3, #200
 1944 005a A047     		blx	r4
 130:src/main.c    ****    
 131:src/main.c    ****    vTaskDelay( xDelay );
 1945              		.loc 2 131 0 discriminator 1
 1946 005c F868     		ldr	r0, [r7, #12]
 1947 005e FFF7FEFF 		bl	vTaskDelay
 132:src/main.c    **** 
 133:src/main.c    ****    Motor_Control(TEST+50, TEST+50, TEST+50, TEST+50);
 1948              		.loc 2 133 0 discriminator 1
 1949 0062 40F20004 		movw	r4, #:lower16:Motor_Control
 1950 0066 C0F20004 		movt	r4, #:upper16:Motor_Control
 1951 006a 4FF0FA00 		mov	r0, #250
 1952 006e 4FF0FA01 		mov	r1, #250
 1953 0072 4FF0FA02 		mov	r2, #250
 1954 0076 4FF0FA03 		mov	r3, #250
 1955 007a A047     		blx	r4
 134:src/main.c    **** 
 135:src/main.c    ****    vTaskDelay( xDelay );
 1956              		.loc 2 135 0 discriminator 1
 1957 007c F868     		ldr	r0, [r7, #12]
 1958 007e FFF7FEFF 		bl	vTaskDelay
 136:src/main.c    **** 
 137:src/main.c    ****   }
 1959              		.loc 2 137 0 discriminator 1
 1960 0082 DEE7     		b	.L101
 1961              		.cfi_endproc
 1962              	.LFE130:
 1964              		.section	.text.Motor_Control,"ax",%progbits
 1965              		.align	2
 1966              		.global	Motor_Control
 1967              		.thumb
 1968              		.thumb_func
 1970              	Motor_Control:
 1971              	.LFB131:
 138:src/main.c    ****  
 139:src/main.c    ****   return(0); // System will implode
 140:src/main.c    **** } 
 141:src/main.c    **** 
 142:src/main.c    **** void Motor_Control(u16 Motor1, u16 Motor2, u16 Motor3, u16 Motor4)
 143:src/main.c    **** {
 1972              		.loc 2 143 0
 1973              		.cfi_startproc
 1974              		@ args = 0, pretend = 0, frame = 8
 1975              		@ frame_needed = 1, uses_anonymous_args = 0
 1976              		@ link register save eliminated.
 1977 0000 80B4     		push	{r7}
 1978              	.LCFI65:
 1979              		.cfi_def_cfa_offset 4
 1980              		.cfi_offset 7, -4
 1981 0002 83B0     		sub	sp, sp, #12
 1982              	.LCFI66:
 1983              		.cfi_def_cfa_offset 16
 1984 0004 00AF     		add	r7, sp, #0
 1985              	.LCFI67:
 1986              		.cfi_def_cfa_register 7
 1987 0006 F880     		strh	r0, [r7, #6]	@ movhi
 1988 0008 B980     		strh	r1, [r7, #4]	@ movhi
 1989 000a 7A80     		strh	r2, [r7, #2]	@ movhi
 1990 000c 3B80     		strh	r3, [r7, #0]	@ movhi
 144:src/main.c    **** 	if(Motor1>PWM_MOTOR_MAX)      Motor1 = PWM_MOTOR_MAX;
 1991              		.loc 2 144 0
 1992 000e FB88     		ldrh	r3, [r7, #6]
 1993 0010 B3F57A7F 		cmp	r3, #1000
 1994 0014 03D9     		bls	.L103
 1995              		.loc 2 144 0 is_stmt 0 discriminator 1
 1996 0016 4FF47A73 		mov	r3, #1000
 1997 001a FB80     		strh	r3, [r7, #6]	@ movhi
 1998 001c 05E0     		b	.L104
 1999              	.L103:
 145:src/main.c    **** 	else if(Motor1<PWM_MOTOR_MIN) Motor1 = PWM_MOTOR_MIN;
 2000              		.loc 2 145 0 is_stmt 1
 2001 001e FB88     		ldrh	r3, [r7, #6]
 2002 0020 632B     		cmp	r3, #99
 2003 0022 02D8     		bhi	.L104
 2004              		.loc 2 145 0 is_stmt 0 discriminator 1
 2005 0024 4FF06403 		mov	r3, #100
 2006 0028 FB80     		strh	r3, [r7, #6]	@ movhi
 2007              	.L104:
 146:src/main.c    **** 		
 147:src/main.c    **** 	if(Motor2>PWM_MOTOR_MAX)      Motor2 = PWM_MOTOR_MAX;
 2008              		.loc 2 147 0 is_stmt 1
 2009 002a BB88     		ldrh	r3, [r7, #4]
 2010 002c B3F57A7F 		cmp	r3, #1000
 2011 0030 03D9     		bls	.L105
 2012              		.loc 2 147 0 is_stmt 0 discriminator 1
 2013 0032 4FF47A73 		mov	r3, #1000
 2014 0036 BB80     		strh	r3, [r7, #4]	@ movhi
 2015 0038 05E0     		b	.L106
 2016              	.L105:
 148:src/main.c    **** 	else if(Motor2<PWM_MOTOR_MIN) Motor2 = PWM_MOTOR_MIN;
 2017              		.loc 2 148 0 is_stmt 1
 2018 003a BB88     		ldrh	r3, [r7, #4]
 2019 003c 632B     		cmp	r3, #99
 2020 003e 02D8     		bhi	.L106
 2021              		.loc 2 148 0 is_stmt 0 discriminator 1
 2022 0040 4FF06403 		mov	r3, #100
 2023 0044 BB80     		strh	r3, [r7, #4]	@ movhi
 2024              	.L106:
 149:src/main.c    **** 				
 150:src/main.c    **** 	if(Motor3>PWM_MOTOR_MAX)      Motor3 = PWM_MOTOR_MAX;
 2025              		.loc 2 150 0 is_stmt 1
 2026 0046 7B88     		ldrh	r3, [r7, #2]
 2027 0048 B3F57A7F 		cmp	r3, #1000
 2028 004c 03D9     		bls	.L107
 2029              		.loc 2 150 0 is_stmt 0 discriminator 1
 2030 004e 4FF47A73 		mov	r3, #1000
 2031 0052 7B80     		strh	r3, [r7, #2]	@ movhi
 2032 0054 05E0     		b	.L108
 2033              	.L107:
 151:src/main.c    **** 	else if(Motor3<PWM_MOTOR_MIN) Motor3 = PWM_MOTOR_MIN;
 2034              		.loc 2 151 0 is_stmt 1
 2035 0056 7B88     		ldrh	r3, [r7, #2]
 2036 0058 632B     		cmp	r3, #99
 2037 005a 02D8     		bhi	.L108
 2038              		.loc 2 151 0 is_stmt 0 discriminator 1
 2039 005c 4FF06403 		mov	r3, #100
 2040 0060 7B80     		strh	r3, [r7, #2]	@ movhi
 2041              	.L108:
 152:src/main.c    **** 						
 153:src/main.c    **** 	if(Motor4>PWM_MOTOR_MAX)      Motor4 = PWM_MOTOR_MAX;
 2042              		.loc 2 153 0 is_stmt 1
 2043 0062 3B88     		ldrh	r3, [r7, #0]
 2044 0064 B3F57A7F 		cmp	r3, #1000
 2045 0068 03D9     		bls	.L109
 2046              		.loc 2 153 0 is_stmt 0 discriminator 1
 2047 006a 4FF47A73 		mov	r3, #1000
 2048 006e 3B80     		strh	r3, [r7, #0]	@ movhi
 2049 0070 05E0     		b	.L110
 2050              	.L109:
 154:src/main.c    **** 	else if(Motor4<PWM_MOTOR_MIN) Motor4 = PWM_MOTOR_MIN;
 2051              		.loc 2 154 0 is_stmt 1
 2052 0072 3B88     		ldrh	r3, [r7, #0]
 2053 0074 632B     		cmp	r3, #99
 2054 0076 02D8     		bhi	.L110
 2055              		.loc 2 154 0 is_stmt 0 discriminator 1
 2056 0078 4FF06403 		mov	r3, #100
 2057 007c 3B80     		strh	r3, [r7, #0]	@ movhi
 2058              	.L110:
 155:src/main.c    **** 								
 156:src/main.c    **** 	PWM_Motor1 = Motor1;
 2059              		.loc 2 156 0 is_stmt 1
 2060 007e 4FF40063 		mov	r3, #2048
 2061 0082 C4F20003 		movt	r3, 16384
 2062 0086 FA88     		ldrh	r2, [r7, #6]
 2063 0088 5A63     		str	r2, [r3, #52]
 157:src/main.c    **** 	PWM_Motor2 = Motor2;
 2064              		.loc 2 157 0
 2065 008a 4FF40063 		mov	r3, #2048
 2066 008e C4F20003 		movt	r3, 16384
 2067 0092 BA88     		ldrh	r2, [r7, #4]
 2068 0094 9A63     		str	r2, [r3, #56]
 158:src/main.c    **** 	PWM_Motor3 = Motor3;
 2069              		.loc 2 158 0
 2070 0096 4FF40063 		mov	r3, #2048
 2071 009a C4F20003 		movt	r3, 16384
 2072 009e 7A88     		ldrh	r2, [r7, #2]
 2073 00a0 DA63     		str	r2, [r3, #60]
 159:src/main.c    **** 	PWM_Motor4 = Motor4;
 2074              		.loc 2 159 0
 2075 00a2 4FF40063 		mov	r3, #2048
 2076 00a6 C4F20003 		movt	r3, 16384
 2077 00aa 3A88     		ldrh	r2, [r7, #0]
 2078 00ac 1A64     		str	r2, [r3, #64]
 160:src/main.c    **** }
 2079              		.loc 2 160 0
 2080 00ae 07F10C07 		add	r7, r7, #12
 2081 00b2 BD46     		mov	sp, r7
 2082 00b4 80BC     		pop	{r7}
 2083 00b6 7047     		bx	lr
 2084              		.cfi_endproc
 2085              	.LFE131:
 2087              		.section	.rodata
 2088 0003 00       		.align	2
 2089              	.LC1:
 2090 0004 70776D63 		.ascii	"pwmctrl\000"
 2090      74726C00 
 2091              		.align	2
 2092              	.LC2:
 2093 000c 55534152 		.ascii	"USART\000"
 2093      5400
 2094 0012 0000     		.align	2
 2095              	.LC3:
 2096 0014 55736172 		.ascii	"Usartrecive\000"
 2096      74726563 
 2096      69766500 
 2097              		.align	2
 2098              	.LC4:
 2099 0020 7368656C 		.ascii	"shell\000"
 2099      6C00
 2100 0026 0000     		.align	2
 2101              	.LC5:
 2102 0028 764D454D 		.ascii	"vMEMSTask\000"
 2102      53546173 
 2102      6B00
 2103              		.section	.text.main,"ax",%progbits
 2104              		.align	2
 2105              		.global	main
 2106              		.thumb
 2107              		.thumb_func
 2109              	main:
 2110              	.LFB132:
 161:src/main.c    **** 
 162:src/main.c    **** 
 163:src/main.c    **** /**************************************************************************************************
 164:src/main.c    **** /* Private functions ---------------------------------------------------------*/
 165:src/main.c    **** 
 166:src/main.c    **** 
 167:src/main.c    **** /**
 168:src/main.c    ****   * @brief  Main program.
 169:src/main.c    ****   * @param  None
 170:src/main.c    ****   * @retval None
 171:src/main.c    ****   */
 172:src/main.c    **** int main(void)
 173:src/main.c    **** { 
 2111              		.loc 2 173 0
 2112              		.cfi_startproc
 2113              		@ args = 0, pretend = 0, frame = 0
 2114              		@ frame_needed = 1, uses_anonymous_args = 0
 2115 0000 80B5     		push	{r7, lr}
 2116              	.LCFI68:
 2117              		.cfi_def_cfa_offset 8
 2118              		.cfi_offset 14, -4
 2119              		.cfi_offset 7, -8
 2120 0002 84B0     		sub	sp, sp, #16
 2121              	.LCFI69:
 2122              		.cfi_def_cfa_offset 24
 2123 0004 04AF     		add	r7, sp, #16
 2124              	.LCFI70:
 2125              		.cfi_def_cfa 7, 8
 174:src/main.c    **** 	
 175:src/main.c    **** 	/*a queue for tansfer the senddate to USART task*/
 176:src/main.c    **** 	xQueueUARTSend = xQueueCreate(15, sizeof(serial_str_msg));
 2126              		.loc 2 176 0
 2127 0006 4FF00F00 		mov	r0, #15
 2128 000a 4FF06401 		mov	r1, #100
 2129 000e FFF7FEFF 		bl	xQueueCreate
 2130 0012 0246     		mov	r2, r0
 2131 0014 40F20003 		movw	r3, #:lower16:xQueueUARTSend
 2132 0018 C0F20003 		movt	r3, #:upper16:xQueueUARTSend
 2133 001c 1A60     		str	r2, [r3, #0]
 177:src/main.c    ****     xQueueUARTRecvie = xQueueCreate(1, sizeof(serial_ch_msg));
 2134              		.loc 2 177 0
 2135 001e 4FF00100 		mov	r0, #1
 2136 0022 4FF00101 		mov	r1, #1
 2137 0026 FFF7FEFF 		bl	xQueueCreate
 2138 002a 0246     		mov	r2, r0
 2139 002c 40F20003 		movw	r3, #:lower16:xQueueUARTRecvie
 2140 0030 C0F20003 		movt	r3, #:upper16:xQueueUARTRecvie
 2141 0034 1A60     		str	r2, [r3, #0]
 178:src/main.c    ****     xQueueShell2PWM = xQueueCreate(1, sizeof(serial_ch_msg));
 2142              		.loc 2 178 0
 2143 0036 4FF00100 		mov	r0, #1
 2144 003a 4FF00101 		mov	r1, #1
 2145 003e FFF7FEFF 		bl	xQueueCreate
 2146 0042 0246     		mov	r2, r0
 2147 0044 40F20003 		movw	r3, #:lower16:xQueueShell2PWM
 2148 0048 C0F20003 		movt	r3, #:upper16:xQueueShell2PWM
 2149 004c 1A60     		str	r2, [r3, #0]
 179:src/main.c    **** 
 180:src/main.c    **** 
 181:src/main.c    **** 	/* initialize hardware... */
 182:src/main.c    **** 	prvSetupHardware();
 2150              		.loc 2 182 0
 2151 004e FFF7FEFF 		bl	prvSetupHardware
 183:src/main.c    **** 
 184:src/main.c    **** 	/* Start the tasks defined within this file/specific to this demo. */
 185:src/main.c    **** 	xTaskCreate(pwmctrl, ( signed portCHAR * ) "pwmctrl", configMINIMAL_STACK_SIZE, NULL,tskIDLE_PRIOR
 2152              		.loc 2 185 0
 2153 0052 4FF00003 		mov	r3, #0
 2154 0056 0093     		str	r3, [sp, #0]
 2155 0058 4FF00003 		mov	r3, #0
 2156 005c 0193     		str	r3, [sp, #4]
 2157 005e 4FF00003 		mov	r3, #0
 2158 0062 0293     		str	r3, [sp, #8]
 2159 0064 4FF00003 		mov	r3, #0
 2160 0068 0393     		str	r3, [sp, #12]
 2161 006a 40F20000 		movw	r0, #:lower16:pwmctrl
 2162 006e C0F20000 		movt	r0, #:upper16:pwmctrl
 2163 0072 40F20001 		movw	r1, #:lower16:.LC1
 2164 0076 C0F20001 		movt	r1, #:upper16:.LC1
 2165 007a 4FF48072 		mov	r2, #256
 2166 007e 4FF00003 		mov	r3, #0
 2167 0082 FFF7FEFF 		bl	xTaskGenericCreate
 186:src/main.c    **** 	xTaskCreate(UsartTask, ( signed portCHAR * ) "USART", configMINIMAL_STACK_SIZE, NULL,tskIDLE_PRIOR
 2168              		.loc 2 186 0
 2169 0086 4FF00003 		mov	r3, #0
 2170 008a 0093     		str	r3, [sp, #0]
 2171 008c 4FF00003 		mov	r3, #0
 2172 0090 0193     		str	r3, [sp, #4]
 2173 0092 4FF00003 		mov	r3, #0
 2174 0096 0293     		str	r3, [sp, #8]
 2175 0098 4FF00003 		mov	r3, #0
 2176 009c 0393     		str	r3, [sp, #12]
 2177 009e 40F20000 		movw	r0, #:lower16:UsartTask
 2178 00a2 C0F20000 		movt	r0, #:upper16:UsartTask
 2179 00a6 40F20001 		movw	r1, #:lower16:.LC2
 2180 00aa C0F20001 		movt	r1, #:upper16:.LC2
 2181 00ae 4FF48072 		mov	r2, #256
 2182 00b2 4FF00003 		mov	r3, #0
 2183 00b6 FFF7FEFF 		bl	xTaskGenericCreate
 187:src/main.c    **** 	xTaskCreate(Usartrecive, ( signed portCHAR * ) "Usartrecive", configMINIMAL_STACK_SIZE, NULL,tskID
 2184              		.loc 2 187 0
 2185 00ba 4FF00003 		mov	r3, #0
 2186 00be 0093     		str	r3, [sp, #0]
 2187 00c0 4FF00003 		mov	r3, #0
 2188 00c4 0193     		str	r3, [sp, #4]
 2189 00c6 4FF00003 		mov	r3, #0
 2190 00ca 0293     		str	r3, [sp, #8]
 2191 00cc 4FF00003 		mov	r3, #0
 2192 00d0 0393     		str	r3, [sp, #12]
 2193 00d2 40F20000 		movw	r0, #:lower16:Usartrecive
 2194 00d6 C0F20000 		movt	r0, #:upper16:Usartrecive
 2195 00da 40F20001 		movw	r1, #:lower16:.LC3
 2196 00de C0F20001 		movt	r1, #:upper16:.LC3
 2197 00e2 4FF48072 		mov	r2, #256
 2198 00e6 4FF00003 		mov	r3, #0
 2199 00ea FFF7FEFF 		bl	xTaskGenericCreate
 188:src/main.c    **** 	xTaskCreate(shell, ( signed portCHAR * ) "shell", configMINIMAL_STACK_SIZE, NULL,tskIDLE_PRIORITY,
 2200              		.loc 2 188 0
 2201 00ee 4FF00003 		mov	r3, #0
 2202 00f2 0093     		str	r3, [sp, #0]
 2203 00f4 4FF00003 		mov	r3, #0
 2204 00f8 0193     		str	r3, [sp, #4]
 2205 00fa 4FF00003 		mov	r3, #0
 2206 00fe 0293     		str	r3, [sp, #8]
 2207 0100 4FF00003 		mov	r3, #0
 2208 0104 0393     		str	r3, [sp, #12]
 2209 0106 40F20000 		movw	r0, #:lower16:shell
 2210 010a C0F20000 		movt	r0, #:upper16:shell
 2211 010e 40F20001 		movw	r1, #:lower16:.LC4
 2212 0112 C0F20001 		movt	r1, #:upper16:.LC4
 2213 0116 4FF48072 		mov	r2, #256
 2214 011a 4FF00003 		mov	r3, #0
 2215 011e FFF7FEFF 		bl	xTaskGenericCreate
 189:src/main.c    **** 
 190:src/main.c    **** 	xTaskCreate(vMEMSTask, ( signed portCHAR * ) "vMEMSTask", configMINIMAL_STACK_SIZE, NULL,tskIDLE_P
 2216              		.loc 2 190 0
 2217 0122 4FF00003 		mov	r3, #0
 2218 0126 0093     		str	r3, [sp, #0]
 2219 0128 4FF00003 		mov	r3, #0
 2220 012c 0193     		str	r3, [sp, #4]
 2221 012e 4FF00003 		mov	r3, #0
 2222 0132 0293     		str	r3, [sp, #8]
 2223 0134 4FF00003 		mov	r3, #0
 2224 0138 0393     		str	r3, [sp, #12]
 2225 013a 40F20000 		movw	r0, #:lower16:vMEMSTask
 2226 013e C0F20000 		movt	r0, #:upper16:vMEMSTask
 2227 0142 40F20001 		movw	r1, #:lower16:.LC5
 2228 0146 C0F20001 		movt	r1, #:upper16:.LC5
 2229 014a 4FF48072 		mov	r2, #256
 2230 014e 4FF00003 		mov	r3, #0
 2231 0152 FFF7FEFF 		bl	xTaskGenericCreate
 191:src/main.c    **** 
 192:src/main.c    **** 	/* Start the scheduler. */
 193:src/main.c    **** 	vTaskStartScheduler();
 2232              		.loc 2 193 0
 2233 0156 FFF7FEFF 		bl	vTaskStartScheduler
 194:src/main.c    **** 
 195:src/main.c    **** 	/* Will only get here if there was not enough heap space to create the idle task. */
 196:src/main.c    **** 	return 0;  
 2234              		.loc 2 196 0
 2235 015a 4FF00003 		mov	r3, #0
 197:src/main.c    **** }
 2236              		.loc 2 197 0
 2237 015e 1846     		mov	r0, r3
 2238 0160 BD46     		mov	sp, r7
 2239 0162 80BD     		pop	{r7, pc}
 2240              		.cfi_endproc
 2241              	.LFE132:
 2243              		.section	.text.UsartTask,"ax",%progbits
 2244              		.align	2
 2245              		.thumb
 2246              		.thumb_func
 2248              	UsartTask:
 2249              	.LFB133:
 198:src/main.c    **** 
 199:src/main.c    **** 
 200:src/main.c    **** 
 201:src/main.c    **** /* Task functions ------------------------------------------------- */
 202:src/main.c    **** 
 203:src/main.c    **** //Task For Sending Data Via USART
 204:src/main.c    **** static void UsartTask(void *pvParameters)
 205:src/main.c    **** {
 2250              		.loc 2 205 0
 2251              		.cfi_startproc
 2252              		@ args = 0, pretend = 0, frame = 112
 2253              		@ frame_needed = 1, uses_anonymous_args = 0
 2254 0000 80B5     		push	{r7, lr}
 2255              	.LCFI71:
 2256              		.cfi_def_cfa_offset 8
 2257              		.cfi_offset 14, -4
 2258              		.cfi_offset 7, -8
 2259 0002 9CB0     		sub	sp, sp, #112
 2260              	.LCFI72:
 2261              		.cfi_def_cfa_offset 120
 2262 0004 00AF     		add	r7, sp, #0
 2263              	.LCFI73:
 2264              		.cfi_def_cfa_register 7
 2265 0006 7860     		str	r0, [r7, #4]
 2266              	.LBB3:
 206:src/main.c    **** 	//Variable to store received data	
 207:src/main.c    **** 	uint32_t Data;
 208:src/main.c    **** 	uint8_t curr_char;	
 209:src/main.c    **** 
 210:src/main.c    **** 	while(1) {
 211:src/main.c    **** 
 212:src/main.c    **** 	
 213:src/main.c    **** 		serial_str_msg msg;
 214:src/main.c    **** 
 215:src/main.c    **** 		while (!xQueueReceive(xQueueUARTSend , &msg, portMAX_DELAY));
 2267              		.loc 2 215 0
 2268 0008 FFE7     		b	.L119
 2269              	.L118:
 2270              	.L119:
 2271 000a 00BF     		nop
 2272              	.L113:
 2273              		.loc 2 215 0 is_stmt 0 discriminator 1
 2274 000c 40F20003 		movw	r3, #:lower16:xQueueUARTSend
 2275 0010 C0F20003 		movt	r3, #:upper16:xQueueUARTSend
 2276 0014 1B68     		ldr	r3, [r3, #0]
 2277 0016 1846     		mov	r0, r3
 2278 0018 07F10803 		add	r3, r7, #8
 2279 001c 1946     		mov	r1, r3
 2280 001e 4FF0FF32 		mov	r2, #-1
 2281 0022 4FF00003 		mov	r3, #0
 2282 0026 FFF7FEFF 		bl	xQueueGenericReceive
 2283 002a 0346     		mov	r3, r0
 2284 002c 002B     		cmp	r3, #0
 2285 002e EDD0     		beq	.L113
 216:src/main.c    **** 
 217:src/main.c    **** 		/* Write each character of the message to the RS232 port. */
 218:src/main.c    **** 		curr_char = 0;
 2286              		.loc 2 218 0 is_stmt 1
 2287 0030 4FF00003 		mov	r3, #0
 2288 0034 87F86F30 		strb	r3, [r7, #111]
 219:src/main.c    **** 		while (msg.str[curr_char] != '\0') {
 2289              		.loc 2 219 0
 2290 0038 1FE0     		b	.L114
 2291              	.L120:
 220:src/main.c    **** 			//Wait till the flag resets
 221:src/main.c    **** 			while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
 2292              		.loc 2 221 0
 2293 003a 00BF     		nop
 2294              	.L115:
 2295              		.loc 2 221 0 is_stmt 0 discriminator 1
 2296 003c 4FF48840 		mov	r0, #17408
 2297 0040 C4F20000 		movt	r0, 16384
 2298 0044 4FF08001 		mov	r1, #128
 2299 0048 FFF7FEFF 		bl	USART_GetFlagStatus
 2300 004c 0346     		mov	r3, r0
 2301 004e 002B     		cmp	r3, #0
 2302 0050 F4D0     		beq	.L115
 222:src/main.c    **** 			//Send the data
 223:src/main.c    **** 			USART_SendData(USART2, msg.str[curr_char]); // Send Char from queue
 2303              		.loc 2 223 0 is_stmt 1
 2304 0052 97F86F30 		ldrb	r3, [r7, #111]	@ zero_extendqisi2
 2305 0056 07F17002 		add	r2, r7, #112
 2306 005a D318     		adds	r3, r2, r3
 2307 005c 13F8683C 		ldrb	r3, [r3, #-104]	@ zero_extendqisi2
 2308 0060 4FF48840 		mov	r0, #17408
 2309 0064 C4F20000 		movt	r0, 16384
 2310 0068 1946     		mov	r1, r3
 2311 006a FFF7FEFF 		bl	USART_SendData
 224:src/main.c    **** 			curr_char++;
 2312              		.loc 2 224 0
 2313 006e 97F86F30 		ldrb	r3, [r7, #111]
 2314 0072 03F10103 		add	r3, r3, #1
 2315 0076 87F86F30 		strb	r3, [r7, #111]
 2316              	.L114:
 219:src/main.c    **** 		while (msg.str[curr_char] != '\0') {
 2317              		.loc 2 219 0 discriminator 1
 2318 007a 97F86F30 		ldrb	r3, [r7, #111]	@ zero_extendqisi2
 2319 007e 07F17002 		add	r2, r7, #112
 2320 0082 D318     		adds	r3, r2, r3
 2321 0084 13F8683C 		ldrb	r3, [r3, #-104]	@ zero_extendqisi2
 2322 0088 002B     		cmp	r3, #0
 2323 008a D6D1     		bne	.L120
 2324              	.LBE3:
 225:src/main.c    **** 		}
 226:src/main.c    **** 	}
 2325              		.loc 2 226 0
 2326 008c BDE7     		b	.L118
 2327              		.cfi_endproc
 2328              	.LFE133:
 2330 008e 00BF     		.section	.rodata
 2331 0032 0000     		.align	2
 2332              	.LC6:
 2333 0034 256300   		.ascii	"%c\000"
 2334 0037 00       		.section	.text.Usartrecive,"ax",%progbits
 2335              		.align	2
 2336              		.thumb
 2337              		.thumb_func
 2339              	Usartrecive:
 2340              	.LFB134:
 227:src/main.c    **** 
 228:src/main.c    **** 	while(1);
 229:src/main.c    **** }
 230:src/main.c    **** 
 231:src/main.c    **** //Task For Sending Data Via USART
 232:src/main.c    **** static void Usartrecive(void *pvParameters)
 233:src/main.c    **** {
 2341              		.loc 2 233 0
 2342              		.cfi_startproc
 2343              		@ args = 0, pretend = 0, frame = 112
 2344              		@ frame_needed = 1, uses_anonymous_args = 0
 2345 0000 80B5     		push	{r7, lr}
 2346              	.LCFI74:
 2347              		.cfi_def_cfa_offset 8
 2348              		.cfi_offset 14, -4
 2349              		.cfi_offset 7, -8
 2350 0002 9CB0     		sub	sp, sp, #112
 2351              	.LCFI75:
 2352              		.cfi_def_cfa_offset 120
 2353 0004 00AF     		add	r7, sp, #0
 2354              	.LCFI76:
 2355              		.cfi_def_cfa_register 7
 2356 0006 7860     		str	r0, [r7, #4]
 2357              	.LBB4:
 234:src/main.c    **** 	//Variable to store received data	
 235:src/main.c    **** 	uint32_t Data;
 236:src/main.c    **** 	uint8_t curr_char;	
 237:src/main.c    **** 
 238:src/main.c    **** 	while(1) {
 239:src/main.c    **** 
 240:src/main.c    **** 	
 241:src/main.c    **** 		serial_str_msg msg;
 242:src/main.c    **** 		//Wait for character
 243:src/main.c    **** 		 while(USART_GetFlagStatus(USART2, USART_FLAG_RXNE) == RESET) {
 2358              		.loc 2 243 0
 2359 0008 10E0     		b	.L122
 2360              	.L123:
 244:src/main.c    ****   		           if (USART_GetFlagStatus(USART2, (USART_FLAG_ORE | USART_FLAG_NE | USART_FLAG_FE | US
 2361              		.loc 2 244 0
 2362 000a 4FF48840 		mov	r0, #17408
 2363 000e C4F20000 		movt	r0, 16384
 2364 0012 4FF00F01 		mov	r1, #15
 2365 0016 FFF7FEFF 		bl	USART_GetFlagStatus
 2366 001a 0346     		mov	r3, r0
 2367 001c 002B     		cmp	r3, #0
 2368 001e 05D0     		beq	.L122
 245:src/main.c    **** 		 		USART_ReceiveData(USART2); // Clear Error
 2369              		.loc 2 245 0
 2370 0020 4FF48840 		mov	r0, #17408
 2371 0024 C4F20000 		movt	r0, 16384
 2372 0028 FFF7FEFF 		bl	USART_ReceiveData
 2373              	.L122:
 243:src/main.c    **** 		 while(USART_GetFlagStatus(USART2, USART_FLAG_RXNE) == RESET) {
 2374              		.loc 2 243 0 discriminator 1
 2375 002c 4FF48840 		mov	r0, #17408
 2376 0030 C4F20000 		movt	r0, 16384
 2377 0034 4FF02001 		mov	r1, #32
 2378 0038 FFF7FEFF 		bl	USART_GetFlagStatus
 2379 003c 0346     		mov	r3, r0
 2380 003e 002B     		cmp	r3, #0
 2381 0040 E3D0     		beq	.L123
 246:src/main.c    **** 		 }
 247:src/main.c    **** 
 248:src/main.c    **** 		//Collect the caracter
 249:src/main.c    **** 		Data = USART_ReceiveData(USART2);
 2382              		.loc 2 249 0
 2383 0042 4FF48840 		mov	r0, #17408
 2384 0046 C4F20000 		movt	r0, 16384
 2385 004a FFF7FEFF 		bl	USART_ReceiveData
 2386 004e 0346     		mov	r3, r0
 2387 0050 FB66     		str	r3, [r7, #108]
 250:src/main.c    **** 		qprintf(xQueueUARTRecvie, "%c", Data); 
 2388              		.loc 2 250 0
 2389 0052 40F20003 		movw	r3, #:lower16:xQueueUARTRecvie
 2390 0056 C0F20003 		movt	r3, #:upper16:xQueueUARTRecvie
 2391 005a 1B68     		ldr	r3, [r3, #0]
 2392 005c 1846     		mov	r0, r3
 2393 005e 40F20001 		movw	r1, #:lower16:.LC6
 2394 0062 C0F20001 		movt	r1, #:upper16:.LC6
 2395 0066 FA6E     		ldr	r2, [r7, #108]
 2396 0068 FFF7FEFF 		bl	qprintf
 2397              	.LBE4:
 251:src/main.c    **** 		
 252:src/main.c    **** 			}
 2398              		.loc 2 252 0
 2399 006c 00BF     		nop
 2400              	.LBB5:
 243:src/main.c    **** 		 while(USART_GetFlagStatus(USART2, USART_FLAG_RXNE) == RESET) {
 2401              		.loc 2 243 0
 2402 006e DDE7     		b	.L122
 2403              	.LBE5:
 2404              		.cfi_endproc
 2405              	.LFE134:
 2407              		.section	.text.vMEMSTask,"ax",%progbits
 2408              		.align	2
 2409              		.thumb
 2410              		.thumb_func
 2412              	vMEMSTask:
 2413              	.LFB135:
 253:src/main.c    **** 
 254:src/main.c    **** 	while(1);
 255:src/main.c    **** }
 256:src/main.c    **** 
 257:src/main.c    **** 
 258:src/main.c    **** void vMEMSTask(void *pvParameters)
 259:src/main.c    **** {
 2414              		.loc 2 259 0
 2415              		.cfi_startproc
 2416              		@ args = 0, pretend = 0, frame = 72
 2417              		@ frame_needed = 1, uses_anonymous_args = 0
 2418 0000 80B5     		push	{r7, lr}
 2419              	.LCFI77:
 2420              		.cfi_def_cfa_offset 8
 2421              		.cfi_offset 14, -4
 2422              		.cfi_offset 7, -8
 2423 0002 92B0     		sub	sp, sp, #72
 2424              	.LCFI78:
 2425              		.cfi_def_cfa_offset 80
 2426 0004 00AF     		add	r7, sp, #0
 2427              	.LCFI79:
 2428              		.cfi_def_cfa_register 7
 2429 0006 7860     		str	r0, [r7, #4]
 260:src/main.c    **** 	/* queue for MEMS data length */
 261:src/main.c    ****     volatile int *LED;
 262:src/main.c    ****     LED = (int *) pvParameters;
 2430              		.loc 2 262 0
 2431 0008 7B68     		ldr	r3, [r7, #4]
 2432 000a 3B64     		str	r3, [r7, #64]
 263:src/main.c    **** 
 264:src/main.c    **** 	uint8_t Buffer_Hx[1];
 265:src/main.c    **** 	uint8_t Buffer_Hy[1];
 266:src/main.c    **** 	uint8_t Buffer_Hz[1];
 267:src/main.c    **** 	uint8_t Buffer_Lx[1];
 268:src/main.c    **** 	uint8_t Buffer_Ly[1];
 269:src/main.c    **** 	uint8_t Buffer_Lz[1];
 270:src/main.c    **** 
 271:src/main.c    **** 	uint8_t counter  = 0;
 2433              		.loc 2 271 0
 2434 000c 4FF00003 		mov	r3, #0
 2435 0010 87F84730 		strb	r3, [r7, #71]
 272:src/main.c    **** 
 273:src/main.c    **** 	__IO float XOffset;
 274:src/main.c    **** 	__IO float YOffset;
 275:src/main.c    **** 	__IO float ZOffset;
 276:src/main.c    **** 
 277:src/main.c    **** 	int16_t temp4 = 0;
 2436              		.loc 2 277 0
 2437 0014 4FF00003 		mov	r3, #0
 2438 0018 FB87     		strh	r3, [r7, #62]	@ movhi
 278:src/main.c    **** 	int16_t temp5 = 0;
 2439              		.loc 2 278 0
 2440 001a 4FF00003 		mov	r3, #0
 2441 001e BB87     		strh	r3, [r7, #60]	@ movhi
 279:src/main.c    **** 	int16_t temp6 = 0;
 2442              		.loc 2 279 0
 2443 0020 4FF00003 		mov	r3, #0
 2444 0024 7B87     		strh	r3, [r7, #58]	@ movhi
 280:src/main.c    **** 
 281:src/main.c    **** 	float x;
 282:src/main.c    **** 	float y;
 283:src/main.c    **** 	float z;
 284:src/main.c    **** 
 285:src/main.c    **** 	/* reset offset */
 286:src/main.c    ****   		LIS3DSH_Read(Buffer_Hx, LIS3DSH_OUT_X_H_REG_ADDR, 1);
 2445              		.loc 2 286 0
 2446 0026 07F12803 		add	r3, r7, #40
 2447 002a 1846     		mov	r0, r3
 2448 002c 4FF02901 		mov	r1, #41
 2449 0030 4FF00102 		mov	r2, #1
 2450 0034 FFF7FEFF 		bl	LIS3DSH_Read
 287:src/main.c    **** 		LIS3DSH_Read(Buffer_Hy, LIS3DSH_OUT_Y_H_REG_ADDR, 1);
 2451              		.loc 2 287 0
 2452 0038 07F12403 		add	r3, r7, #36
 2453 003c 1846     		mov	r0, r3
 2454 003e 4FF02B01 		mov	r1, #43
 2455 0042 4FF00102 		mov	r2, #1
 2456 0046 FFF7FEFF 		bl	LIS3DSH_Read
 288:src/main.c    **** 		LIS3DSH_Read(Buffer_Hz, LIS3DSH_OUT_Z_H_REG_ADDR, 1);
 2457              		.loc 2 288 0
 2458 004a 07F12003 		add	r3, r7, #32
 2459 004e 1846     		mov	r0, r3
 2460 0050 4FF02D01 		mov	r1, #45
 2461 0054 4FF00102 		mov	r2, #1
 2462 0058 FFF7FEFF 		bl	LIS3DSH_Read
 289:src/main.c    ****   		LIS3DSH_Read(Buffer_Lx, LIS3DSH_OUT_X_L_REG_ADDR, 1);
 2463              		.loc 2 289 0
 2464 005c 07F11C03 		add	r3, r7, #28
 2465 0060 1846     		mov	r0, r3
 2466 0062 4FF02801 		mov	r1, #40
 2467 0066 4FF00102 		mov	r2, #1
 2468 006a FFF7FEFF 		bl	LIS3DSH_Read
 290:src/main.c    **** 		LIS3DSH_Read(Buffer_Ly, LIS3DSH_OUT_Y_L_REG_ADDR, 1);
 2469              		.loc 2 290 0
 2470 006e 07F11803 		add	r3, r7, #24
 2471 0072 1846     		mov	r0, r3
 2472 0074 4FF02A01 		mov	r1, #42
 2473 0078 4FF00102 		mov	r2, #1
 2474 007c FFF7FEFF 		bl	LIS3DSH_Read
 291:src/main.c    **** 		LIS3DSH_Read(Buffer_Lz, LIS3DSH_OUT_Z_L_REG_ADDR, 1);
 2475              		.loc 2 291 0
 2476 0080 07F11403 		add	r3, r7, #20
 2477 0084 1846     		mov	r0, r3
 2478 0086 4FF02C01 		mov	r1, #44
 2479 008a 4FF00102 		mov	r2, #1
 2480 008e FFF7FEFF 		bl	LIS3DSH_Read
 292:src/main.c    **** 
 293:src/main.c    **** 	    /* Update autoreload and capture compare registers value*/
 294:src/main.c    **** 
 295:src/main.c    **** 	    temp4 = (int16_t)((Buffer_Hx[0]<<8) | (Buffer_Lx[0]));
 2481              		.loc 2 295 0
 2482 0092 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 2483 0096 4FEA0323 		lsl	r3, r3, #8
 2484 009a 9AB2     		uxth	r2, r3
 2485 009c 3B7F     		ldrb	r3, [r7, #28]	@ zero_extendqisi2
 2486 009e 1343     		orrs	r3, r3, r2
 2487 00a0 FB87     		strh	r3, [r7, #62]	@ movhi
 296:src/main.c    **** 	    temp5 = (int16_t)((Buffer_Hy[0]<<8) | (Buffer_Ly[0]));
 2488              		.loc 2 296 0
 2489 00a2 97F82430 		ldrb	r3, [r7, #36]	@ zero_extendqisi2
 2490 00a6 4FEA0323 		lsl	r3, r3, #8
 2491 00aa 9AB2     		uxth	r2, r3
 2492 00ac 3B7E     		ldrb	r3, [r7, #24]	@ zero_extendqisi2
 2493 00ae 1343     		orrs	r3, r3, r2
 2494 00b0 BB87     		strh	r3, [r7, #60]	@ movhi
 297:src/main.c    **** 	    temp6 = (int16_t)((Buffer_Hz[0]<<8) | (Buffer_Lz[0]));
 2495              		.loc 2 297 0
 2496 00b2 97F82030 		ldrb	r3, [r7, #32]	@ zero_extendqisi2
 2497 00b6 4FEA0323 		lsl	r3, r3, #8
 2498 00ba 9AB2     		uxth	r2, r3
 2499 00bc 3B7D     		ldrb	r3, [r7, #20]	@ zero_extendqisi2
 2500 00be 1343     		orrs	r3, r3, r2
 2501 00c0 7B87     		strh	r3, [r7, #58]	@ movhi
 298:src/main.c    **** 
 299:src/main.c    **** 		x = ((float)temp4)*9.8 / 16000;
 2502              		.loc 2 299 0
 2503 00c2 B7F93E30 		ldrsh	r3, [r7, #62]
 2504 00c6 07EE903A 		fmsr	s15, r3	@ int
 2505 00ca B8EEE77A 		fsitos	s14, s15
 2506 00ce DFED187A 		flds	s15, .L142
 2507 00d2 67EE277A 		fmuls	s15, s14, s15
 2508 00d6 9FED177A 		flds	s14, .L142+4
 2509 00da C7EE877A 		fdivs	s15, s15, s14
 2510 00de C7ED0D7A 		fsts	s15, [r7, #52]
 300:src/main.c    **** 		y = ((float)temp5)*9.8 / 16000;
 2511              		.loc 2 300 0
 2512 00e2 B7F93C30 		ldrsh	r3, [r7, #60]
 2513 00e6 07EE903A 		fmsr	s15, r3	@ int
 2514 00ea B8EEE77A 		fsitos	s14, s15
 2515 00ee DFED107A 		flds	s15, .L142
 2516 00f2 67EE277A 		fmuls	s15, s14, s15
 2517 00f6 9FED0F7A 		flds	s14, .L142+4
 2518 00fa C7EE877A 		fdivs	s15, s15, s14
 2519 00fe C7ED0C7A 		fsts	s15, [r7, #48]
 301:src/main.c    **** 		z = ((float)temp6)*9.8 / 16000;
 2520              		.loc 2 301 0
 2521 0102 B7F93A30 		ldrsh	r3, [r7, #58]
 2522 0106 07EE903A 		fmsr	s15, r3	@ int
 2523 010a B8EEE77A 		fsitos	s14, s15
 2524 010e DFED087A 		flds	s15, .L142
 2525 0112 67EE277A 		fmuls	s15, s14, s15
 2526 0116 9FED077A 		flds	s14, .L142+4
 2527 011a C7EE877A 		fdivs	s15, s15, s14
 2528 011e C7ED0B7A 		fsts	s15, [r7, #44]
 302:src/main.c    **** 
 303:src/main.c    ****   	XOffset = x;
 2529              		.loc 2 303 0
 2530 0122 7B6B     		ldr	r3, [r7, #52]	@ float
 2531 0124 3B61     		str	r3, [r7, #16]	@ float
 304:src/main.c    ****  	YOffset = y;
 2532              		.loc 2 304 0
 2533 0126 3B6B     		ldr	r3, [r7, #48]	@ float
 2534 0128 FB60     		str	r3, [r7, #12]	@ float
 305:src/main.c    ****   	ZOffset = z;
 2535              		.loc 2 305 0
 2536 012a FB6A     		ldr	r3, [r7, #44]	@ float
 2537 012c BB60     		str	r3, [r7, #8]	@ float
 2538 012e 04E0     		b	.L140
 2539              	.L143:
 2540              		.align	2
 2541              	.L142:
 2542 0130 CDCC1C41 		.word	1092406477
 2543 0134 00007A46 		.word	1182400512
 2544              	.L141:
 306:src/main.c    **** 
 307:src/main.c    **** 	/* reset */
 308:src/main.c    **** 
 309:src/main.c    **** 	for( ;; )
 310:src/main.c    **** 	{
 311:src/main.c    **** 		counter++;
 312:src/main.c    **** 		if (counter == 10)
 313:src/main.c    **** 		{
 314:src/main.c    **** 
 315:src/main.c    ****   		LIS3DSH_Read(Buffer_Hx, LIS3DSH_OUT_X_H_REG_ADDR, 1);
 316:src/main.c    **** 		LIS3DSH_Read(Buffer_Hy, LIS3DSH_OUT_Y_H_REG_ADDR, 1);
 317:src/main.c    **** 		LIS3DSH_Read(Buffer_Hz, LIS3DSH_OUT_Z_H_REG_ADDR, 1);
 318:src/main.c    ****   		LIS3DSH_Read(Buffer_Lx, LIS3DSH_OUT_X_L_REG_ADDR, 1);
 319:src/main.c    **** 		LIS3DSH_Read(Buffer_Ly, LIS3DSH_OUT_Y_L_REG_ADDR, 1);
 320:src/main.c    **** 		LIS3DSH_Read(Buffer_Lz, LIS3DSH_OUT_Z_L_REG_ADDR, 1);
 321:src/main.c    **** 
 322:src/main.c    **** 	    /* Update autoreload and capture compare registers value*/
 323:src/main.c    **** 
 324:src/main.c    **** 	    temp4 = (int16_t)((Buffer_Hx[0]<<8) | (Buffer_Lx[0]));
 325:src/main.c    **** 	    temp5 = (int16_t)((Buffer_Hy[0]<<8) | (Buffer_Ly[0]));
 326:src/main.c    **** 	    temp6 = (int16_t)((Buffer_Hz[0]<<8) | (Buffer_Lz[0]));
 327:src/main.c    **** 
 328:src/main.c    **** 		x = ((float)temp4)*9.8 / 16000;
 329:src/main.c    **** 		y = ((float)temp5)*9.8 / 16000;
 330:src/main.c    **** 		z = ((float)temp6)*9.8 / 16000;
 331:src/main.c    **** 
 332:src/main.c    ****             
 333:src/main.c    **** 	    x -= XOffset;
 334:src/main.c    **** 	    y -= YOffset;
 335:src/main.c    **** 	    z -= ZOffset;
 336:src/main.c    **** 		  
 337:src/main.c    **** 		//qprintf(xQueueUARTSend, "abcdefghijklmn1234567890\n\r");  
 338:src/main.c    **** 		//qprintf(xQueueUARTSend, "x: %d, y: %d, z: %d\n\r", (int8_t)Buffer_x[0], (int8_t)Buffer_y[0], (i
 339:src/main.c    **** 		//qprintf(xQueueUARTSend, "x: %d, y: %d, z: %d\n\r", x, y, z);
 340:src/main.c    **** 		//qprintf(xQueueUARTSend, "x: %d, y: %d, z: %d\n\r", (int)x, (int)y, (int)z);
 341:src/main.c    **** 		
 342:src/main.c    **** 		if(((int)x != 0) || ((int)y != 0))
 343:src/main.c    **** 		{
 344:src/main.c    ****                 if ((int)x < -G)
 345:src/main.c    ****                 {
 346:src/main.c    ****                     STM_EVAL_LEDOn(LED4);
 347:src/main.c    ****                     if ((int)x<= G){STM_EVAL_LEDOff(LED3);}
 348:src/main.c    ****                     if ((int)y <= G){STM_EVAL_LEDOff(LED6);}
 349:src/main.c    ****                     if ((int)y >= -G){STM_EVAL_LEDOff(LED5);}
 350:src/main.c    ****                 }
 351:src/main.c    ****                 if ((int)x > G)
 352:src/main.c    ****                 {
 353:src/main.c    ****                     STM_EVAL_LEDOn(LED5);
 354:src/main.c    ****                     if ((int)y <= G){STM_EVAL_LEDOff(LED4);}
 355:src/main.c    ****                     if ((int)y >= -G){STM_EVAL_LEDOff(LED3);}
 356:src/main.c    ****                     if ((int)x >= -G){STM_EVAL_LEDOff(LED6);}
 357:src/main.c    ****                 }
 358:src/main.c    ****                 if ((int)y > G)
 359:src/main.c    ****                 {
 360:src/main.c    ****                     STM_EVAL_LEDOn(LED3);
 361:src/main.c    ****                     if ((int)x <= G){STM_EVAL_LEDOff(LED4);}
 362:src/main.c    ****                     if ((int)y >= -G){STM_EVAL_LEDOff(LED5);}
 363:src/main.c    ****                     if ((int)x >= -G){STM_EVAL_LEDOff(LED6);}
 364:src/main.c    ****                 }
 365:src/main.c    ****                 if ((int)y < -G)
 366:src/main.c    ****                 {
 367:src/main.c    ****                     STM_EVAL_LEDOn(LED6);
 368:src/main.c    **** 				    if ((int)x <= G){STM_EVAL_LEDOff(LED3);}
 369:src/main.c    ****                     if ((int)y <= G){STM_EVAL_LEDOff(LED4);}
 370:src/main.c    ****                     if ((int)x >= -G){STM_EVAL_LEDOff(LED5);}
 371:src/main.c    ****                 }
 372:src/main.c    ****                 counter = 0x00;
 373:src/main.c    **** 
 374:src/main.c    **** 	    }
 375:src/main.c    **** 	  }
 376:src/main.c    **** 	}
 2545              		.loc 2 376 0
 2546 0138 00BF     		nop
 2547              	.L140:
 311:src/main.c    **** 		counter++;
 2548              		.loc 2 311 0
 2549 013a 97F84730 		ldrb	r3, [r7, #71]
 2550 013e 03F10103 		add	r3, r3, #1
 2551 0142 87F84730 		strb	r3, [r7, #71]
 312:src/main.c    **** 		if (counter == 10)
 2552              		.loc 2 312 0
 2553 0146 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 2554 014a 0A2B     		cmp	r3, #10
 2555 014c F4D1     		bne	.L141
 315:src/main.c    ****   		LIS3DSH_Read(Buffer_Hx, LIS3DSH_OUT_X_H_REG_ADDR, 1);
 2556              		.loc 2 315 0
 2557 014e 07F12803 		add	r3, r7, #40
 2558 0152 1846     		mov	r0, r3
 2559 0154 4FF02901 		mov	r1, #41
 2560 0158 4FF00102 		mov	r2, #1
 2561 015c FFF7FEFF 		bl	LIS3DSH_Read
 316:src/main.c    **** 		LIS3DSH_Read(Buffer_Hy, LIS3DSH_OUT_Y_H_REG_ADDR, 1);
 2562              		.loc 2 316 0
 2563 0160 07F12403 		add	r3, r7, #36
 2564 0164 1846     		mov	r0, r3
 2565 0166 4FF02B01 		mov	r1, #43
 2566 016a 4FF00102 		mov	r2, #1
 2567 016e FFF7FEFF 		bl	LIS3DSH_Read
 317:src/main.c    **** 		LIS3DSH_Read(Buffer_Hz, LIS3DSH_OUT_Z_H_REG_ADDR, 1);
 2568              		.loc 2 317 0
 2569 0172 07F12003 		add	r3, r7, #32
 2570 0176 1846     		mov	r0, r3
 2571 0178 4FF02D01 		mov	r1, #45
 2572 017c 4FF00102 		mov	r2, #1
 2573 0180 FFF7FEFF 		bl	LIS3DSH_Read
 318:src/main.c    ****   		LIS3DSH_Read(Buffer_Lx, LIS3DSH_OUT_X_L_REG_ADDR, 1);
 2574              		.loc 2 318 0
 2575 0184 07F11C03 		add	r3, r7, #28
 2576 0188 1846     		mov	r0, r3
 2577 018a 4FF02801 		mov	r1, #40
 2578 018e 4FF00102 		mov	r2, #1
 2579 0192 FFF7FEFF 		bl	LIS3DSH_Read
 319:src/main.c    **** 		LIS3DSH_Read(Buffer_Ly, LIS3DSH_OUT_Y_L_REG_ADDR, 1);
 2580              		.loc 2 319 0
 2581 0196 07F11803 		add	r3, r7, #24
 2582 019a 1846     		mov	r0, r3
 2583 019c 4FF02A01 		mov	r1, #42
 2584 01a0 4FF00102 		mov	r2, #1
 2585 01a4 FFF7FEFF 		bl	LIS3DSH_Read
 320:src/main.c    **** 		LIS3DSH_Read(Buffer_Lz, LIS3DSH_OUT_Z_L_REG_ADDR, 1);
 2586              		.loc 2 320 0
 2587 01a8 07F11403 		add	r3, r7, #20
 2588 01ac 1846     		mov	r0, r3
 2589 01ae 4FF02C01 		mov	r1, #44
 2590 01b2 4FF00102 		mov	r2, #1
 2591 01b6 FFF7FEFF 		bl	LIS3DSH_Read
 324:src/main.c    **** 	    temp4 = (int16_t)((Buffer_Hx[0]<<8) | (Buffer_Lx[0]));
 2592              		.loc 2 324 0
 2593 01ba 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 2594 01be 4FEA0323 		lsl	r3, r3, #8
 2595 01c2 9AB2     		uxth	r2, r3
 2596 01c4 3B7F     		ldrb	r3, [r7, #28]	@ zero_extendqisi2
 2597 01c6 1343     		orrs	r3, r3, r2
 2598 01c8 FB87     		strh	r3, [r7, #62]	@ movhi
 325:src/main.c    **** 	    temp5 = (int16_t)((Buffer_Hy[0]<<8) | (Buffer_Ly[0]));
 2599              		.loc 2 325 0
 2600 01ca 97F82430 		ldrb	r3, [r7, #36]	@ zero_extendqisi2
 2601 01ce 4FEA0323 		lsl	r3, r3, #8
 2602 01d2 9AB2     		uxth	r2, r3
 2603 01d4 3B7E     		ldrb	r3, [r7, #24]	@ zero_extendqisi2
 2604 01d6 1343     		orrs	r3, r3, r2
 2605 01d8 BB87     		strh	r3, [r7, #60]	@ movhi
 326:src/main.c    **** 	    temp6 = (int16_t)((Buffer_Hz[0]<<8) | (Buffer_Lz[0]));
 2606              		.loc 2 326 0
 2607 01da 97F82030 		ldrb	r3, [r7, #32]	@ zero_extendqisi2
 2608 01de 4FEA0323 		lsl	r3, r3, #8
 2609 01e2 9AB2     		uxth	r2, r3
 2610 01e4 3B7D     		ldrb	r3, [r7, #20]	@ zero_extendqisi2
 2611 01e6 1343     		orrs	r3, r3, r2
 2612 01e8 7B87     		strh	r3, [r7, #58]	@ movhi
 328:src/main.c    **** 		x = ((float)temp4)*9.8 / 16000;
 2613              		.loc 2 328 0
 2614 01ea B7F93E30 		ldrsh	r3, [r7, #62]
 2615 01ee 07EE903A 		fmsr	s15, r3	@ int
 2616 01f2 B8EEE77A 		fsitos	s14, s15
 2617 01f6 5FED327A 		flds	s15, .L142
 2618 01fa 67EE277A 		fmuls	s15, s14, s15
 2619 01fe 1FED337A 		flds	s14, .L142+4
 2620 0202 C7EE877A 		fdivs	s15, s15, s14
 2621 0206 C7ED0D7A 		fsts	s15, [r7, #52]
 329:src/main.c    **** 		y = ((float)temp5)*9.8 / 16000;
 2622              		.loc 2 329 0
 2623 020a B7F93C30 		ldrsh	r3, [r7, #60]
 2624 020e 07EE903A 		fmsr	s15, r3	@ int
 2625 0212 B8EEE77A 		fsitos	s14, s15
 2626 0216 5FED3A7A 		flds	s15, .L142
 2627 021a 67EE277A 		fmuls	s15, s14, s15
 2628 021e 1FED3B7A 		flds	s14, .L142+4
 2629 0222 C7EE877A 		fdivs	s15, s15, s14
 2630 0226 C7ED0C7A 		fsts	s15, [r7, #48]
 330:src/main.c    **** 		z = ((float)temp6)*9.8 / 16000;
 2631              		.loc 2 330 0
 2632 022a B7F93A30 		ldrsh	r3, [r7, #58]
 2633 022e 07EE903A 		fmsr	s15, r3	@ int
 2634 0232 B8EEE77A 		fsitos	s14, s15
 2635 0236 5FED427A 		flds	s15, .L142
 2636 023a 67EE277A 		fmuls	s15, s14, s15
 2637 023e 1FED437A 		flds	s14, .L142+4
 2638 0242 C7EE877A 		fdivs	s15, s15, s14
 2639 0246 C7ED0B7A 		fsts	s15, [r7, #44]
 333:src/main.c    **** 	    x -= XOffset;
 2640              		.loc 2 333 0
 2641 024a D7ED047A 		flds	s15, [r7, #16]
 2642 024e 97ED0D7A 		flds	s14, [r7, #52]
 2643 0252 77EE677A 		fsubs	s15, s14, s15
 2644 0256 C7ED0D7A 		fsts	s15, [r7, #52]
 334:src/main.c    **** 	    y -= YOffset;
 2645              		.loc 2 334 0
 2646 025a D7ED037A 		flds	s15, [r7, #12]
 2647 025e 97ED0C7A 		flds	s14, [r7, #48]
 2648 0262 77EE677A 		fsubs	s15, s14, s15
 2649 0266 C7ED0C7A 		fsts	s15, [r7, #48]
 335:src/main.c    **** 	    z -= ZOffset;
 2650              		.loc 2 335 0
 2651 026a D7ED027A 		flds	s15, [r7, #8]
 2652 026e 97ED0B7A 		flds	s14, [r7, #44]
 2653 0272 77EE677A 		fsubs	s15, s14, s15
 2654 0276 C7ED0B7A 		fsts	s15, [r7, #44]
 342:src/main.c    **** 		if(((int)x != 0) || ((int)y != 0))
 2655              		.loc 2 342 0
 2656 027a D7ED0D7A 		flds	s15, [r7, #52]
 2657 027e FDEEE77A 		ftosizs	s15, s15
 2658 0282 17EE903A 		fmrs	r3, s15	@ int
 2659 0286 002B     		cmp	r3, #0
 2660 0288 08D1     		bne	.L127
 342:src/main.c    **** 		if(((int)x != 0) || ((int)y != 0))
 2661              		.loc 2 342 0 is_stmt 0 discriminator 1
 2662 028a D7ED0C7A 		flds	s15, [r7, #48]
 2663 028e FDEEE77A 		ftosizs	s15, s15
 2664 0292 17EE903A 		fmrs	r3, s15	@ int
 2665 0296 002B     		cmp	r3, #0
 2666 0298 3FF44EAF 		beq	.L141
 2667              	.L127:
 344:src/main.c    ****                 if ((int)x < -G)
 2668              		.loc 2 344 0 is_stmt 1
 2669 029c D7ED0D7A 		flds	s15, [r7, #52]
 2670 02a0 FDEEE77A 		ftosizs	s15, s15
 2671 02a4 17EE903A 		fmrs	r3, s15	@ int
 2672 02a8 13F1020F 		cmn	r3, #2
 2673 02ac 28DA     		bge	.L128
 346:src/main.c    ****                     STM_EVAL_LEDOn(LED4);
 2674              		.loc 2 346 0
 2675 02ae 4FF00000 		mov	r0, #0
 2676 02b2 FFF7FEFF 		bl	STM_EVAL_LEDOn
 347:src/main.c    ****                     if ((int)x<= G){STM_EVAL_LEDOff(LED3);}
 2677              		.loc 2 347 0
 2678 02b6 D7ED0D7A 		flds	s15, [r7, #52]
 2679 02ba FDEEE77A 		ftosizs	s15, s15
 2680 02be 17EE903A 		fmrs	r3, s15	@ int
 2681 02c2 022B     		cmp	r3, #2
 2682 02c4 03DC     		bgt	.L129
 347:src/main.c    ****                     if ((int)x<= G){STM_EVAL_LEDOff(LED3);}
 2683              		.loc 2 347 0 is_stmt 0 discriminator 1
 2684 02c6 4FF00100 		mov	r0, #1
 2685 02ca FFF7FEFF 		bl	STM_EVAL_LEDOff
 2686              	.L129:
 348:src/main.c    ****                     if ((int)y <= G){STM_EVAL_LEDOff(LED6);}
 2687              		.loc 2 348 0 is_stmt 1
 2688 02ce D7ED0C7A 		flds	s15, [r7, #48]
 2689 02d2 FDEEE77A 		ftosizs	s15, s15
 2690 02d6 17EE903A 		fmrs	r3, s15	@ int
 2691 02da 022B     		cmp	r3, #2
 2692 02dc 03DC     		bgt	.L130
 348:src/main.c    ****                     if ((int)y <= G){STM_EVAL_LEDOff(LED6);}
 2693              		.loc 2 348 0 is_stmt 0 discriminator 1
 2694 02de 4FF00300 		mov	r0, #3
 2695 02e2 FFF7FEFF 		bl	STM_EVAL_LEDOff
 2696              	.L130:
 349:src/main.c    ****                     if ((int)y >= -G){STM_EVAL_LEDOff(LED5);}
 2697              		.loc 2 349 0 is_stmt 1
 2698 02e6 D7ED0C7A 		flds	s15, [r7, #48]
 2699 02ea FDEEE77A 		ftosizs	s15, s15
 2700 02ee 17EE903A 		fmrs	r3, s15	@ int
 2701 02f2 13F1020F 		cmn	r3, #2
 2702 02f6 03DB     		blt	.L128
 349:src/main.c    ****                     if ((int)y >= -G){STM_EVAL_LEDOff(LED5);}
 2703              		.loc 2 349 0 is_stmt 0 discriminator 1
 2704 02f8 4FF00200 		mov	r0, #2
 2705 02fc FFF7FEFF 		bl	STM_EVAL_LEDOff
 2706              	.L128:
 351:src/main.c    ****                 if ((int)x > G)
 2707              		.loc 2 351 0 is_stmt 1
 2708 0300 D7ED0D7A 		flds	s15, [r7, #52]
 2709 0304 FDEEE77A 		ftosizs	s15, s15
 2710 0308 17EE903A 		fmrs	r3, s15	@ int
 2711 030c 022B     		cmp	r3, #2
 2712 030e 29DD     		ble	.L131
 353:src/main.c    ****                     STM_EVAL_LEDOn(LED5);
 2713              		.loc 2 353 0
 2714 0310 4FF00200 		mov	r0, #2
 2715 0314 FFF7FEFF 		bl	STM_EVAL_LEDOn
 354:src/main.c    ****                     if ((int)y <= G){STM_EVAL_LEDOff(LED4);}
 2716              		.loc 2 354 0
 2717 0318 D7ED0C7A 		flds	s15, [r7, #48]
 2718 031c FDEEE77A 		ftosizs	s15, s15
 2719 0320 17EE903A 		fmrs	r3, s15	@ int
 2720 0324 022B     		cmp	r3, #2
 2721 0326 03DC     		bgt	.L132
 354:src/main.c    ****                     if ((int)y <= G){STM_EVAL_LEDOff(LED4);}
 2722              		.loc 2 354 0 is_stmt 0 discriminator 1
 2723 0328 4FF00000 		mov	r0, #0
 2724 032c FFF7FEFF 		bl	STM_EVAL_LEDOff
 2725              	.L132:
 355:src/main.c    ****                     if ((int)y >= -G){STM_EVAL_LEDOff(LED3);}
 2726              		.loc 2 355 0 is_stmt 1
 2727 0330 D7ED0C7A 		flds	s15, [r7, #48]
 2728 0334 FDEEE77A 		ftosizs	s15, s15
 2729 0338 17EE903A 		fmrs	r3, s15	@ int
 2730 033c 13F1020F 		cmn	r3, #2
 2731 0340 03DB     		blt	.L133
 355:src/main.c    ****                     if ((int)y >= -G){STM_EVAL_LEDOff(LED3);}
 2732              		.loc 2 355 0 is_stmt 0 discriminator 1
 2733 0342 4FF00100 		mov	r0, #1
 2734 0346 FFF7FEFF 		bl	STM_EVAL_LEDOff
 2735              	.L133:
 356:src/main.c    ****                     if ((int)x >= -G){STM_EVAL_LEDOff(LED6);}
 2736              		.loc 2 356 0 is_stmt 1
 2737 034a D7ED0D7A 		flds	s15, [r7, #52]
 2738 034e FDEEE77A 		ftosizs	s15, s15
 2739 0352 17EE903A 		fmrs	r3, s15	@ int
 2740 0356 13F1020F 		cmn	r3, #2
 2741 035a 03DB     		blt	.L131
 356:src/main.c    ****                     if ((int)x >= -G){STM_EVAL_LEDOff(LED6);}
 2742              		.loc 2 356 0 is_stmt 0 discriminator 1
 2743 035c 4FF00300 		mov	r0, #3
 2744 0360 FFF7FEFF 		bl	STM_EVAL_LEDOff
 2745              	.L131:
 358:src/main.c    ****                 if ((int)y > G)
 2746              		.loc 2 358 0 is_stmt 1
 2747 0364 D7ED0C7A 		flds	s15, [r7, #48]
 2748 0368 FDEEE77A 		ftosizs	s15, s15
 2749 036c 17EE903A 		fmrs	r3, s15	@ int
 2750 0370 022B     		cmp	r3, #2
 2751 0372 29DD     		ble	.L134
 360:src/main.c    ****                     STM_EVAL_LEDOn(LED3);
 2752              		.loc 2 360 0
 2753 0374 4FF00100 		mov	r0, #1
 2754 0378 FFF7FEFF 		bl	STM_EVAL_LEDOn
 361:src/main.c    ****                     if ((int)x <= G){STM_EVAL_LEDOff(LED4);}
 2755              		.loc 2 361 0
 2756 037c D7ED0D7A 		flds	s15, [r7, #52]
 2757 0380 FDEEE77A 		ftosizs	s15, s15
 2758 0384 17EE903A 		fmrs	r3, s15	@ int
 2759 0388 022B     		cmp	r3, #2
 2760 038a 03DC     		bgt	.L135
 361:src/main.c    ****                     if ((int)x <= G){STM_EVAL_LEDOff(LED4);}
 2761              		.loc 2 361 0 is_stmt 0 discriminator 1
 2762 038c 4FF00000 		mov	r0, #0
 2763 0390 FFF7FEFF 		bl	STM_EVAL_LEDOff
 2764              	.L135:
 362:src/main.c    ****                     if ((int)y >= -G){STM_EVAL_LEDOff(LED5);}
 2765              		.loc 2 362 0 is_stmt 1
 2766 0394 D7ED0C7A 		flds	s15, [r7, #48]
 2767 0398 FDEEE77A 		ftosizs	s15, s15
 2768 039c 17EE903A 		fmrs	r3, s15	@ int
 2769 03a0 13F1020F 		cmn	r3, #2
 2770 03a4 03DB     		blt	.L136
 362:src/main.c    ****                     if ((int)y >= -G){STM_EVAL_LEDOff(LED5);}
 2771              		.loc 2 362 0 is_stmt 0 discriminator 1
 2772 03a6 4FF00200 		mov	r0, #2
 2773 03aa FFF7FEFF 		bl	STM_EVAL_LEDOff
 2774              	.L136:
 363:src/main.c    ****                     if ((int)x >= -G){STM_EVAL_LEDOff(LED6);}
 2775              		.loc 2 363 0 is_stmt 1
 2776 03ae D7ED0D7A 		flds	s15, [r7, #52]
 2777 03b2 FDEEE77A 		ftosizs	s15, s15
 2778 03b6 17EE903A 		fmrs	r3, s15	@ int
 2779 03ba 13F1020F 		cmn	r3, #2
 2780 03be 03DB     		blt	.L134
 363:src/main.c    ****                     if ((int)x >= -G){STM_EVAL_LEDOff(LED6);}
 2781              		.loc 2 363 0 is_stmt 0 discriminator 1
 2782 03c0 4FF00300 		mov	r0, #3
 2783 03c4 FFF7FEFF 		bl	STM_EVAL_LEDOff
 2784              	.L134:
 365:src/main.c    ****                 if ((int)y < -G)
 2785              		.loc 2 365 0 is_stmt 1
 2786 03c8 D7ED0C7A 		flds	s15, [r7, #48]
 2787 03cc FDEEE77A 		ftosizs	s15, s15
 2788 03d0 17EE903A 		fmrs	r3, s15	@ int
 2789 03d4 13F1020F 		cmn	r3, #2
 2790 03d8 28DA     		bge	.L137
 367:src/main.c    ****                     STM_EVAL_LEDOn(LED6);
 2791              		.loc 2 367 0
 2792 03da 4FF00300 		mov	r0, #3
 2793 03de FFF7FEFF 		bl	STM_EVAL_LEDOn
 368:src/main.c    **** 				    if ((int)x <= G){STM_EVAL_LEDOff(LED3);}
 2794              		.loc 2 368 0
 2795 03e2 D7ED0D7A 		flds	s15, [r7, #52]
 2796 03e6 FDEEE77A 		ftosizs	s15, s15
 2797 03ea 17EE903A 		fmrs	r3, s15	@ int
 2798 03ee 022B     		cmp	r3, #2
 2799 03f0 03DC     		bgt	.L138
 368:src/main.c    **** 				    if ((int)x <= G){STM_EVAL_LEDOff(LED3);}
 2800              		.loc 2 368 0 is_stmt 0 discriminator 1
 2801 03f2 4FF00100 		mov	r0, #1
 2802 03f6 FFF7FEFF 		bl	STM_EVAL_LEDOff
 2803              	.L138:
 369:src/main.c    ****                     if ((int)y <= G){STM_EVAL_LEDOff(LED4);}
 2804              		.loc 2 369 0 is_stmt 1
 2805 03fa D7ED0C7A 		flds	s15, [r7, #48]
 2806 03fe FDEEE77A 		ftosizs	s15, s15
 2807 0402 17EE903A 		fmrs	r3, s15	@ int
 2808 0406 022B     		cmp	r3, #2
 2809 0408 03DC     		bgt	.L139
 369:src/main.c    ****                     if ((int)y <= G){STM_EVAL_LEDOff(LED4);}
 2810              		.loc 2 369 0 is_stmt 0 discriminator 1
 2811 040a 4FF00000 		mov	r0, #0
 2812 040e FFF7FEFF 		bl	STM_EVAL_LEDOff
 2813              	.L139:
 370:src/main.c    ****                     if ((int)x >= -G){STM_EVAL_LEDOff(LED5);}
 2814              		.loc 2 370 0 is_stmt 1
 2815 0412 D7ED0D7A 		flds	s15, [r7, #52]
 2816 0416 FDEEE77A 		ftosizs	s15, s15
 2817 041a 17EE903A 		fmrs	r3, s15	@ int
 2818 041e 13F1020F 		cmn	r3, #2
 2819 0422 03DB     		blt	.L137
 370:src/main.c    ****                     if ((int)x >= -G){STM_EVAL_LEDOff(LED5);}
 2820              		.loc 2 370 0 is_stmt 0 discriminator 1
 2821 0424 4FF00200 		mov	r0, #2
 2822 0428 FFF7FEFF 		bl	STM_EVAL_LEDOff
 2823              	.L137:
 372:src/main.c    ****                 counter = 0x00;
 2824              		.loc 2 372 0 is_stmt 1
 2825 042c 4FF00003 		mov	r3, #0
 2826 0430 87F84730 		strb	r3, [r7, #71]
 2827              		.loc 2 376 0
 2828 0434 80E6     		b	.L141
 2829              		.cfi_endproc
 2830              	.LFE135:
 2832 0436 00BF     		.section	.text.vApplicationIdleHook,"ax",%progbits
 2833              		.align	2
 2834              		.global	vApplicationIdleHook
 2835              		.thumb
 2836              		.thumb_func
 2838              	vApplicationIdleHook:
 2839              	.LFB136:
 377:src/main.c    **** }
 378:src/main.c    **** 
 379:src/main.c    **** /*-----------------------------------------------------------*/
 380:src/main.c    **** 
 381:src/main.c    **** 
 382:src/main.c    **** 
 383:src/main.c    **** // void vSWITCHTask( void *pvParameters )
 384:src/main.c    **** // {
 385:src/main.c    **** // 	static int i=0;
 386:src/main.c    **** // 	for( ;; )
 387:src/main.c    **** // 	{
 388:src/main.c    **** // 		if(xSemaphoreTake(xSemaphoreSW,( portTickType ) 0) == pdTRUE)
 389:src/main.c    **** // 		{
 390:src/main.c    **** // 			i^=1;		//just switch the state if semaphore was given
 391:src/main.c    **** 
 392:src/main.c    **** // 			if(i==0)	//LED3..LD6 tasks ready, BALANCE, MEMS suspended
 393:src/main.c    **** // 			{
 394:src/main.c    **** // 				vTaskSuspend(xBALANCE_Task);
 395:src/main.c    **** // 				TIM_Cmd(TIM4, DISABLE);
 396:src/main.c    **** // 				vTaskSuspend(xMEMS_Task);
 397:src/main.c    **** // 				prvLED_Config(GPIO);
 398:src/main.c    **** // 				vTaskResume(xLED_Tasks[0]);
 399:src/main.c    **** // 				vTaskResume(xLED_Tasks[1]);
 400:src/main.c    **** // 				vTaskResume(xLED_Tasks[2]);
 401:src/main.c    **** // 				vTaskResume(xLED_Tasks[3]);
 402:src/main.c    **** // 			}
 403:src/main.c    **** // 			else		//MEMS and BALANCE ready, LED tasks suspended
 404:src/main.c    **** // 			{
 405:src/main.c    **** // 				vTaskSuspend(xLED_Tasks[0]);
 406:src/main.c    **** // 				vTaskSuspend(xLED_Tasks[1]);
 407:src/main.c    **** // 				vTaskSuspend(xLED_Tasks[2]);
 408:src/main.c    **** // 				vTaskSuspend(xLED_Tasks[3]);
 409:src/main.c    **** // 				prvLED_Config(TIMER);
 410:src/main.c    **** // 				TIM_Cmd(TIM4, ENABLE);
 411:src/main.c    **** // 				vTaskResume(xBALANCE_Task);
 412:src/main.c    **** // 				vTaskResume(xMEMS_Task);
 413:src/main.c    **** // 			}
 414:src/main.c    **** // 		}
 415:src/main.c    **** // 		taskYIELD(); 	//task is going to ready state to allow next one to run
 416:src/main.c    **** // 	}
 417:src/main.c    **** // }
 418:src/main.c    **** 
 419:src/main.c    **** /*-----------------------------------------------------------*/
 420:src/main.c    **** 
 421:src/main.c    **** void vApplicationIdleHook( void )
 422:src/main.c    **** {
 2840              		.loc 2 422 0
 2841              		.cfi_startproc
 2842              		@ args = 0, pretend = 0, frame = 8
 2843              		@ frame_needed = 1, uses_anonymous_args = 0
 2844 0000 80B5     		push	{r7, lr}
 2845              	.LCFI80:
 2846              		.cfi_def_cfa_offset 8
 2847              		.cfi_offset 14, -4
 2848              		.cfi_offset 7, -8
 2849 0002 82B0     		sub	sp, sp, #8
 2850              	.LCFI81:
 2851              		.cfi_def_cfa_offset 16
 2852 0004 00AF     		add	r7, sp, #0
 2853              	.LCFI82:
 2854              		.cfi_def_cfa_register 7
 423:src/main.c    **** volatile size_t xFreeStackSpace;
 424:src/main.c    **** 
 425:src/main.c    **** 	/* This function is called on each cycle of the idle task.  In this case it
 426:src/main.c    **** 	does nothing useful, other than report the amout of FreeRTOS heap that 
 427:src/main.c    **** 	remains unallocated. */
 428:src/main.c    **** 	xFreeStackSpace = xPortGetFreeHeapSize();
 2855              		.loc 2 428 0
 2856 0006 FFF7FEFF 		bl	xPortGetFreeHeapSize
 2857 000a 0346     		mov	r3, r0
 2858 000c 7B60     		str	r3, [r7, #4]
 429:src/main.c    **** 
 430:src/main.c    **** 	if( xFreeStackSpace > 100 )
 2859              		.loc 2 430 0
 2860 000e 7B68     		ldr	r3, [r7, #4]
 431:src/main.c    **** 	{
 432:src/main.c    **** 		/* By now, the kernel has allocated everything it is going to, so
 433:src/main.c    **** 		if there is a lot of heap remaining unallocated then
 434:src/main.c    **** 		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
 435:src/main.c    **** 		reduced accordingly. */
 436:src/main.c    **** 	}
 437:src/main.c    **** }
 2861              		.loc 2 437 0
 2862 0010 07F10807 		add	r7, r7, #8
 2863 0014 BD46     		mov	sp, r7
 2864 0016 80BD     		pop	{r7, pc}
 2865              		.cfi_endproc
 2866              	.LFE136:
 2868              		.section	.text.vApplicationMallocFailedHook,"ax",%progbits
 2869              		.align	2
 2870              		.global	vApplicationMallocFailedHook
 2871              		.thumb
 2872              		.thumb_func
 2874              	vApplicationMallocFailedHook:
 2875              	.LFB137:
 438:src/main.c    **** 
 439:src/main.c    **** /*-----------------------------------------------------------*/
 440:src/main.c    **** 
 441:src/main.c    **** void vApplicationMallocFailedHook( void )
 442:src/main.c    **** {
 2876              		.loc 2 442 0
 2877              		.cfi_startproc
 2878              		@ args = 0, pretend = 0, frame = 0
 2879              		@ frame_needed = 1, uses_anonymous_args = 0
 2880              		@ link register save eliminated.
 2881 0000 80B4     		push	{r7}
 2882              	.LCFI83:
 2883              		.cfi_def_cfa_offset 4
 2884              		.cfi_offset 7, -4
 2885 0002 00AF     		add	r7, sp, #0
 2886              	.LCFI84:
 2887              		.cfi_def_cfa_register 7
 2888              	.L146:
 443:src/main.c    **** 	/* Called if a call to pvPortMalloc() fails because there is insufficient
 444:src/main.c    **** 	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
 445:src/main.c    **** 	internally by FreeRTOS API functions that create tasks, queues, software 
 446:src/main.c    **** 	timers, and semaphores.  The size of the FreeRTOS heap is set by the
 447:src/main.c    **** 	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
 448:src/main.c    **** 	for( ;; );
 2889              		.loc 2 448 0 discriminator 1
 2890 0004 FEE7     		b	.L146
 2891              		.cfi_endproc
 2892              	.LFE137:
 2894 0006 00BF     		.section	.text.vApplicationStackOverflowHook,"ax",%progbits
 2895              		.align	2
 2896              		.global	vApplicationStackOverflowHook
 2897              		.thumb
 2898              		.thumb_func
 2900              	vApplicationStackOverflowHook:
 2901              	.LFB138:
 449:src/main.c    **** }
 450:src/main.c    **** /*-----------------------------------------------------------*/
 451:src/main.c    **** 
 452:src/main.c    **** void vApplicationStackOverflowHook( xTaskHandle *pxTask, signed char *pcTaskName )
 453:src/main.c    **** {
 2902              		.loc 2 453 0
 2903              		.cfi_startproc
 2904              		@ args = 0, pretend = 0, frame = 8
 2905              		@ frame_needed = 1, uses_anonymous_args = 0
 2906              		@ link register save eliminated.
 2907 0000 80B4     		push	{r7}
 2908              	.LCFI85:
 2909              		.cfi_def_cfa_offset 4
 2910              		.cfi_offset 7, -4
 2911 0002 83B0     		sub	sp, sp, #12
 2912              	.LCFI86:
 2913              		.cfi_def_cfa_offset 16
 2914 0004 00AF     		add	r7, sp, #0
 2915              	.LCFI87:
 2916              		.cfi_def_cfa_register 7
 2917 0006 7860     		str	r0, [r7, #4]
 2918 0008 3960     		str	r1, [r7, #0]
 2919              	.L148:
 454:src/main.c    **** 	( void ) pcTaskName;
 455:src/main.c    **** 	( void ) pxTask;
 456:src/main.c    **** 
 457:src/main.c    **** 	/* Run time stack overflow checking is performed if
 458:src/main.c    **** 	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
 459:src/main.c    **** 	function is called if a stack overflow is detected. */
 460:src/main.c    **** 	for( ;; );
 2920              		.loc 2 460 0 discriminator 1
 2921 000a FEE7     		b	.L148
 2922              		.cfi_endproc
 2923              	.LFE138:
 2925              		.text
 2926              	.Letext0:
 2927              		.file 3 "/usr/local/csl/arm-2012.03/bin/../lib/gcc/arm-none-eabi/4.6.3/../../../../arm-none-eabi/i
 2928              		.file 4 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 2929              		.file 5 "/usr/local/csl/arm-2012.03/bin/../lib/gcc/arm-none-eabi/4.6.3/include/stddef.h"
 2930              		.file 6 "FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM4F/portmacro.h"
 2931              		.file 7 "FreeRTOS/Source/include/task.h"
 2932              		.file 8 "FreeRTOS/Source/include/queue.h"
 2933              		.file 9 "/usr/local/csl/arm-2012.03/bin/../lib/gcc/arm-none-eabi/4.6.3/include/stdarg.h"
 2934              		.file 10 "src/include/stm32f4_discovery.h"
 2935              		.file 11 "/usr/local/csl/arm-2012.03/bin/../lib/gcc/arm-none-eabi/4.6.3/../../../../arm-none-eabi/
 2936              		.file 12 "/usr/local/csl/arm-2012.03/bin/../lib/gcc/arm-none-eabi/4.6.3/../../../../arm-none-eabi/
 2937              		.file 13 "libs/CMSIS/Include/core_cm4.h"
 2938              		.file 14 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccUGUHXH.s:20     .text.memset:00000000 $t
     /tmp/ccUGUHXH.s:25     .text.memset:00000000 memset
     /tmp/ccUGUHXH.s:145    .text.memcpy:00000000 $t
     /tmp/ccUGUHXH.s:150    .text.memcpy:00000000 memcpy
     /tmp/ccUGUHXH.s:275    .text.strchr:00000000 $t
     /tmp/ccUGUHXH.s:280    .text.strchr:00000000 strchr
     /tmp/ccUGUHXH.s:343    .text.strcpy:00000000 $t
     /tmp/ccUGUHXH.s:348    .text.strcpy:00000000 strcpy
     /tmp/ccUGUHXH.s:408    .text.strncpy:00000000 $t
     /tmp/ccUGUHXH.s:413    .text.strncpy:00000000 strncpy
     /tmp/ccUGUHXH.s:487    .text.strncmp:00000000 $t
     /tmp/ccUGUHXH.s:492    .text.strncmp:00000000 strncmp
     /tmp/ccUGUHXH.s:568    .text.atoi:00000000 $t
     /tmp/ccUGUHXH.s:573    .text.atoi:00000000 atoi
     /tmp/ccUGUHXH.s:634    .text._toa:00000000 $t
     /tmp/ccUGUHXH.s:639    .text._toa:00000000 _toa
     /tmp/ccUGUHXH.s:843    .text.xtoa:00000000 $t
     /tmp/ccUGUHXH.s:848    .text.xtoa:00000000 xtoa
     /tmp/ccUGUHXH.s:881    .text.itoa:00000000 $t
     /tmp/ccUGUHXH.s:886    .text.itoa:00000000 itoa
     /tmp/ccUGUHXH.s:919    .rodata:00000000 $d
     /tmp/ccUGUHXH.s:920    .rodata:00000000 .LC0
     /tmp/ccUGUHXH.s:925    .text.qprintf:00000000 $t
     /tmp/ccUGUHXH.s:930    .text.qprintf:00000000 qprintf
     /tmp/ccUGUHXH.s:1211   .text.strlen:00000000 $t
     /tmp/ccUGUHXH.s:1216   .text.strlen:00000000 strlen
     /tmp/ccUGUHXH.s:1270   .text.strcat:00000000 $t
     /tmp/ccUGUHXH.s:1275   .text.strcat:00000000 strcat
     /tmp/ccUGUHXH.s:1337   .text.puts:00000000 $t
     /tmp/ccUGUHXH.s:1342   .text.puts:00000000 puts
     /tmp/ccUGUHXH.s:1387   .text.printf_cb:00000000 $t
     /tmp/ccUGUHXH.s:1391   .text.printf_cb:00000000 printf_cb
     /tmp/ccUGUHXH.s:1423   .text.sprintf_cb:00000000 $t
     /tmp/ccUGUHXH.s:1427   .text.sprintf_cb:00000000 sprintf_cb
     /tmp/ccUGUHXH.s:1460   .text.base_printf:00000000 $t
     /tmp/ccUGUHXH.s:1464   .text.base_printf:00000000 base_printf
     /tmp/ccUGUHXH.s:1569   .text.base_printf:000000cc $d
     /tmp/ccUGUHXH.s:1625   .text.base_printf:000001a4 $t
     /tmp/ccUGUHXH.s:1728   .text.sprintf:00000000 $t
     /tmp/ccUGUHXH.s:1733   .text.sprintf:00000000 sprintf
                            *COM*:00000004 xQueueUARTSend
                            *COM*:00000004 xQueueUARTRecvie
                            *COM*:00000004 xQueueShell2PWM
     /tmp/ccUGUHXH.s:1790   .text.receive_byte:00000000 $t
     /tmp/ccUGUHXH.s:1795   .text.receive_byte:00000000 receive_byte
     /tmp/ccUGUHXH.s:1840   .text.receive_byte_noblock:00000000 $t
     /tmp/ccUGUHXH.s:1845   .text.receive_byte_noblock:00000000 receive_byte_noblock
     /tmp/ccUGUHXH.s:1894   .text.pwmctrl:00000000 $t
     /tmp/ccUGUHXH.s:1898   .text.pwmctrl:00000000 pwmctrl
     /tmp/ccUGUHXH.s:1970   .text.Motor_Control:00000000 Motor_Control
     /tmp/ccUGUHXH.s:1965   .text.Motor_Control:00000000 $t
     /tmp/ccUGUHXH.s:2089   .rodata:00000004 .LC1
     /tmp/ccUGUHXH.s:2092   .rodata:0000000c .LC2
     /tmp/ccUGUHXH.s:2095   .rodata:00000014 .LC3
     /tmp/ccUGUHXH.s:2098   .rodata:00000020 .LC4
     /tmp/ccUGUHXH.s:2101   .rodata:00000028 .LC5
     /tmp/ccUGUHXH.s:2104   .text.main:00000000 $t
     /tmp/ccUGUHXH.s:2109   .text.main:00000000 main
     /tmp/ccUGUHXH.s:2248   .text.UsartTask:00000000 UsartTask
     /tmp/ccUGUHXH.s:2339   .text.Usartrecive:00000000 Usartrecive
     /tmp/ccUGUHXH.s:2412   .text.vMEMSTask:00000000 vMEMSTask
     /tmp/ccUGUHXH.s:2244   .text.UsartTask:00000000 $t
     /tmp/ccUGUHXH.s:2332   .rodata:00000034 .LC6
     /tmp/ccUGUHXH.s:2335   .text.Usartrecive:00000000 $t
     /tmp/ccUGUHXH.s:2408   .text.vMEMSTask:00000000 $t
     /tmp/ccUGUHXH.s:2542   .text.vMEMSTask:00000130 $d
     /tmp/ccUGUHXH.s:2546   .text.vMEMSTask:00000138 $t
     /tmp/ccUGUHXH.s:2833   .text.vApplicationIdleHook:00000000 $t
     /tmp/ccUGUHXH.s:2838   .text.vApplicationIdleHook:00000000 vApplicationIdleHook
     /tmp/ccUGUHXH.s:2869   .text.vApplicationMallocFailedHook:00000000 $t
     /tmp/ccUGUHXH.s:2874   .text.vApplicationMallocFailedHook:00000000 vApplicationMallocFailedHook
     /tmp/ccUGUHXH.s:2895   .text.vApplicationStackOverflowHook:00000000 $t
     /tmp/ccUGUHXH.s:2900   .text.vApplicationStackOverflowHook:00000000 vApplicationStackOverflowHook
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vTaskDelay
xQueueGenericSend
fio_write
xQueueGenericReceive
xQueueCreate
prvSetupHardware
xTaskGenericCreate
shell
vTaskStartScheduler
USART_GetFlagStatus
USART_SendData
USART_ReceiveData
LIS3DSH_Read
STM_EVAL_LEDOn
STM_EVAL_LEDOff
xPortGetFreeHeapSize
