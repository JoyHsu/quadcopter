   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.pwm,"ax",%progbits
  20              		.align	2
  21              		.global	pwm
  22              		.thumb
  23              		.thumb_func
  25              	pwm:
  26              	.LFB110:
  27              		.file 1 "src/main.c"
   1:src/main.c    **** //Example code to loop back the data sent to USART2 on STM32F4DISCOVERY
   2:src/main.c    **** 
   3:src/main.c    **** //Inlcude header files
   4:src/main.c    **** 
   5:src/main.c    **** #include "stm32f4xx.h"
   6:src/main.c    **** #include "FreeRTOS.h"
   7:src/main.c    **** #include "task.h"
   8:src/main.c    **** #include <math.h>
   9:src/main.c    **** #include <stdio.h>
  10:src/main.c    **** #include <stdlib.h>
  11:src/main.c    **** 
  12:src/main.c    **** #include "main.h"
  13:src/main.c    **** #include "stm32f4xx_conf.h"
  14:src/main.c    **** 
  15:src/main.c    **** 
  16:src/main.c    **** 
  17:src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  18:src/main.c    **** /* Private define ------------------------------------------------------------*/
  19:src/main.c    **** 
  20:src/main.c    **** 
  21:src/main.c    **** #define PWM_MOTOR_MIN 100
  22:src/main.c    **** #define PWM_MOTOR_MAX 1000
  23:src/main.c    **** #define TEST 200
  24:src/main.c    **** 
  25:src/main.c    **** #define PWM_Motor1 TIM4->CCR1   // 無刷 PWM
  26:src/main.c    **** #define PWM_Motor2 TIM4->CCR2   // 無刷 PWM
  27:src/main.c    **** #define PWM_Motor3 TIM4->CCR3   // 無刷 PWM
  28:src/main.c    **** #define PWM_Motor4 TIM4->CCR4   // 無刷 PWM
  29:src/main.c    **** 
  30:src/main.c    **** /* Private macro -------------------------------------------------------------*/
  31:src/main.c    **** /* Private variables ---------------------------------------------------------*/
  32:src/main.c    **** 
  33:src/main.c    **** 
  34:src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  35:src/main.c    **** 
  36:src/main.c    **** /* Private define ------------------------------------------------------------*/
  37:src/main.c    **** /* Private macro -------------------------------------------------------------*/
  38:src/main.c    **** /* Private variables ---------------------------------------------------------*/
  39:src/main.c    **** 
  40:src/main.c    **** 
  41:src/main.c    **** 
  42:src/main.c    **** /* Private functions ---------------------------------------------------------*/
  43:src/main.c    **** 
  44:src/main.c    **** void pwm(void)
  45:src/main.c    **** {
  28              		.loc 1 45 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 16
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 90B5     		push	{r4, r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 14, -4
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 4, -12
  38 0002 85B0     		sub	sp, sp, #20
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 32
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  46:src/main.c    ****   volatile int i;
  47:src/main.c    ****   int n = 1;
  44              		.loc 1 47 0
  45 0006 4FF00103 		mov	r3, #1
  46 000a FB60     		str	r3, [r7, #12]
  48:src/main.c    ****   uint16_t brightness = 0;      
  47              		.loc 1 48 0
  48 000c 4FF00003 		mov	r3, #0
  49 0010 7B81     		strh	r3, [r7, #10]	@ movhi
  49:src/main.c    ****   uint16_t who_run = 1;
  50              		.loc 1 49 0
  51 0012 4FF00103 		mov	r3, #1
  52 0016 3B81     		strh	r3, [r7, #8]	@ movhi
  50:src/main.c    **** 
  51:src/main.c    ****  //Delay_1ms(50);
  52:src/main.c    **** 
  53:src/main.c    ****   Motor_Control(PWM_MOTOR_MAX, PWM_MOTOR_MAX, PWM_MOTOR_MAX, PWM_MOTOR_MAX);
  53              		.loc 1 53 0
  54 0018 40F20004 		movw	r4, #:lower16:Motor_Control
  55 001c C0F20004 		movt	r4, #:upper16:Motor_Control
  56 0020 4FF47A70 		mov	r0, #1000
  57 0024 4FF47A71 		mov	r1, #1000
  58 0028 4FF47A72 		mov	r2, #1000
  59 002c 4FF47A73 		mov	r3, #1000
  60 0030 A047     		blx	r4
  54:src/main.c    **** 
  55:src/main.c    ****  Delay_1ms(100);
  61              		.loc 1 55 0
  62 0032 40F20003 		movw	r3, #:lower16:Delay_1ms
  63 0036 C0F20003 		movt	r3, #:upper16:Delay_1ms
  64 003a 4FF06400 		mov	r0, #100
  65 003e 9847     		blx	r3
  56:src/main.c    **** 
  57:src/main.c    ****   Motor_Control(PWM_MOTOR_MIN, PWM_MOTOR_MIN, PWM_MOTOR_MIN, PWM_MOTOR_MIN);
  66              		.loc 1 57 0
  67 0040 40F20004 		movw	r4, #:lower16:Motor_Control
  68 0044 C0F20004 		movt	r4, #:upper16:Motor_Control
  69 0048 4FF06400 		mov	r0, #100
  70 004c 4FF06401 		mov	r1, #100
  71 0050 4FF06402 		mov	r2, #100
  72 0054 4FF06403 		mov	r3, #100
  73 0058 A047     		blx	r4
  58:src/main.c    ****   
  59:src/main.c    ****  Delay_1ms(100);
  74              		.loc 1 59 0
  75 005a 40F20003 		movw	r3, #:lower16:Delay_1ms
  76 005e C0F20003 		movt	r3, #:upper16:Delay_1ms
  77 0062 4FF06400 		mov	r0, #100
  78 0066 9847     		blx	r3
  79              	.L2:
  60:src/main.c    **** 
  61:src/main.c    ****   while(1)  // Do not exit
  62:src/main.c    ****   {
  63:src/main.c    ****    Motor_Control(TEST, TEST, TEST, TEST);
  80              		.loc 1 63 0 discriminator 1
  81 0068 40F20004 		movw	r4, #:lower16:Motor_Control
  82 006c C0F20004 		movt	r4, #:upper16:Motor_Control
  83 0070 4FF0C800 		mov	r0, #200
  84 0074 4FF0C801 		mov	r1, #200
  85 0078 4FF0C802 		mov	r2, #200
  86 007c 4FF0C803 		mov	r3, #200
  87 0080 A047     		blx	r4
  64:src/main.c    ****    
  65:src/main.c    ****    Delay_1ms(100);
  88              		.loc 1 65 0 discriminator 1
  89 0082 40F20003 		movw	r3, #:lower16:Delay_1ms
  90 0086 C0F20003 		movt	r3, #:upper16:Delay_1ms
  91 008a 4FF06400 		mov	r0, #100
  92 008e 9847     		blx	r3
  66:src/main.c    **** 
  67:src/main.c    ****    Motor_Control(TEST+50, TEST+50, TEST+50, TEST+50);
  93              		.loc 1 67 0 discriminator 1
  94 0090 40F20004 		movw	r4, #:lower16:Motor_Control
  95 0094 C0F20004 		movt	r4, #:upper16:Motor_Control
  96 0098 4FF0FA00 		mov	r0, #250
  97 009c 4FF0FA01 		mov	r1, #250
  98 00a0 4FF0FA02 		mov	r2, #250
  99 00a4 4FF0FA03 		mov	r3, #250
 100 00a8 A047     		blx	r4
  68:src/main.c    **** 
  69:src/main.c    ****    Delay_1ms(100);
 101              		.loc 1 69 0 discriminator 1
 102 00aa 40F20003 		movw	r3, #:lower16:Delay_1ms
 103 00ae C0F20003 		movt	r3, #:upper16:Delay_1ms
 104 00b2 4FF06400 		mov	r0, #100
 105 00b6 9847     		blx	r3
  70:src/main.c    **** 
  71:src/main.c    **** 
  72:src/main.c    **** 
  73:src/main.c    ****     //Light LEDs in turn
  74:src/main.c    ****     // switch(who_run){
  75:src/main.c    ****     //     case 0:
  76:src/main.c    ****     //         TIM4->CCR1 = brightness - 1; // set brightness
  77:src/main.c    ****     //         break;
  78:src/main.c    ****     //     case 1:
  79:src/main.c    ****     //         TIM4->CCR2 = brightness - 1; // set brightness
  80:src/main.c    ****     //         break;
  81:src/main.c    ****     //     case 2:
  82:src/main.c    ****     //         TIM4->CCR3 = brightness - 1; // set brightness
  83:src/main.c    ****     //         break;
  84:src/main.c    ****     //     case 3:
  85:src/main.c    ****     //         TIM4->CCR4 = brightness - 1; // set brightness
  86:src/main.c    ****     //         break;
  87:src/main.c    ****     // }
  88:src/main.c    **** 
  89:src/main.c    ****   }
 106              		.loc 1 89 0 discriminator 1
 107 00b8 D6E7     		b	.L2
 108              		.cfi_endproc
 109              	.LFE110:
 111 00ba 00BF     		.section	.text.Delay_1ms,"ax",%progbits
 112              		.align	2
 113              		.global	Delay_1ms
 114              		.thumb
 115              		.thumb_func
 117              	Delay_1ms:
 118              	.LFB111:
  90:src/main.c    ****  
  91:src/main.c    ****   return(0); // System will implode
  92:src/main.c    **** } 
  93:src/main.c    **** 
  94:src/main.c    **** 
  95:src/main.c    **** void Delay_1ms( vu32 nCnt_1ms )
  96:src/main.c    **** {
 119              		.loc 1 96 0
 120              		.cfi_startproc
 121              		@ args = 0, pretend = 0, frame = 16
 122              		@ frame_needed = 1, uses_anonymous_args = 0
 123              		@ link register save eliminated.
 124 0000 80B4     		push	{r7}
 125              	.LCFI3:
 126              		.cfi_def_cfa_offset 4
 127              		.cfi_offset 7, -4
 128 0002 85B0     		sub	sp, sp, #20
 129              	.LCFI4:
 130              		.cfi_def_cfa_offset 24
 131 0004 00AF     		add	r7, sp, #0
 132              	.LCFI5:
 133              		.cfi_def_cfa_register 7
 134 0006 7860     		str	r0, [r7, #4]
  97:src/main.c    ****     u32 nCnt;
  98:src/main.c    **** 	  for(; nCnt_1ms != 0; nCnt_1ms--)
 135              		.loc 1 98 0
 136 0008 0EE0     		b	.L4
 137              	.L7:
  99:src/main.c    **** 		    for(nCnt = 56580; nCnt != 0; nCnt--);
 138              		.loc 1 99 0
 139 000a 4DF60453 		movw	r3, #56580
 140 000e FB60     		str	r3, [r7, #12]
 141 0010 03E0     		b	.L5
 142              	.L6:
 143              		.loc 1 99 0 is_stmt 0 discriminator 2
 144 0012 FB68     		ldr	r3, [r7, #12]
 145 0014 03F1FF33 		add	r3, r3, #-1
 146 0018 FB60     		str	r3, [r7, #12]
 147              	.L5:
 148              		.loc 1 99 0 discriminator 1
 149 001a FB68     		ldr	r3, [r7, #12]
 150 001c 002B     		cmp	r3, #0
 151 001e F8D1     		bne	.L6
  98:src/main.c    **** 	  for(; nCnt_1ms != 0; nCnt_1ms--)
 152              		.loc 1 98 0 is_stmt 1
 153 0020 7B68     		ldr	r3, [r7, #4]
 154 0022 03F1FF33 		add	r3, r3, #-1
 155 0026 7B60     		str	r3, [r7, #4]
 156              	.L4:
  98:src/main.c    **** 	  for(; nCnt_1ms != 0; nCnt_1ms--)
 157              		.loc 1 98 0 is_stmt 0 discriminator 1
 158 0028 7B68     		ldr	r3, [r7, #4]
 159 002a 002B     		cmp	r3, #0
 160 002c EDD1     		bne	.L7
 100:src/main.c    **** }
 161              		.loc 1 100 0 is_stmt 1
 162 002e 07F11407 		add	r7, r7, #20
 163 0032 BD46     		mov	sp, r7
 164 0034 80BC     		pop	{r7}
 165 0036 7047     		bx	lr
 166              		.cfi_endproc
 167              	.LFE111:
 169              		.section	.text.Motor_Control,"ax",%progbits
 170              		.align	2
 171              		.global	Motor_Control
 172              		.thumb
 173              		.thumb_func
 175              	Motor_Control:
 176              	.LFB112:
 101:src/main.c    ****   
 102:src/main.c    **** void Motor_Control(u16 Motor1, u16 Motor2, u16 Motor3, u16 Motor4)
 103:src/main.c    **** {
 177              		.loc 1 103 0
 178              		.cfi_startproc
 179              		@ args = 0, pretend = 0, frame = 8
 180              		@ frame_needed = 1, uses_anonymous_args = 0
 181              		@ link register save eliminated.
 182 0000 80B4     		push	{r7}
 183              	.LCFI6:
 184              		.cfi_def_cfa_offset 4
 185              		.cfi_offset 7, -4
 186 0002 83B0     		sub	sp, sp, #12
 187              	.LCFI7:
 188              		.cfi_def_cfa_offset 16
 189 0004 00AF     		add	r7, sp, #0
 190              	.LCFI8:
 191              		.cfi_def_cfa_register 7
 192 0006 F880     		strh	r0, [r7, #6]	@ movhi
 193 0008 B980     		strh	r1, [r7, #4]	@ movhi
 194 000a 7A80     		strh	r2, [r7, #2]	@ movhi
 195 000c 3B80     		strh	r3, [r7, #0]	@ movhi
 104:src/main.c    **** 	if(Motor1>PWM_MOTOR_MAX)      Motor1 = PWM_MOTOR_MAX;
 196              		.loc 1 104 0
 197 000e FB88     		ldrh	r3, [r7, #6]
 198 0010 B3F57A7F 		cmp	r3, #1000
 199 0014 03D9     		bls	.L9
 200              		.loc 1 104 0 is_stmt 0 discriminator 1
 201 0016 4FF47A73 		mov	r3, #1000
 202 001a FB80     		strh	r3, [r7, #6]	@ movhi
 203 001c 05E0     		b	.L10
 204              	.L9:
 105:src/main.c    **** 	else if(Motor1<PWM_MOTOR_MIN) Motor1 = PWM_MOTOR_MIN;
 205              		.loc 1 105 0 is_stmt 1
 206 001e FB88     		ldrh	r3, [r7, #6]
 207 0020 632B     		cmp	r3, #99
 208 0022 02D8     		bhi	.L10
 209              		.loc 1 105 0 is_stmt 0 discriminator 1
 210 0024 4FF06403 		mov	r3, #100
 211 0028 FB80     		strh	r3, [r7, #6]	@ movhi
 212              	.L10:
 106:src/main.c    **** 		
 107:src/main.c    **** 	if(Motor2>PWM_MOTOR_MAX)      Motor2 = PWM_MOTOR_MAX;
 213              		.loc 1 107 0 is_stmt 1
 214 002a BB88     		ldrh	r3, [r7, #4]
 215 002c B3F57A7F 		cmp	r3, #1000
 216 0030 03D9     		bls	.L11
 217              		.loc 1 107 0 is_stmt 0 discriminator 1
 218 0032 4FF47A73 		mov	r3, #1000
 219 0036 BB80     		strh	r3, [r7, #4]	@ movhi
 220 0038 05E0     		b	.L12
 221              	.L11:
 108:src/main.c    **** 	else if(Motor2<PWM_MOTOR_MIN) Motor2 = PWM_MOTOR_MIN;
 222              		.loc 1 108 0 is_stmt 1
 223 003a BB88     		ldrh	r3, [r7, #4]
 224 003c 632B     		cmp	r3, #99
 225 003e 02D8     		bhi	.L12
 226              		.loc 1 108 0 is_stmt 0 discriminator 1
 227 0040 4FF06403 		mov	r3, #100
 228 0044 BB80     		strh	r3, [r7, #4]	@ movhi
 229              	.L12:
 109:src/main.c    **** 				
 110:src/main.c    **** 	if(Motor3>PWM_MOTOR_MAX)      Motor3 = PWM_MOTOR_MAX;
 230              		.loc 1 110 0 is_stmt 1
 231 0046 7B88     		ldrh	r3, [r7, #2]
 232 0048 B3F57A7F 		cmp	r3, #1000
 233 004c 03D9     		bls	.L13
 234              		.loc 1 110 0 is_stmt 0 discriminator 1
 235 004e 4FF47A73 		mov	r3, #1000
 236 0052 7B80     		strh	r3, [r7, #2]	@ movhi
 237 0054 05E0     		b	.L14
 238              	.L13:
 111:src/main.c    **** 	else if(Motor3<PWM_MOTOR_MIN) Motor3 = PWM_MOTOR_MIN;
 239              		.loc 1 111 0 is_stmt 1
 240 0056 7B88     		ldrh	r3, [r7, #2]
 241 0058 632B     		cmp	r3, #99
 242 005a 02D8     		bhi	.L14
 243              		.loc 1 111 0 is_stmt 0 discriminator 1
 244 005c 4FF06403 		mov	r3, #100
 245 0060 7B80     		strh	r3, [r7, #2]	@ movhi
 246              	.L14:
 112:src/main.c    **** 						
 113:src/main.c    **** 	if(Motor4>PWM_MOTOR_MAX)      Motor4 = PWM_MOTOR_MAX;
 247              		.loc 1 113 0 is_stmt 1
 248 0062 3B88     		ldrh	r3, [r7, #0]
 249 0064 B3F57A7F 		cmp	r3, #1000
 250 0068 03D9     		bls	.L15
 251              		.loc 1 113 0 is_stmt 0 discriminator 1
 252 006a 4FF47A73 		mov	r3, #1000
 253 006e 3B80     		strh	r3, [r7, #0]	@ movhi
 254 0070 05E0     		b	.L16
 255              	.L15:
 114:src/main.c    **** 	else if(Motor4<PWM_MOTOR_MIN) Motor4 = PWM_MOTOR_MIN;
 256              		.loc 1 114 0 is_stmt 1
 257 0072 3B88     		ldrh	r3, [r7, #0]
 258 0074 632B     		cmp	r3, #99
 259 0076 02D8     		bhi	.L16
 260              		.loc 1 114 0 is_stmt 0 discriminator 1
 261 0078 4FF06403 		mov	r3, #100
 262 007c 3B80     		strh	r3, [r7, #0]	@ movhi
 263              	.L16:
 115:src/main.c    **** 								
 116:src/main.c    **** 	PWM_Motor1 = Motor1;
 264              		.loc 1 116 0 is_stmt 1
 265 007e 4FF40063 		mov	r3, #2048
 266 0082 C4F20003 		movt	r3, 16384
 267 0086 FA88     		ldrh	r2, [r7, #6]
 268 0088 5A63     		str	r2, [r3, #52]
 117:src/main.c    **** 	PWM_Motor2 = Motor2;
 269              		.loc 1 117 0
 270 008a 4FF40063 		mov	r3, #2048
 271 008e C4F20003 		movt	r3, 16384
 272 0092 BA88     		ldrh	r2, [r7, #4]
 273 0094 9A63     		str	r2, [r3, #56]
 118:src/main.c    **** 	PWM_Motor3 = Motor3;
 274              		.loc 1 118 0
 275 0096 4FF40063 		mov	r3, #2048
 276 009a C4F20003 		movt	r3, 16384
 277 009e 7A88     		ldrh	r2, [r7, #2]
 278 00a0 DA63     		str	r2, [r3, #60]
 119:src/main.c    **** 	PWM_Motor4 = Motor4;
 279              		.loc 1 119 0
 280 00a2 4FF40063 		mov	r3, #2048
 281 00a6 C4F20003 		movt	r3, 16384
 282 00aa 3A88     		ldrh	r2, [r7, #0]
 283 00ac 1A64     		str	r2, [r3, #64]
 120:src/main.c    **** }
 284              		.loc 1 120 0
 285 00ae 07F10C07 		add	r7, r7, #12
 286 00b2 BD46     		mov	sp, r7
 287 00b4 80BC     		pop	{r7}
 288 00b6 7047     		bx	lr
 289              		.cfi_endproc
 290              	.LFE112:
 292              		.section	.text.RCC_Configuration,"ax",%progbits
 293              		.align	2
 294              		.global	RCC_Configuration
 295              		.thumb
 296              		.thumb_func
 298              	RCC_Configuration:
 299              	.LFB113:
 121:src/main.c    **** 
 122:src/main.c    **** /**
 123:src/main.c    ****   * @brief  Configures the different system clocks.
 124:src/main.c    ****   * @param  None
 125:src/main.c    ****   * @retval None
 126:src/main.c    ****   */
 127:src/main.c    **** void RCC_Configuration(void)
 128:src/main.c    **** {
 300              		.loc 1 128 0
 301              		.cfi_startproc
 302              		@ args = 0, pretend = 0, frame = 0
 303              		@ frame_needed = 1, uses_anonymous_args = 0
 304 0000 80B5     		push	{r7, lr}
 305              	.LCFI9:
 306              		.cfi_def_cfa_offset 8
 307              		.cfi_offset 14, -4
 308              		.cfi_offset 7, -8
 309 0002 00AF     		add	r7, sp, #0
 310              	.LCFI10:
 311              		.cfi_def_cfa_register 7
 129:src/main.c    ****    RCC_AHB1PeriphClockCmd(  RCC_AHB1Periph_GPIOD , ENABLE );
 312              		.loc 1 129 0
 313 0004 4FF00800 		mov	r0, #8
 314 0008 4FF00101 		mov	r1, #1
 315 000c FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
 130:src/main.c    ****    RCC_APB1PeriphClockCmd( RCC_APB1Periph_TIM4, ENABLE );
 316              		.loc 1 130 0
 317 0010 4FF00400 		mov	r0, #4
 318 0014 4FF00101 		mov	r1, #1
 319 0018 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 131:src/main.c    **** }
 320              		.loc 1 131 0
 321 001c 80BD     		pop	{r7, pc}
 322              		.cfi_endproc
 323              	.LFE113:
 325 001e 00BF     		.section	.text.GPIO_Configuration,"ax",%progbits
 326              		.align	2
 327              		.global	GPIO_Configuration
 328              		.thumb
 329              		.thumb_func
 331              	GPIO_Configuration:
 332              	.LFB114:
 132:src/main.c    **** 
 133:src/main.c    **** /**
 134:src/main.c    ****   * @brief  configure the PD12~15 to Timers
 135:src/main.c    ****   * @param  None
 136:src/main.c    ****   * @retval None
 137:src/main.c    ****   */
 138:src/main.c    **** void GPIO_Configuration(void)
 139:src/main.c    **** {
 333              		.loc 1 139 0
 334              		.cfi_startproc
 335              		@ args = 0, pretend = 0, frame = 8
 336              		@ frame_needed = 1, uses_anonymous_args = 0
 337 0000 80B5     		push	{r7, lr}
 338              	.LCFI11:
 339              		.cfi_def_cfa_offset 8
 340              		.cfi_offset 14, -4
 341              		.cfi_offset 7, -8
 342 0002 82B0     		sub	sp, sp, #8
 343              	.LCFI12:
 344              		.cfi_def_cfa_offset 16
 345 0004 00AF     		add	r7, sp, #0
 346              	.LCFI13:
 347              		.cfi_def_cfa_register 7
 140:src/main.c    ****     GPIO_InitTypeDef GPIO_InitStructure;
 141:src/main.c    ****     GPIO_StructInit(&GPIO_InitStructure); // Reset init structure
 348              		.loc 1 141 0
 349 0006 3B46     		mov	r3, r7
 350 0008 1846     		mov	r0, r3
 351 000a FFF7FEFF 		bl	GPIO_StructInit
 142:src/main.c    ****  
 143:src/main.c    ****     GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_TIM4);
 352              		.loc 1 143 0
 353 000e 4FF44060 		mov	r0, #3072
 354 0012 C4F20200 		movt	r0, 16386
 355 0016 4FF00C01 		mov	r1, #12
 356 001a 4FF00202 		mov	r2, #2
 357 001e FFF7FEFF 		bl	GPIO_PinAFConfig
 144:src/main.c    ****     GPIO_PinAFConfig(GPIOD, GPIO_PinSource13, GPIO_AF_TIM4);
 358              		.loc 1 144 0
 359 0022 4FF44060 		mov	r0, #3072
 360 0026 C4F20200 		movt	r0, 16386
 361 002a 4FF00D01 		mov	r1, #13
 362 002e 4FF00202 		mov	r2, #2
 363 0032 FFF7FEFF 		bl	GPIO_PinAFConfig
 145:src/main.c    ****     GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_TIM4);
 364              		.loc 1 145 0
 365 0036 4FF44060 		mov	r0, #3072
 366 003a C4F20200 		movt	r0, 16386
 367 003e 4FF00E01 		mov	r1, #14
 368 0042 4FF00202 		mov	r2, #2
 369 0046 FFF7FEFF 		bl	GPIO_PinAFConfig
 146:src/main.c    ****     GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_TIM4);
 370              		.loc 1 146 0
 371 004a 4FF44060 		mov	r0, #3072
 372 004e C4F20200 		movt	r0, 16386
 373 0052 4FF00F01 		mov	r1, #15
 374 0056 4FF00202 		mov	r2, #2
 375 005a FFF7FEFF 		bl	GPIO_PinAFConfig
 147:src/main.c    ****       
 148:src/main.c    **** 
 149:src/main.c    ****     // Setup Blue & Green LED on STM32-Discovery Board to use PWM.
 150:src/main.c    ****     GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12 | GPIO_Pin_13| GPIO_Pin_14| GPIO_Pin_15; //PD12->LED
 376              		.loc 1 150 0
 377 005e 4FF47043 		mov	r3, #61440
 378 0062 3B60     		str	r3, [r7, #0]
 151:src/main.c    **** 	//GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;            // Alt Function - Push Pull
 152:src/main.c    **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF; 
 379              		.loc 1 152 0
 380 0064 4FF00203 		mov	r3, #2
 381 0068 3B71     		strb	r3, [r7, #4]
 153:src/main.c    ****     GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 382              		.loc 1 153 0
 383 006a 4FF00003 		mov	r3, #0
 384 006e BB71     		strb	r3, [r7, #6]
 154:src/main.c    ****     GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 385              		.loc 1 154 0
 386 0070 4FF00303 		mov	r3, #3
 387 0074 7B71     		strb	r3, [r7, #5]
 155:src/main.c    ****     GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 388              		.loc 1 155 0
 389 0076 4FF00003 		mov	r3, #0
 390 007a FB71     		strb	r3, [r7, #7]
 156:src/main.c    ****     GPIO_Init( GPIOD, &GPIO_InitStructure );  
 391              		.loc 1 156 0
 392 007c 4FF44060 		mov	r0, #3072
 393 0080 C4F20200 		movt	r0, 16386
 394 0084 3B46     		mov	r3, r7
 395 0086 1946     		mov	r1, r3
 396 0088 FFF7FEFF 		bl	GPIO_Init
 157:src/main.c    **** }
 397              		.loc 1 157 0
 398 008c 07F10807 		add	r7, r7, #8
 399 0090 BD46     		mov	sp, r7
 400 0092 80BD     		pop	{r7, pc}
 401              		.cfi_endproc
 402              	.LFE114:
 404              		.section	.text.TIM_Configuration,"ax",%progbits
 405              		.align	2
 406              		.global	TIM_Configuration
 407              		.thumb
 408              		.thumb_func
 410              	TIM_Configuration:
 411              	.LFB115:
 158:src/main.c    **** 
 159:src/main.c    **** /**
 160:src/main.c    ****   * @brief  configure the TIM4 for PWM mode
 161:src/main.c    ****   * @param  None
 162:src/main.c    ****   * @retval None
 163:src/main.c    ****   */
 164:src/main.c    **** void TIM_Configuration(void)
 165:src/main.c    **** {
 412              		.loc 1 165 0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 32
 415              		@ frame_needed = 1, uses_anonymous_args = 0
 416 0000 80B5     		push	{r7, lr}
 417              	.LCFI14:
 418              		.cfi_def_cfa_offset 8
 419              		.cfi_offset 14, -4
 420              		.cfi_offset 7, -8
 421 0002 88B0     		sub	sp, sp, #32
 422              	.LCFI15:
 423              		.cfi_def_cfa_offset 40
 424 0004 00AF     		add	r7, sp, #0
 425              	.LCFI16:
 426              		.cfi_def_cfa_register 7
 166:src/main.c    ****     TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;
 167:src/main.c    ****     TIM_OCInitTypeDef TIM_OCInitStruct;
 168:src/main.c    **** 
 169:src/main.c    ****     // Let PWM frequency equal 100Hz.
 170:src/main.c    ****     // Let period equal 1000. Therefore, timer runs from zero to 1000. Gives 0.1Hz resolution.
 171:src/main.c    ****     // Solving for prescaler gives 240.
 172:src/main.c    ****     TIM_TimeBaseStructInit( &TIM_TimeBaseInitStruct );
 427              		.loc 1 172 0
 428 0006 07F11403 		add	r3, r7, #20
 429 000a 1846     		mov	r0, r3
 430 000c FFF7FEFF 		bl	TIM_TimeBaseStructInit
 173:src/main.c    ****     TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV4;
 431              		.loc 1 173 0
 432 0010 4FF40073 		mov	r3, #512
 433 0014 BB83     		strh	r3, [r7, #28]	@ movhi
 174:src/main.c    ****     TIM_TimeBaseInitStruct.TIM_Period = 3360 - 1;   
 434              		.loc 1 174 0
 435 0016 40F61F53 		movw	r3, #3359
 436 001a BB61     		str	r3, [r7, #24]
 175:src/main.c    ****     TIM_TimeBaseInitStruct.TIM_Prescaler = 500 - 1; 
 437              		.loc 1 175 0
 438 001c 40F2F313 		movw	r3, #499
 439 0020 BB82     		strh	r3, [r7, #20]	@ movhi
 176:src/main.c    ****     TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;    
 440              		.loc 1 176 0
 441 0022 4FF00003 		mov	r3, #0
 442 0026 FB82     		strh	r3, [r7, #22]	@ movhi
 177:src/main.c    ****     TIM_TimeBaseInit( TIM4, &TIM_TimeBaseInitStruct );
 443              		.loc 1 177 0
 444 0028 4FF40060 		mov	r0, #2048
 445 002c C4F20000 		movt	r0, 16384
 446 0030 07F11403 		add	r3, r7, #20
 447 0034 1946     		mov	r1, r3
 448 0036 FFF7FEFF 		bl	TIM_TimeBaseInit
 178:src/main.c    ****     
 179:src/main.c    ****     TIM_OCStructInit( &TIM_OCInitStruct );
 449              		.loc 1 179 0
 450 003a 3B46     		mov	r3, r7
 451 003c 1846     		mov	r0, r3
 452 003e FFF7FEFF 		bl	TIM_OCStructInit
 180:src/main.c    ****     TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 453              		.loc 1 180 0
 454 0042 4FF00103 		mov	r3, #1
 455 0046 7B80     		strh	r3, [r7, #2]	@ movhi
 181:src/main.c    ****     TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
 456              		.loc 1 181 0
 457 0048 4FF06003 		mov	r3, #96
 458 004c 3B80     		strh	r3, [r7, #0]	@ movhi
 182:src/main.c    ****     
 183:src/main.c    ****     // Initial duty cycle equals 0%. Value can range from zero to 65535.
 184:src/main.c    ****     //TIM_Pulse = TIM4_CCR1 register (16 bits)
 185:src/main.c    ****     TIM_OCInitStruct.TIM_Pulse = 0; //(0=Always Off, 65535=Always On)
 459              		.loc 1 185 0
 460 004e 4FF00003 		mov	r3, #0
 461 0052 BB60     		str	r3, [r7, #8]
 186:src/main.c    ****  
 187:src/main.c    ****     TIM_OC1Init( TIM4, &TIM_OCInitStruct ); // Channel 1  LED
 462              		.loc 1 187 0
 463 0054 4FF40060 		mov	r0, #2048
 464 0058 C4F20000 		movt	r0, 16384
 465 005c 3B46     		mov	r3, r7
 466 005e 1946     		mov	r1, r3
 467 0060 FFF7FEFF 		bl	TIM_OC1Init
 188:src/main.c    ****     TIM_OC2Init( TIM4, &TIM_OCInitStruct ); // Channel 2  LED
 468              		.loc 1 188 0
 469 0064 4FF40060 		mov	r0, #2048
 470 0068 C4F20000 		movt	r0, 16384
 471 006c 3B46     		mov	r3, r7
 472 006e 1946     		mov	r1, r3
 473 0070 FFF7FEFF 		bl	TIM_OC2Init
 189:src/main.c    ****     TIM_OC3Init( TIM4, &TIM_OCInitStruct ); // Channel 3  LED
 474              		.loc 1 189 0
 475 0074 4FF40060 		mov	r0, #2048
 476 0078 C4F20000 		movt	r0, 16384
 477 007c 3B46     		mov	r3, r7
 478 007e 1946     		mov	r1, r3
 479 0080 FFF7FEFF 		bl	TIM_OC3Init
 190:src/main.c    ****     TIM_OC4Init( TIM4, &TIM_OCInitStruct ); // Channel 4  LED
 480              		.loc 1 190 0
 481 0084 4FF40060 		mov	r0, #2048
 482 0088 C4F20000 		movt	r0, 16384
 483 008c 3B46     		mov	r3, r7
 484 008e 1946     		mov	r1, r3
 485 0090 FFF7FEFF 		bl	TIM_OC4Init
 191:src/main.c    ****  
 192:src/main.c    ****     TIM_Cmd( TIM4, ENABLE );
 486              		.loc 1 192 0
 487 0094 4FF40060 		mov	r0, #2048
 488 0098 C4F20000 		movt	r0, 16384
 489 009c 4FF00101 		mov	r1, #1
 490 00a0 FFF7FEFF 		bl	TIM_Cmd
 193:src/main.c    **** }
 491              		.loc 1 193 0
 492 00a4 07F12007 		add	r7, r7, #32
 493 00a8 BD46     		mov	sp, r7
 494 00aa 80BD     		pop	{r7, pc}
 495              		.cfi_endproc
 496              	.LFE115:
 498              		.section	.rodata
 499              		.align	2
 500              	.LC0:
 501 0000 70776D00 		.ascii	"pwm\000"
 502              		.section	.text.main,"ax",%progbits
 503              		.align	2
 504              		.global	main
 505              		.thumb
 506              		.thumb_func
 508              	main:
 509              	.LFB116:
 194:src/main.c    **** 
 195:src/main.c    **** 
 196:src/main.c    **** 
 197:src/main.c    **** 
 198:src/main.c    **** //Main Function
 199:src/main.c    **** int main(void)
 200:src/main.c    **** {
 510              		.loc 1 200 0
 511              		.cfi_startproc
 512              		@ args = 0, pretend = 0, frame = 0
 513              		@ frame_needed = 1, uses_anonymous_args = 0
 514 0000 80B5     		push	{r7, lr}
 515              	.LCFI17:
 516              		.cfi_def_cfa_offset 8
 517              		.cfi_offset 14, -4
 518              		.cfi_offset 7, -8
 519 0002 84B0     		sub	sp, sp, #16
 520              	.LCFI18:
 521              		.cfi_def_cfa_offset 24
 522 0004 04AF     		add	r7, sp, #16
 523              	.LCFI19:
 524              		.cfi_def_cfa 7, 8
 201:src/main.c    **** 
 202:src/main.c    **** 	//Call initx(); To Initialize USART & GPIO
 203:src/main.c    **** 	RCC_Configuration();
 525              		.loc 1 203 0
 526 0006 FFF7FEFF 		bl	RCC_Configuration
 204:src/main.c    ****  	TIM_Configuration();
 527              		.loc 1 204 0
 528 000a FFF7FEFF 		bl	TIM_Configuration
 205:src/main.c    ****  	GPIO_Configuration();
 529              		.loc 1 205 0
 530 000e FFF7FEFF 		bl	GPIO_Configuration
 206:src/main.c    **** 
 207:src/main.c    **** 	//Create Task For USART
 208:src/main.c    **** 	xTaskCreate(pwm, (signed char*)"pwm", 128, NULL, tskIDLE_PRIORITY+1, NULL);
 531              		.loc 1 208 0
 532 0012 40F20003 		movw	r3, #:lower16:pwm
 533 0016 C0F20003 		movt	r3, #:upper16:pwm
 534 001a 4FF00102 		mov	r2, #1
 535 001e 0092     		str	r2, [sp, #0]
 536 0020 4FF00002 		mov	r2, #0
 537 0024 0192     		str	r2, [sp, #4]
 538 0026 4FF00002 		mov	r2, #0
 539 002a 0292     		str	r2, [sp, #8]
 540 002c 4FF00002 		mov	r2, #0
 541 0030 0392     		str	r2, [sp, #12]
 542 0032 1846     		mov	r0, r3
 543 0034 40F20001 		movw	r1, #:lower16:.LC0
 544 0038 C0F20001 		movt	r1, #:upper16:.LC0
 545 003c 4FF08002 		mov	r2, #128
 546 0040 4FF00003 		mov	r3, #0
 547 0044 FFF7FEFF 		bl	xTaskGenericCreate
 209:src/main.c    **** 
 210:src/main.c    **** 	//Call Scheduler
 211:src/main.c    **** 	vTaskStartScheduler();
 548              		.loc 1 211 0
 549 0048 FFF7FEFF 		bl	vTaskStartScheduler
 550 004c 4FF00003 		mov	r3, #0
 212:src/main.c    **** 
 213:src/main.c    **** }
 551              		.loc 1 213 0
 552 0050 1846     		mov	r0, r3
 553 0052 BD46     		mov	sp, r7
 554 0054 80BD     		pop	{r7, pc}
 555              		.cfi_endproc
 556              	.LFE116:
 558 0056 00BF     		.text
 559              	.Letext0:
 560              		.file 2 "/usr/local/csl/arm-2012.03/bin/../lib/gcc/arm-none-eabi/4.6.3/../../../../arm-none-eabi/i
 561              		.file 3 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 562              		.file 4 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_gpio.h"
 563              		.file 5 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_tim.h"
 564              		.file 6 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cca5aqPj.s:20     .text.pwm:00000000 $t
     /tmp/cca5aqPj.s:25     .text.pwm:00000000 pwm
     /tmp/cca5aqPj.s:175    .text.Motor_Control:00000000 Motor_Control
     /tmp/cca5aqPj.s:117    .text.Delay_1ms:00000000 Delay_1ms
     /tmp/cca5aqPj.s:112    .text.Delay_1ms:00000000 $t
     /tmp/cca5aqPj.s:170    .text.Motor_Control:00000000 $t
     /tmp/cca5aqPj.s:293    .text.RCC_Configuration:00000000 $t
     /tmp/cca5aqPj.s:298    .text.RCC_Configuration:00000000 RCC_Configuration
     /tmp/cca5aqPj.s:326    .text.GPIO_Configuration:00000000 $t
     /tmp/cca5aqPj.s:331    .text.GPIO_Configuration:00000000 GPIO_Configuration
     /tmp/cca5aqPj.s:405    .text.TIM_Configuration:00000000 $t
     /tmp/cca5aqPj.s:410    .text.TIM_Configuration:00000000 TIM_Configuration
     /tmp/cca5aqPj.s:499    .rodata:00000000 $d
     /tmp/cca5aqPj.s:500    .rodata:00000000 .LC0
     /tmp/cca5aqPj.s:503    .text.main:00000000 $t
     /tmp/cca5aqPj.s:508    .text.main:00000000 main
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_AHB1PeriphClockCmd
RCC_APB1PeriphClockCmd
GPIO_StructInit
GPIO_PinAFConfig
GPIO_Init
TIM_TimeBaseStructInit
TIM_TimeBaseInit
TIM_OCStructInit
TIM_OC1Init
TIM_OC2Init
TIM_OC3Init
TIM_OC4Init
TIM_Cmd
xTaskGenericCreate
vTaskStartScheduler
