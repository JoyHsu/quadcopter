   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.NVIC_SetPriority,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	NVIC_SetPriority:
  25              	.LFB101:
  26              		.file 1 "libs/CMSIS/Include/core_cm4.h"
   1:libs/CMSIS/Include/core_cm4.h **** /**************************************************************************//**
   2:libs/CMSIS/Include/core_cm4.h ****  * @file     core_cm4.h
   3:libs/CMSIS/Include/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:libs/CMSIS/Include/core_cm4.h ****  * @version  V2.10
   5:libs/CMSIS/Include/core_cm4.h ****  * @date     19. July 2011
   6:libs/CMSIS/Include/core_cm4.h ****  *
   7:libs/CMSIS/Include/core_cm4.h ****  * @note
   8:libs/CMSIS/Include/core_cm4.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:libs/CMSIS/Include/core_cm4.h ****  *
  10:libs/CMSIS/Include/core_cm4.h ****  * @par
  11:libs/CMSIS/Include/core_cm4.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:libs/CMSIS/Include/core_cm4.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:libs/CMSIS/Include/core_cm4.h ****  * within development tools that are supporting such ARM based processors.
  14:libs/CMSIS/Include/core_cm4.h ****  *
  15:libs/CMSIS/Include/core_cm4.h ****  * @par
  16:libs/CMSIS/Include/core_cm4.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:libs/CMSIS/Include/core_cm4.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:libs/CMSIS/Include/core_cm4.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:libs/CMSIS/Include/core_cm4.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:libs/CMSIS/Include/core_cm4.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:libs/CMSIS/Include/core_cm4.h ****  *
  22:libs/CMSIS/Include/core_cm4.h ****  ******************************************************************************/
  23:libs/CMSIS/Include/core_cm4.h **** #if defined ( __ICCARM__ )
  24:libs/CMSIS/Include/core_cm4.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  25:libs/CMSIS/Include/core_cm4.h **** #endif
  26:libs/CMSIS/Include/core_cm4.h **** 
  27:libs/CMSIS/Include/core_cm4.h **** #ifdef __cplusplus
  28:libs/CMSIS/Include/core_cm4.h ****  extern "C" {
  29:libs/CMSIS/Include/core_cm4.h **** #endif
  30:libs/CMSIS/Include/core_cm4.h **** 
  31:libs/CMSIS/Include/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  32:libs/CMSIS/Include/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  33:libs/CMSIS/Include/core_cm4.h **** 
  34:libs/CMSIS/Include/core_cm4.h **** 
  35:libs/CMSIS/Include/core_cm4.h **** /** \mainpage CMSIS Cortex-M4
  36:libs/CMSIS/Include/core_cm4.h **** 
  37:libs/CMSIS/Include/core_cm4.h ****   This documentation describes the CMSIS Cortex-M Core Peripheral Access Layer.
  38:libs/CMSIS/Include/core_cm4.h ****   It consists of:
  39:libs/CMSIS/Include/core_cm4.h **** 
  40:libs/CMSIS/Include/core_cm4.h ****      - Cortex-M Core Register Definitions
  41:libs/CMSIS/Include/core_cm4.h ****      - Cortex-M functions
  42:libs/CMSIS/Include/core_cm4.h ****      - Cortex-M instructions
  43:libs/CMSIS/Include/core_cm4.h ****      - Cortex-M SIMD instructions
  44:libs/CMSIS/Include/core_cm4.h **** 
  45:libs/CMSIS/Include/core_cm4.h ****   The CMSIS Cortex-M4 Core Peripheral Access Layer contains C and assembly functions that ease
  46:libs/CMSIS/Include/core_cm4.h ****   access to the Cortex-M Core
  47:libs/CMSIS/Include/core_cm4.h ****  */
  48:libs/CMSIS/Include/core_cm4.h **** 
  49:libs/CMSIS/Include/core_cm4.h **** /** \defgroup CMSIS_MISRA_Exceptions  CMSIS MISRA-C:2004 Compliance Exceptions
  50:libs/CMSIS/Include/core_cm4.h ****   CMSIS violates following MISRA-C2004 Rules:
  51:libs/CMSIS/Include/core_cm4.h ****   
  52:libs/CMSIS/Include/core_cm4.h ****    - Violates MISRA 2004 Required Rule 8.5, object/function definition in header file.<br>
  53:libs/CMSIS/Include/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'. 
  54:libs/CMSIS/Include/core_cm4.h **** 
  55:libs/CMSIS/Include/core_cm4.h ****    - Violates MISRA 2004 Required Rule 18.4, declaration of union type or object of union type: '{.
  56:libs/CMSIS/Include/core_cm4.h ****      Unions are used for effective representation of core registers.
  57:libs/CMSIS/Include/core_cm4.h ****    
  58:libs/CMSIS/Include/core_cm4.h ****    - Violates MISRA 2004 Advisory Rule 19.7, Function-like macro defined.<br>
  59:libs/CMSIS/Include/core_cm4.h ****      Function-like macros are used to allow more efficient code. 
  60:libs/CMSIS/Include/core_cm4.h **** 
  61:libs/CMSIS/Include/core_cm4.h ****  */
  62:libs/CMSIS/Include/core_cm4.h **** 
  63:libs/CMSIS/Include/core_cm4.h **** 
  64:libs/CMSIS/Include/core_cm4.h **** /*******************************************************************************
  65:libs/CMSIS/Include/core_cm4.h ****  *                 CMSIS definitions
  66:libs/CMSIS/Include/core_cm4.h ****  ******************************************************************************/
  67:libs/CMSIS/Include/core_cm4.h **** /** \defgroup CMSIS_core_definitions CMSIS Core Definitions
  68:libs/CMSIS/Include/core_cm4.h ****   This file defines all structures and symbols for CMSIS core:
  69:libs/CMSIS/Include/core_cm4.h ****    - CMSIS version number
  70:libs/CMSIS/Include/core_cm4.h ****    - Cortex-M core
  71:libs/CMSIS/Include/core_cm4.h ****    - Cortex-M core Revision Number
  72:libs/CMSIS/Include/core_cm4.h ****   @{
  73:libs/CMSIS/Include/core_cm4.h ****  */
  74:libs/CMSIS/Include/core_cm4.h **** 
  75:libs/CMSIS/Include/core_cm4.h **** /*  CMSIS CM4 definitions */
  76:libs/CMSIS/Include/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (0x02)                                                       /*!<
  77:libs/CMSIS/Include/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (0x10)                                                       /*!<
  78:libs/CMSIS/Include/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16) | __CM4_CMSIS_VERSION_SUB) /*!<
  79:libs/CMSIS/Include/core_cm4.h **** 
  80:libs/CMSIS/Include/core_cm4.h **** #define __CORTEX_M                (0x04)                                                       /*!<
  81:libs/CMSIS/Include/core_cm4.h **** 
  82:libs/CMSIS/Include/core_cm4.h **** 
  83:libs/CMSIS/Include/core_cm4.h **** #if   defined ( __CC_ARM )
  84:libs/CMSIS/Include/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  85:libs/CMSIS/Include/core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  86:libs/CMSIS/Include/core_cm4.h **** 
  87:libs/CMSIS/Include/core_cm4.h **** #elif defined ( __ICCARM__ )
  88:libs/CMSIS/Include/core_cm4.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
  89:libs/CMSIS/Include/core_cm4.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
  90:libs/CMSIS/Include/core_cm4.h **** 
  91:libs/CMSIS/Include/core_cm4.h **** #elif defined ( __GNUC__ )
  92:libs/CMSIS/Include/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  93:libs/CMSIS/Include/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  94:libs/CMSIS/Include/core_cm4.h **** 
  95:libs/CMSIS/Include/core_cm4.h **** #elif defined ( __TASKING__ )
  96:libs/CMSIS/Include/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  97:libs/CMSIS/Include/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  98:libs/CMSIS/Include/core_cm4.h **** 
  99:libs/CMSIS/Include/core_cm4.h **** #endif
 100:libs/CMSIS/Include/core_cm4.h **** 
 101:libs/CMSIS/Include/core_cm4.h **** /*!< __FPU_USED to be checked prior to making use of FPU specific registers and functions */
 102:libs/CMSIS/Include/core_cm4.h **** #if defined ( __CC_ARM )
 103:libs/CMSIS/Include/core_cm4.h ****   #if defined __TARGET_FPU_VFP
 104:libs/CMSIS/Include/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 105:libs/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1
 106:libs/CMSIS/Include/core_cm4.h ****     #else
 107:libs/CMSIS/Include/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 108:libs/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0
 109:libs/CMSIS/Include/core_cm4.h ****     #endif
 110:libs/CMSIS/Include/core_cm4.h ****   #else
 111:libs/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0
 112:libs/CMSIS/Include/core_cm4.h ****   #endif
 113:libs/CMSIS/Include/core_cm4.h **** 
 114:libs/CMSIS/Include/core_cm4.h **** #elif defined ( __ICCARM__ )
 115:libs/CMSIS/Include/core_cm4.h ****   #if defined __ARMVFP__
 116:libs/CMSIS/Include/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 117:libs/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1
 118:libs/CMSIS/Include/core_cm4.h ****     #else
 119:libs/CMSIS/Include/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 120:libs/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0
 121:libs/CMSIS/Include/core_cm4.h ****     #endif
 122:libs/CMSIS/Include/core_cm4.h ****   #else
 123:libs/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0
 124:libs/CMSIS/Include/core_cm4.h ****   #endif
 125:libs/CMSIS/Include/core_cm4.h **** 
 126:libs/CMSIS/Include/core_cm4.h **** #elif defined ( __GNUC__ )
 127:libs/CMSIS/Include/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 128:libs/CMSIS/Include/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 129:libs/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1
 130:libs/CMSIS/Include/core_cm4.h ****     #else
 131:libs/CMSIS/Include/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 132:libs/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0
 133:libs/CMSIS/Include/core_cm4.h ****     #endif
 134:libs/CMSIS/Include/core_cm4.h ****   #else
 135:libs/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0
 136:libs/CMSIS/Include/core_cm4.h ****   #endif
 137:libs/CMSIS/Include/core_cm4.h **** 
 138:libs/CMSIS/Include/core_cm4.h **** #elif defined ( __TASKING__ )
 139:libs/CMSIS/Include/core_cm4.h ****     /* add preprocessor checks to define __FPU_USED */
 140:libs/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0
 141:libs/CMSIS/Include/core_cm4.h **** #endif
 142:libs/CMSIS/Include/core_cm4.h **** 
 143:libs/CMSIS/Include/core_cm4.h **** #include <stdint.h>                      /*!< standard types definitions                      */
 144:libs/CMSIS/Include/core_cm4.h **** #include <core_cmInstr.h>                /*!< Core Instruction Access                         */
 145:libs/CMSIS/Include/core_cm4.h **** #include <core_cmFunc.h>                 /*!< Core Function Access                            */
 146:libs/CMSIS/Include/core_cm4.h **** #include <core_cm4_simd.h>               /*!< Compiler specific SIMD Intrinsics               */
 147:libs/CMSIS/Include/core_cm4.h **** 
 148:libs/CMSIS/Include/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 149:libs/CMSIS/Include/core_cm4.h **** 
 150:libs/CMSIS/Include/core_cm4.h **** #ifndef __CMSIS_GENERIC
 151:libs/CMSIS/Include/core_cm4.h **** 
 152:libs/CMSIS/Include/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 153:libs/CMSIS/Include/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 154:libs/CMSIS/Include/core_cm4.h **** 
 155:libs/CMSIS/Include/core_cm4.h **** /* check device defines and use defaults */
 156:libs/CMSIS/Include/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 157:libs/CMSIS/Include/core_cm4.h ****   #ifndef __CM4_REV
 158:libs/CMSIS/Include/core_cm4.h ****     #define __CM4_REV               0x0000
 159:libs/CMSIS/Include/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 160:libs/CMSIS/Include/core_cm4.h ****   #endif
 161:libs/CMSIS/Include/core_cm4.h **** 
 162:libs/CMSIS/Include/core_cm4.h ****   #ifndef __FPU_PRESENT
 163:libs/CMSIS/Include/core_cm4.h ****     #define __FPU_PRESENT             0
 164:libs/CMSIS/Include/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 165:libs/CMSIS/Include/core_cm4.h ****   #endif
 166:libs/CMSIS/Include/core_cm4.h **** 
 167:libs/CMSIS/Include/core_cm4.h ****   #ifndef __MPU_PRESENT
 168:libs/CMSIS/Include/core_cm4.h ****     #define __MPU_PRESENT             0
 169:libs/CMSIS/Include/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 170:libs/CMSIS/Include/core_cm4.h ****   #endif
 171:libs/CMSIS/Include/core_cm4.h **** 
 172:libs/CMSIS/Include/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 173:libs/CMSIS/Include/core_cm4.h ****     #define __NVIC_PRIO_BITS          4
 174:libs/CMSIS/Include/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 175:libs/CMSIS/Include/core_cm4.h ****   #endif
 176:libs/CMSIS/Include/core_cm4.h **** 
 177:libs/CMSIS/Include/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 178:libs/CMSIS/Include/core_cm4.h ****     #define __Vendor_SysTickConfig    0
 179:libs/CMSIS/Include/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 180:libs/CMSIS/Include/core_cm4.h ****   #endif
 181:libs/CMSIS/Include/core_cm4.h **** #endif
 182:libs/CMSIS/Include/core_cm4.h **** 
 183:libs/CMSIS/Include/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 184:libs/CMSIS/Include/core_cm4.h **** #ifdef __cplusplus
 185:libs/CMSIS/Include/core_cm4.h ****   #define   __I     volatile             /*!< defines 'read only' permissions                 */
 186:libs/CMSIS/Include/core_cm4.h **** #else
 187:libs/CMSIS/Include/core_cm4.h ****   #define   __I     volatile const       /*!< defines 'read only' permissions                 */
 188:libs/CMSIS/Include/core_cm4.h **** #endif
 189:libs/CMSIS/Include/core_cm4.h **** #define     __O     volatile             /*!< defines 'write only' permissions                */
 190:libs/CMSIS/Include/core_cm4.h **** #define     __IO    volatile             /*!< defines 'read / write' permissions              */
 191:libs/CMSIS/Include/core_cm4.h **** 
 192:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_core_definitions */
 193:libs/CMSIS/Include/core_cm4.h **** 
 194:libs/CMSIS/Include/core_cm4.h **** 
 195:libs/CMSIS/Include/core_cm4.h **** 
 196:libs/CMSIS/Include/core_cm4.h **** /*******************************************************************************
 197:libs/CMSIS/Include/core_cm4.h ****  *                 Register Abstraction
 198:libs/CMSIS/Include/core_cm4.h ****  ******************************************************************************/
 199:libs/CMSIS/Include/core_cm4.h **** /** \defgroup CMSIS_core_register CMSIS Core Register
 200:libs/CMSIS/Include/core_cm4.h ****   Core Register contain:
 201:libs/CMSIS/Include/core_cm4.h ****   - Core Register
 202:libs/CMSIS/Include/core_cm4.h ****   - Core NVIC Register
 203:libs/CMSIS/Include/core_cm4.h ****   - Core SCB Register
 204:libs/CMSIS/Include/core_cm4.h ****   - Core SysTick Register
 205:libs/CMSIS/Include/core_cm4.h ****   - Core Debug Register
 206:libs/CMSIS/Include/core_cm4.h ****   - Core MPU Register
 207:libs/CMSIS/Include/core_cm4.h ****   - Core FPU Register
 208:libs/CMSIS/Include/core_cm4.h **** */
 209:libs/CMSIS/Include/core_cm4.h **** 
 210:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 211:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_CORE CMSIS Core
 212:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M Core Registers
 213:libs/CMSIS/Include/core_cm4.h ****   @{
 214:libs/CMSIS/Include/core_cm4.h ****  */
 215:libs/CMSIS/Include/core_cm4.h **** 
 216:libs/CMSIS/Include/core_cm4.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 217:libs/CMSIS/Include/core_cm4.h ****  */
 218:libs/CMSIS/Include/core_cm4.h **** typedef union
 219:libs/CMSIS/Include/core_cm4.h **** {
 220:libs/CMSIS/Include/core_cm4.h ****   struct
 221:libs/CMSIS/Include/core_cm4.h ****   {
 222:libs/CMSIS/Include/core_cm4.h **** #if (__CORTEX_M != 0x04)
 223:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 224:libs/CMSIS/Include/core_cm4.h **** #else
 225:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 226:libs/CMSIS/Include/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 227:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 228:libs/CMSIS/Include/core_cm4.h **** #endif
 229:libs/CMSIS/Include/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 230:libs/CMSIS/Include/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 231:libs/CMSIS/Include/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 232:libs/CMSIS/Include/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 233:libs/CMSIS/Include/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 234:libs/CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 235:libs/CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 236:libs/CMSIS/Include/core_cm4.h **** } APSR_Type;
 237:libs/CMSIS/Include/core_cm4.h **** 
 238:libs/CMSIS/Include/core_cm4.h **** 
 239:libs/CMSIS/Include/core_cm4.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 240:libs/CMSIS/Include/core_cm4.h ****  */
 241:libs/CMSIS/Include/core_cm4.h **** typedef union
 242:libs/CMSIS/Include/core_cm4.h **** {
 243:libs/CMSIS/Include/core_cm4.h ****   struct
 244:libs/CMSIS/Include/core_cm4.h ****   {
 245:libs/CMSIS/Include/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 246:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 247:libs/CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 248:libs/CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 249:libs/CMSIS/Include/core_cm4.h **** } IPSR_Type;
 250:libs/CMSIS/Include/core_cm4.h **** 
 251:libs/CMSIS/Include/core_cm4.h **** 
 252:libs/CMSIS/Include/core_cm4.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 253:libs/CMSIS/Include/core_cm4.h ****  */
 254:libs/CMSIS/Include/core_cm4.h **** typedef union
 255:libs/CMSIS/Include/core_cm4.h **** {
 256:libs/CMSIS/Include/core_cm4.h ****   struct
 257:libs/CMSIS/Include/core_cm4.h ****   {
 258:libs/CMSIS/Include/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 259:libs/CMSIS/Include/core_cm4.h **** #if (__CORTEX_M != 0x04)
 260:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 261:libs/CMSIS/Include/core_cm4.h **** #else
 262:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 263:libs/CMSIS/Include/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 264:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 265:libs/CMSIS/Include/core_cm4.h **** #endif
 266:libs/CMSIS/Include/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 267:libs/CMSIS/Include/core_cm4.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 268:libs/CMSIS/Include/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 269:libs/CMSIS/Include/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 270:libs/CMSIS/Include/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 271:libs/CMSIS/Include/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 272:libs/CMSIS/Include/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 273:libs/CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 274:libs/CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 275:libs/CMSIS/Include/core_cm4.h **** } xPSR_Type;
 276:libs/CMSIS/Include/core_cm4.h **** 
 277:libs/CMSIS/Include/core_cm4.h **** 
 278:libs/CMSIS/Include/core_cm4.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 279:libs/CMSIS/Include/core_cm4.h ****  */
 280:libs/CMSIS/Include/core_cm4.h **** typedef union
 281:libs/CMSIS/Include/core_cm4.h **** {
 282:libs/CMSIS/Include/core_cm4.h ****   struct
 283:libs/CMSIS/Include/core_cm4.h ****   {
 284:libs/CMSIS/Include/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 285:libs/CMSIS/Include/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 286:libs/CMSIS/Include/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 287:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 288:libs/CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 289:libs/CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 290:libs/CMSIS/Include/core_cm4.h **** } CONTROL_Type;
 291:libs/CMSIS/Include/core_cm4.h **** 
 292:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_CORE */
 293:libs/CMSIS/Include/core_cm4.h **** 
 294:libs/CMSIS/Include/core_cm4.h **** 
 295:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 296:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_NVIC CMSIS NVIC
 297:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M NVIC Registers
 298:libs/CMSIS/Include/core_cm4.h ****   @{
 299:libs/CMSIS/Include/core_cm4.h ****  */
 300:libs/CMSIS/Include/core_cm4.h **** 
 301:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 302:libs/CMSIS/Include/core_cm4.h ****  */
 303:libs/CMSIS/Include/core_cm4.h **** typedef struct
 304:libs/CMSIS/Include/core_cm4.h **** {
 305:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 306:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED0[24];
 307:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 308:libs/CMSIS/Include/core_cm4.h ****        uint32_t RSERVED1[24];
 309:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 310:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED2[24];
 311:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 312:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED3[24];
 313:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 314:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED4[56];
 315:libs/CMSIS/Include/core_cm4.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 316:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED5[644];
 317:libs/CMSIS/Include/core_cm4.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 318:libs/CMSIS/Include/core_cm4.h **** }  NVIC_Type;
 319:libs/CMSIS/Include/core_cm4.h **** 
 320:libs/CMSIS/Include/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 321:libs/CMSIS/Include/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0                                          /*!< STIR: I
 322:libs/CMSIS/Include/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL << NVIC_STIR_INTID_Pos)            /*!< STIR: I
 323:libs/CMSIS/Include/core_cm4.h **** 
 324:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 325:libs/CMSIS/Include/core_cm4.h **** 
 326:libs/CMSIS/Include/core_cm4.h **** 
 327:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 328:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_SCB CMSIS SCB
 329:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M System Control Block Registers
 330:libs/CMSIS/Include/core_cm4.h ****   @{
 331:libs/CMSIS/Include/core_cm4.h ****  */
 332:libs/CMSIS/Include/core_cm4.h **** 
 333:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the System Control Block (SCB).
 334:libs/CMSIS/Include/core_cm4.h ****  */
 335:libs/CMSIS/Include/core_cm4.h **** typedef struct
 336:libs/CMSIS/Include/core_cm4.h **** {
 337:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 338:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 339:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 340:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 341:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 342:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 343:libs/CMSIS/Include/core_cm4.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 344:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 345:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 346:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register       
 347:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 348:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 349:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register       
 350:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 351:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 352:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 353:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 354:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 355:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 356:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED0[5];
 357:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 358:libs/CMSIS/Include/core_cm4.h **** } SCB_Type;
 359:libs/CMSIS/Include/core_cm4.h **** 
 360:libs/CMSIS/Include/core_cm4.h **** /* SCB CPUID Register Definitions */
 361:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 362:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 363:libs/CMSIS/Include/core_cm4.h **** 
 364:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 365:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 366:libs/CMSIS/Include/core_cm4.h **** 
 367:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 368:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 369:libs/CMSIS/Include/core_cm4.h **** 
 370:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 371:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 372:libs/CMSIS/Include/core_cm4.h **** 
 373:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 374:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 375:libs/CMSIS/Include/core_cm4.h **** 
 376:libs/CMSIS/Include/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 377:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 378:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 379:libs/CMSIS/Include/core_cm4.h **** 
 380:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 381:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 382:libs/CMSIS/Include/core_cm4.h **** 
 383:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 384:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 385:libs/CMSIS/Include/core_cm4.h **** 
 386:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 387:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 388:libs/CMSIS/Include/core_cm4.h **** 
 389:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 390:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 391:libs/CMSIS/Include/core_cm4.h **** 
 392:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 393:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 394:libs/CMSIS/Include/core_cm4.h **** 
 395:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 396:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 397:libs/CMSIS/Include/core_cm4.h **** 
 398:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 399:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 400:libs/CMSIS/Include/core_cm4.h **** 
 401:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 402:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 403:libs/CMSIS/Include/core_cm4.h **** 
 404:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 405:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 406:libs/CMSIS/Include/core_cm4.h **** 
 407:libs/CMSIS/Include/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 408:libs/CMSIS/Include/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 409:libs/CMSIS/Include/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 410:libs/CMSIS/Include/core_cm4.h **** 
 411:libs/CMSIS/Include/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 412:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 413:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 414:libs/CMSIS/Include/core_cm4.h **** 
 415:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 416:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 417:libs/CMSIS/Include/core_cm4.h **** 
 418:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 419:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 420:libs/CMSIS/Include/core_cm4.h **** 
 421:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 422:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 423:libs/CMSIS/Include/core_cm4.h **** 
 424:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 425:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 426:libs/CMSIS/Include/core_cm4.h **** 
 427:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 428:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 429:libs/CMSIS/Include/core_cm4.h **** 
 430:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 431:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 432:libs/CMSIS/Include/core_cm4.h **** 
 433:libs/CMSIS/Include/core_cm4.h **** /* SCB System Control Register Definitions */
 434:libs/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 435:libs/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 436:libs/CMSIS/Include/core_cm4.h **** 
 437:libs/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 438:libs/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 439:libs/CMSIS/Include/core_cm4.h **** 
 440:libs/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 441:libs/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 442:libs/CMSIS/Include/core_cm4.h **** 
 443:libs/CMSIS/Include/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 444:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 445:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 446:libs/CMSIS/Include/core_cm4.h **** 
 447:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 448:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 449:libs/CMSIS/Include/core_cm4.h **** 
 450:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 451:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 452:libs/CMSIS/Include/core_cm4.h **** 
 453:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 454:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 455:libs/CMSIS/Include/core_cm4.h **** 
 456:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 457:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 458:libs/CMSIS/Include/core_cm4.h **** 
 459:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 460:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 461:libs/CMSIS/Include/core_cm4.h **** 
 462:libs/CMSIS/Include/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 463:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 464:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 465:libs/CMSIS/Include/core_cm4.h **** 
 466:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 467:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 468:libs/CMSIS/Include/core_cm4.h **** 
 469:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 470:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 471:libs/CMSIS/Include/core_cm4.h **** 
 472:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 473:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 474:libs/CMSIS/Include/core_cm4.h **** 
 475:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 476:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 477:libs/CMSIS/Include/core_cm4.h **** 
 478:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 479:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 480:libs/CMSIS/Include/core_cm4.h **** 
 481:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 482:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 483:libs/CMSIS/Include/core_cm4.h **** 
 484:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 485:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 486:libs/CMSIS/Include/core_cm4.h **** 
 487:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 488:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 489:libs/CMSIS/Include/core_cm4.h **** 
 490:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 491:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 492:libs/CMSIS/Include/core_cm4.h **** 
 493:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 494:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 495:libs/CMSIS/Include/core_cm4.h **** 
 496:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 497:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 498:libs/CMSIS/Include/core_cm4.h **** 
 499:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 500:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 501:libs/CMSIS/Include/core_cm4.h **** 
 502:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 503:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 504:libs/CMSIS/Include/core_cm4.h **** 
 505:libs/CMSIS/Include/core_cm4.h **** /* SCB Configurable Fault Status Registers Definitions */
 506:libs/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 507:libs/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 508:libs/CMSIS/Include/core_cm4.h **** 
 509:libs/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 510:libs/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 511:libs/CMSIS/Include/core_cm4.h **** 
 512:libs/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 513:libs/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 514:libs/CMSIS/Include/core_cm4.h **** 
 515:libs/CMSIS/Include/core_cm4.h **** /* SCB Hard Fault Status Registers Definitions */
 516:libs/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 517:libs/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 518:libs/CMSIS/Include/core_cm4.h **** 
 519:libs/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 520:libs/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 521:libs/CMSIS/Include/core_cm4.h **** 
 522:libs/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 523:libs/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 524:libs/CMSIS/Include/core_cm4.h **** 
 525:libs/CMSIS/Include/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 526:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 527:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 528:libs/CMSIS/Include/core_cm4.h **** 
 529:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 530:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 531:libs/CMSIS/Include/core_cm4.h **** 
 532:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 533:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 534:libs/CMSIS/Include/core_cm4.h **** 
 535:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 536:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 537:libs/CMSIS/Include/core_cm4.h **** 
 538:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 539:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 540:libs/CMSIS/Include/core_cm4.h **** 
 541:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_SCB */
 542:libs/CMSIS/Include/core_cm4.h **** 
 543:libs/CMSIS/Include/core_cm4.h **** 
 544:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 545:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_SCnSCB CMSIS System Control and ID Register not in the SCB
 546:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M System Control and ID Register not in the SCB
 547:libs/CMSIS/Include/core_cm4.h ****   @{
 548:libs/CMSIS/Include/core_cm4.h ****  */
 549:libs/CMSIS/Include/core_cm4.h **** 
 550:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the System Control and ID Register not in the SCB.
 551:libs/CMSIS/Include/core_cm4.h ****  */
 552:libs/CMSIS/Include/core_cm4.h **** typedef struct
 553:libs/CMSIS/Include/core_cm4.h **** {
 554:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED0[1];
 555:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 556:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 557:libs/CMSIS/Include/core_cm4.h **** } SCnSCB_Type;
 558:libs/CMSIS/Include/core_cm4.h **** 
 559:libs/CMSIS/Include/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 560:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0                                          /*!< ICTR: I
 561:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL << SCnSCB_ICTR_INTLINESNUM_Pos)      /*!< ICTR: I
 562:libs/CMSIS/Include/core_cm4.h **** 
 563:libs/CMSIS/Include/core_cm4.h **** /* Auxiliary Control Register Definitions */
 564:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9                                          /*!< ACTLR: 
 565:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 566:libs/CMSIS/Include/core_cm4.h **** 
 567:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8                                          /*!< ACTLR: 
 568:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 569:libs/CMSIS/Include/core_cm4.h **** 
 570:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2                                          /*!< ACTLR: 
 571:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 572:libs/CMSIS/Include/core_cm4.h **** 
 573:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1                                          /*!< ACTLR: 
 574:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 575:libs/CMSIS/Include/core_cm4.h **** 
 576:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0                                          /*!< ACTLR: 
 577:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL << SCnSCB_ACTLR_DISMCYCINT_Pos)        /*!< ACTLR: 
 578:libs/CMSIS/Include/core_cm4.h **** 
 579:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 580:libs/CMSIS/Include/core_cm4.h **** 
 581:libs/CMSIS/Include/core_cm4.h **** 
 582:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 583:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_SysTick CMSIS SysTick
 584:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M System Timer Registers
 585:libs/CMSIS/Include/core_cm4.h ****   @{
 586:libs/CMSIS/Include/core_cm4.h ****  */
 587:libs/CMSIS/Include/core_cm4.h **** 
 588:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the System Timer (SysTick).
 589:libs/CMSIS/Include/core_cm4.h ****  */
 590:libs/CMSIS/Include/core_cm4.h **** typedef struct
 591:libs/CMSIS/Include/core_cm4.h **** {
 592:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 593:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 594:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 595:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 596:libs/CMSIS/Include/core_cm4.h **** } SysTick_Type;
 597:libs/CMSIS/Include/core_cm4.h **** 
 598:libs/CMSIS/Include/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 599:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 600:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 601:libs/CMSIS/Include/core_cm4.h **** 
 602:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 603:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 604:libs/CMSIS/Include/core_cm4.h **** 
 605:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 606:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 607:libs/CMSIS/Include/core_cm4.h **** 
 608:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 609:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 610:libs/CMSIS/Include/core_cm4.h **** 
 611:libs/CMSIS/Include/core_cm4.h **** /* SysTick Reload Register Definitions */
 612:libs/CMSIS/Include/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 613:libs/CMSIS/Include/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 614:libs/CMSIS/Include/core_cm4.h **** 
 615:libs/CMSIS/Include/core_cm4.h **** /* SysTick Current Register Definitions */
 616:libs/CMSIS/Include/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 617:libs/CMSIS/Include/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 618:libs/CMSIS/Include/core_cm4.h **** 
 619:libs/CMSIS/Include/core_cm4.h **** /* SysTick Calibration Register Definitions */
 620:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 621:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 622:libs/CMSIS/Include/core_cm4.h **** 
 623:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 624:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 625:libs/CMSIS/Include/core_cm4.h **** 
 626:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 627:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 628:libs/CMSIS/Include/core_cm4.h **** 
 629:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 630:libs/CMSIS/Include/core_cm4.h **** 
 631:libs/CMSIS/Include/core_cm4.h **** 
 632:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 633:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_ITM CMSIS ITM
 634:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M Instrumentation Trace Macrocell (ITM)
 635:libs/CMSIS/Include/core_cm4.h ****   @{
 636:libs/CMSIS/Include/core_cm4.h ****  */
 637:libs/CMSIS/Include/core_cm4.h **** 
 638:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 639:libs/CMSIS/Include/core_cm4.h ****  */
 640:libs/CMSIS/Include/core_cm4.h **** typedef struct
 641:libs/CMSIS/Include/core_cm4.h **** {
 642:libs/CMSIS/Include/core_cm4.h ****   __O  union
 643:libs/CMSIS/Include/core_cm4.h ****   {
 644:libs/CMSIS/Include/core_cm4.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 645:libs/CMSIS/Include/core_cm4.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 646:libs/CMSIS/Include/core_cm4.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 647:libs/CMSIS/Include/core_cm4.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 648:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED0[864];
 649:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t TER;                     /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register       
 650:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED1[15];
 651:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t TPR;                     /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register    
 652:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED2[15];
 653:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t TCR;                     /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register      
 654:libs/CMSIS/Include/core_cm4.h **** } ITM_Type;
 655:libs/CMSIS/Include/core_cm4.h **** 
 656:libs/CMSIS/Include/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 657:libs/CMSIS/Include/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0                                          /*!< ITM TPR
 658:libs/CMSIS/Include/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)             /*!< ITM TPR
 659:libs/CMSIS/Include/core_cm4.h **** 
 660:libs/CMSIS/Include/core_cm4.h **** /* ITM Trace Control Register Definitions */
 661:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23                                          /*!< ITM TCR
 662:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                   /*!< ITM TCR
 663:libs/CMSIS/Include/core_cm4.h **** 
 664:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16                                          /*!< ITM TCR
 665:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)          /*!< ITM TCR
 666:libs/CMSIS/Include/core_cm4.h **** 
 667:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10                                          /*!< ITM TCR
 668:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                /*!< ITM TCR
 669:libs/CMSIS/Include/core_cm4.h **** 
 670:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8                                          /*!< ITM TCR
 671:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)             /*!< ITM TCR
 672:libs/CMSIS/Include/core_cm4.h **** 
 673:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4                                          /*!< ITM TCR
 674:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                 /*!< ITM TCR
 675:libs/CMSIS/Include/core_cm4.h **** 
 676:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TXENA_Pos                   3                                          /*!< ITM TCR
 677:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TXENA_Msk                  (1UL << ITM_TCR_TXENA_Pos)                  /*!< ITM TCR
 678:libs/CMSIS/Include/core_cm4.h **** 
 679:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2                                          /*!< ITM TCR
 680:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                /*!< ITM TCR
 681:libs/CMSIS/Include/core_cm4.h **** 
 682:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1                                          /*!< ITM TCR
 683:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                  /*!< ITM TCR
 684:libs/CMSIS/Include/core_cm4.h **** 
 685:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0                                          /*!< ITM TCR
 686:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                 /*!< ITM TCR
 687:libs/CMSIS/Include/core_cm4.h **** 
 688:libs/CMSIS/Include/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 689:libs/CMSIS/Include/core_cm4.h **** 
 690:libs/CMSIS/Include/core_cm4.h **** 
 691:libs/CMSIS/Include/core_cm4.h **** #if (__MPU_PRESENT == 1)
 692:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 693:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_MPU CMSIS MPU
 694:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M Memory Protection Unit (MPU)
 695:libs/CMSIS/Include/core_cm4.h ****   @{
 696:libs/CMSIS/Include/core_cm4.h ****  */
 697:libs/CMSIS/Include/core_cm4.h **** 
 698:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
 699:libs/CMSIS/Include/core_cm4.h ****  */
 700:libs/CMSIS/Include/core_cm4.h **** typedef struct
 701:libs/CMSIS/Include/core_cm4.h **** {
 702:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
 703:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
 704:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
 705:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 706:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 707:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
 708:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
 709:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
 710:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
 711:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
 712:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
 713:libs/CMSIS/Include/core_cm4.h **** } MPU_Type;
 714:libs/CMSIS/Include/core_cm4.h **** 
 715:libs/CMSIS/Include/core_cm4.h **** /* MPU Type Register */
 716:libs/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 717:libs/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 718:libs/CMSIS/Include/core_cm4.h **** 
 719:libs/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 720:libs/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 721:libs/CMSIS/Include/core_cm4.h **** 
 722:libs/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 723:libs/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 724:libs/CMSIS/Include/core_cm4.h **** 
 725:libs/CMSIS/Include/core_cm4.h **** /* MPU Control Register */
 726:libs/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 727:libs/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 728:libs/CMSIS/Include/core_cm4.h **** 
 729:libs/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 730:libs/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 731:libs/CMSIS/Include/core_cm4.h **** 
 732:libs/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 733:libs/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 734:libs/CMSIS/Include/core_cm4.h **** 
 735:libs/CMSIS/Include/core_cm4.h **** /* MPU Region Number Register */
 736:libs/CMSIS/Include/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 737:libs/CMSIS/Include/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
 738:libs/CMSIS/Include/core_cm4.h **** 
 739:libs/CMSIS/Include/core_cm4.h **** /* MPU Region Base Address Register */
 740:libs/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 741:libs/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 742:libs/CMSIS/Include/core_cm4.h **** 
 743:libs/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 744:libs/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 745:libs/CMSIS/Include/core_cm4.h **** 
 746:libs/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 747:libs/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 748:libs/CMSIS/Include/core_cm4.h **** 
 749:libs/CMSIS/Include/core_cm4.h **** /* MPU Region Attribute and Size Register */
 750:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU 
 751:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
 752:libs/CMSIS/Include/core_cm4.h **** 
 753:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 754:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 755:libs/CMSIS/Include/core_cm4.h **** 
 756:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 757:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 758:libs/CMSIS/Include/core_cm4.h **** 
 759:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU 
 760:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL << MPU_RASR_ENABLE_Pos)                   /*!< MPU 
 761:libs/CMSIS/Include/core_cm4.h **** 
 762:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_MPU */
 763:libs/CMSIS/Include/core_cm4.h **** #endif
 764:libs/CMSIS/Include/core_cm4.h **** 
 765:libs/CMSIS/Include/core_cm4.h **** 
 766:libs/CMSIS/Include/core_cm4.h **** #if (__FPU_PRESENT == 1)
 767:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 768:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_FPU CMSIS FPU
 769:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M Floating Point Unit (FPU)
 770:libs/CMSIS/Include/core_cm4.h ****   @{
 771:libs/CMSIS/Include/core_cm4.h ****  */
 772:libs/CMSIS/Include/core_cm4.h **** 
 773:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the Floating Point Unit (FPU).
 774:libs/CMSIS/Include/core_cm4.h ****  */
 775:libs/CMSIS/Include/core_cm4.h **** typedef struct
 776:libs/CMSIS/Include/core_cm4.h **** {
 777:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED0[1];
 778:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t FPCCR;                   /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
 779:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t FPCAR;                   /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
 780:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t FPDSCR;                  /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
 781:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t MVFR0;                   /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
 782:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t MVFR1;                   /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
 783:libs/CMSIS/Include/core_cm4.h **** } FPU_Type;
 784:libs/CMSIS/Include/core_cm4.h **** 
 785:libs/CMSIS/Include/core_cm4.h **** /* Floating-Point Context Control Register */
 786:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31                                             /*!< FPCC
 787:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
 788:libs/CMSIS/Include/core_cm4.h **** 
 789:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30                                             /*!< FPCC
 790:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
 791:libs/CMSIS/Include/core_cm4.h **** 
 792:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8                                             /*!< FPCC
 793:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
 794:libs/CMSIS/Include/core_cm4.h **** 
 795:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6                                             /*!< FPCC
 796:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
 797:libs/CMSIS/Include/core_cm4.h **** 
 798:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5                                             /*!< FPCC
 799:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
 800:libs/CMSIS/Include/core_cm4.h **** 
 801:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4                                             /*!< FPCC
 802:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
 803:libs/CMSIS/Include/core_cm4.h **** 
 804:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3                                             /*!< FPCC
 805:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
 806:libs/CMSIS/Include/core_cm4.h **** 
 807:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1                                             /*!< FPCC
 808:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
 809:libs/CMSIS/Include/core_cm4.h **** 
 810:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0                                             /*!< FPCC
 811:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL << FPU_FPCCR_LSPACT_Pos)                  /*!< FPCC
 812:libs/CMSIS/Include/core_cm4.h **** 
 813:libs/CMSIS/Include/core_cm4.h **** /* Floating-Point Context Address Register */
 814:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3                                             /*!< FPCA
 815:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
 816:libs/CMSIS/Include/core_cm4.h **** 
 817:libs/CMSIS/Include/core_cm4.h **** /* Floating-Point Default Status Control Register */
 818:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26                                             /*!< FPDS
 819:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
 820:libs/CMSIS/Include/core_cm4.h **** 
 821:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25                                             /*!< FPDS
 822:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
 823:libs/CMSIS/Include/core_cm4.h **** 
 824:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24                                             /*!< FPDS
 825:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
 826:libs/CMSIS/Include/core_cm4.h **** 
 827:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22                                             /*!< FPDS
 828:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
 829:libs/CMSIS/Include/core_cm4.h **** 
 830:libs/CMSIS/Include/core_cm4.h **** /* Media and FP Feature Register 0 */
 831:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28                                             /*!< MVFR
 832:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
 833:libs/CMSIS/Include/core_cm4.h **** 
 834:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24                                             /*!< MVFR
 835:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
 836:libs/CMSIS/Include/core_cm4.h **** 
 837:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20                                             /*!< MVFR
 838:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
 839:libs/CMSIS/Include/core_cm4.h **** 
 840:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16                                             /*!< MVFR
 841:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
 842:libs/CMSIS/Include/core_cm4.h **** 
 843:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12                                             /*!< MVFR
 844:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
 845:libs/CMSIS/Include/core_cm4.h **** 
 846:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8                                             /*!< MVFR
 847:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
 848:libs/CMSIS/Include/core_cm4.h **** 
 849:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4                                             /*!< MVFR
 850:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
 851:libs/CMSIS/Include/core_cm4.h **** 
 852:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0                                             /*!< MVFR
 853:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL << FPU_MVFR0_A_SIMD_registers_Pos)      /*!< MVFR
 854:libs/CMSIS/Include/core_cm4.h **** 
 855:libs/CMSIS/Include/core_cm4.h **** /* Media and FP Feature Register 1 */
 856:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28                                             /*!< MVFR
 857:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
 858:libs/CMSIS/Include/core_cm4.h **** 
 859:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24                                             /*!< MVFR
 860:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
 861:libs/CMSIS/Include/core_cm4.h **** 
 862:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4                                             /*!< MVFR
 863:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
 864:libs/CMSIS/Include/core_cm4.h **** 
 865:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0                                             /*!< MVFR
 866:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL << FPU_MVFR1_FtZ_mode_Pos)              /*!< MVFR
 867:libs/CMSIS/Include/core_cm4.h **** 
 868:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_FPU */
 869:libs/CMSIS/Include/core_cm4.h **** #endif
 870:libs/CMSIS/Include/core_cm4.h **** 
 871:libs/CMSIS/Include/core_cm4.h **** 
 872:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 873:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_CoreDebug CMSIS Core Debug
 874:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M Core Debug Registers
 875:libs/CMSIS/Include/core_cm4.h ****   @{
 876:libs/CMSIS/Include/core_cm4.h ****  */
 877:libs/CMSIS/Include/core_cm4.h **** 
 878:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
 879:libs/CMSIS/Include/core_cm4.h ****  */
 880:libs/CMSIS/Include/core_cm4.h **** typedef struct
 881:libs/CMSIS/Include/core_cm4.h **** {
 882:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
 883:libs/CMSIS/Include/core_cm4.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
 884:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
 885:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
 886:libs/CMSIS/Include/core_cm4.h **** } CoreDebug_Type;
 887:libs/CMSIS/Include/core_cm4.h **** 
 888:libs/CMSIS/Include/core_cm4.h **** /* Debug Halting Control and Status Register */
 889:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 890:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 891:libs/CMSIS/Include/core_cm4.h **** 
 892:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 893:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 894:libs/CMSIS/Include/core_cm4.h **** 
 895:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 896:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 897:libs/CMSIS/Include/core_cm4.h **** 
 898:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 899:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 900:libs/CMSIS/Include/core_cm4.h **** 
 901:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 902:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 903:libs/CMSIS/Include/core_cm4.h **** 
 904:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 905:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 906:libs/CMSIS/Include/core_cm4.h **** 
 907:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 908:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 909:libs/CMSIS/Include/core_cm4.h **** 
 910:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 911:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 912:libs/CMSIS/Include/core_cm4.h **** 
 913:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 914:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 915:libs/CMSIS/Include/core_cm4.h **** 
 916:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 917:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 918:libs/CMSIS/Include/core_cm4.h **** 
 919:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 920:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 921:libs/CMSIS/Include/core_cm4.h **** 
 922:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 923:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 924:libs/CMSIS/Include/core_cm4.h **** 
 925:libs/CMSIS/Include/core_cm4.h **** /* Debug Core Register Selector Register */
 926:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 927:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 928:libs/CMSIS/Include/core_cm4.h **** 
 929:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 930:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 931:libs/CMSIS/Include/core_cm4.h **** 
 932:libs/CMSIS/Include/core_cm4.h **** /* Debug Exception and Monitor Control Register */
 933:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 934:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 935:libs/CMSIS/Include/core_cm4.h **** 
 936:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 937:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 938:libs/CMSIS/Include/core_cm4.h **** 
 939:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 940:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 941:libs/CMSIS/Include/core_cm4.h **** 
 942:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 943:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 944:libs/CMSIS/Include/core_cm4.h **** 
 945:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 946:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 947:libs/CMSIS/Include/core_cm4.h **** 
 948:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 949:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 950:libs/CMSIS/Include/core_cm4.h **** 
 951:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 952:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 953:libs/CMSIS/Include/core_cm4.h **** 
 954:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 955:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 956:libs/CMSIS/Include/core_cm4.h **** 
 957:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 958:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 959:libs/CMSIS/Include/core_cm4.h **** 
 960:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 961:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 962:libs/CMSIS/Include/core_cm4.h **** 
 963:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 964:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 965:libs/CMSIS/Include/core_cm4.h **** 
 966:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 967:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 968:libs/CMSIS/Include/core_cm4.h **** 
 969:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 970:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 971:libs/CMSIS/Include/core_cm4.h **** 
 972:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
 973:libs/CMSIS/Include/core_cm4.h **** 
 974:libs/CMSIS/Include/core_cm4.h **** 
 975:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 976:libs/CMSIS/Include/core_cm4.h ****   @{
 977:libs/CMSIS/Include/core_cm4.h ****  */
 978:libs/CMSIS/Include/core_cm4.h **** 
 979:libs/CMSIS/Include/core_cm4.h **** /* Memory mapping of Cortex-M4 Hardware */
 980:libs/CMSIS/Include/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 981:libs/CMSIS/Include/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
 982:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
 983:libs/CMSIS/Include/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
 984:libs/CMSIS/Include/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
 985:libs/CMSIS/Include/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 986:libs/CMSIS/Include/core_cm4.h **** 
 987:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
 988:libs/CMSIS/Include/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 989:libs/CMSIS/Include/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 990:libs/CMSIS/Include/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 991:libs/CMSIS/Include/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
 992:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 993:libs/CMSIS/Include/core_cm4.h **** 
 994:libs/CMSIS/Include/core_cm4.h **** #if (__MPU_PRESENT == 1)
 995:libs/CMSIS/Include/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
 996:libs/CMSIS/Include/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit  
 997:libs/CMSIS/Include/core_cm4.h **** #endif
 998:libs/CMSIS/Include/core_cm4.h **** 
 999:libs/CMSIS/Include/core_cm4.h **** #if (__FPU_PRESENT == 1)
1000:libs/CMSIS/Include/core_cm4.h ****   #define FPU_BASE          (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit     
1001:libs/CMSIS/Include/core_cm4.h ****   #define FPU               ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit     
1002:libs/CMSIS/Include/core_cm4.h **** #endif
1003:libs/CMSIS/Include/core_cm4.h **** 
1004:libs/CMSIS/Include/core_cm4.h **** /*@} */
1005:libs/CMSIS/Include/core_cm4.h **** 
1006:libs/CMSIS/Include/core_cm4.h **** 
1007:libs/CMSIS/Include/core_cm4.h **** 
1008:libs/CMSIS/Include/core_cm4.h **** /*******************************************************************************
1009:libs/CMSIS/Include/core_cm4.h ****  *                Hardware Abstraction Layer
1010:libs/CMSIS/Include/core_cm4.h ****  ******************************************************************************/
1011:libs/CMSIS/Include/core_cm4.h **** /** \defgroup CMSIS_Core_FunctionInterface CMSIS Core Function Interface
1012:libs/CMSIS/Include/core_cm4.h ****   Core Function Interface contains:
1013:libs/CMSIS/Include/core_cm4.h ****   - Core NVIC Functions
1014:libs/CMSIS/Include/core_cm4.h ****   - Core SysTick Functions
1015:libs/CMSIS/Include/core_cm4.h ****   - Core Debug Functions
1016:libs/CMSIS/Include/core_cm4.h ****   - Core Register Access Functions
1017:libs/CMSIS/Include/core_cm4.h **** */
1018:libs/CMSIS/Include/core_cm4.h **** 
1019:libs/CMSIS/Include/core_cm4.h **** 
1020:libs/CMSIS/Include/core_cm4.h **** 
1021:libs/CMSIS/Include/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1022:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1023:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_Core_NVICFunctions CMSIS Core NVIC Functions
1024:libs/CMSIS/Include/core_cm4.h ****   @{
1025:libs/CMSIS/Include/core_cm4.h ****  */
1026:libs/CMSIS/Include/core_cm4.h **** 
1027:libs/CMSIS/Include/core_cm4.h **** /** \brief  Set Priority Grouping
1028:libs/CMSIS/Include/core_cm4.h **** 
1029:libs/CMSIS/Include/core_cm4.h ****   This function sets the priority grouping field using the required unlock sequence.
1030:libs/CMSIS/Include/core_cm4.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1031:libs/CMSIS/Include/core_cm4.h ****   Only values from 0..7 are used.
1032:libs/CMSIS/Include/core_cm4.h ****   In case of a conflict between priority grouping and available
1033:libs/CMSIS/Include/core_cm4.h ****   priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1034:libs/CMSIS/Include/core_cm4.h **** 
1035:libs/CMSIS/Include/core_cm4.h ****     \param [in]      PriorityGroup  Priority grouping field
1036:libs/CMSIS/Include/core_cm4.h ****  */
1037:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1038:libs/CMSIS/Include/core_cm4.h **** {
1039:libs/CMSIS/Include/core_cm4.h ****   uint32_t reg_value;
1040:libs/CMSIS/Include/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 a
1041:libs/CMSIS/Include/core_cm4.h **** 
1042:libs/CMSIS/Include/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1043:libs/CMSIS/Include/core_cm4.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1044:libs/CMSIS/Include/core_cm4.h ****   reg_value  =  (reg_value                                 |
1045:libs/CMSIS/Include/core_cm4.h ****                 ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
1046:libs/CMSIS/Include/core_cm4.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1047:libs/CMSIS/Include/core_cm4.h ****   SCB->AIRCR =  reg_value;
1048:libs/CMSIS/Include/core_cm4.h **** }
1049:libs/CMSIS/Include/core_cm4.h **** 
1050:libs/CMSIS/Include/core_cm4.h **** 
1051:libs/CMSIS/Include/core_cm4.h **** /** \brief  Get Priority Grouping
1052:libs/CMSIS/Include/core_cm4.h **** 
1053:libs/CMSIS/Include/core_cm4.h ****   This function gets the priority grouping from NVIC Interrupt Controller.
1054:libs/CMSIS/Include/core_cm4.h ****   Priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
1055:libs/CMSIS/Include/core_cm4.h **** 
1056:libs/CMSIS/Include/core_cm4.h ****     \return                Priority grouping field
1057:libs/CMSIS/Include/core_cm4.h ****  */
1058:libs/CMSIS/Include/core_cm4.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
1059:libs/CMSIS/Include/core_cm4.h **** {
1060:libs/CMSIS/Include/core_cm4.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1061:libs/CMSIS/Include/core_cm4.h **** }
1062:libs/CMSIS/Include/core_cm4.h **** 
1063:libs/CMSIS/Include/core_cm4.h **** 
1064:libs/CMSIS/Include/core_cm4.h **** /** \brief  Enable External Interrupt
1065:libs/CMSIS/Include/core_cm4.h **** 
1066:libs/CMSIS/Include/core_cm4.h ****     This function enables a device specific interrupt in the NVIC interrupt controller.
1067:libs/CMSIS/Include/core_cm4.h ****     The interrupt number cannot be a negative value.
1068:libs/CMSIS/Include/core_cm4.h **** 
1069:libs/CMSIS/Include/core_cm4.h ****     \param [in]      IRQn  Number of the external interrupt to enable
1070:libs/CMSIS/Include/core_cm4.h ****  */
1071:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1072:libs/CMSIS/Include/core_cm4.h **** {
1073:libs/CMSIS/Include/core_cm4.h **** /*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
1074:libs/CMSIS/Include/core_cm4.h ****   NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32
1075:libs/CMSIS/Include/core_cm4.h **** }
1076:libs/CMSIS/Include/core_cm4.h **** 
1077:libs/CMSIS/Include/core_cm4.h **** 
1078:libs/CMSIS/Include/core_cm4.h **** /** \brief  Disable External Interrupt
1079:libs/CMSIS/Include/core_cm4.h **** 
1080:libs/CMSIS/Include/core_cm4.h ****     This function disables a device specific interrupt in the NVIC interrupt controller.
1081:libs/CMSIS/Include/core_cm4.h ****     The interrupt number cannot be a negative value.
1082:libs/CMSIS/Include/core_cm4.h **** 
1083:libs/CMSIS/Include/core_cm4.h ****     \param [in]      IRQn  Number of the external interrupt to disable
1084:libs/CMSIS/Include/core_cm4.h ****  */
1085:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1086:libs/CMSIS/Include/core_cm4.h **** {
1087:libs/CMSIS/Include/core_cm4.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1088:libs/CMSIS/Include/core_cm4.h **** }
1089:libs/CMSIS/Include/core_cm4.h **** 
1090:libs/CMSIS/Include/core_cm4.h **** 
1091:libs/CMSIS/Include/core_cm4.h **** /** \brief  Get Pending Interrupt
1092:libs/CMSIS/Include/core_cm4.h **** 
1093:libs/CMSIS/Include/core_cm4.h ****     This function reads the pending register in the NVIC and returns the pending bit
1094:libs/CMSIS/Include/core_cm4.h ****     for the specified interrupt.
1095:libs/CMSIS/Include/core_cm4.h **** 
1096:libs/CMSIS/Include/core_cm4.h ****     \param [in]      IRQn  Number of the interrupt for get pending
1097:libs/CMSIS/Include/core_cm4.h ****     \return             0  Interrupt status is not pending
1098:libs/CMSIS/Include/core_cm4.h ****     \return             1  Interrupt status is pending
1099:libs/CMSIS/Include/core_cm4.h ****  */
1100:libs/CMSIS/Include/core_cm4.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1101:libs/CMSIS/Include/core_cm4.h **** {
1102:libs/CMSIS/Include/core_cm4.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1103:libs/CMSIS/Include/core_cm4.h **** }
1104:libs/CMSIS/Include/core_cm4.h **** 
1105:libs/CMSIS/Include/core_cm4.h **** 
1106:libs/CMSIS/Include/core_cm4.h **** /** \brief  Set Pending Interrupt
1107:libs/CMSIS/Include/core_cm4.h **** 
1108:libs/CMSIS/Include/core_cm4.h ****     This function sets the pending bit for the specified interrupt.
1109:libs/CMSIS/Include/core_cm4.h ****     The interrupt number cannot be a negative value.
1110:libs/CMSIS/Include/core_cm4.h **** 
1111:libs/CMSIS/Include/core_cm4.h ****     \param [in]      IRQn  Number of the interrupt for set pending
1112:libs/CMSIS/Include/core_cm4.h ****  */
1113:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1114:libs/CMSIS/Include/core_cm4.h **** {
1115:libs/CMSIS/Include/core_cm4.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1116:libs/CMSIS/Include/core_cm4.h **** }
1117:libs/CMSIS/Include/core_cm4.h **** 
1118:libs/CMSIS/Include/core_cm4.h **** 
1119:libs/CMSIS/Include/core_cm4.h **** /** \brief  Clear Pending Interrupt
1120:libs/CMSIS/Include/core_cm4.h **** 
1121:libs/CMSIS/Include/core_cm4.h ****     This function clears the pending bit for the specified interrupt.
1122:libs/CMSIS/Include/core_cm4.h ****     The interrupt number cannot be a negative value.
1123:libs/CMSIS/Include/core_cm4.h **** 
1124:libs/CMSIS/Include/core_cm4.h ****     \param [in]      IRQn  Number of the interrupt for clear pending
1125:libs/CMSIS/Include/core_cm4.h ****  */
1126:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1127:libs/CMSIS/Include/core_cm4.h **** {
1128:libs/CMSIS/Include/core_cm4.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
1129:libs/CMSIS/Include/core_cm4.h **** }
1130:libs/CMSIS/Include/core_cm4.h **** 
1131:libs/CMSIS/Include/core_cm4.h **** 
1132:libs/CMSIS/Include/core_cm4.h **** /** \brief  Get Active Interrupt
1133:libs/CMSIS/Include/core_cm4.h **** 
1134:libs/CMSIS/Include/core_cm4.h ****     This function reads the active register in NVIC and returns the active bit.
1135:libs/CMSIS/Include/core_cm4.h ****     \param [in]      IRQn  Number of the interrupt for get active
1136:libs/CMSIS/Include/core_cm4.h ****     \return             0  Interrupt status is not active
1137:libs/CMSIS/Include/core_cm4.h ****     \return             1  Interrupt status is active
1138:libs/CMSIS/Include/core_cm4.h ****  */
1139:libs/CMSIS/Include/core_cm4.h **** static __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1140:libs/CMSIS/Include/core_cm4.h **** {
1141:libs/CMSIS/Include/core_cm4.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1142:libs/CMSIS/Include/core_cm4.h **** }
1143:libs/CMSIS/Include/core_cm4.h **** 
1144:libs/CMSIS/Include/core_cm4.h **** 
1145:libs/CMSIS/Include/core_cm4.h **** /** \brief  Set Interrupt Priority
1146:libs/CMSIS/Include/core_cm4.h **** 
1147:libs/CMSIS/Include/core_cm4.h ****     This function sets the priority for the specified interrupt. The interrupt
1148:libs/CMSIS/Include/core_cm4.h ****     number can be positive to specify an external (device specific)
1149:libs/CMSIS/Include/core_cm4.h ****     interrupt, or negative to specify an internal (core) interrupt.
1150:libs/CMSIS/Include/core_cm4.h **** 
1151:libs/CMSIS/Include/core_cm4.h ****     Note: The priority cannot be set for every core interrupt.
1152:libs/CMSIS/Include/core_cm4.h **** 
1153:libs/CMSIS/Include/core_cm4.h ****     \param [in]      IRQn  Number of the interrupt for set priority
1154:libs/CMSIS/Include/core_cm4.h ****     \param [in]  priority  Priority to set
1155:libs/CMSIS/Include/core_cm4.h ****  */
1156:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1157:libs/CMSIS/Include/core_cm4.h **** {
  27              		.loc 1 1157 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 7, -4
  36 0002 83B0     		sub	sp, sp, #12
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 0346     		mov	r3, r0
  43 0008 3960     		str	r1, [r7, #0]
  44 000a FB71     		strb	r3, [r7, #7]
1158:libs/CMSIS/Include/core_cm4.h ****   if(IRQn < 0) {
  45              		.loc 1 1158 0
  46 000c 97F90730 		ldrsb	r3, [r7, #7]
  47 0010 002B     		cmp	r3, #0
  48 0012 10DA     		bge	.L2
1159:libs/CMSIS/Include/core_cm4.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
  49              		.loc 1 1159 0
  50 0014 4FF46D43 		mov	r3, #60672
  51 0018 CEF20003 		movt	r3, 57344
  52 001c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
  53 001e 02F00F02 		and	r2, r2, #15
  54 0022 A2F10401 		sub	r1, r2, #4
  55 0026 3A68     		ldr	r2, [r7, #0]
  56 0028 D2B2     		uxtb	r2, r2
  57 002a 4FEA0212 		lsl	r2, r2, #4
  58 002e D2B2     		uxtb	r2, r2
  59 0030 5B18     		adds	r3, r3, r1
  60 0032 1A76     		strb	r2, [r3, #24]
  61 0034 0DE0     		b	.L1
  62              	.L2:
1160:libs/CMSIS/Include/core_cm4.h ****   else {
1161:libs/CMSIS/Include/core_cm4.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
  63              		.loc 1 1161 0
  64 0036 4FF46143 		mov	r3, #57600
  65 003a CEF20003 		movt	r3, 57344
  66 003e 97F90710 		ldrsb	r1, [r7, #7]
  67 0042 3A68     		ldr	r2, [r7, #0]
  68 0044 D2B2     		uxtb	r2, r2
  69 0046 4FEA0212 		lsl	r2, r2, #4
  70 004a D2B2     		uxtb	r2, r2
  71 004c 5B18     		adds	r3, r3, r1
  72 004e 83F80023 		strb	r2, [r3, #768]
  73              	.L1:
1162:libs/CMSIS/Include/core_cm4.h **** }
  74              		.loc 1 1162 0
  75 0052 07F10C07 		add	r7, r7, #12
  76 0056 BD46     		mov	sp, r7
  77 0058 80BC     		pop	{r7}
  78 005a 7047     		bx	lr
  79              		.cfi_endproc
  80              	.LFE101:
  82              		.section	.text.SysTick_Config,"ax",%progbits
  83              		.align	2
  84              		.thumb
  85              		.thumb_func
  87              	SysTick_Config:
  88              	.LFB106:
1163:libs/CMSIS/Include/core_cm4.h **** 
1164:libs/CMSIS/Include/core_cm4.h **** 
1165:libs/CMSIS/Include/core_cm4.h **** /** \brief  Get Interrupt Priority
1166:libs/CMSIS/Include/core_cm4.h **** 
1167:libs/CMSIS/Include/core_cm4.h ****     This function reads the priority for the specified interrupt. The interrupt
1168:libs/CMSIS/Include/core_cm4.h ****     number can be positive to specify an external (device specific)
1169:libs/CMSIS/Include/core_cm4.h ****     interrupt, or negative to specify an internal (core) interrupt.
1170:libs/CMSIS/Include/core_cm4.h **** 
1171:libs/CMSIS/Include/core_cm4.h ****     The returned priority value is automatically aligned to the implemented
1172:libs/CMSIS/Include/core_cm4.h ****     priority bits of the microcontroller.
1173:libs/CMSIS/Include/core_cm4.h **** 
1174:libs/CMSIS/Include/core_cm4.h ****     \param [in]   IRQn  Number of the interrupt for get priority
1175:libs/CMSIS/Include/core_cm4.h ****     \return             Interrupt Priority
1176:libs/CMSIS/Include/core_cm4.h ****  */
1177:libs/CMSIS/Include/core_cm4.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
1178:libs/CMSIS/Include/core_cm4.h **** {
1179:libs/CMSIS/Include/core_cm4.h **** 
1180:libs/CMSIS/Include/core_cm4.h ****   if(IRQn < 0) {
1181:libs/CMSIS/Include/core_cm4.h ****     return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1182:libs/CMSIS/Include/core_cm4.h ****   else {
1183:libs/CMSIS/Include/core_cm4.h ****     return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1184:libs/CMSIS/Include/core_cm4.h **** }
1185:libs/CMSIS/Include/core_cm4.h **** 
1186:libs/CMSIS/Include/core_cm4.h **** 
1187:libs/CMSIS/Include/core_cm4.h **** /** \brief  Encode Priority
1188:libs/CMSIS/Include/core_cm4.h **** 
1189:libs/CMSIS/Include/core_cm4.h ****     This function encodes the priority for an interrupt with the given priority group,
1190:libs/CMSIS/Include/core_cm4.h ****     preemptive priority value and sub priority value.
1191:libs/CMSIS/Include/core_cm4.h ****     In case of a conflict between priority grouping and available
1192:libs/CMSIS/Include/core_cm4.h ****     priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1193:libs/CMSIS/Include/core_cm4.h **** 
1194:libs/CMSIS/Include/core_cm4.h ****     The returned priority value can be used for NVIC_SetPriority(...) function
1195:libs/CMSIS/Include/core_cm4.h **** 
1196:libs/CMSIS/Include/core_cm4.h ****     \param [in]     PriorityGroup  Used priority group
1197:libs/CMSIS/Include/core_cm4.h ****     \param [in]   PreemptPriority  Preemptive priority value (starting from 0)
1198:libs/CMSIS/Include/core_cm4.h ****     \param [in]       SubPriority  Sub priority value (starting from 0)
1199:libs/CMSIS/Include/core_cm4.h ****     \return                        Encoded priority for the interrupt
1200:libs/CMSIS/Include/core_cm4.h ****  */
1201:libs/CMSIS/Include/core_cm4.h **** static __INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1202:libs/CMSIS/Include/core_cm4.h **** {
1203:libs/CMSIS/Include/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1204:libs/CMSIS/Include/core_cm4.h ****   uint32_t PreemptPriorityBits;
1205:libs/CMSIS/Include/core_cm4.h ****   uint32_t SubPriorityBits;
1206:libs/CMSIS/Include/core_cm4.h **** 
1207:libs/CMSIS/Include/core_cm4.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1208:libs/CMSIS/Include/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1209:libs/CMSIS/Include/core_cm4.h **** 
1210:libs/CMSIS/Include/core_cm4.h ****   return (
1211:libs/CMSIS/Include/core_cm4.h ****            ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
1212:libs/CMSIS/Include/core_cm4.h ****            ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
1213:libs/CMSIS/Include/core_cm4.h ****          );
1214:libs/CMSIS/Include/core_cm4.h **** }
1215:libs/CMSIS/Include/core_cm4.h **** 
1216:libs/CMSIS/Include/core_cm4.h **** 
1217:libs/CMSIS/Include/core_cm4.h **** /** \brief  Decode Priority
1218:libs/CMSIS/Include/core_cm4.h **** 
1219:libs/CMSIS/Include/core_cm4.h ****     This function decodes an interrupt priority value with the given priority group to
1220:libs/CMSIS/Include/core_cm4.h ****     preemptive priority value and sub priority value.
1221:libs/CMSIS/Include/core_cm4.h ****     In case of a conflict between priority grouping and available
1222:libs/CMSIS/Include/core_cm4.h ****     priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1223:libs/CMSIS/Include/core_cm4.h **** 
1224:libs/CMSIS/Include/core_cm4.h ****     The priority value can be retrieved with NVIC_GetPriority(...) function
1225:libs/CMSIS/Include/core_cm4.h **** 
1226:libs/CMSIS/Include/core_cm4.h ****     \param [in]         Priority   Priority value
1227:libs/CMSIS/Include/core_cm4.h ****     \param [in]     PriorityGroup  Used priority group
1228:libs/CMSIS/Include/core_cm4.h ****     \param [out] pPreemptPriority  Preemptive priority value (starting from 0)
1229:libs/CMSIS/Include/core_cm4.h ****     \param [out]     pSubPriority  Sub priority value (starting from 0)
1230:libs/CMSIS/Include/core_cm4.h ****  */
1231:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPre
1232:libs/CMSIS/Include/core_cm4.h **** {
1233:libs/CMSIS/Include/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1234:libs/CMSIS/Include/core_cm4.h ****   uint32_t PreemptPriorityBits;
1235:libs/CMSIS/Include/core_cm4.h ****   uint32_t SubPriorityBits;
1236:libs/CMSIS/Include/core_cm4.h **** 
1237:libs/CMSIS/Include/core_cm4.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1238:libs/CMSIS/Include/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1239:libs/CMSIS/Include/core_cm4.h **** 
1240:libs/CMSIS/Include/core_cm4.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
1241:libs/CMSIS/Include/core_cm4.h ****   *pSubPriority     = (Priority                   ) & ((1 << (SubPriorityBits    )) - 1);
1242:libs/CMSIS/Include/core_cm4.h **** }
1243:libs/CMSIS/Include/core_cm4.h **** 
1244:libs/CMSIS/Include/core_cm4.h **** 
1245:libs/CMSIS/Include/core_cm4.h **** /** \brief  System Reset
1246:libs/CMSIS/Include/core_cm4.h **** 
1247:libs/CMSIS/Include/core_cm4.h ****     This function initiate a system reset request to reset the MCU.
1248:libs/CMSIS/Include/core_cm4.h ****  */
1249:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_SystemReset(void)
1250:libs/CMSIS/Include/core_cm4.h **** {
1251:libs/CMSIS/Include/core_cm4.h ****   __DSB();                                                     /* Ensure all outstanding memory acc
1252:libs/CMSIS/Include/core_cm4.h ****                                                                   buffered write are completed befo
1253:libs/CMSIS/Include/core_cm4.h ****   SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
1254:libs/CMSIS/Include/core_cm4.h ****                  (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
1255:libs/CMSIS/Include/core_cm4.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);                   /* Keep priority group unchanged */
1256:libs/CMSIS/Include/core_cm4.h ****   __DSB();                                                     /* Ensure completion of memory acces
1257:libs/CMSIS/Include/core_cm4.h ****   while(1);                                                    /* wait until reset */
1258:libs/CMSIS/Include/core_cm4.h **** }
1259:libs/CMSIS/Include/core_cm4.h **** 
1260:libs/CMSIS/Include/core_cm4.h **** /*@} end of CMSIS_Core_NVICFunctions */
1261:libs/CMSIS/Include/core_cm4.h **** 
1262:libs/CMSIS/Include/core_cm4.h **** 
1263:libs/CMSIS/Include/core_cm4.h **** 
1264:libs/CMSIS/Include/core_cm4.h **** /* ##################################    SysTick function  ########################################
1265:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1266:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_Core_SysTickFunctions CMSIS Core SysTick Functions
1267:libs/CMSIS/Include/core_cm4.h ****   @{
1268:libs/CMSIS/Include/core_cm4.h ****  */
1269:libs/CMSIS/Include/core_cm4.h **** 
1270:libs/CMSIS/Include/core_cm4.h **** #if (__Vendor_SysTickConfig == 0)
1271:libs/CMSIS/Include/core_cm4.h **** 
1272:libs/CMSIS/Include/core_cm4.h **** /** \brief  System Tick Configuration
1273:libs/CMSIS/Include/core_cm4.h **** 
1274:libs/CMSIS/Include/core_cm4.h ****     This function initialises the system tick timer and its interrupt and start the system tick tim
1275:libs/CMSIS/Include/core_cm4.h ****     Counter is in free running mode to generate periodical interrupts.
1276:libs/CMSIS/Include/core_cm4.h **** 
1277:libs/CMSIS/Include/core_cm4.h ****     \param [in]  ticks  Number of ticks between two interrupts
1278:libs/CMSIS/Include/core_cm4.h ****     \return          0  Function succeeded
1279:libs/CMSIS/Include/core_cm4.h ****     \return          1  Function failed
1280:libs/CMSIS/Include/core_cm4.h ****  */
1281:libs/CMSIS/Include/core_cm4.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
1282:libs/CMSIS/Include/core_cm4.h **** {
  89              		.loc 1 1282 0
  90              		.cfi_startproc
  91              		@ args = 0, pretend = 0, frame = 8
  92              		@ frame_needed = 1, uses_anonymous_args = 0
  93 0000 80B5     		push	{r7, lr}
  94              	.LCFI3:
  95              		.cfi_def_cfa_offset 8
  96              		.cfi_offset 14, -4
  97              		.cfi_offset 7, -8
  98 0002 82B0     		sub	sp, sp, #8
  99              	.LCFI4:
 100              		.cfi_def_cfa_offset 16
 101 0004 00AF     		add	r7, sp, #0
 102              	.LCFI5:
 103              		.cfi_def_cfa_register 7
 104 0006 7860     		str	r0, [r7, #4]
1283:libs/CMSIS/Include/core_cm4.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 105              		.loc 1 1283 0
 106 0008 7A68     		ldr	r2, [r7, #4]
 107 000a 6FF07F43 		mvn	r3, #-16777216
 108 000e 9A42     		cmp	r2, r3
 109 0010 02D9     		bls	.L5
 110              		.loc 1 1283 0 is_stmt 0 discriminator 1
 111 0012 4FF00103 		mov	r3, #1
 112 0016 1FE0     		b	.L6
 113              	.L5:
1284:libs/CMSIS/Include/core_cm4.h **** 
1285:libs/CMSIS/Include/core_cm4.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 114              		.loc 1 1285 0 is_stmt 1
 115 0018 4EF21003 		movw	r3, #57360
 116 001c CEF20003 		movt	r3, 57344
 117 0020 7A68     		ldr	r2, [r7, #4]
 118 0022 22F07F42 		bic	r2, r2, #-16777216
 119 0026 02F1FF32 		add	r2, r2, #-1
 120 002a 5A60     		str	r2, [r3, #4]
1286:libs/CMSIS/Include/core_cm4.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
 121              		.loc 1 1286 0
 122 002c 4FF0FF30 		mov	r0, #-1
 123 0030 4FF00F01 		mov	r1, #15
 124 0034 FFF7FEFF 		bl	NVIC_SetPriority
1287:libs/CMSIS/Include/core_cm4.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 125              		.loc 1 1287 0
 126 0038 4EF21003 		movw	r3, #57360
 127 003c CEF20003 		movt	r3, 57344
 128 0040 4FF00002 		mov	r2, #0
 129 0044 9A60     		str	r2, [r3, #8]
1288:libs/CMSIS/Include/core_cm4.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 130              		.loc 1 1288 0
 131 0046 4EF21003 		movw	r3, #57360
 132 004a CEF20003 		movt	r3, 57344
 133 004e 4FF00702 		mov	r2, #7
 134 0052 1A60     		str	r2, [r3, #0]
1289:libs/CMSIS/Include/core_cm4.h ****                    SysTick_CTRL_TICKINT_Msk   |
1290:libs/CMSIS/Include/core_cm4.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
1291:libs/CMSIS/Include/core_cm4.h ****   return (0);                                                  /* Function successful */
 135              		.loc 1 1291 0
 136 0054 4FF00003 		mov	r3, #0
 137              	.L6:
1292:libs/CMSIS/Include/core_cm4.h **** }
 138              		.loc 1 1292 0
 139 0058 1846     		mov	r0, r3
 140 005a 07F10807 		add	r7, r7, #8
 141 005e BD46     		mov	sp, r7
 142 0060 80BD     		pop	{r7, pc}
 143              		.cfi_endproc
 144              	.LFE106:
 146              		.comm	TIM_TimeBaseStructure,12,4
 147              		.global	PrescalerValue
 148 0062 00BF     		.section	.bss.PrescalerValue,"aw",%nobits
 149              		.align	1
 152              	PrescalerValue:
 153 0000 0000     		.space	2
 154              		.comm	Buffer,6,4
 155              		.global	TimingDelay
 156              		.section	.bss.TimingDelay,"aw",%nobits
 157              		.align	2
 160              	TimingDelay:
 161 0000 00000000 		.space	4
 162              		.comm	XOffset,1,1
 163              		.comm	YOffset,1,1
 164              		.section	.text.pwm,"ax",%progbits
 165              		.align	2
 166              		.global	pwm
 167              		.thumb
 168              		.thumb_func
 170              	pwm:
 171              	.LFB110:
 172              		.file 2 "src/main.c"
   1:src/main.c    **** //Example code to loop back the data sent to USART2 on STM32F4DISCOVERY
   2:src/main.c    **** 
   3:src/main.c    **** //Inlcude header files
   4:src/main.c    **** 
   5:src/main.c    **** #include "stm32f4xx.h"
   6:src/main.c    **** #include "FreeRTOS.h"
   7:src/main.c    **** #include "task.h"
   8:src/main.c    **** #include <math.h>
   9:src/main.c    **** #include <stdio.h>
  10:src/main.c    **** #include <stdlib.h>
  11:src/main.c    **** 
  12:src/main.c    **** #include "main.h"
  13:src/main.c    **** 
  14:src/main.c    **** 
  15:src/main.c    **** 
  16:src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  17:src/main.c    **** /* Private define ------------------------------------------------------------*/
  18:src/main.c    **** 
  19:src/main.c    **** 
  20:src/main.c    **** #define PWM_MOTOR_MIN 100
  21:src/main.c    **** #define PWM_MOTOR_MAX 1000
  22:src/main.c    **** #define TEST 200
  23:src/main.c    **** 
  24:src/main.c    **** #define PWM_Motor1 TIM4->CCR1   // 無刷 PWM
  25:src/main.c    **** #define PWM_Motor2 TIM4->CCR2   // 無刷 PWM
  26:src/main.c    **** #define PWM_Motor3 TIM4->CCR3   // 無刷 PWM
  27:src/main.c    **** #define PWM_Motor4 TIM4->CCR4   // 無刷 PWM
  28:src/main.c    **** 
  29:src/main.c    **** /* Private macro -------------------------------------------------------------*/
  30:src/main.c    **** /* Private variables ---------------------------------------------------------*/
  31:src/main.c    **** 
  32:src/main.c    **** 
  33:src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  34:src/main.c    **** 
  35:src/main.c    **** TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
  36:src/main.c    **** /* Private define ------------------------------------------------------------*/
  37:src/main.c    **** /* Private macro -------------------------------------------------------------*/
  38:src/main.c    **** /* Private variables ---------------------------------------------------------*/
  39:src/main.c    **** uint16_t PrescalerValue = 0;
  40:src/main.c    **** uint8_t Buffer[6];
  41:src/main.c    **** __IO uint32_t TimingDelay = 0;
  42:src/main.c    **** __IO int8_t XOffset;
  43:src/main.c    **** __IO int8_t YOffset;
  44:src/main.c    **** 
  45:src/main.c    **** 
  46:src/main.c    **** /* Private functions ---------------------------------------------------------*/
  47:src/main.c    **** 
  48:src/main.c    **** void pwm(void)
  49:src/main.c    **** {
 173              		.loc 2 49 0
 174              		.cfi_startproc
 175              		@ args = 0, pretend = 0, frame = 16
 176              		@ frame_needed = 1, uses_anonymous_args = 0
 177 0000 90B5     		push	{r4, r7, lr}
 178              	.LCFI6:
 179              		.cfi_def_cfa_offset 12
 180              		.cfi_offset 14, -4
 181              		.cfi_offset 7, -8
 182              		.cfi_offset 4, -12
 183 0002 85B0     		sub	sp, sp, #20
 184              	.LCFI7:
 185              		.cfi_def_cfa_offset 32
 186 0004 00AF     		add	r7, sp, #0
 187              	.LCFI8:
 188              		.cfi_def_cfa_register 7
  50:src/main.c    ****   volatile int i;
  51:src/main.c    ****   int n = 1;
 189              		.loc 2 51 0
 190 0006 4FF00103 		mov	r3, #1
 191 000a FB60     		str	r3, [r7, #12]
  52:src/main.c    ****   uint16_t brightness = 0;      
 192              		.loc 2 52 0
 193 000c 4FF00003 		mov	r3, #0
 194 0010 7B81     		strh	r3, [r7, #10]	@ movhi
  53:src/main.c    ****   uint16_t who_run = 1;
 195              		.loc 2 53 0
 196 0012 4FF00103 		mov	r3, #1
 197 0016 3B81     		strh	r3, [r7, #8]	@ movhi
  54:src/main.c    **** 
  55:src/main.c    ****  Delay_1ms(1000);
 198              		.loc 2 55 0
 199 0018 40F20003 		movw	r3, #:lower16:Delay_1ms
 200 001c C0F20003 		movt	r3, #:upper16:Delay_1ms
 201 0020 4FF47A70 		mov	r0, #1000
 202 0024 9847     		blx	r3
  56:src/main.c    **** 
  57:src/main.c    ****   Motor_Control(PWM_MOTOR_MAX, PWM_MOTOR_MAX, PWM_MOTOR_MAX, PWM_MOTOR_MAX);
 203              		.loc 2 57 0
 204 0026 40F20004 		movw	r4, #:lower16:Motor_Control
 205 002a C0F20004 		movt	r4, #:upper16:Motor_Control
 206 002e 4FF47A70 		mov	r0, #1000
 207 0032 4FF47A71 		mov	r1, #1000
 208 0036 4FF47A72 		mov	r2, #1000
 209 003a 4FF47A73 		mov	r3, #1000
 210 003e A047     		blx	r4
  58:src/main.c    **** 
  59:src/main.c    ****  Delay_1ms(1000);
 211              		.loc 2 59 0
 212 0040 40F20003 		movw	r3, #:lower16:Delay_1ms
 213 0044 C0F20003 		movt	r3, #:upper16:Delay_1ms
 214 0048 4FF47A70 		mov	r0, #1000
 215 004c 9847     		blx	r3
  60:src/main.c    **** 
  61:src/main.c    ****   Motor_Control(PWM_MOTOR_MIN, PWM_MOTOR_MIN, PWM_MOTOR_MIN, PWM_MOTOR_MIN);
 216              		.loc 2 61 0
 217 004e 40F20004 		movw	r4, #:lower16:Motor_Control
 218 0052 C0F20004 		movt	r4, #:upper16:Motor_Control
 219 0056 4FF06400 		mov	r0, #100
 220 005a 4FF06401 		mov	r1, #100
 221 005e 4FF06402 		mov	r2, #100
 222 0062 4FF06403 		mov	r3, #100
 223 0066 A047     		blx	r4
  62:src/main.c    ****   
  63:src/main.c    ****  Delay_1ms(1000);
 224              		.loc 2 63 0
 225 0068 40F20003 		movw	r3, #:lower16:Delay_1ms
 226 006c C0F20003 		movt	r3, #:upper16:Delay_1ms
 227 0070 4FF47A70 		mov	r0, #1000
 228 0074 9847     		blx	r3
 229              	.L8:
  64:src/main.c    **** 
  65:src/main.c    ****   while(1)  // Do not exit
  66:src/main.c    ****   {
  67:src/main.c    ****    Motor_Control(TEST, TEST, TEST, TEST);
 230              		.loc 2 67 0 discriminator 1
 231 0076 40F20004 		movw	r4, #:lower16:Motor_Control
 232 007a C0F20004 		movt	r4, #:upper16:Motor_Control
 233 007e 4FF0C800 		mov	r0, #200
 234 0082 4FF0C801 		mov	r1, #200
 235 0086 4FF0C802 		mov	r2, #200
 236 008a 4FF0C803 		mov	r3, #200
 237 008e A047     		blx	r4
  68:src/main.c    ****    
  69:src/main.c    ****    Delay_1ms(1000);
 238              		.loc 2 69 0 discriminator 1
 239 0090 40F20003 		movw	r3, #:lower16:Delay_1ms
 240 0094 C0F20003 		movt	r3, #:upper16:Delay_1ms
 241 0098 4FF47A70 		mov	r0, #1000
 242 009c 9847     		blx	r3
  70:src/main.c    **** 
  71:src/main.c    ****    Motor_Control(TEST+50, TEST+50, TEST+50, TEST+50);
 243              		.loc 2 71 0 discriminator 1
 244 009e 40F20004 		movw	r4, #:lower16:Motor_Control
 245 00a2 C0F20004 		movt	r4, #:upper16:Motor_Control
 246 00a6 4FF0FA00 		mov	r0, #250
 247 00aa 4FF0FA01 		mov	r1, #250
 248 00ae 4FF0FA02 		mov	r2, #250
 249 00b2 4FF0FA03 		mov	r3, #250
 250 00b6 A047     		blx	r4
  72:src/main.c    **** 
  73:src/main.c    ****    Delay_1ms(1000);
 251              		.loc 2 73 0 discriminator 1
 252 00b8 40F20003 		movw	r3, #:lower16:Delay_1ms
 253 00bc C0F20003 		movt	r3, #:upper16:Delay_1ms
 254 00c0 4FF47A70 		mov	r0, #1000
 255 00c4 9847     		blx	r3
  74:src/main.c    **** 
  75:src/main.c    **** 
  76:src/main.c    **** 
  77:src/main.c    ****     //Light LEDs in turn
  78:src/main.c    ****     // switch(who_run){
  79:src/main.c    ****     //     case 0:
  80:src/main.c    ****     //         TIM4->CCR1 = brightness - 1; // set brightness
  81:src/main.c    ****     //         break;
  82:src/main.c    ****     //     case 1:
  83:src/main.c    ****     //         TIM4->CCR2 = brightness - 1; // set brightness
  84:src/main.c    ****     //         break;
  85:src/main.c    ****     //     case 2:
  86:src/main.c    ****     //         TIM4->CCR3 = brightness - 1; // set brightness
  87:src/main.c    ****     //         break;
  88:src/main.c    ****     //     case 3:
  89:src/main.c    ****     //         TIM4->CCR4 = brightness - 1; // set brightness
  90:src/main.c    ****     //         break;
  91:src/main.c    ****     // }
  92:src/main.c    **** 
  93:src/main.c    ****   }
 256              		.loc 2 93 0 discriminator 1
 257 00c6 D6E7     		b	.L8
 258              		.cfi_endproc
 259              	.LFE110:
 261              		.section	.text.Delay_1ms,"ax",%progbits
 262              		.align	2
 263              		.global	Delay_1ms
 264              		.thumb
 265              		.thumb_func
 267              	Delay_1ms:
 268              	.LFB111:
  94:src/main.c    ****  
  95:src/main.c    ****   return(0); // System will implode
  96:src/main.c    **** } 
  97:src/main.c    **** 
  98:src/main.c    **** 
  99:src/main.c    **** void Delay_1ms( vu32 nCnt_1ms )
 100:src/main.c    **** {
 269              		.loc 2 100 0
 270              		.cfi_startproc
 271              		@ args = 0, pretend = 0, frame = 16
 272              		@ frame_needed = 1, uses_anonymous_args = 0
 273              		@ link register save eliminated.
 274 0000 80B4     		push	{r7}
 275              	.LCFI9:
 276              		.cfi_def_cfa_offset 4
 277              		.cfi_offset 7, -4
 278 0002 85B0     		sub	sp, sp, #20
 279              	.LCFI10:
 280              		.cfi_def_cfa_offset 24
 281 0004 00AF     		add	r7, sp, #0
 282              	.LCFI11:
 283              		.cfi_def_cfa_register 7
 284 0006 7860     		str	r0, [r7, #4]
 101:src/main.c    ****     u32 nCnt;
 102:src/main.c    **** 	  for(; nCnt_1ms != 0; nCnt_1ms--)
 285              		.loc 2 102 0
 286 0008 0EE0     		b	.L10
 287              	.L13:
 103:src/main.c    **** 		    for(nCnt = 56580; nCnt != 0; nCnt--);
 288              		.loc 2 103 0
 289 000a 4DF60453 		movw	r3, #56580
 290 000e FB60     		str	r3, [r7, #12]
 291 0010 03E0     		b	.L11
 292              	.L12:
 293              		.loc 2 103 0 is_stmt 0 discriminator 2
 294 0012 FB68     		ldr	r3, [r7, #12]
 295 0014 03F1FF33 		add	r3, r3, #-1
 296 0018 FB60     		str	r3, [r7, #12]
 297              	.L11:
 298              		.loc 2 103 0 discriminator 1
 299 001a FB68     		ldr	r3, [r7, #12]
 300 001c 002B     		cmp	r3, #0
 301 001e F8D1     		bne	.L12
 102:src/main.c    **** 	  for(; nCnt_1ms != 0; nCnt_1ms--)
 302              		.loc 2 102 0 is_stmt 1
 303 0020 7B68     		ldr	r3, [r7, #4]
 304 0022 03F1FF33 		add	r3, r3, #-1
 305 0026 7B60     		str	r3, [r7, #4]
 306              	.L10:
 102:src/main.c    **** 	  for(; nCnt_1ms != 0; nCnt_1ms--)
 307              		.loc 2 102 0 is_stmt 0 discriminator 1
 308 0028 7B68     		ldr	r3, [r7, #4]
 309 002a 002B     		cmp	r3, #0
 310 002c EDD1     		bne	.L13
 104:src/main.c    **** }
 311              		.loc 2 104 0 is_stmt 1
 312 002e 07F11407 		add	r7, r7, #20
 313 0032 BD46     		mov	sp, r7
 314 0034 80BC     		pop	{r7}
 315 0036 7047     		bx	lr
 316              		.cfi_endproc
 317              	.LFE111:
 319              		.section	.text.Motor_Control,"ax",%progbits
 320              		.align	2
 321              		.global	Motor_Control
 322              		.thumb
 323              		.thumb_func
 325              	Motor_Control:
 326              	.LFB112:
 105:src/main.c    ****   
 106:src/main.c    **** void Motor_Control(u16 Motor1, u16 Motor2, u16 Motor3, u16 Motor4)
 107:src/main.c    **** {
 327              		.loc 2 107 0
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 8
 330              		@ frame_needed = 1, uses_anonymous_args = 0
 331              		@ link register save eliminated.
 332 0000 80B4     		push	{r7}
 333              	.LCFI12:
 334              		.cfi_def_cfa_offset 4
 335              		.cfi_offset 7, -4
 336 0002 83B0     		sub	sp, sp, #12
 337              	.LCFI13:
 338              		.cfi_def_cfa_offset 16
 339 0004 00AF     		add	r7, sp, #0
 340              	.LCFI14:
 341              		.cfi_def_cfa_register 7
 342 0006 F880     		strh	r0, [r7, #6]	@ movhi
 343 0008 B980     		strh	r1, [r7, #4]	@ movhi
 344 000a 7A80     		strh	r2, [r7, #2]	@ movhi
 345 000c 3B80     		strh	r3, [r7, #0]	@ movhi
 108:src/main.c    **** 	if(Motor1>PWM_MOTOR_MAX)      Motor1 = PWM_MOTOR_MAX;
 346              		.loc 2 108 0
 347 000e FB88     		ldrh	r3, [r7, #6]
 348 0010 B3F57A7F 		cmp	r3, #1000
 349 0014 03D9     		bls	.L15
 350              		.loc 2 108 0 is_stmt 0 discriminator 1
 351 0016 4FF47A73 		mov	r3, #1000
 352 001a FB80     		strh	r3, [r7, #6]	@ movhi
 353 001c 05E0     		b	.L16
 354              	.L15:
 109:src/main.c    **** 	else if(Motor1<PWM_MOTOR_MIN) Motor1 = PWM_MOTOR_MIN;
 355              		.loc 2 109 0 is_stmt 1
 356 001e FB88     		ldrh	r3, [r7, #6]
 357 0020 632B     		cmp	r3, #99
 358 0022 02D8     		bhi	.L16
 359              		.loc 2 109 0 is_stmt 0 discriminator 1
 360 0024 4FF06403 		mov	r3, #100
 361 0028 FB80     		strh	r3, [r7, #6]	@ movhi
 362              	.L16:
 110:src/main.c    **** 		
 111:src/main.c    **** 	if(Motor2>PWM_MOTOR_MAX)      Motor2 = PWM_MOTOR_MAX;
 363              		.loc 2 111 0 is_stmt 1
 364 002a BB88     		ldrh	r3, [r7, #4]
 365 002c B3F57A7F 		cmp	r3, #1000
 366 0030 03D9     		bls	.L17
 367              		.loc 2 111 0 is_stmt 0 discriminator 1
 368 0032 4FF47A73 		mov	r3, #1000
 369 0036 BB80     		strh	r3, [r7, #4]	@ movhi
 370 0038 05E0     		b	.L18
 371              	.L17:
 112:src/main.c    **** 	else if(Motor2<PWM_MOTOR_MIN) Motor2 = PWM_MOTOR_MIN;
 372              		.loc 2 112 0 is_stmt 1
 373 003a BB88     		ldrh	r3, [r7, #4]
 374 003c 632B     		cmp	r3, #99
 375 003e 02D8     		bhi	.L18
 376              		.loc 2 112 0 is_stmt 0 discriminator 1
 377 0040 4FF06403 		mov	r3, #100
 378 0044 BB80     		strh	r3, [r7, #4]	@ movhi
 379              	.L18:
 113:src/main.c    **** 				
 114:src/main.c    **** 	if(Motor3>PWM_MOTOR_MAX)      Motor3 = PWM_MOTOR_MAX;
 380              		.loc 2 114 0 is_stmt 1
 381 0046 7B88     		ldrh	r3, [r7, #2]
 382 0048 B3F57A7F 		cmp	r3, #1000
 383 004c 03D9     		bls	.L19
 384              		.loc 2 114 0 is_stmt 0 discriminator 1
 385 004e 4FF47A73 		mov	r3, #1000
 386 0052 7B80     		strh	r3, [r7, #2]	@ movhi
 387 0054 05E0     		b	.L20
 388              	.L19:
 115:src/main.c    **** 	else if(Motor3<PWM_MOTOR_MIN) Motor3 = PWM_MOTOR_MIN;
 389              		.loc 2 115 0 is_stmt 1
 390 0056 7B88     		ldrh	r3, [r7, #2]
 391 0058 632B     		cmp	r3, #99
 392 005a 02D8     		bhi	.L20
 393              		.loc 2 115 0 is_stmt 0 discriminator 1
 394 005c 4FF06403 		mov	r3, #100
 395 0060 7B80     		strh	r3, [r7, #2]	@ movhi
 396              	.L20:
 116:src/main.c    **** 						
 117:src/main.c    **** 	if(Motor4>PWM_MOTOR_MAX)      Motor4 = PWM_MOTOR_MAX;
 397              		.loc 2 117 0 is_stmt 1
 398 0062 3B88     		ldrh	r3, [r7, #0]
 399 0064 B3F57A7F 		cmp	r3, #1000
 400 0068 03D9     		bls	.L21
 401              		.loc 2 117 0 is_stmt 0 discriminator 1
 402 006a 4FF47A73 		mov	r3, #1000
 403 006e 3B80     		strh	r3, [r7, #0]	@ movhi
 404 0070 05E0     		b	.L22
 405              	.L21:
 118:src/main.c    **** 	else if(Motor4<PWM_MOTOR_MIN) Motor4 = PWM_MOTOR_MIN;
 406              		.loc 2 118 0 is_stmt 1
 407 0072 3B88     		ldrh	r3, [r7, #0]
 408 0074 632B     		cmp	r3, #99
 409 0076 02D8     		bhi	.L22
 410              		.loc 2 118 0 is_stmt 0 discriminator 1
 411 0078 4FF06403 		mov	r3, #100
 412 007c 3B80     		strh	r3, [r7, #0]	@ movhi
 413              	.L22:
 119:src/main.c    **** 								
 120:src/main.c    **** 	PWM_Motor1 = Motor1;
 414              		.loc 2 120 0 is_stmt 1
 415 007e 4FF40063 		mov	r3, #2048
 416 0082 C4F20003 		movt	r3, 16384
 417 0086 FA88     		ldrh	r2, [r7, #6]
 418 0088 5A63     		str	r2, [r3, #52]
 121:src/main.c    **** 	PWM_Motor2 = Motor2;
 419              		.loc 2 121 0
 420 008a 4FF40063 		mov	r3, #2048
 421 008e C4F20003 		movt	r3, 16384
 422 0092 BA88     		ldrh	r2, [r7, #4]
 423 0094 9A63     		str	r2, [r3, #56]
 122:src/main.c    **** 	PWM_Motor3 = Motor3;
 424              		.loc 2 122 0
 425 0096 4FF40063 		mov	r3, #2048
 426 009a C4F20003 		movt	r3, 16384
 427 009e 7A88     		ldrh	r2, [r7, #2]
 428 00a0 DA63     		str	r2, [r3, #60]
 123:src/main.c    **** 	PWM_Motor4 = Motor4;
 429              		.loc 2 123 0
 430 00a2 4FF40063 		mov	r3, #2048
 431 00a6 C4F20003 		movt	r3, 16384
 432 00aa 3A88     		ldrh	r2, [r7, #0]
 433 00ac 1A64     		str	r2, [r3, #64]
 124:src/main.c    **** }
 434              		.loc 2 124 0
 435 00ae 07F10C07 		add	r7, r7, #12
 436 00b2 BD46     		mov	sp, r7
 437 00b4 80BC     		pop	{r7}
 438 00b6 7047     		bx	lr
 439              		.cfi_endproc
 440              	.LFE112:
 442              		.section	.text.RCC_Configuration,"ax",%progbits
 443              		.align	2
 444              		.global	RCC_Configuration
 445              		.thumb
 446              		.thumb_func
 448              	RCC_Configuration:
 449              	.LFB113:
 125:src/main.c    **** 
 126:src/main.c    **** /**
 127:src/main.c    ****   * @brief  Configures the different system clocks.
 128:src/main.c    ****   * @param  None
 129:src/main.c    ****   * @retval None
 130:src/main.c    ****   */
 131:src/main.c    **** void RCC_Configuration(void)
 132:src/main.c    **** {
 450              		.loc 2 132 0
 451              		.cfi_startproc
 452              		@ args = 0, pretend = 0, frame = 0
 453              		@ frame_needed = 1, uses_anonymous_args = 0
 454 0000 80B5     		push	{r7, lr}
 455              	.LCFI15:
 456              		.cfi_def_cfa_offset 8
 457              		.cfi_offset 14, -4
 458              		.cfi_offset 7, -8
 459 0002 00AF     		add	r7, sp, #0
 460              	.LCFI16:
 461              		.cfi_def_cfa_register 7
 133:src/main.c    ****    RCC_AHB1PeriphClockCmd(  RCC_AHB1Periph_GPIOD , ENABLE );
 462              		.loc 2 133 0
 463 0004 4FF00800 		mov	r0, #8
 464 0008 4FF00101 		mov	r1, #1
 465 000c FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
 134:src/main.c    ****    RCC_APB1PeriphClockCmd( RCC_APB1Periph_TIM4, ENABLE );
 466              		.loc 2 134 0
 467 0010 4FF00400 		mov	r0, #4
 468 0014 4FF00101 		mov	r1, #1
 469 0018 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 135:src/main.c    **** }
 470              		.loc 2 135 0
 471 001c 80BD     		pop	{r7, pc}
 472              		.cfi_endproc
 473              	.LFE113:
 475 001e 00BF     		.section	.text.GPIO_Configuration,"ax",%progbits
 476              		.align	2
 477              		.global	GPIO_Configuration
 478              		.thumb
 479              		.thumb_func
 481              	GPIO_Configuration:
 482              	.LFB114:
 136:src/main.c    **** 
 137:src/main.c    **** /**
 138:src/main.c    ****   * @brief  configure the PD12~15 to Timers
 139:src/main.c    ****   * @param  None
 140:src/main.c    ****   * @retval None
 141:src/main.c    ****   */
 142:src/main.c    **** void GPIO_Configuration(void)
 143:src/main.c    **** {
 483              		.loc 2 143 0
 484              		.cfi_startproc
 485              		@ args = 0, pretend = 0, frame = 8
 486              		@ frame_needed = 1, uses_anonymous_args = 0
 487 0000 80B5     		push	{r7, lr}
 488              	.LCFI17:
 489              		.cfi_def_cfa_offset 8
 490              		.cfi_offset 14, -4
 491              		.cfi_offset 7, -8
 492 0002 82B0     		sub	sp, sp, #8
 493              	.LCFI18:
 494              		.cfi_def_cfa_offset 16
 495 0004 00AF     		add	r7, sp, #0
 496              	.LCFI19:
 497              		.cfi_def_cfa_register 7
 144:src/main.c    ****     GPIO_InitTypeDef GPIO_InitStructure;
 145:src/main.c    ****     GPIO_StructInit(&GPIO_InitStructure); // Reset init structure
 498              		.loc 2 145 0
 499 0006 3B46     		mov	r3, r7
 500 0008 1846     		mov	r0, r3
 501 000a FFF7FEFF 		bl	GPIO_StructInit
 146:src/main.c    ****  
 147:src/main.c    ****     GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_TIM4);
 502              		.loc 2 147 0
 503 000e 4FF44060 		mov	r0, #3072
 504 0012 C4F20200 		movt	r0, 16386
 505 0016 4FF00C01 		mov	r1, #12
 506 001a 4FF00202 		mov	r2, #2
 507 001e FFF7FEFF 		bl	GPIO_PinAFConfig
 148:src/main.c    ****     GPIO_PinAFConfig(GPIOD, GPIO_PinSource13, GPIO_AF_TIM4);
 508              		.loc 2 148 0
 509 0022 4FF44060 		mov	r0, #3072
 510 0026 C4F20200 		movt	r0, 16386
 511 002a 4FF00D01 		mov	r1, #13
 512 002e 4FF00202 		mov	r2, #2
 513 0032 FFF7FEFF 		bl	GPIO_PinAFConfig
 149:src/main.c    ****     GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_TIM4);
 514              		.loc 2 149 0
 515 0036 4FF44060 		mov	r0, #3072
 516 003a C4F20200 		movt	r0, 16386
 517 003e 4FF00E01 		mov	r1, #14
 518 0042 4FF00202 		mov	r2, #2
 519 0046 FFF7FEFF 		bl	GPIO_PinAFConfig
 150:src/main.c    ****     GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_TIM4);
 520              		.loc 2 150 0
 521 004a 4FF44060 		mov	r0, #3072
 522 004e C4F20200 		movt	r0, 16386
 523 0052 4FF00F01 		mov	r1, #15
 524 0056 4FF00202 		mov	r2, #2
 525 005a FFF7FEFF 		bl	GPIO_PinAFConfig
 151:src/main.c    ****       
 152:src/main.c    **** 
 153:src/main.c    ****     // Setup Blue & Green LED on STM32-Discovery Board to use PWM.
 154:src/main.c    ****     GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12 | GPIO_Pin_13| GPIO_Pin_14| GPIO_Pin_15; //PD12->LED
 526              		.loc 2 154 0
 527 005e 4FF47043 		mov	r3, #61440
 528 0062 3B60     		str	r3, [r7, #0]
 155:src/main.c    **** 	//GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;            // Alt Function - Push Pull
 156:src/main.c    **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT; 
 529              		.loc 2 156 0
 530 0064 4FF00103 		mov	r3, #1
 531 0068 3B71     		strb	r3, [r7, #4]
 157:src/main.c    ****     GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 532              		.loc 2 157 0
 533 006a 4FF00003 		mov	r3, #0
 534 006e BB71     		strb	r3, [r7, #6]
 158:src/main.c    ****     GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 535              		.loc 2 158 0
 536 0070 4FF00303 		mov	r3, #3
 537 0074 7B71     		strb	r3, [r7, #5]
 159:src/main.c    ****     GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 538              		.loc 2 159 0
 539 0076 4FF00003 		mov	r3, #0
 540 007a FB71     		strb	r3, [r7, #7]
 160:src/main.c    ****     GPIO_Init( GPIOD, &GPIO_InitStructure );  
 541              		.loc 2 160 0
 542 007c 4FF44060 		mov	r0, #3072
 543 0080 C4F20200 		movt	r0, 16386
 544 0084 3B46     		mov	r3, r7
 545 0086 1946     		mov	r1, r3
 546 0088 FFF7FEFF 		bl	GPIO_Init
 161:src/main.c    **** }
 547              		.loc 2 161 0
 548 008c 07F10807 		add	r7, r7, #8
 549 0090 BD46     		mov	sp, r7
 550 0092 80BD     		pop	{r7, pc}
 551              		.cfi_endproc
 552              	.LFE114:
 554              		.section	.text.TIM_Configuration,"ax",%progbits
 555              		.align	2
 556              		.global	TIM_Configuration
 557              		.thumb
 558              		.thumb_func
 560              	TIM_Configuration:
 561              	.LFB115:
 162:src/main.c    **** 
 163:src/main.c    **** /**
 164:src/main.c    ****   * @brief  configure the TIM4 for PWM mode
 165:src/main.c    ****   * @param  None
 166:src/main.c    ****   * @retval None
 167:src/main.c    ****   */
 168:src/main.c    **** void TIM_Configuration(void)
 169:src/main.c    **** {
 562              		.loc 2 169 0
 563              		.cfi_startproc
 564              		@ args = 0, pretend = 0, frame = 32
 565              		@ frame_needed = 1, uses_anonymous_args = 0
 566 0000 80B5     		push	{r7, lr}
 567              	.LCFI20:
 568              		.cfi_def_cfa_offset 8
 569              		.cfi_offset 14, -4
 570              		.cfi_offset 7, -8
 571 0002 88B0     		sub	sp, sp, #32
 572              	.LCFI21:
 573              		.cfi_def_cfa_offset 40
 574 0004 00AF     		add	r7, sp, #0
 575              	.LCFI22:
 576              		.cfi_def_cfa_register 7
 170:src/main.c    ****     TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;
 171:src/main.c    ****     TIM_OCInitTypeDef TIM_OCInitStruct;
 172:src/main.c    **** 
 173:src/main.c    ****     // Let PWM frequency equal 100Hz.
 174:src/main.c    ****     // Let period equal 1000. Therefore, timer runs from zero to 1000. Gives 0.1Hz resolution.
 175:src/main.c    ****     // Solving for prescaler gives 240.
 176:src/main.c    ****     TIM_TimeBaseStructInit( &TIM_TimeBaseInitStruct );
 577              		.loc 2 176 0
 578 0006 07F11403 		add	r3, r7, #20
 579 000a 1846     		mov	r0, r3
 580 000c FFF7FEFF 		bl	TIM_TimeBaseStructInit
 177:src/main.c    ****     TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV4;
 581              		.loc 2 177 0
 582 0010 4FF40073 		mov	r3, #512
 583 0014 BB83     		strh	r3, [r7, #28]	@ movhi
 178:src/main.c    ****     TIM_TimeBaseInitStruct.TIM_Period = 3360 - 1;   
 584              		.loc 2 178 0
 585 0016 40F61F53 		movw	r3, #3359
 586 001a BB61     		str	r3, [r7, #24]
 179:src/main.c    ****     TIM_TimeBaseInitStruct.TIM_Prescaler = 500 - 1; 
 587              		.loc 2 179 0
 588 001c 40F2F313 		movw	r3, #499
 589 0020 BB82     		strh	r3, [r7, #20]	@ movhi
 180:src/main.c    ****     TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;    
 590              		.loc 2 180 0
 591 0022 4FF00003 		mov	r3, #0
 592 0026 FB82     		strh	r3, [r7, #22]	@ movhi
 181:src/main.c    ****     TIM_TimeBaseInit( TIM4, &TIM_TimeBaseInitStruct );
 593              		.loc 2 181 0
 594 0028 4FF40060 		mov	r0, #2048
 595 002c C4F20000 		movt	r0, 16384
 596 0030 07F11403 		add	r3, r7, #20
 597 0034 1946     		mov	r1, r3
 598 0036 FFF7FEFF 		bl	TIM_TimeBaseInit
 182:src/main.c    ****     
 183:src/main.c    ****     TIM_OCStructInit( &TIM_OCInitStruct );
 599              		.loc 2 183 0
 600 003a 3B46     		mov	r3, r7
 601 003c 1846     		mov	r0, r3
 602 003e FFF7FEFF 		bl	TIM_OCStructInit
 184:src/main.c    ****     TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 603              		.loc 2 184 0
 604 0042 4FF00103 		mov	r3, #1
 605 0046 7B80     		strh	r3, [r7, #2]	@ movhi
 185:src/main.c    ****     TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
 606              		.loc 2 185 0
 607 0048 4FF06003 		mov	r3, #96
 608 004c 3B80     		strh	r3, [r7, #0]	@ movhi
 186:src/main.c    ****     
 187:src/main.c    ****     // Initial duty cycle equals 0%. Value can range from zero to 65535.
 188:src/main.c    ****     //TIM_Pulse = TIM4_CCR1 register (16 bits)
 189:src/main.c    ****     TIM_OCInitStruct.TIM_Pulse = 0; //(0=Always Off, 65535=Always On)
 609              		.loc 2 189 0
 610 004e 4FF00003 		mov	r3, #0
 611 0052 BB60     		str	r3, [r7, #8]
 190:src/main.c    ****  
 191:src/main.c    ****     TIM_OC1Init( TIM4, &TIM_OCInitStruct ); // Channel 1  LED
 612              		.loc 2 191 0
 613 0054 4FF40060 		mov	r0, #2048
 614 0058 C4F20000 		movt	r0, 16384
 615 005c 3B46     		mov	r3, r7
 616 005e 1946     		mov	r1, r3
 617 0060 FFF7FEFF 		bl	TIM_OC1Init
 192:src/main.c    ****     TIM_OC2Init( TIM4, &TIM_OCInitStruct ); // Channel 2  LED
 618              		.loc 2 192 0
 619 0064 4FF40060 		mov	r0, #2048
 620 0068 C4F20000 		movt	r0, 16384
 621 006c 3B46     		mov	r3, r7
 622 006e 1946     		mov	r1, r3
 623 0070 FFF7FEFF 		bl	TIM_OC2Init
 193:src/main.c    ****     TIM_OC3Init( TIM4, &TIM_OCInitStruct ); // Channel 3  LED
 624              		.loc 2 193 0
 625 0074 4FF40060 		mov	r0, #2048
 626 0078 C4F20000 		movt	r0, 16384
 627 007c 3B46     		mov	r3, r7
 628 007e 1946     		mov	r1, r3
 629 0080 FFF7FEFF 		bl	TIM_OC3Init
 194:src/main.c    ****     TIM_OC4Init( TIM4, &TIM_OCInitStruct ); // Channel 4  LED
 630              		.loc 2 194 0
 631 0084 4FF40060 		mov	r0, #2048
 632 0088 C4F20000 		movt	r0, 16384
 633 008c 3B46     		mov	r3, r7
 634 008e 1946     		mov	r1, r3
 635 0090 FFF7FEFF 		bl	TIM_OC4Init
 195:src/main.c    ****  
 196:src/main.c    ****     TIM_Cmd( TIM4, ENABLE );
 636              		.loc 2 196 0
 637 0094 4FF40060 		mov	r0, #2048
 638 0098 C4F20000 		movt	r0, 16384
 639 009c 4FF00101 		mov	r1, #1
 640 00a0 FFF7FEFF 		bl	TIM_Cmd
 197:src/main.c    **** }
 641              		.loc 2 197 0
 642 00a4 07F12007 		add	r7, r7, #32
 643 00a8 BD46     		mov	sp, r7
 644 00aa 80BD     		pop	{r7, pc}
 645              		.cfi_endproc
 646              	.LFE115:
 648              		.section	.text.Delay,"ax",%progbits
 649              		.align	2
 650              		.global	Delay
 651              		.thumb
 652              		.thumb_func
 654              	Delay:
 655              	.LFB116:
 198:src/main.c    **** /**************************************************************************/
 199:src/main.c    **** /**
 200:src/main.c    ****   * @brief  Inserts a delay time.
 201:src/main.c    ****   * @param  nTime: specifies the delay time length, in milliseconds.
 202:src/main.c    ****   * @retval None
 203:src/main.c    ****   */
 204:src/main.c    **** void Delay(__IO uint32_t nTime)
 205:src/main.c    **** { 
 656              		.loc 2 205 0
 657              		.cfi_startproc
 658              		@ args = 0, pretend = 0, frame = 8
 659              		@ frame_needed = 1, uses_anonymous_args = 0
 660              		@ link register save eliminated.
 661 0000 80B4     		push	{r7}
 662              	.LCFI23:
 663              		.cfi_def_cfa_offset 4
 664              		.cfi_offset 7, -4
 665 0002 83B0     		sub	sp, sp, #12
 666              	.LCFI24:
 667              		.cfi_def_cfa_offset 16
 668 0004 00AF     		add	r7, sp, #0
 669              	.LCFI25:
 670              		.cfi_def_cfa_register 7
 671 0006 7860     		str	r0, [r7, #4]
 206:src/main.c    ****   TimingDelay = nTime;
 672              		.loc 2 206 0
 673 0008 7A68     		ldr	r2, [r7, #4]
 674 000a 40F20003 		movw	r3, #:lower16:TimingDelay
 675 000e C0F20003 		movt	r3, #:upper16:TimingDelay
 676 0012 1A60     		str	r2, [r3, #0]
 207:src/main.c    **** 
 208:src/main.c    ****   while(TimingDelay != 0);
 677              		.loc 2 208 0
 678 0014 00BF     		nop
 679              	.L27:
 680              		.loc 2 208 0 is_stmt 0 discriminator 1
 681 0016 40F20003 		movw	r3, #:lower16:TimingDelay
 682 001a C0F20003 		movt	r3, #:upper16:TimingDelay
 683 001e 1B68     		ldr	r3, [r3, #0]
 684 0020 002B     		cmp	r3, #0
 685 0022 F8D1     		bne	.L27
 209:src/main.c    **** }
 686              		.loc 2 209 0 is_stmt 1
 687 0024 07F10C07 		add	r7, r7, #12
 688 0028 BD46     		mov	sp, r7
 689 002a 80BC     		pop	{r7}
 690 002c 7047     		bx	lr
 691              		.cfi_endproc
 692              	.LFE116:
 694 002e 00BF     		.section	.text.TimingDelay_Decrement,"ax",%progbits
 695              		.align	2
 696              		.global	TimingDelay_Decrement
 697              		.thumb
 698              		.thumb_func
 700              	TimingDelay_Decrement:
 701              	.LFB117:
 210:src/main.c    **** 
 211:src/main.c    **** /**
 212:src/main.c    ****   * @brief  Decrements the TimingDelay variable.
 213:src/main.c    ****   * @param  None
 214:src/main.c    ****   * @retval None
 215:src/main.c    ****   */
 216:src/main.c    **** void TimingDelay_Decrement(void)
 217:src/main.c    **** {
 702              		.loc 2 217 0
 703              		.cfi_startproc
 704              		@ args = 0, pretend = 0, frame = 0
 705              		@ frame_needed = 1, uses_anonymous_args = 0
 706              		@ link register save eliminated.
 707 0000 80B4     		push	{r7}
 708              	.LCFI26:
 709              		.cfi_def_cfa_offset 4
 710              		.cfi_offset 7, -4
 711 0002 00AF     		add	r7, sp, #0
 712              	.LCFI27:
 713              		.cfi_def_cfa_register 7
 218:src/main.c    ****   if (TimingDelay != 0x00)
 714              		.loc 2 218 0
 715 0004 40F20003 		movw	r3, #:lower16:TimingDelay
 716 0008 C0F20003 		movt	r3, #:upper16:TimingDelay
 717 000c 1B68     		ldr	r3, [r3, #0]
 718 000e 002B     		cmp	r3, #0
 719 0010 0BD0     		beq	.L28
 219:src/main.c    ****   { 
 220:src/main.c    ****     TimingDelay--;
 720              		.loc 2 220 0
 721 0012 40F20003 		movw	r3, #:lower16:TimingDelay
 722 0016 C0F20003 		movt	r3, #:upper16:TimingDelay
 723 001a 1B68     		ldr	r3, [r3, #0]
 724 001c 03F1FF32 		add	r2, r3, #-1
 725 0020 40F20003 		movw	r3, #:lower16:TimingDelay
 726 0024 C0F20003 		movt	r3, #:upper16:TimingDelay
 727 0028 1A60     		str	r2, [r3, #0]
 728              	.L28:
 221:src/main.c    ****   }
 222:src/main.c    **** }
 729              		.loc 2 222 0
 730 002a BD46     		mov	sp, r7
 731 002c 80BC     		pop	{r7}
 732 002e 7047     		bx	lr
 733              		.cfi_endproc
 734              	.LFE117:
 736              		.section	.text.LIS302DL_TIMEOUT_UserCallback,"ax",%progbits
 737              		.align	2
 738              		.global	LIS302DL_TIMEOUT_UserCallback
 739              		.thumb
 740              		.thumb_func
 742              	LIS302DL_TIMEOUT_UserCallback:
 743              	.LFB118:
 223:src/main.c    **** 
 224:src/main.c    **** /**
 225:src/main.c    ****   * @brief  MEMS accelerometre management of the timeout situation.
 226:src/main.c    ****   * @param  None.
 227:src/main.c    ****   * @retval None.
 228:src/main.c    ****   */
 229:src/main.c    **** uint32_t LIS302DL_TIMEOUT_UserCallback(void)
 230:src/main.c    **** {
 744              		.loc 2 230 0
 745              		.cfi_startproc
 746              		@ args = 0, pretend = 0, frame = 0
 747              		@ frame_needed = 1, uses_anonymous_args = 0
 748              		@ link register save eliminated.
 749 0000 80B4     		push	{r7}
 750              	.LCFI28:
 751              		.cfi_def_cfa_offset 4
 752              		.cfi_offset 7, -4
 753 0002 00AF     		add	r7, sp, #0
 754              	.LCFI29:
 755              		.cfi_def_cfa_register 7
 756              	.L31:
 231:src/main.c    ****   /* MEMS Accelerometer Timeout error occured */
 232:src/main.c    ****   while (1)
 233:src/main.c    ****   {   
 234:src/main.c    ****   }
 757              		.loc 2 234 0 discriminator 1
 758 0004 FEE7     		b	.L31
 759              		.cfi_endproc
 760              	.LFE118:
 762 0006 00BF     		.section	.text.test,"ax",%progbits
 763              		.align	2
 764              		.global	test
 765              		.thumb
 766              		.thumb_func
 768              	test:
 769              	.LFB119:
 235:src/main.c    **** }
 236:src/main.c    **** 
 237:src/main.c    **** #ifdef  USE_FULL_ASSERT
 238:src/main.c    **** 
 239:src/main.c    **** /**
 240:src/main.c    ****   * @brief  Reports the name of the source file and the source line number
 241:src/main.c    ****   *         where the assert_param error has occurred.
 242:src/main.c    ****   * @param  file: pointer to the source file name
 243:src/main.c    ****   * @param  line: assert_param error line source number
 244:src/main.c    ****   * @retval None
 245:src/main.c    ****   */
 246:src/main.c    **** void assert_failed(uint8_t* file, uint32_t line)
 247:src/main.c    **** { 
 248:src/main.c    ****   /* User can add his own implementation to report the file name and line number,
 249:src/main.c    ****      ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
 250:src/main.c    **** 
 251:src/main.c    ****   /* Infinite loop */
 252:src/main.c    ****   while (1)
 253:src/main.c    ****   {
 254:src/main.c    ****   }
 255:src/main.c    **** }
 256:src/main.c    **** #endif
 257:src/main.c    **** 
 258:src/main.c    **** void test(void)
 259:src/main.c    **** {
 770              		.loc 2 259 0
 771              		.cfi_startproc
 772              		@ args = 0, pretend = 0, frame = 8
 773              		@ frame_needed = 1, uses_anonymous_args = 0
 774 0000 80B5     		push	{r7, lr}
 775              	.LCFI30:
 776              		.cfi_def_cfa_offset 8
 777              		.cfi_offset 14, -4
 778              		.cfi_offset 7, -8
 779 0002 82B0     		sub	sp, sp, #8
 780              	.LCFI31:
 781              		.cfi_def_cfa_offset 16
 782 0004 00AF     		add	r7, sp, #0
 783              	.LCFI32:
 784              		.cfi_def_cfa_register 7
 260:src/main.c    **** 
 261:src/main.c    **** 	LIS302DL_InitTypeDef  LIS302DL_InitStruct;
 262:src/main.c    **** /*	STM_EVAL_LEDInit(LED3);
 263:src/main.c    **** 	STM_EVAL_LEDInit(LED4);
 264:src/main.c    ****   	STM_EVAL_LEDInit(LED5);
 265:src/main.c    ****   	STM_EVAL_LEDInit(LED6);
 266:src/main.c    **** */  
 267:src/main.c    ****   
 268:src/main.c    ****   /* Set configuration of LIS302DL*/
 269:src/main.c    ****   LIS302DL_InitStruct.Power_Mode = LIS302DL_LOWPOWERMODE_ACTIVE;
 785              		.loc 2 269 0
 786 0006 4FF04003 		mov	r3, #64
 787 000a 3B70     		strb	r3, [r7, #0]
 270:src/main.c    ****   LIS302DL_InitStruct.Output_DataRate = LIS302DL_DATARATE_400;
 788              		.loc 2 270 0
 789 000c 4FF08003 		mov	r3, #128
 790 0010 7B70     		strb	r3, [r7, #1]
 271:src/main.c    ****   LIS302DL_InitStruct.Axes_Enable = LIS302DL_X_ENABLE | LIS302DL_Y_ENABLE | LIS302DL_Z_ENABLE;
 791              		.loc 2 271 0
 792 0012 4FF00703 		mov	r3, #7
 793 0016 BB70     		strb	r3, [r7, #2]
 272:src/main.c    ****   LIS302DL_InitStruct.Full_Scale = LIS302DL_FULLSCALE_2_3;
 794              		.loc 2 272 0
 795 0018 4FF00003 		mov	r3, #0
 796 001c FB70     		strb	r3, [r7, #3]
 273:src/main.c    ****   LIS302DL_InitStruct.Self_Test = LIS302DL_SELFTEST_NORMAL;
 797              		.loc 2 273 0
 798 001e 4FF00003 		mov	r3, #0
 799 0022 3B71     		strb	r3, [r7, #4]
 274:src/main.c    ****   LIS302DL_Init(&LIS302DL_InitStruct);
 800              		.loc 2 274 0
 801 0024 3B46     		mov	r3, r7
 802 0026 1846     		mov	r0, r3
 803 0028 FFF7FEFF 		bl	LIS302DL_Init
 275:src/main.c    ****   /* SysTick end of count event each 100ms */
 276:src/main.c    ****   SysTick_Config(SystemCoreClock/1000);
 804              		.loc 2 276 0
 805 002c 40F20003 		movw	r3, #:lower16:SystemCoreClock
 806 0030 C0F20003 		movt	r3, #:upper16:SystemCoreClock
 807 0034 1A68     		ldr	r2, [r3, #0]
 808 0036 44F6D353 		movw	r3, #19923
 809 003a C1F26203 		movt	r3, 4194
 810 003e A3FB0213 		umull	r1, r3, r3, r2
 811 0042 4FEA9313 		lsr	r3, r3, #6
 812 0046 1846     		mov	r0, r3
 813 0048 FFF7FEFF 		bl	SysTick_Config
 277:src/main.c    **** 
 278:src/main.c    ****   /* Required delay for the MEMS Accelerometre: Turn-on time = 3/Output data Rate 
 279:src/main.c    ****                                                              = 3/100 = 30ms */
 280:src/main.c    ****   Delay(30);
 814              		.loc 2 280 0
 815 004c 4FF01E00 		mov	r0, #30
 816 0050 FFF7FEFF 		bl	Delay
 281:src/main.c    ****   
 282:src/main.c    **** 
 283:src/main.c    ****   LIS302DL_Read(Buffer, LIS302DL_OUT_X_ADDR, 6);
 817              		.loc 2 283 0
 818 0054 40F20000 		movw	r0, #:lower16:Buffer
 819 0058 C0F20000 		movt	r0, #:upper16:Buffer
 820 005c 4FF02901 		mov	r1, #41
 821 0060 4FF00602 		mov	r2, #6
 822 0064 FFF7FEFF 		bl	LIS302DL_Read
 284:src/main.c    ****                   
 285:src/main.c    ****   XOffset = Buffer[0];
 823              		.loc 2 285 0
 824 0068 40F20003 		movw	r3, #:lower16:Buffer
 825 006c C0F20003 		movt	r3, #:upper16:Buffer
 826 0070 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 827 0072 DAB2     		uxtb	r2, r3
 828 0074 40F20003 		movw	r3, #:lower16:XOffset
 829 0078 C0F20003 		movt	r3, #:upper16:XOffset
 830 007c 1A70     		strb	r2, [r3, #0]
 286:src/main.c    ****   YOffset = Buffer[2];
 831              		.loc 2 286 0
 832 007e 40F20003 		movw	r3, #:lower16:Buffer
 833 0082 C0F20003 		movt	r3, #:upper16:Buffer
 834 0086 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 835 0088 DAB2     		uxtb	r2, r3
 836 008a 40F20003 		movw	r3, #:lower16:YOffset
 837 008e C0F20003 		movt	r3, #:upper16:YOffset
 838 0092 1A70     		strb	r2, [r3, #0]
 839              	.L33:
 287:src/main.c    **** 
 288:src/main.c    ****   while(1)
 289:src/main.c    ****   {
 290:src/main.c    **** 
 291:src/main.c    ****   }
 840              		.loc 2 291 0 discriminator 1
 841 0094 FEE7     		b	.L33
 842              		.cfi_endproc
 843              	.LFE119:
 845 0096 00BF     		.section	.rodata
 846              		.align	2
 847              	.LC0:
 848 0000 70776D00 		.ascii	"pwm\000"
 849              		.section	.text.main,"ax",%progbits
 850              		.align	2
 851              		.global	main
 852              		.thumb
 853              		.thumb_func
 855              	main:
 856              	.LFB120:
 292:src/main.c    **** }
 293:src/main.c    **** 
 294:src/main.c    **** //Main Function
 295:src/main.c    **** int main(void)
 296:src/main.c    **** {
 857              		.loc 2 296 0
 858              		.cfi_startproc
 859              		@ args = 0, pretend = 0, frame = 0
 860              		@ frame_needed = 1, uses_anonymous_args = 0
 861 0000 80B5     		push	{r7, lr}
 862              	.LCFI33:
 863              		.cfi_def_cfa_offset 8
 864              		.cfi_offset 14, -4
 865              		.cfi_offset 7, -8
 866 0002 84B0     		sub	sp, sp, #16
 867              	.LCFI34:
 868              		.cfi_def_cfa_offset 24
 869 0004 04AF     		add	r7, sp, #16
 870              	.LCFI35:
 871              		.cfi_def_cfa 7, 8
 297:src/main.c    **** 
 298:src/main.c    **** 	//Call initx(); To Initialize USART & GPIO
 299:src/main.c    **** 	//RCC_Configuration();
 300:src/main.c    ****  	//TIM_Configuration();
 301:src/main.c    ****  	//GPIO_Configuration();
 302:src/main.c    **** 
 303:src/main.c    **** 	//Create Task For USART
 304:src/main.c    **** 	//xTaskCreate(pwm, (signed char*)"pwm", 128, NULL, tskIDLE_PRIORITY+1, NULL);
 305:src/main.c    **** 
 306:src/main.c    **** 	xTaskCreate(test, (signed char*)"pwm", 128, NULL, tskIDLE_PRIORITY+1, NULL);
 872              		.loc 2 306 0
 873 0006 40F20003 		movw	r3, #:lower16:test
 874 000a C0F20003 		movt	r3, #:upper16:test
 875 000e 4FF00102 		mov	r2, #1
 876 0012 0092     		str	r2, [sp, #0]
 877 0014 4FF00002 		mov	r2, #0
 878 0018 0192     		str	r2, [sp, #4]
 879 001a 4FF00002 		mov	r2, #0
 880 001e 0292     		str	r2, [sp, #8]
 881 0020 4FF00002 		mov	r2, #0
 882 0024 0392     		str	r2, [sp, #12]
 883 0026 1846     		mov	r0, r3
 884 0028 40F20001 		movw	r1, #:lower16:.LC0
 885 002c C0F20001 		movt	r1, #:upper16:.LC0
 886 0030 4FF08002 		mov	r2, #128
 887 0034 4FF00003 		mov	r3, #0
 888 0038 FFF7FEFF 		bl	xTaskGenericCreate
 307:src/main.c    **** 	//Call Scheduler
 308:src/main.c    **** 	vTaskStartScheduler();
 889              		.loc 2 308 0
 890 003c FFF7FEFF 		bl	vTaskStartScheduler
 891 0040 4FF00003 		mov	r3, #0
 309:src/main.c    **** 
 310:src/main.c    **** }
 892              		.loc 2 310 0
 893 0044 1846     		mov	r0, r3
 894 0046 BD46     		mov	sp, r7
 895 0048 80BD     		pop	{r7, pc}
 896              		.cfi_endproc
 897              	.LFE120:
 899              		.text
 900              	.Letext0:
 901              		.file 3 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 902              		.file 4 "/usr/local/csl/arm-2012.03/bin/../lib/gcc/arm-none-eabi/4.6.3/../../../../arm-none-eabi/i
 903              		.file 5 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_gpio.h"
 904              		.file 6 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_tim.h"
 905              		.file 7 "src/stm32f4_discovery_lis302dl.h"
 906              		.file 8 "libs/Device/STM32F4xx/Include/system_stm32f4xx.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccBBV91B.s:20     .text.NVIC_SetPriority:00000000 $t
     /tmp/ccBBV91B.s:24     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
     /tmp/ccBBV91B.s:83     .text.SysTick_Config:00000000 $t
     /tmp/ccBBV91B.s:87     .text.SysTick_Config:00000000 SysTick_Config
                            *COM*:0000000c TIM_TimeBaseStructure
     /tmp/ccBBV91B.s:152    .bss.PrescalerValue:00000000 PrescalerValue
     /tmp/ccBBV91B.s:149    .bss.PrescalerValue:00000000 $d
                            *COM*:00000006 Buffer
     /tmp/ccBBV91B.s:160    .bss.TimingDelay:00000000 TimingDelay
     /tmp/ccBBV91B.s:157    .bss.TimingDelay:00000000 $d
                            *COM*:00000001 XOffset
                            *COM*:00000001 YOffset
     /tmp/ccBBV91B.s:165    .text.pwm:00000000 $t
     /tmp/ccBBV91B.s:170    .text.pwm:00000000 pwm
     /tmp/ccBBV91B.s:267    .text.Delay_1ms:00000000 Delay_1ms
     /tmp/ccBBV91B.s:325    .text.Motor_Control:00000000 Motor_Control
     /tmp/ccBBV91B.s:262    .text.Delay_1ms:00000000 $t
     /tmp/ccBBV91B.s:320    .text.Motor_Control:00000000 $t
     /tmp/ccBBV91B.s:443    .text.RCC_Configuration:00000000 $t
     /tmp/ccBBV91B.s:448    .text.RCC_Configuration:00000000 RCC_Configuration
     /tmp/ccBBV91B.s:476    .text.GPIO_Configuration:00000000 $t
     /tmp/ccBBV91B.s:481    .text.GPIO_Configuration:00000000 GPIO_Configuration
     /tmp/ccBBV91B.s:555    .text.TIM_Configuration:00000000 $t
     /tmp/ccBBV91B.s:560    .text.TIM_Configuration:00000000 TIM_Configuration
     /tmp/ccBBV91B.s:649    .text.Delay:00000000 $t
     /tmp/ccBBV91B.s:654    .text.Delay:00000000 Delay
     /tmp/ccBBV91B.s:695    .text.TimingDelay_Decrement:00000000 $t
     /tmp/ccBBV91B.s:700    .text.TimingDelay_Decrement:00000000 TimingDelay_Decrement
     /tmp/ccBBV91B.s:737    .text.LIS302DL_TIMEOUT_UserCallback:00000000 $t
     /tmp/ccBBV91B.s:742    .text.LIS302DL_TIMEOUT_UserCallback:00000000 LIS302DL_TIMEOUT_UserCallback
     /tmp/ccBBV91B.s:763    .text.test:00000000 $t
     /tmp/ccBBV91B.s:768    .text.test:00000000 test
     /tmp/ccBBV91B.s:846    .rodata:00000000 $d
     /tmp/ccBBV91B.s:847    .rodata:00000000 .LC0
     /tmp/ccBBV91B.s:850    .text.main:00000000 $t
     /tmp/ccBBV91B.s:855    .text.main:00000000 main
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_AHB1PeriphClockCmd
RCC_APB1PeriphClockCmd
GPIO_StructInit
GPIO_PinAFConfig
GPIO_Init
TIM_TimeBaseStructInit
TIM_TimeBaseInit
TIM_OCStructInit
TIM_OC1Init
TIM_OC2Init
TIM_OC3Init
TIM_OC4Init
TIM_Cmd
LIS302DL_Init
SystemCoreClock
LIS302DL_Read
xTaskGenericCreate
vTaskStartScheduler
