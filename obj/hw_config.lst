   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"hw_config.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvSetupHardware,"ax",%progbits
  20              		.align	2
  21              		.global	prvSetupHardware
  22              		.thumb
  23              		.thumb_func
  25              	prvSetupHardware:
  26              	.LFB110:
  27              		.file 1 "src/hw_config.c"
   1:src/hw_config.c **** /**
   2:src/hw_config.c ****   ******************************************************************************
   3:src/hw_config.c ****   * @file    STM32F4-Discovery FreeRTOS demo\hw_config.c
   4:src/hw_config.c ****   * @author  T.O.M.A.S. Team
   5:src/hw_config.c ****   * @version V1.0.0
   6:src/hw_config.c ****   * @date    05-October-2011
   7:src/hw_config.c ****   * @brief   Hardware initialization
   8:src/hw_config.c ****   ******************************************************************************
   9:src/hw_config.c ****   * @attention
  10:src/hw_config.c ****   *
  11:src/hw_config.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:src/hw_config.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:src/hw_config.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:src/hw_config.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:src/hw_config.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:src/hw_config.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:src/hw_config.c ****   *
  18:src/hw_config.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:src/hw_config.c ****   ******************************************************************************
  20:src/hw_config.c ****   */
  21:src/hw_config.c **** 
  22:src/hw_config.c **** /* Library includes. */
  23:src/hw_config.c **** #include "hw_config.h"
  24:src/hw_config.c **** 
  25:src/hw_config.c **** 
  26:src/hw_config.c **** /*-----------------------------------------------------------*/
  27:src/hw_config.c **** void prvSetupHardware( void )
  28:src/hw_config.c **** {
  28              		.loc 1 28 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 14, -4
  36              		.cfi_offset 7, -8
  37 0002 00AF     		add	r7, sp, #0
  38              	.LCFI1:
  39              		.cfi_def_cfa_register 7
  29:src/hw_config.c **** 	/* Set the Vector Table base address at 0x08000000 */
  30:src/hw_config.c **** 	NVIC_SetVectorTable( NVIC_VectTab_FLASH, 0x0 );
  40              		.loc 1 30 0
  41 0004 4FF00060 		mov	r0, #134217728
  42 0008 4FF00001 		mov	r1, #0
  43 000c FFF7FEFF 		bl	NVIC_SetVectorTable
  31:src/hw_config.c **** 	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
  44              		.loc 1 31 0
  45 0010 4FF44070 		mov	r0, #768
  46 0014 FFF7FEFF 		bl	NVIC_PriorityGroupConfig
  32:src/hw_config.c **** 
  33:src/hw_config.c **** 	/* Configure LED IOs as output push-pull */
  34:src/hw_config.c ****     /* Initialize LEDs on STM32F4_Discovery board */
  35:src/hw_config.c **** 	prvLED_Config(GPIO);
  47              		.loc 1 35 0
  48 0018 4FF00000 		mov	r0, #0
  49 001c FFF7FEFF 		bl	prvLED_Config
  36:src/hw_config.c **** 	/* Configure User button pin (PA0) as external interrupt -> modes switching */
  37:src/hw_config.c **** 	STM_EVAL_PBInit(BUTTON_USER,BUTTON_MODE_EXTI);
  50              		.loc 1 37 0
  51 0020 4FF00000 		mov	r0, #0
  52 0024 4FF00101 		mov	r1, #1
  53 0028 FFF7FEFF 		bl	STM_EVAL_PBInit
  38:src/hw_config.c **** 
  39:src/hw_config.c **** 	/* Configuration of Timer4 to control LEDs based on MEMS data */
  40:src/hw_config.c **** 	prvTIM4_Config();
  54              		.loc 1 40 0
  55 002c FFF7FEFF 		bl	prvTIM4_Config
  41:src/hw_config.c **** 
  42:src/hw_config.c **** 	/* Configure LIS302 in order to produce data used for TIM4 reconfiguration and LED control */
  43:src/hw_config.c **** 	prvMEMS_Config();
  56              		.loc 1 43 0
  57 0030 FFF7FEFF 		bl	prvMEMS_Config
  44:src/hw_config.c **** }
  58              		.loc 1 44 0
  59 0034 80BD     		pop	{r7, pc}
  60              		.cfi_endproc
  61              	.LFE110:
  63 0036 00BF     		.section	.text.prvLED_Config,"ax",%progbits
  64              		.align	2
  65              		.global	prvLED_Config
  66              		.thumb
  67              		.thumb_func
  69              	prvLED_Config:
  70              	.LFB111:
  45:src/hw_config.c **** 
  46:src/hw_config.c **** void prvLED_Config(char state)
  47:src/hw_config.c **** {
  71              		.loc 1 47 0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 16
  74              		@ frame_needed = 1, uses_anonymous_args = 0
  75 0000 80B5     		push	{r7, lr}
  76              	.LCFI2:
  77              		.cfi_def_cfa_offset 8
  78              		.cfi_offset 14, -4
  79              		.cfi_offset 7, -8
  80 0002 84B0     		sub	sp, sp, #16
  81              	.LCFI3:
  82              		.cfi_def_cfa_offset 24
  83 0004 00AF     		add	r7, sp, #0
  84              	.LCFI4:
  85              		.cfi_def_cfa_register 7
  86 0006 0346     		mov	r3, r0
  87 0008 FB71     		strb	r3, [r7, #7]
  48:src/hw_config.c ****   GPIO_InitTypeDef  GPIO_InitStructure;
  49:src/hw_config.c ****   /* GPIOD Periph clock enable */
  50:src/hw_config.c ****   RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
  88              		.loc 1 50 0
  89 000a 4FF00800 		mov	r0, #8
  90 000e 4FF00101 		mov	r1, #1
  91 0012 FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
  51:src/hw_config.c ****   /* Configure PD12, PD13, PD14 and PD15 in output push-pull mode */
  52:src/hw_config.c ****   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13| GPIO_Pin_14| GPIO_Pin_15;
  92              		.loc 1 52 0
  93 0016 4FF47043 		mov	r3, #61440
  94 001a BB60     		str	r3, [r7, #8]
  53:src/hw_config.c ****   GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  95              		.loc 1 53 0
  96 001c 4FF00003 		mov	r3, #0
  97 0020 BB73     		strb	r3, [r7, #14]
  54:src/hw_config.c ****   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  98              		.loc 1 54 0
  99 0022 4FF00303 		mov	r3, #3
 100 0026 7B73     		strb	r3, [r7, #13]
  55:src/hw_config.c ****   GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 101              		.loc 1 55 0
 102 0028 4FF00003 		mov	r3, #0
 103 002c FB73     		strb	r3, [r7, #15]
  56:src/hw_config.c **** 
  57:src/hw_config.c ****   if(state==GPIO)
 104              		.loc 1 57 0
 105 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 106 0030 002B     		cmp	r3, #0
 107 0032 0CD1     		bne	.L3
  58:src/hw_config.c ****   {
  59:src/hw_config.c **** 	  /* standard output pin */
  60:src/hw_config.c **** 	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 108              		.loc 1 60 0
 109 0034 4FF00103 		mov	r3, #1
 110 0038 3B73     		strb	r3, [r7, #12]
  61:src/hw_config.c **** 	  GPIO_Init(GPIOD, &GPIO_InitStructure);
 111              		.loc 1 61 0
 112 003a 4FF44060 		mov	r0, #3072
 113 003e C4F20200 		movt	r0, 16386
 114 0042 07F10803 		add	r3, r7, #8
 115 0046 1946     		mov	r1, r3
 116 0048 FFF7FEFF 		bl	GPIO_Init
 117 004c 36E0     		b	.L2
 118              	.L3:
  62:src/hw_config.c ****   }
  63:src/hw_config.c ****   else
  64:src/hw_config.c ****   {
  65:src/hw_config.c **** 	  /*-------------------------- GPIO Configuration ----------------------------*/
  66:src/hw_config.c **** 	  /* GPIOD Configuration: Pins 12, 13, 14 and 15 in output push-pull - alternative mode */
  67:src/hw_config.c **** 	  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 119              		.loc 1 67 0
 120 004e 4FF47043 		mov	r3, #61440
 121 0052 BB60     		str	r3, [r7, #8]
  68:src/hw_config.c **** 	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 122              		.loc 1 68 0
 123 0054 4FF00203 		mov	r3, #2
 124 0058 3B73     		strb	r3, [r7, #12]
  69:src/hw_config.c **** 	  GPIO_Init(GPIOD, &GPIO_InitStructure);
 125              		.loc 1 69 0
 126 005a 4FF44060 		mov	r0, #3072
 127 005e C4F20200 		movt	r0, 16386
 128 0062 07F10803 		add	r3, r7, #8
 129 0066 1946     		mov	r1, r3
 130 0068 FFF7FEFF 		bl	GPIO_Init
  70:src/hw_config.c **** 
  71:src/hw_config.c **** 	  /* Connect TIM4 pins to AF2 */
  72:src/hw_config.c **** 	  GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_TIM4);
 131              		.loc 1 72 0
 132 006c 4FF44060 		mov	r0, #3072
 133 0070 C4F20200 		movt	r0, 16386
 134 0074 4FF00C01 		mov	r1, #12
 135 0078 4FF00202 		mov	r2, #2
 136 007c FFF7FEFF 		bl	GPIO_PinAFConfig
  73:src/hw_config.c **** 	  GPIO_PinAFConfig(GPIOD, GPIO_PinSource13, GPIO_AF_TIM4);
 137              		.loc 1 73 0
 138 0080 4FF44060 		mov	r0, #3072
 139 0084 C4F20200 		movt	r0, 16386
 140 0088 4FF00D01 		mov	r1, #13
 141 008c 4FF00202 		mov	r2, #2
 142 0090 FFF7FEFF 		bl	GPIO_PinAFConfig
  74:src/hw_config.c **** 	  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_TIM4);
 143              		.loc 1 74 0
 144 0094 4FF44060 		mov	r0, #3072
 145 0098 C4F20200 		movt	r0, 16386
 146 009c 4FF00E01 		mov	r1, #14
 147 00a0 4FF00202 		mov	r2, #2
 148 00a4 FFF7FEFF 		bl	GPIO_PinAFConfig
  75:src/hw_config.c **** 	  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_TIM4);
 149              		.loc 1 75 0
 150 00a8 4FF44060 		mov	r0, #3072
 151 00ac C4F20200 		movt	r0, 16386
 152 00b0 4FF00F01 		mov	r1, #15
 153 00b4 4FF00202 		mov	r2, #2
 154 00b8 FFF7FEFF 		bl	GPIO_PinAFConfig
 155              	.L2:
  76:src/hw_config.c ****   }
  77:src/hw_config.c **** }
 156              		.loc 1 77 0
 157 00bc 07F11007 		add	r7, r7, #16
 158 00c0 BD46     		mov	sp, r7
 159 00c2 80BD     		pop	{r7, pc}
 160              		.cfi_endproc
 161              	.LFE111:
 163              		.section	.text.prvMEMS_Config,"ax",%progbits
 164              		.align	2
 165              		.global	prvMEMS_Config
 166              		.thumb
 167              		.thumb_func
 169              	prvMEMS_Config:
 170              	.LFB112:
  78:src/hw_config.c **** 
  79:src/hw_config.c **** 
  80:src/hw_config.c **** void prvMEMS_Config(void)
  81:src/hw_config.c **** {
 171              		.loc 1 81 0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 16
 174              		@ frame_needed = 1, uses_anonymous_args = 0
 175 0000 80B5     		push	{r7, lr}
 176              	.LCFI5:
 177              		.cfi_def_cfa_offset 8
 178              		.cfi_offset 14, -4
 179              		.cfi_offset 7, -8
 180 0002 84B0     		sub	sp, sp, #16
 181              	.LCFI6:
 182              		.cfi_def_cfa_offset 24
 183 0004 00AF     		add	r7, sp, #0
 184              	.LCFI7:
 185              		.cfi_def_cfa_register 7
  82:src/hw_config.c **** 	uint8_t ctrl = 0;
 186              		.loc 1 82 0
 187 0006 4FF00003 		mov	r3, #0
 188 000a FB72     		strb	r3, [r7, #11]
  83:src/hw_config.c **** 	uint32_t i=0;		//simple index for software delay
 189              		.loc 1 83 0
 190 000c 4FF00003 		mov	r3, #0
 191 0010 FB60     		str	r3, [r7, #12]
  84:src/hw_config.c **** 
  85:src/hw_config.c **** 	LIS302DL_InitTypeDef  LIS302DL_InitStruct;
  86:src/hw_config.c **** 	LIS302DL_InterruptConfigTypeDef LIS302DL_InterruptStruct;
  87:src/hw_config.c **** 
  88:src/hw_config.c **** 	/* Set configuration of LIS302DL*/
  89:src/hw_config.c **** 	LIS302DL_InitStruct.Power_Mode = LIS302DL_LOWPOWERMODE_ACTIVE;
 192              		.loc 1 89 0
 193 0012 4FF04003 		mov	r3, #64
 194 0016 3B71     		strb	r3, [r7, #4]
  90:src/hw_config.c **** 	LIS302DL_InitStruct.Output_DataRate = LIS302DL_DATARATE_100;
 195              		.loc 1 90 0
 196 0018 4FF00003 		mov	r3, #0
 197 001c 7B71     		strb	r3, [r7, #5]
  91:src/hw_config.c **** 	LIS302DL_InitStruct.Axes_Enable = LIS302DL_X_ENABLE | LIS302DL_Y_ENABLE | LIS302DL_Z_ENABLE;
 198              		.loc 1 91 0
 199 001e 4FF00703 		mov	r3, #7
 200 0022 BB71     		strb	r3, [r7, #6]
  92:src/hw_config.c **** 	LIS302DL_InitStruct.Full_Scale = LIS302DL_FULLSCALE_2_3;
 201              		.loc 1 92 0
 202 0024 4FF00003 		mov	r3, #0
 203 0028 FB71     		strb	r3, [r7, #7]
  93:src/hw_config.c **** 	LIS302DL_InitStruct.Self_Test = LIS302DL_SELFTEST_NORMAL;
 204              		.loc 1 93 0
 205 002a 4FF00003 		mov	r3, #0
 206 002e 3B72     		strb	r3, [r7, #8]
  94:src/hw_config.c **** 	LIS302DL_Init(&LIS302DL_InitStruct);
 207              		.loc 1 94 0
 208 0030 07F10403 		add	r3, r7, #4
 209 0034 1846     		mov	r0, r3
 210 0036 FFF7FEFF 		bl	LIS302DL_Init
  95:src/hw_config.c **** 
  96:src/hw_config.c **** 	/* Set configuration of Internal High Pass Filter of LIS302DL*/
  97:src/hw_config.c **** 	LIS302DL_InterruptStruct.Latch_Request = LIS302DL_INTERRUPTREQUEST_LATCHED;
 211              		.loc 1 97 0
 212 003a 4FF04003 		mov	r3, #64
 213 003e 3B70     		strb	r3, [r7, #0]
  98:src/hw_config.c **** 	LIS302DL_InterruptStruct.SingleClick_Axes = LIS302DL_CLICKINTERRUPT_Z_ENABLE;
 214              		.loc 1 98 0
 215 0040 4FF01003 		mov	r3, #16
 216 0044 7B70     		strb	r3, [r7, #1]
  99:src/hw_config.c **** 	LIS302DL_InterruptStruct.DoubleClick_Axes = LIS302DL_DOUBLECLICKINTERRUPT_Z_ENABLE;
 217              		.loc 1 99 0
 218 0046 4FF02003 		mov	r3, #32
 219 004a BB70     		strb	r3, [r7, #2]
 100:src/hw_config.c **** 	LIS302DL_InterruptConfig(&LIS302DL_InterruptStruct);
 220              		.loc 1 100 0
 221 004c 3B46     		mov	r3, r7
 222 004e 1846     		mov	r0, r3
 223 0050 FFF7FEFF 		bl	LIS302DL_InterruptConfig
 101:src/hw_config.c **** 
 102:src/hw_config.c **** 	/* Required delay for the MEMS Accelerometer: Turn-on time = 3/Output data Rate
 103:src/hw_config.c **** 	                                                            = 3/100 = 30ms */
 104:src/hw_config.c **** 	for(i=0;i<0x1FFFF;i++);
 224              		.loc 1 104 0
 225 0054 4FF00003 		mov	r3, #0
 226 0058 FB60     		str	r3, [r7, #12]
 227 005a 03E0     		b	.L6
 228              	.L7:
 229              		.loc 1 104 0 is_stmt 0 discriminator 2
 230 005c FB68     		ldr	r3, [r7, #12]
 231 005e 03F10103 		add	r3, r3, #1
 232 0062 FB60     		str	r3, [r7, #12]
 233              	.L6:
 234              		.loc 1 104 0 discriminator 1
 235 0064 FA68     		ldr	r2, [r7, #12]
 236 0066 4FF6FE73 		movw	r3, #65534
 237 006a C0F20103 		movt	r3, 1
 238 006e 9A42     		cmp	r2, r3
 239 0070 F4D9     		bls	.L7
 105:src/hw_config.c **** 
 106:src/hw_config.c **** 	/* Configure Interrupt control register: enable Click interrupt1 */
 107:src/hw_config.c **** 	ctrl = 0x07;
 240              		.loc 1 107 0 is_stmt 1
 241 0072 4FF00703 		mov	r3, #7
 242 0076 FB72     		strb	r3, [r7, #11]
 108:src/hw_config.c **** 	LIS302DL_Write(&ctrl, LIS302DL_CTRL_REG3_ADDR, 1);
 243              		.loc 1 108 0
 244 0078 07F10B03 		add	r3, r7, #11
 245 007c 1846     		mov	r0, r3
 246 007e 4FF02201 		mov	r1, #34
 247 0082 4FF00102 		mov	r2, #1
 248 0086 FFF7FEFF 		bl	LIS302DL_Write
 109:src/hw_config.c **** 
 110:src/hw_config.c **** 	/* Enable Interrupt generation on click/double click on Z axis */
 111:src/hw_config.c **** 	ctrl = 0x70;
 249              		.loc 1 111 0
 250 008a 4FF07003 		mov	r3, #112
 251 008e FB72     		strb	r3, [r7, #11]
 112:src/hw_config.c **** 	LIS302DL_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 252              		.loc 1 112 0
 253 0090 07F10B03 		add	r3, r7, #11
 254 0094 1846     		mov	r0, r3
 255 0096 4FF03801 		mov	r1, #56
 256 009a 4FF00102 		mov	r2, #1
 257 009e FFF7FEFF 		bl	LIS302DL_Write
 113:src/hw_config.c **** 
 114:src/hw_config.c **** 	/* Configure Click Threshold on X/Y axis (10 x 0.5g) */
 115:src/hw_config.c **** 	ctrl = 0xAA;
 258              		.loc 1 115 0
 259 00a2 4FF0AA03 		mov	r3, #170
 260 00a6 FB72     		strb	r3, [r7, #11]
 116:src/hw_config.c **** 	LIS302DL_Write(&ctrl, LIS302DL_CLICK_THSY_X_REG_ADDR, 1);
 261              		.loc 1 116 0
 262 00a8 07F10B03 		add	r3, r7, #11
 263 00ac 1846     		mov	r0, r3
 264 00ae 4FF03B01 		mov	r1, #59
 265 00b2 4FF00102 		mov	r2, #1
 266 00b6 FFF7FEFF 		bl	LIS302DL_Write
 117:src/hw_config.c **** 
 118:src/hw_config.c **** 	/* Configure Click Threshold on Z axis (10 x 0.5g) */
 119:src/hw_config.c **** 	ctrl = 0x0A;
 267              		.loc 1 119 0
 268 00ba 4FF00A03 		mov	r3, #10
 269 00be FB72     		strb	r3, [r7, #11]
 120:src/hw_config.c **** 	LIS302DL_Write(&ctrl, LIS302DL_CLICK_THSZ_REG_ADDR, 1);
 270              		.loc 1 120 0
 271 00c0 07F10B03 		add	r3, r7, #11
 272 00c4 1846     		mov	r0, r3
 273 00c6 4FF03C01 		mov	r1, #60
 274 00ca 4FF00102 		mov	r2, #1
 275 00ce FFF7FEFF 		bl	LIS302DL_Write
 121:src/hw_config.c **** 
 122:src/hw_config.c **** 	/* Configure Time Limit */
 123:src/hw_config.c **** 	ctrl = 0x03;
 276              		.loc 1 123 0
 277 00d2 4FF00303 		mov	r3, #3
 278 00d6 FB72     		strb	r3, [r7, #11]
 124:src/hw_config.c **** 	LIS302DL_Write(&ctrl, LIS302DL_CLICK_TIMELIMIT_REG_ADDR, 1);
 279              		.loc 1 124 0
 280 00d8 07F10B03 		add	r3, r7, #11
 281 00dc 1846     		mov	r0, r3
 282 00de 4FF03D01 		mov	r1, #61
 283 00e2 4FF00102 		mov	r2, #1
 284 00e6 FFF7FEFF 		bl	LIS302DL_Write
 125:src/hw_config.c **** 
 126:src/hw_config.c **** 	/* Configure Latency */
 127:src/hw_config.c **** 	ctrl = 0x7F;
 285              		.loc 1 127 0
 286 00ea 4FF07F03 		mov	r3, #127
 287 00ee FB72     		strb	r3, [r7, #11]
 128:src/hw_config.c **** 	LIS302DL_Write(&ctrl, LIS302DL_CLICK_LATENCY_REG_ADDR, 1);
 288              		.loc 1 128 0
 289 00f0 07F10B03 		add	r3, r7, #11
 290 00f4 1846     		mov	r0, r3
 291 00f6 4FF03E01 		mov	r1, #62
 292 00fa 4FF00102 		mov	r2, #1
 293 00fe FFF7FEFF 		bl	LIS302DL_Write
 129:src/hw_config.c **** 
 130:src/hw_config.c **** 	/* Configure Click Window */
 131:src/hw_config.c **** 	ctrl = 0x7F;
 294              		.loc 1 131 0
 295 0102 4FF07F03 		mov	r3, #127
 296 0106 FB72     		strb	r3, [r7, #11]
 132:src/hw_config.c **** 	LIS302DL_Write(&ctrl, LIS302DL_CLICK_WINDOW_REG_ADDR, 1);
 297              		.loc 1 132 0
 298 0108 07F10B03 		add	r3, r7, #11
 299 010c 1846     		mov	r0, r3
 300 010e 4FF03F01 		mov	r1, #63
 301 0112 4FF00102 		mov	r2, #1
 302 0116 FFF7FEFF 		bl	LIS302DL_Write
 133:src/hw_config.c **** }
 303              		.loc 1 133 0
 304 011a 07F11007 		add	r7, r7, #16
 305 011e BD46     		mov	sp, r7
 306 0120 80BD     		pop	{r7, pc}
 307              		.cfi_endproc
 308              	.LFE112:
 310 0122 00BF     		.section	.text.LIS302DL_TIMEOUT_UserCallback,"ax",%progbits
 311              		.align	2
 312              		.global	LIS302DL_TIMEOUT_UserCallback
 313              		.thumb
 314              		.thumb_func
 316              	LIS302DL_TIMEOUT_UserCallback:
 317              	.LFB113:
 134:src/hw_config.c **** 
 135:src/hw_config.c **** /**
 136:src/hw_config.c ****   * @brief  MEMS accelerometer management of the timeout situation.
 137:src/hw_config.c ****   * @param  None.
 138:src/hw_config.c ****   * @retval None.
 139:src/hw_config.c ****   */
 140:src/hw_config.c **** uint32_t LIS302DL_TIMEOUT_UserCallback(void)
 141:src/hw_config.c **** {
 318              		.loc 1 141 0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 0
 321              		@ frame_needed = 1, uses_anonymous_args = 0
 322              		@ link register save eliminated.
 323 0000 80B4     		push	{r7}
 324              	.LCFI8:
 325              		.cfi_def_cfa_offset 4
 326              		.cfi_offset 7, -4
 327 0002 00AF     		add	r7, sp, #0
 328              	.LCFI9:
 329              		.cfi_def_cfa_register 7
 330              	.L9:
 142:src/hw_config.c ****   /* MEMS Accelerometer Timeout error has occured */
 143:src/hw_config.c ****   while (1)
 144:src/hw_config.c ****   {
 145:src/hw_config.c ****   }
 331              		.loc 1 145 0 discriminator 1
 332 0004 FEE7     		b	.L9
 333              		.cfi_endproc
 334              	.LFE113:
 336 0006 00BF     		.section	.text.prvTIM4_Config,"ax",%progbits
 337              		.align	2
 338              		.global	prvTIM4_Config
 339              		.thumb
 340              		.thumb_func
 342              	prvTIM4_Config:
 343              	.LFB114:
 146:src/hw_config.c **** }
 147:src/hw_config.c **** 
 148:src/hw_config.c **** void prvTIM4_Config(void)
 149:src/hw_config.c **** {
 344              		.loc 1 149 0
 345              		.cfi_startproc
 346              		@ args = 0, pretend = 0, frame = 40
 347              		@ frame_needed = 1, uses_anonymous_args = 0
 348 0000 80B5     		push	{r7, lr}
 349              	.LCFI10:
 350              		.cfi_def_cfa_offset 8
 351              		.cfi_offset 14, -4
 352              		.cfi_offset 7, -8
 353 0002 8AB0     		sub	sp, sp, #40
 354              	.LCFI11:
 355              		.cfi_def_cfa_offset 48
 356 0004 00AF     		add	r7, sp, #0
 357              	.LCFI12:
 358              		.cfi_def_cfa_register 7
 150:src/hw_config.c ****   uint16_t PrescalerValue = 0;
 359              		.loc 1 150 0
 360 0006 4FF00003 		mov	r3, #0
 361 000a FB84     		strh	r3, [r7, #38]	@ movhi
 151:src/hw_config.c ****   TIM_OCInitTypeDef  TIM_OCInitStructure;
 152:src/hw_config.c ****   TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
 153:src/hw_config.c **** 
 154:src/hw_config.c ****   /* --------------------------- System Clocks Configuration -----------------*/
 155:src/hw_config.c ****   /* TIM4 clock enable */
 156:src/hw_config.c ****   RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 362              		.loc 1 156 0
 363 000c 4FF00400 		mov	r0, #4
 364 0010 4FF00101 		mov	r1, #1
 365 0014 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 157:src/hw_config.c **** 
 158:src/hw_config.c ****     /* -----------------------------------------------------------------------
 159:src/hw_config.c ****     TIM4 Configuration: Output Compare Timing Mode:
 160:src/hw_config.c **** 
 161:src/hw_config.c ****     In this example TIM4 input clock (TIM4CLK) is set to 2 * APB1 clock (PCLK1),
 162:src/hw_config.c ****     since APB1 prescaler is different from 1 (APB1 Prescaler = 4, see system_stm32f4xx.c file).
 163:src/hw_config.c ****       TIM4CLK = 2 * PCLK1
 164:src/hw_config.c ****       PCLK1 = HCLK / 4
 165:src/hw_config.c ****       => TIM4CLK = 2*(HCLK / 4) = HCLK/2 = SystemCoreClock/2
 166:src/hw_config.c **** 
 167:src/hw_config.c ****     To get TIM4 counter clock at 2 KHz, the prescaler is computed as follows:
 168:src/hw_config.c ****        Prescaler = (TIM4CLK / TIM1 counter clock) - 1
 169:src/hw_config.c ****        Prescaler = (168 MHz/(2 * 2 KHz)) - 1 = 41999
 170:src/hw_config.c **** 
 171:src/hw_config.c ****     To get TIM4 output clock at 1 Hz, the period (ARR)) is computed as follows:
 172:src/hw_config.c ****        ARR = (TIM4 counter clock / TIM4 output clock) - 1
 173:src/hw_config.c ****            = 1999
 174:src/hw_config.c **** 
 175:src/hw_config.c ****     TIM4 Channel1 duty cycle = (TIM4_CCR1/ TIM4_ARR)* 100 = 50%
 176:src/hw_config.c ****     TIM4 Channel2 duty cycle = (TIM4_CCR2/ TIM4_ARR)* 100 = 50%
 177:src/hw_config.c ****     TIM4 Channel3 duty cycle = (TIM4_CCR3/ TIM4_ARR)* 100 = 50%
 178:src/hw_config.c ****     TIM4 Channel4 duty cycle = (TIM4_CCR4/ TIM4_ARR)* 100 = 50%
 179:src/hw_config.c **** 
 180:src/hw_config.c ****     ==> TIM4_CCRx = TIM4_ARR/2 = 1000  (where x = 1, 2, 3 and 4).
 181:src/hw_config.c **** 
 182:src/hw_config.c ****     Note:
 183:src/hw_config.c ****      SystemCoreClock variable holds HCLK frequency and is defined in system_stm32f4xx.c file.
 184:src/hw_config.c ****      Each time the core clock (HCLK) changes, user had to call SystemCoreClockUpdate()
 185:src/hw_config.c ****      function to update SystemCoreClock variable value. Otherwise, any configuration
 186:src/hw_config.c ****      based on this variable will be incorrect.
 187:src/hw_config.c ****   ----------------------------------------------------------------------- */
 188:src/hw_config.c **** 
 189:src/hw_config.c ****   /* Compute the prescaler value */
 190:src/hw_config.c ****   PrescalerValue = (uint16_t) ((SystemCoreClock /2) / 2000) - 1;
 366              		.loc 1 190 0
 367 0018 40F20003 		movw	r3, #:lower16:SystemCoreClock
 368 001c C0F20003 		movt	r3, #:upper16:SystemCoreClock
 369 0020 1A68     		ldr	r2, [r3, #0]
 370 0022 44F6D353 		movw	r3, #19923
 371 0026 C1F26203 		movt	r3, 4194
 372 002a A3FB0213 		umull	r1, r3, r3, r2
 373 002e 4FEA1323 		lsr	r3, r3, #8
 374 0032 9BB2     		uxth	r3, r3
 375 0034 03F1FF33 		add	r3, r3, #-1
 376 0038 FB84     		strh	r3, [r7, #38]	@ movhi
 191:src/hw_config.c **** 
 192:src/hw_config.c ****   /* Time base configuration */
 193:src/hw_config.c ****   TIM_TimeBaseStructure.TIM_Period = TIM_ARR;
 377              		.loc 1 193 0
 378 003a 40F26C73 		movw	r3, #1900
 379 003e BB60     		str	r3, [r7, #8]
 194:src/hw_config.c ****   TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 380              		.loc 1 194 0
 381 0040 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 382 0042 BB80     		strh	r3, [r7, #4]	@ movhi
 195:src/hw_config.c ****   TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 383              		.loc 1 195 0
 384 0044 4FF00003 		mov	r3, #0
 385 0048 BB81     		strh	r3, [r7, #12]	@ movhi
 196:src/hw_config.c ****   TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 386              		.loc 1 196 0
 387 004a 4FF00003 		mov	r3, #0
 388 004e FB80     		strh	r3, [r7, #6]	@ movhi
 197:src/hw_config.c ****   TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 389              		.loc 1 197 0
 390 0050 4FF40060 		mov	r0, #2048
 391 0054 C4F20000 		movt	r0, 16384
 392 0058 07F10403 		add	r3, r7, #4
 393 005c 1946     		mov	r1, r3
 394 005e FFF7FEFF 		bl	TIM_TimeBaseInit
 198:src/hw_config.c **** 
 199:src/hw_config.c ****   /* Enable TIM4 Preload register on ARR */
 200:src/hw_config.c ****   TIM_ARRPreloadConfig(TIM4, ENABLE);
 395              		.loc 1 200 0
 396 0062 4FF40060 		mov	r0, #2048
 397 0066 C4F20000 		movt	r0, 16384
 398 006a 4FF00101 		mov	r1, #1
 399 006e FFF7FEFF 		bl	TIM_ARRPreloadConfig
 201:src/hw_config.c **** 
 202:src/hw_config.c ****   /* TIM PWM1 Mode configuration: Channel */
 203:src/hw_config.c ****   TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 400              		.loc 1 203 0
 401 0072 4FF06003 		mov	r3, #96
 402 0076 3B82     		strh	r3, [r7, #16]	@ movhi
 204:src/hw_config.c ****   TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 403              		.loc 1 204 0
 404 0078 4FF00103 		mov	r3, #1
 405 007c 7B82     		strh	r3, [r7, #18]	@ movhi
 205:src/hw_config.c ****   TIM_OCInitStructure.TIM_Pulse = TIM_CCR;
 406              		.loc 1 205 0
 407 007e 4FF47A73 		mov	r3, #1000
 408 0082 BB61     		str	r3, [r7, #24]
 206:src/hw_config.c ****   TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 409              		.loc 1 206 0
 410 0084 4FF00003 		mov	r3, #0
 411 0088 BB83     		strh	r3, [r7, #28]	@ movhi
 207:src/hw_config.c **** 
 208:src/hw_config.c ****   /* Output Compare PWM1 Mode configuration: Channel1 */
 209:src/hw_config.c ****   TIM_OC1Init(TIM4, &TIM_OCInitStructure);
 412              		.loc 1 209 0
 413 008a 4FF40060 		mov	r0, #2048
 414 008e C4F20000 		movt	r0, 16384
 415 0092 07F11003 		add	r3, r7, #16
 416 0096 1946     		mov	r1, r3
 417 0098 FFF7FEFF 		bl	TIM_OC1Init
 210:src/hw_config.c ****   TIM_CCxCmd(TIM4, TIM_Channel_1, DISABLE);
 418              		.loc 1 210 0
 419 009c 4FF40060 		mov	r0, #2048
 420 00a0 C4F20000 		movt	r0, 16384
 421 00a4 4FF00001 		mov	r1, #0
 422 00a8 4FF00002 		mov	r2, #0
 423 00ac FFF7FEFF 		bl	TIM_CCxCmd
 211:src/hw_config.c **** 
 212:src/hw_config.c ****   TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
 424              		.loc 1 212 0
 425 00b0 4FF40060 		mov	r0, #2048
 426 00b4 C4F20000 		movt	r0, 16384
 427 00b8 4FF00801 		mov	r1, #8
 428 00bc FFF7FEFF 		bl	TIM_OC1PreloadConfig
 213:src/hw_config.c **** 
 214:src/hw_config.c ****   /* Output Compare PWM1 Mode configuration: Channel2 */
 215:src/hw_config.c ****   TIM_OC2Init(TIM4, &TIM_OCInitStructure);
 429              		.loc 1 215 0
 430 00c0 4FF40060 		mov	r0, #2048
 431 00c4 C4F20000 		movt	r0, 16384
 432 00c8 07F11003 		add	r3, r7, #16
 433 00cc 1946     		mov	r1, r3
 434 00ce FFF7FEFF 		bl	TIM_OC2Init
 216:src/hw_config.c ****   TIM_CCxCmd(TIM4, TIM_Channel_2, DISABLE);
 435              		.loc 1 216 0
 436 00d2 4FF40060 		mov	r0, #2048
 437 00d6 C4F20000 		movt	r0, 16384
 438 00da 4FF00401 		mov	r1, #4
 439 00de 4FF00002 		mov	r2, #0
 440 00e2 FFF7FEFF 		bl	TIM_CCxCmd
 217:src/hw_config.c **** 
 218:src/hw_config.c ****   TIM_OC2PreloadConfig(TIM4, TIM_OCPreload_Enable);
 441              		.loc 1 218 0
 442 00e6 4FF40060 		mov	r0, #2048
 443 00ea C4F20000 		movt	r0, 16384
 444 00ee 4FF00801 		mov	r1, #8
 445 00f2 FFF7FEFF 		bl	TIM_OC2PreloadConfig
 219:src/hw_config.c **** 
 220:src/hw_config.c ****   /* Output Compare PWM1 Mode configuration: Channel3 */
 221:src/hw_config.c ****   TIM_OC3Init(TIM4, &TIM_OCInitStructure);
 446              		.loc 1 221 0
 447 00f6 4FF40060 		mov	r0, #2048
 448 00fa C4F20000 		movt	r0, 16384
 449 00fe 07F11003 		add	r3, r7, #16
 450 0102 1946     		mov	r1, r3
 451 0104 FFF7FEFF 		bl	TIM_OC3Init
 222:src/hw_config.c ****   TIM_CCxCmd(TIM4, TIM_Channel_3, DISABLE);
 452              		.loc 1 222 0
 453 0108 4FF40060 		mov	r0, #2048
 454 010c C4F20000 		movt	r0, 16384
 455 0110 4FF00801 		mov	r1, #8
 456 0114 4FF00002 		mov	r2, #0
 457 0118 FFF7FEFF 		bl	TIM_CCxCmd
 223:src/hw_config.c **** 
 224:src/hw_config.c ****   TIM_OC3PreloadConfig(TIM4, TIM_OCPreload_Enable);
 458              		.loc 1 224 0
 459 011c 4FF40060 		mov	r0, #2048
 460 0120 C4F20000 		movt	r0, 16384
 461 0124 4FF00801 		mov	r1, #8
 462 0128 FFF7FEFF 		bl	TIM_OC3PreloadConfig
 225:src/hw_config.c **** 
 226:src/hw_config.c ****   /* Output Compare PWM1 Mode configuration: Channel4 */
 227:src/hw_config.c ****   TIM_OC4Init(TIM4, &TIM_OCInitStructure);
 463              		.loc 1 227 0
 464 012c 4FF40060 		mov	r0, #2048
 465 0130 C4F20000 		movt	r0, 16384
 466 0134 07F11003 		add	r3, r7, #16
 467 0138 1946     		mov	r1, r3
 468 013a FFF7FEFF 		bl	TIM_OC4Init
 228:src/hw_config.c ****   TIM_CCxCmd(TIM4, TIM_Channel_4, DISABLE);
 469              		.loc 1 228 0
 470 013e 4FF40060 		mov	r0, #2048
 471 0142 C4F20000 		movt	r0, 16384
 472 0146 4FF00C01 		mov	r1, #12
 473 014a 4FF00002 		mov	r2, #0
 474 014e FFF7FEFF 		bl	TIM_CCxCmd
 229:src/hw_config.c **** 
 230:src/hw_config.c ****   TIM_OC4PreloadConfig(TIM4, TIM_OCPreload_Enable);
 475              		.loc 1 230 0
 476 0152 4FF40060 		mov	r0, #2048
 477 0156 C4F20000 		movt	r0, 16384
 478 015a 4FF00801 		mov	r1, #8
 479 015e FFF7FEFF 		bl	TIM_OC4PreloadConfig
 231:src/hw_config.c **** }
 480              		.loc 1 231 0
 481 0162 07F12807 		add	r7, r7, #40
 482 0166 BD46     		mov	sp, r7
 483 0168 80BD     		pop	{r7, pc}
 484              		.cfi_endproc
 485              	.LFE114:
 487 016a 00BF     		.text
 488              	.Letext0:
 489              		.file 2 "/usr/local/csl/arm-2012.03/bin/../lib/gcc/arm-none-eabi/4.6.3/../../../../arm-none-eabi/i
 490              		.file 3 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 491              		.file 4 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_gpio.h"
 492              		.file 5 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_tim.h"
 493              		.file 6 "src/stm32f4_discovery.h"
 494              		.file 7 "src/stm32f4_discovery_lis302dl.h"
 495              		.file 8 "libs/CMSIS/Include/core_cm4.h"
 496              		.file 9 "libs/Device/STM32F4xx/Include/system_stm32f4xx.h"
DEFINED SYMBOLS
                            *ABS*:00000000 hw_config.c
     /tmp/ccUolNqn.s:20     .text.prvSetupHardware:00000000 $t
     /tmp/ccUolNqn.s:25     .text.prvSetupHardware:00000000 prvSetupHardware
     /tmp/ccUolNqn.s:69     .text.prvLED_Config:00000000 prvLED_Config
     /tmp/ccUolNqn.s:342    .text.prvTIM4_Config:00000000 prvTIM4_Config
     /tmp/ccUolNqn.s:169    .text.prvMEMS_Config:00000000 prvMEMS_Config
     /tmp/ccUolNqn.s:64     .text.prvLED_Config:00000000 $t
     /tmp/ccUolNqn.s:164    .text.prvMEMS_Config:00000000 $t
     /tmp/ccUolNqn.s:311    .text.LIS302DL_TIMEOUT_UserCallback:00000000 $t
     /tmp/ccUolNqn.s:316    .text.LIS302DL_TIMEOUT_UserCallback:00000000 LIS302DL_TIMEOUT_UserCallback
     /tmp/ccUolNqn.s:337    .text.prvTIM4_Config:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
NVIC_SetVectorTable
NVIC_PriorityGroupConfig
STM_EVAL_PBInit
RCC_AHB1PeriphClockCmd
GPIO_Init
GPIO_PinAFConfig
LIS302DL_Init
LIS302DL_InterruptConfig
LIS302DL_Write
RCC_APB1PeriphClockCmd
SystemCoreClock
TIM_TimeBaseInit
TIM_ARRPreloadConfig
TIM_OC1Init
TIM_CCxCmd
TIM_OC1PreloadConfig
TIM_OC2Init
TIM_OC2PreloadConfig
TIM_OC3Init
TIM_OC3PreloadConfig
TIM_OC4Init
TIM_OC4PreloadConfig
