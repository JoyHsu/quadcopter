   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"hw_config.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvSetupHardware,"ax",%progbits
  20              		.align	2
  21              		.global	prvSetupHardware
  22              		.thumb
  23              		.thumb_func
  25              	prvSetupHardware:
  26              	.LFB110:
  27              		.file 1 "src/hw_config.c"
   1:src/hw_config.c **** /**
   2:src/hw_config.c ****   ******************************************************************************
   3:src/hw_config.c ****   * @file    STM32F4-Discovery FreeRTOS demo\hw_config.c
   4:src/hw_config.c ****   * @author  T.O.M.A.S. Team
   5:src/hw_config.c ****   * @version V1.0.0
   6:src/hw_config.c ****   * @date    05-October-2011
   7:src/hw_config.c ****   * @brief   Hardware initialization
   8:src/hw_config.c ****   ******************************************************************************
   9:src/hw_config.c ****   * @attention
  10:src/hw_config.c ****   *
  11:src/hw_config.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:src/hw_config.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:src/hw_config.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:src/hw_config.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:src/hw_config.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:src/hw_config.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:src/hw_config.c ****   *
  18:src/hw_config.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:src/hw_config.c ****   ******************************************************************************
  20:src/hw_config.c ****   */
  21:src/hw_config.c **** 
  22:src/hw_config.c **** /* Library includes. */
  23:src/hw_config.c **** #include "hw_config.h"
  24:src/hw_config.c **** 
  25:src/hw_config.c **** 
  26:src/hw_config.c **** /*-----------------------------------------------------------*/
  27:src/hw_config.c **** void prvSetupHardware( void )
  28:src/hw_config.c **** {
  28              		.loc 1 28 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 14, -4
  36              		.cfi_offset 7, -8
  37 0002 00AF     		add	r7, sp, #0
  38              	.LCFI1:
  39              		.cfi_def_cfa_register 7
  29:src/hw_config.c **** 	/* Set the Vector Table base address at 0x08000000 */
  30:src/hw_config.c **** 	NVIC_SetVectorTable( NVIC_VectTab_FLASH, 0x0 );
  40              		.loc 1 30 0
  41 0004 4FF00060 		mov	r0, #134217728
  42 0008 4FF00001 		mov	r1, #0
  43 000c FFF7FEFF 		bl	NVIC_SetVectorTable
  31:src/hw_config.c **** 	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
  44              		.loc 1 31 0
  45 0010 4FF44070 		mov	r0, #768
  46 0014 FFF7FEFF 		bl	NVIC_PriorityGroupConfig
  32:src/hw_config.c **** 
  33:src/hw_config.c **** 	/* Configure LED IOs as output push-pull */
  34:src/hw_config.c ****     /* Initialize LEDs on STM32F4_Discovery board */
  35:src/hw_config.c **** 	prvLED_Config(GPIO);
  47              		.loc 1 35 0
  48 0018 4FF00000 		mov	r0, #0
  49 001c FFF7FEFF 		bl	prvLED_Config
  36:src/hw_config.c **** 	/* Configure User button pin (PA0) as external interrupt -> modes switching */
  37:src/hw_config.c **** 	STM_EVAL_PBInit(BUTTON_USER,BUTTON_MODE_EXTI);
  50              		.loc 1 37 0
  51 0020 4FF00000 		mov	r0, #0
  52 0024 4FF00101 		mov	r1, #1
  53 0028 FFF7FEFF 		bl	STM_EVAL_PBInit
  38:src/hw_config.c **** 
  39:src/hw_config.c **** 	/* Configuration of Timer4 to control LEDs based on MEMS data */
  40:src/hw_config.c **** 	//prvTIM4_Config();
  41:src/hw_config.c **** 
  42:src/hw_config.c **** 	/* Configure LIS302 in order to produce data used for TIM4 reconfiguration and LED control */
  43:src/hw_config.c **** 	prvMEMS_Config();
  54              		.loc 1 43 0
  55 002c FFF7FEFF 		bl	prvMEMS_Config
  44:src/hw_config.c **** 
  45:src/hw_config.c ****   RCC_Configuration();
  56              		.loc 1 45 0
  57 0030 FFF7FEFF 		bl	RCC_Configuration
  46:src/hw_config.c ****   GPIO_Configuration();
  58              		.loc 1 46 0
  59 0034 FFF7FEFF 		bl	GPIO_Configuration
  47:src/hw_config.c ****   TIM_Configuration();
  60              		.loc 1 47 0
  61 0038 FFF7FEFF 		bl	TIM_Configuration
  48:src/hw_config.c ****   USART_Configuration();
  62              		.loc 1 48 0
  63 003c FFF7FEFF 		bl	USART_Configuration
  49:src/hw_config.c **** }
  64              		.loc 1 49 0
  65 0040 80BD     		pop	{r7, pc}
  66              		.cfi_endproc
  67              	.LFE110:
  69 0042 00BF     		.section	.text.prvLED_Config,"ax",%progbits
  70              		.align	2
  71              		.global	prvLED_Config
  72              		.thumb
  73              		.thumb_func
  75              	prvLED_Config:
  76              	.LFB111:
  50:src/hw_config.c **** 
  51:src/hw_config.c **** void prvLED_Config(char state)
  52:src/hw_config.c **** {
  77              		.loc 1 52 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 16
  80              		@ frame_needed = 1, uses_anonymous_args = 0
  81 0000 80B5     		push	{r7, lr}
  82              	.LCFI2:
  83              		.cfi_def_cfa_offset 8
  84              		.cfi_offset 14, -4
  85              		.cfi_offset 7, -8
  86 0002 84B0     		sub	sp, sp, #16
  87              	.LCFI3:
  88              		.cfi_def_cfa_offset 24
  89 0004 00AF     		add	r7, sp, #0
  90              	.LCFI4:
  91              		.cfi_def_cfa_register 7
  92 0006 0346     		mov	r3, r0
  93 0008 FB71     		strb	r3, [r7, #7]
  53:src/hw_config.c ****   GPIO_InitTypeDef  GPIO_InitStructure;
  54:src/hw_config.c ****   /* GPIOD Periph clock enable */
  55:src/hw_config.c ****   RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
  94              		.loc 1 55 0
  95 000a 4FF00800 		mov	r0, #8
  96 000e 4FF00101 		mov	r1, #1
  97 0012 FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
  56:src/hw_config.c ****   /* Configure PD12, PD13, PD14 and PD15 in output push-pull mode */
  57:src/hw_config.c ****   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13| GPIO_Pin_14| GPIO_Pin_15;
  98              		.loc 1 57 0
  99 0016 4FF47043 		mov	r3, #61440
 100 001a BB60     		str	r3, [r7, #8]
  58:src/hw_config.c ****   GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 101              		.loc 1 58 0
 102 001c 4FF00003 		mov	r3, #0
 103 0020 BB73     		strb	r3, [r7, #14]
  59:src/hw_config.c ****   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 104              		.loc 1 59 0
 105 0022 4FF00303 		mov	r3, #3
 106 0026 7B73     		strb	r3, [r7, #13]
  60:src/hw_config.c ****   GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 107              		.loc 1 60 0
 108 0028 4FF00003 		mov	r3, #0
 109 002c FB73     		strb	r3, [r7, #15]
  61:src/hw_config.c **** 
  62:src/hw_config.c ****   if(state==GPIO)
 110              		.loc 1 62 0
 111 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 112 0030 002B     		cmp	r3, #0
 113 0032 0CD1     		bne	.L3
  63:src/hw_config.c ****   {
  64:src/hw_config.c **** 	  /* standard output pin */
  65:src/hw_config.c **** 	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 114              		.loc 1 65 0
 115 0034 4FF00103 		mov	r3, #1
 116 0038 3B73     		strb	r3, [r7, #12]
  66:src/hw_config.c **** 	  GPIO_Init(GPIOD, &GPIO_InitStructure);
 117              		.loc 1 66 0
 118 003a 4FF44060 		mov	r0, #3072
 119 003e C4F20200 		movt	r0, 16386
 120 0042 07F10803 		add	r3, r7, #8
 121 0046 1946     		mov	r1, r3
 122 0048 FFF7FEFF 		bl	GPIO_Init
 123 004c 36E0     		b	.L2
 124              	.L3:
  67:src/hw_config.c ****   }
  68:src/hw_config.c ****   else
  69:src/hw_config.c ****   {
  70:src/hw_config.c **** 	  /*-------------------------- GPIO Configuration ----------------------------*/
  71:src/hw_config.c **** 	  /* GPIOD Configuration: Pins 12, 13, 14 and 15 in output push-pull - alternative mode */
  72:src/hw_config.c **** 	  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 125              		.loc 1 72 0
 126 004e 4FF47043 		mov	r3, #61440
 127 0052 BB60     		str	r3, [r7, #8]
  73:src/hw_config.c **** 	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 128              		.loc 1 73 0
 129 0054 4FF00203 		mov	r3, #2
 130 0058 3B73     		strb	r3, [r7, #12]
  74:src/hw_config.c **** 	  GPIO_Init(GPIOD, &GPIO_InitStructure);
 131              		.loc 1 74 0
 132 005a 4FF44060 		mov	r0, #3072
 133 005e C4F20200 		movt	r0, 16386
 134 0062 07F10803 		add	r3, r7, #8
 135 0066 1946     		mov	r1, r3
 136 0068 FFF7FEFF 		bl	GPIO_Init
  75:src/hw_config.c **** 
  76:src/hw_config.c **** 	  /* Connect TIM4 pins to AF2 */
  77:src/hw_config.c **** 	  GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_TIM4);
 137              		.loc 1 77 0
 138 006c 4FF44060 		mov	r0, #3072
 139 0070 C4F20200 		movt	r0, 16386
 140 0074 4FF00C01 		mov	r1, #12
 141 0078 4FF00202 		mov	r2, #2
 142 007c FFF7FEFF 		bl	GPIO_PinAFConfig
  78:src/hw_config.c **** 	  GPIO_PinAFConfig(GPIOD, GPIO_PinSource13, GPIO_AF_TIM4);
 143              		.loc 1 78 0
 144 0080 4FF44060 		mov	r0, #3072
 145 0084 C4F20200 		movt	r0, 16386
 146 0088 4FF00D01 		mov	r1, #13
 147 008c 4FF00202 		mov	r2, #2
 148 0090 FFF7FEFF 		bl	GPIO_PinAFConfig
  79:src/hw_config.c **** 	  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_TIM4);
 149              		.loc 1 79 0
 150 0094 4FF44060 		mov	r0, #3072
 151 0098 C4F20200 		movt	r0, 16386
 152 009c 4FF00E01 		mov	r1, #14
 153 00a0 4FF00202 		mov	r2, #2
 154 00a4 FFF7FEFF 		bl	GPIO_PinAFConfig
  80:src/hw_config.c **** 	  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_TIM4);
 155              		.loc 1 80 0
 156 00a8 4FF44060 		mov	r0, #3072
 157 00ac C4F20200 		movt	r0, 16386
 158 00b0 4FF00F01 		mov	r1, #15
 159 00b4 4FF00202 		mov	r2, #2
 160 00b8 FFF7FEFF 		bl	GPIO_PinAFConfig
 161              	.L2:
  81:src/hw_config.c ****   }
  82:src/hw_config.c **** }
 162              		.loc 1 82 0
 163 00bc 07F11007 		add	r7, r7, #16
 164 00c0 BD46     		mov	sp, r7
 165 00c2 80BD     		pop	{r7, pc}
 166              		.cfi_endproc
 167              	.LFE111:
 169              		.section	.text.RCC_Configuration,"ax",%progbits
 170              		.align	2
 171              		.global	RCC_Configuration
 172              		.thumb
 173              		.thumb_func
 175              	RCC_Configuration:
 176              	.LFB112:
  83:src/hw_config.c **** 
  84:src/hw_config.c **** 
  85:src/hw_config.c **** /**
  86:src/hw_config.c ****   * @brief  Configures the different system clocks.
  87:src/hw_config.c ****   * @param  None
  88:src/hw_config.c ****   * @retval None
  89:src/hw_config.c ****   */
  90:src/hw_config.c **** void RCC_Configuration(void)
  91:src/hw_config.c **** {
 177              		.loc 1 91 0
 178              		.cfi_startproc
 179              		@ args = 0, pretend = 0, frame = 0
 180              		@ frame_needed = 1, uses_anonymous_args = 0
 181 0000 80B5     		push	{r7, lr}
 182              	.LCFI5:
 183              		.cfi_def_cfa_offset 8
 184              		.cfi_offset 14, -4
 185              		.cfi_offset 7, -8
 186 0002 00AF     		add	r7, sp, #0
 187              	.LCFI6:
 188              		.cfi_def_cfa_register 7
  92:src/hw_config.c ****   
  93:src/hw_config.c ****   RCC_AHB1PeriphClockCmd(  RCC_AHB1Periph_GPIOD , ENABLE );
 189              		.loc 1 93 0
 190 0004 4FF00800 		mov	r0, #8
 191 0008 4FF00101 		mov	r1, #1
 192 000c FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
  94:src/hw_config.c ****   RCC_APB1PeriphClockCmd( RCC_APB1Periph_TIM4, ENABLE );
 193              		.loc 1 94 0
 194 0010 4FF00400 		mov	r0, #4
 195 0014 4FF00101 		mov	r1, #1
 196 0018 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
  95:src/hw_config.c **** 
  96:src/hw_config.c ****   //Enable GPIO Clocks For USART2
  97:src/hw_config.c ****   RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 197              		.loc 1 97 0
 198 001c 4FF00100 		mov	r0, #1
 199 0020 4FF00101 		mov	r1, #1
 200 0024 FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
  98:src/hw_config.c **** 
  99:src/hw_config.c ****   //Enable Clocks for USART2
 100:src/hw_config.c ****   RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);    
 201              		.loc 1 100 0
 202 0028 4FF40030 		mov	r0, #131072
 203 002c 4FF00101 		mov	r1, #1
 204 0030 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 101:src/hw_config.c **** }
 205              		.loc 1 101 0
 206 0034 80BD     		pop	{r7, pc}
 207              		.cfi_endproc
 208              	.LFE112:
 210 0036 00BF     		.section	.text.GPIO_Configuration,"ax",%progbits
 211              		.align	2
 212              		.global	GPIO_Configuration
 213              		.thumb
 214              		.thumb_func
 216              	GPIO_Configuration:
 217              	.LFB113:
 102:src/hw_config.c **** 
 103:src/hw_config.c **** /**
 104:src/hw_config.c ****   * @brief  configure the PD12~15 to Timers
 105:src/hw_config.c ****   * @param  None
 106:src/hw_config.c ****   * @retval None
 107:src/hw_config.c ****   */
 108:src/hw_config.c **** void GPIO_Configuration(void)
 109:src/hw_config.c **** {
 218              		.loc 1 109 0
 219              		.cfi_startproc
 220              		@ args = 0, pretend = 0, frame = 8
 221              		@ frame_needed = 1, uses_anonymous_args = 0
 222 0000 80B5     		push	{r7, lr}
 223              	.LCFI7:
 224              		.cfi_def_cfa_offset 8
 225              		.cfi_offset 14, -4
 226              		.cfi_offset 7, -8
 227 0002 82B0     		sub	sp, sp, #8
 228              	.LCFI8:
 229              		.cfi_def_cfa_offset 16
 230 0004 00AF     		add	r7, sp, #0
 231              	.LCFI9:
 232              		.cfi_def_cfa_register 7
 110:src/hw_config.c ****   GPIO_InitTypeDef GPIO_InitStructure;
 111:src/hw_config.c ****   //GPIO Configuration for TIM4
 112:src/hw_config.c ****   //   GPIO_StructInit(&GPIO_InitStructure); // Reset init structure
 113:src/hw_config.c ****  
 114:src/hw_config.c ****   //   GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_TIM4);
 115:src/hw_config.c ****   //   GPIO_PinAFConfig(GPIOD, GPIO_PinSource13, GPIO_AF_TIM4);
 116:src/hw_config.c ****   //   GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_TIM4);
 117:src/hw_config.c ****   //   GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_TIM4);
 118:src/hw_config.c ****       
 119:src/hw_config.c **** 
 120:src/hw_config.c ****   //   // Setup Blue & Green LED on STM32-Discovery Board to use PWM.
 121:src/hw_config.c ****   //   GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12 | GPIO_Pin_13| GPIO_Pin_14| GPIO_Pin_15; 
 122:src/hw_config.c ****   // //PD12->LED3 PD13->LED4 PD14->LED5 PD15->LED6
 123:src/hw_config.c ****   // //GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;            // Alt Function - Push Pull
 124:src/hw_config.c ****   // GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF; 
 125:src/hw_config.c ****   //   GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 126:src/hw_config.c ****   //   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 127:src/hw_config.c ****   //   GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 128:src/hw_config.c ****   //   GPIO_Init( GPIOD, &GPIO_InitStructure );  
 129:src/hw_config.c **** 
 130:src/hw_config.c ****     /*----------------------------------------------------------------------*/
 131:src/hw_config.c **** 
 132:src/hw_config.c ****   //GPIO Configuration for USART - PA2, PA3
 133:src/hw_config.c ****   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 233              		.loc 1 133 0
 234 0006 4FF00C03 		mov	r3, #12
 235 000a 3B60     		str	r3, [r7, #0]
 134:src/hw_config.c ****   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 236              		.loc 1 134 0
 237 000c 4FF00203 		mov	r3, #2
 238 0010 3B71     		strb	r3, [r7, #4]
 135:src/hw_config.c ****   GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 239              		.loc 1 135 0
 240 0012 4FF00003 		mov	r3, #0
 241 0016 BB71     		strb	r3, [r7, #6]
 136:src/hw_config.c ****   GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 242              		.loc 1 136 0
 243 0018 4FF00003 		mov	r3, #0
 244 001c FB71     		strb	r3, [r7, #7]
 137:src/hw_config.c ****   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 245              		.loc 1 137 0
 246 001e 4FF00203 		mov	r3, #2
 247 0022 7B71     		strb	r3, [r7, #5]
 138:src/hw_config.c ****   GPIO_Init(GPIOA, &GPIO_InitStructure);
 248              		.loc 1 138 0
 249 0024 4FF00000 		mov	r0, #0
 250 0028 C4F20200 		movt	r0, 16386
 251 002c 3B46     		mov	r3, r7
 252 002e 1946     		mov	r1, r3
 253 0030 FFF7FEFF 		bl	GPIO_Init
 139:src/hw_config.c **** 
 140:src/hw_config.c ****   //Connect USART pins to AF
 141:src/hw_config.c ****   GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 254              		.loc 1 141 0
 255 0034 4FF00000 		mov	r0, #0
 256 0038 C4F20200 		movt	r0, 16386
 257 003c 4FF00201 		mov	r1, #2
 258 0040 4FF00702 		mov	r2, #7
 259 0044 FFF7FEFF 		bl	GPIO_PinAFConfig
 142:src/hw_config.c ****   GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 260              		.loc 1 142 0
 261 0048 4FF00000 		mov	r0, #0
 262 004c C4F20200 		movt	r0, 16386
 263 0050 4FF00301 		mov	r1, #3
 264 0054 4FF00702 		mov	r2, #7
 265 0058 FFF7FEFF 		bl	GPIO_PinAFConfig
 143:src/hw_config.c **** 
 144:src/hw_config.c **** }
 266              		.loc 1 144 0
 267 005c 07F10807 		add	r7, r7, #8
 268 0060 BD46     		mov	sp, r7
 269 0062 80BD     		pop	{r7, pc}
 270              		.cfi_endproc
 271              	.LFE113:
 273              		.section	.text.TIM_Configuration,"ax",%progbits
 274              		.align	2
 275              		.global	TIM_Configuration
 276              		.thumb
 277              		.thumb_func
 279              	TIM_Configuration:
 280              	.LFB114:
 145:src/hw_config.c **** 
 146:src/hw_config.c **** /**
 147:src/hw_config.c ****   * @brief  configure the TIM4 for PWM mode
 148:src/hw_config.c ****   * @param  None
 149:src/hw_config.c ****   * @retval None
 150:src/hw_config.c ****   */
 151:src/hw_config.c **** void TIM_Configuration(void)
 152:src/hw_config.c **** {
 281              		.loc 1 152 0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 32
 284              		@ frame_needed = 1, uses_anonymous_args = 0
 285 0000 80B5     		push	{r7, lr}
 286              	.LCFI10:
 287              		.cfi_def_cfa_offset 8
 288              		.cfi_offset 14, -4
 289              		.cfi_offset 7, -8
 290 0002 88B0     		sub	sp, sp, #32
 291              	.LCFI11:
 292              		.cfi_def_cfa_offset 40
 293 0004 00AF     		add	r7, sp, #0
 294              	.LCFI12:
 295              		.cfi_def_cfa_register 7
 153:src/hw_config.c ****     TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;
 154:src/hw_config.c ****     TIM_OCInitTypeDef TIM_OCInitStruct;
 155:src/hw_config.c **** 
 156:src/hw_config.c ****     // Let PWM frequency equal 100Hz.
 157:src/hw_config.c ****     // Let period equal 1000. Therefore, timer runs from zero to 1000. Gives 0.1Hz resolution.
 158:src/hw_config.c ****     // Solving for prescaler gives 240.
 159:src/hw_config.c ****     TIM_TimeBaseStructInit( &TIM_TimeBaseInitStruct );
 296              		.loc 1 159 0
 297 0006 07F11403 		add	r3, r7, #20
 298 000a 1846     		mov	r0, r3
 299 000c FFF7FEFF 		bl	TIM_TimeBaseStructInit
 160:src/hw_config.c ****     TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV4;
 300              		.loc 1 160 0
 301 0010 4FF40073 		mov	r3, #512
 302 0014 BB83     		strh	r3, [r7, #28]	@ movhi
 161:src/hw_config.c ****     TIM_TimeBaseInitStruct.TIM_Period = 3360 - 1;   
 303              		.loc 1 161 0
 304 0016 40F61F53 		movw	r3, #3359
 305 001a BB61     		str	r3, [r7, #24]
 162:src/hw_config.c ****     TIM_TimeBaseInitStruct.TIM_Prescaler = 500 - 1; 
 306              		.loc 1 162 0
 307 001c 40F2F313 		movw	r3, #499
 308 0020 BB82     		strh	r3, [r7, #20]	@ movhi
 163:src/hw_config.c ****     TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;    
 309              		.loc 1 163 0
 310 0022 4FF00003 		mov	r3, #0
 311 0026 FB82     		strh	r3, [r7, #22]	@ movhi
 164:src/hw_config.c ****     TIM_TimeBaseInit( TIM4, &TIM_TimeBaseInitStruct );
 312              		.loc 1 164 0
 313 0028 4FF40060 		mov	r0, #2048
 314 002c C4F20000 		movt	r0, 16384
 315 0030 07F11403 		add	r3, r7, #20
 316 0034 1946     		mov	r1, r3
 317 0036 FFF7FEFF 		bl	TIM_TimeBaseInit
 165:src/hw_config.c ****     
 166:src/hw_config.c ****     TIM_OCStructInit( &TIM_OCInitStruct );
 318              		.loc 1 166 0
 319 003a 3B46     		mov	r3, r7
 320 003c 1846     		mov	r0, r3
 321 003e FFF7FEFF 		bl	TIM_OCStructInit
 167:src/hw_config.c ****     TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 322              		.loc 1 167 0
 323 0042 4FF00103 		mov	r3, #1
 324 0046 7B80     		strh	r3, [r7, #2]	@ movhi
 168:src/hw_config.c ****     TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
 325              		.loc 1 168 0
 326 0048 4FF06003 		mov	r3, #96
 327 004c 3B80     		strh	r3, [r7, #0]	@ movhi
 169:src/hw_config.c ****     
 170:src/hw_config.c ****     // Initial duty cycle equals 0%. Value can range from zero to 65535.
 171:src/hw_config.c ****     //TIM_Pulse = TIM4_CCR1 register (16 bits)
 172:src/hw_config.c ****     TIM_OCInitStruct.TIM_Pulse = 0; //(0=Always Off, 65535=Always On)
 328              		.loc 1 172 0
 329 004e 4FF00003 		mov	r3, #0
 330 0052 BB60     		str	r3, [r7, #8]
 173:src/hw_config.c ****  
 174:src/hw_config.c ****     TIM_OC1Init( TIM4, &TIM_OCInitStruct ); // Channel 1  LED
 331              		.loc 1 174 0
 332 0054 4FF40060 		mov	r0, #2048
 333 0058 C4F20000 		movt	r0, 16384
 334 005c 3B46     		mov	r3, r7
 335 005e 1946     		mov	r1, r3
 336 0060 FFF7FEFF 		bl	TIM_OC1Init
 175:src/hw_config.c ****     TIM_OC2Init( TIM4, &TIM_OCInitStruct ); // Channel 2  LED
 337              		.loc 1 175 0
 338 0064 4FF40060 		mov	r0, #2048
 339 0068 C4F20000 		movt	r0, 16384
 340 006c 3B46     		mov	r3, r7
 341 006e 1946     		mov	r1, r3
 342 0070 FFF7FEFF 		bl	TIM_OC2Init
 176:src/hw_config.c ****     TIM_OC3Init( TIM4, &TIM_OCInitStruct ); // Channel 3  LED
 343              		.loc 1 176 0
 344 0074 4FF40060 		mov	r0, #2048
 345 0078 C4F20000 		movt	r0, 16384
 346 007c 3B46     		mov	r3, r7
 347 007e 1946     		mov	r1, r3
 348 0080 FFF7FEFF 		bl	TIM_OC3Init
 177:src/hw_config.c ****     TIM_OC4Init( TIM4, &TIM_OCInitStruct ); // Channel 4  LED
 349              		.loc 1 177 0
 350 0084 4FF40060 		mov	r0, #2048
 351 0088 C4F20000 		movt	r0, 16384
 352 008c 3B46     		mov	r3, r7
 353 008e 1946     		mov	r1, r3
 354 0090 FFF7FEFF 		bl	TIM_OC4Init
 178:src/hw_config.c ****  
 179:src/hw_config.c ****     TIM_Cmd( TIM4, ENABLE );
 355              		.loc 1 179 0
 356 0094 4FF40060 		mov	r0, #2048
 357 0098 C4F20000 		movt	r0, 16384
 358 009c 4FF00101 		mov	r1, #1
 359 00a0 FFF7FEFF 		bl	TIM_Cmd
 180:src/hw_config.c **** }
 360              		.loc 1 180 0
 361 00a4 07F12007 		add	r7, r7, #32
 362 00a8 BD46     		mov	sp, r7
 363 00aa 80BD     		pop	{r7, pc}
 364              		.cfi_endproc
 365              	.LFE114:
 367              		.section	.text.USART_Configuration,"ax",%progbits
 368              		.align	2
 369              		.global	USART_Configuration
 370              		.thumb
 371              		.thumb_func
 373              	USART_Configuration:
 374              	.LFB115:
 181:src/hw_config.c **** 
 182:src/hw_config.c **** /**
 183:src/hw_config.c ****   * @brief  configure the USART
 184:src/hw_config.c ****   * @param  None
 185:src/hw_config.c ****   * @retval None
 186:src/hw_config.c ****   */
 187:src/hw_config.c **** void USART_Configuration(void)
 188:src/hw_config.c **** {
 375              		.loc 1 188 0
 376              		.cfi_startproc
 377              		@ args = 0, pretend = 0, frame = 16
 378              		@ frame_needed = 1, uses_anonymous_args = 0
 379 0000 80B5     		push	{r7, lr}
 380              	.LCFI13:
 381              		.cfi_def_cfa_offset 8
 382              		.cfi_offset 14, -4
 383              		.cfi_offset 7, -8
 384 0002 84B0     		sub	sp, sp, #16
 385              	.LCFI14:
 386              		.cfi_def_cfa_offset 24
 387 0004 00AF     		add	r7, sp, #0
 388              	.LCFI15:
 389              		.cfi_def_cfa_register 7
 189:src/hw_config.c ****   //Structure With Data For USART Configuration
 190:src/hw_config.c ****   USART_InitTypeDef USART_InitStructure;
 191:src/hw_config.c ****   
 192:src/hw_config.c ****   //USART Parameters
 193:src/hw_config.c ****   USART_InitStructure.USART_BaudRate = 19200;
 390              		.loc 1 193 0
 391 0006 4FF49643 		mov	r3, #19200
 392 000a 3B60     		str	r3, [r7, #0]
 194:src/hw_config.c ****   USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 393              		.loc 1 194 0
 394 000c 4FF00003 		mov	r3, #0
 395 0010 BB80     		strh	r3, [r7, #4]	@ movhi
 195:src/hw_config.c ****   USART_InitStructure.USART_StopBits = USART_StopBits_1;
 396              		.loc 1 195 0
 397 0012 4FF00003 		mov	r3, #0
 398 0016 FB80     		strh	r3, [r7, #6]	@ movhi
 196:src/hw_config.c ****   USART_InitStructure.USART_Parity = USART_Parity_No ;
 399              		.loc 1 196 0
 400 0018 4FF00003 		mov	r3, #0
 401 001c 3B81     		strh	r3, [r7, #8]	@ movhi
 197:src/hw_config.c ****   USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 402              		.loc 1 197 0
 403 001e 4FF00003 		mov	r3, #0
 404 0022 BB81     		strh	r3, [r7, #12]	@ movhi
 198:src/hw_config.c ****   USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx ;
 405              		.loc 1 198 0
 406 0024 4FF00C03 		mov	r3, #12
 407 0028 7B81     		strh	r3, [r7, #10]	@ movhi
 199:src/hw_config.c **** 
 200:src/hw_config.c ****   //Configuring And Enabling USART2
 201:src/hw_config.c ****   USART_Init(USART2, &USART_InitStructure);
 408              		.loc 1 201 0
 409 002a 4FF48840 		mov	r0, #17408
 410 002e C4F20000 		movt	r0, 16384
 411 0032 3B46     		mov	r3, r7
 412 0034 1946     		mov	r1, r3
 413 0036 FFF7FEFF 		bl	USART_Init
 202:src/hw_config.c ****   USART_Cmd(USART2, ENABLE);
 414              		.loc 1 202 0
 415 003a 4FF48840 		mov	r0, #17408
 416 003e C4F20000 		movt	r0, 16384
 417 0042 4FF00101 		mov	r1, #1
 418 0046 FFF7FEFF 		bl	USART_Cmd
 203:src/hw_config.c **** 
 204:src/hw_config.c **** 
 205:src/hw_config.c **** }
 419              		.loc 1 205 0
 420 004a 07F11007 		add	r7, r7, #16
 421 004e BD46     		mov	sp, r7
 422 0050 80BD     		pop	{r7, pc}
 423              		.cfi_endproc
 424              	.LFE115:
 426 0052 00BF     		.section	.text.prvMEMS_Config,"ax",%progbits
 427              		.align	2
 428              		.global	prvMEMS_Config
 429              		.thumb
 430              		.thumb_func
 432              	prvMEMS_Config:
 433              	.LFB116:
 206:src/hw_config.c **** 
 207:src/hw_config.c **** /*------------below is original code------------*/
 208:src/hw_config.c **** 
 209:src/hw_config.c **** void prvMEMS_Config(void)
 210:src/hw_config.c **** {
 434              		.loc 1 210 0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 32
 437              		@ frame_needed = 1, uses_anonymous_args = 0
 438 0000 80B5     		push	{r7, lr}
 439              	.LCFI16:
 440              		.cfi_def_cfa_offset 8
 441              		.cfi_offset 14, -4
 442              		.cfi_offset 7, -8
 443 0002 88B0     		sub	sp, sp, #32
 444              	.LCFI17:
 445              		.cfi_def_cfa_offset 40
 446 0004 00AF     		add	r7, sp, #0
 447              	.LCFI18:
 448              		.cfi_def_cfa_register 7
 211:src/hw_config.c **** 	uint8_t ctrl = 0;
 449              		.loc 1 211 0
 450 0006 4FF00003 		mov	r3, #0
 451 000a FB77     		strb	r3, [r7, #31]
 212:src/hw_config.c **** 
 213:src/hw_config.c **** 	LIS3DSH_InitTypeDef  LIS3DSH_InitStruct;
 214:src/hw_config.c **** /*
 215:src/hw_config.c ****     LIS3DSH_InitStruct.SM1_Hysteresis=0x00;
 216:src/hw_config.c ****     LIS3DSH_InitStruct.SM1_Pin=LIS3DSH_SM1_INT_TO_PIN_INT1;
 217:src/hw_config.c ****     LIS3DSH_InitStruct.SM1_Enable=LIS3DSH_SM1_DISABLE;
 218:src/hw_config.c **** 
 219:src/hw_config.c ****     LIS3DSH_InitStruct.SM2_Hysteresis=0x00;
 220:src/hw_config.c ****     LIS3DSH_InitStruct.SM2_Pin=LIS3DSH_SM2_INT_TO_PIN_INT1;
 221:src/hw_config.c ****     LIS3DSH_InitStruct.SM2_Enable=LIS3DSH_SM2_DISABLE;
 222:src/hw_config.c **** 
 223:src/hw_config.c ****     LIS3DSH_InitStruct.CR3_Dren=LIS3DSH_CR3_DREN_TO_INT1_DISABLE;
 224:src/hw_config.c ****     LIS3DSH_InitStruct.CR3_Iea=LIS3DSH_CR3_IEA_ACTIVE_LOW;
 225:src/hw_config.c ****     LIS3DSH_InitStruct.CR3_Iel=LIS3DSH_CR3_IEL_LATCHED;
 226:src/hw_config.c ****     LIS3DSH_InitStruct.CR3_Int2En=LIS3DSH_CR3_INT2_DISABLED;
 227:src/hw_config.c ****     LIS3DSH_InitStruct.CR3_Int1En=LIS3DSH_CR3_INT1_DISABLED;
 228:src/hw_config.c ****     LIS3DSH_InitStruct.CR3_Vfilt=LIS3DSH_CR3_VFILT_DISABLED;
 229:src/hw_config.c ****     LIS3DSH_InitStruct.CR3_Strt=LIS3DSH_CR3_NO_SOFT_RESET;
 230:src/hw_config.c **** 
 231:src/hw_config.c ****     LIS3DSH_InitStruct.CR4_Odr=LIS3DSH_CR4_ODR_100HZ;
 232:src/hw_config.c ****     LIS3DSH_InitStruct.CR4_Bdu=LIS3DSH_CR4_BDU_ENABLED;
 233:src/hw_config.c ****     LIS3DSH_InitStruct.CR4_Zen=LIS3DSH_CR4_Z_AXIS_ENABLED;
 234:src/hw_config.c ****     LIS3DSH_InitStruct.CR4_Yen=LIS3DSH_CR4_Y_AXIS_ENABLED;
 235:src/hw_config.c ****     LIS3DSH_InitStruct.CR4_Xen=LIS3DSH_CR4_X_AXIS_ENABLED;
 236:src/hw_config.c **** 
 237:src/hw_config.c ****     LIS3DSH_InitStruct.CR5_Bw=LIS3DSH_CR5_BW_50HZ;
 238:src/hw_config.c ****     LIS3DSH_InitStruct.CR5_Fscale=LIS3DSH_CR5_FSCALE_2G;
 239:src/hw_config.c ****     LIS3DSH_InitStruct.CR5_St=LIS3DSH_CR5_ST_DISABLE;
 240:src/hw_config.c ****     LIS3DSH_InitStruct.CR5_Sim=LIS3DSH_CR5_MODE_4_WIRE_INTERFACE;
 241:src/hw_config.c **** 
 242:src/hw_config.c ****     LIS3DSH_InitStruct.CR6_Boot=LIS3DSH_CR6_FORCE_REBOOT_DISABLE;
 243:src/hw_config.c ****     LIS3DSH_InitStruct.CR6_FifoEn=LIS3DSH_CR6_FIFO_DISABLED;
 244:src/hw_config.c ****     LIS3DSH_InitStruct.CR6_WtmEn=LIS3DSH_CR6_WTM_DISABLED;
 245:src/hw_config.c ****     LIS3DSH_InitStruct.CR6_AddInc=LIS3DSH_CR6_ADDINC_DISABLED;
 246:src/hw_config.c ****     LIS3DSH_InitStruct.CR6_P1Empty=LIS3DSH_CR6_FIFO_EMPTY_TO_INT1_DISABLED;
 247:src/hw_config.c ****     LIS3DSH_InitStruct.CR6_P1Wtm=LIS3DSH_CR6_FIFO_WTM_TO_INT1_DISABLED;
 248:src/hw_config.c ****     LIS3DSH_InitStruct.CR6_P1OverRun=LIS3DSH_CR6_FIFO_OVERRUN_TO_INT1_DISABLED;
 249:src/hw_config.c ****     LIS3DSH_InitStruct.CR6_P2Boot=LIS3DSH_CR6_BOOT_TO_INT2_DISABLED;
 250:src/hw_config.c **** */
 251:src/hw_config.c **** 	
 252:src/hw_config.c **** 	LIS3DSH_Init(&LIS3DSH_InitStruct);	
 452              		.loc 1 252 0
 453 000c 3B46     		mov	r3, r7
 454 000e 1846     		mov	r0, r3
 455 0010 FFF7FEFF 		bl	LIS3DSH_Init
 253:src/hw_config.c **** }
 456              		.loc 1 253 0
 457 0014 07F12007 		add	r7, r7, #32
 458 0018 BD46     		mov	sp, r7
 459 001a 80BD     		pop	{r7, pc}
 460              		.cfi_endproc
 461              	.LFE116:
 463              		.section	.text.LIS3DSH_TIMEOUT_UserCallback,"ax",%progbits
 464              		.align	2
 465              		.global	LIS3DSH_TIMEOUT_UserCallback
 466              		.thumb
 467              		.thumb_func
 469              	LIS3DSH_TIMEOUT_UserCallback:
 470              	.LFB117:
 254:src/hw_config.c **** 
 255:src/hw_config.c **** /**
 256:src/hw_config.c ****   * @brief  MEMS accelerometer management of the timeout situation.
 257:src/hw_config.c ****   * @param  None.
 258:src/hw_config.c ****   * @retval None.
 259:src/hw_config.c ****   */
 260:src/hw_config.c **** uint32_t LIS3DSH_TIMEOUT_UserCallback(void)
 261:src/hw_config.c **** {
 471              		.loc 1 261 0
 472              		.cfi_startproc
 473              		@ args = 0, pretend = 0, frame = 0
 474              		@ frame_needed = 1, uses_anonymous_args = 0
 475              		@ link register save eliminated.
 476 0000 80B4     		push	{r7}
 477              	.LCFI19:
 478              		.cfi_def_cfa_offset 4
 479              		.cfi_offset 7, -4
 480 0002 00AF     		add	r7, sp, #0
 481              	.LCFI20:
 482              		.cfi_def_cfa_register 7
 483              	.L11:
 262:src/hw_config.c ****   /* MEMS Accelerometer Timeout error has occured */
 263:src/hw_config.c ****   while (1)
 264:src/hw_config.c ****   {
 265:src/hw_config.c ****   }
 484              		.loc 1 265 0 discriminator 1
 485 0004 FEE7     		b	.L11
 486              		.cfi_endproc
 487              	.LFE117:
 489 0006 00BF     		.section	.text.prvTIM4_Config,"ax",%progbits
 490              		.align	2
 491              		.global	prvTIM4_Config
 492              		.thumb
 493              		.thumb_func
 495              	prvTIM4_Config:
 496              	.LFB118:
 266:src/hw_config.c **** }
 267:src/hw_config.c **** 
 268:src/hw_config.c **** void prvTIM4_Config(void)
 269:src/hw_config.c **** {
 497              		.loc 1 269 0
 498              		.cfi_startproc
 499              		@ args = 0, pretend = 0, frame = 40
 500              		@ frame_needed = 1, uses_anonymous_args = 0
 501 0000 80B5     		push	{r7, lr}
 502              	.LCFI21:
 503              		.cfi_def_cfa_offset 8
 504              		.cfi_offset 14, -4
 505              		.cfi_offset 7, -8
 506 0002 8AB0     		sub	sp, sp, #40
 507              	.LCFI22:
 508              		.cfi_def_cfa_offset 48
 509 0004 00AF     		add	r7, sp, #0
 510              	.LCFI23:
 511              		.cfi_def_cfa_register 7
 270:src/hw_config.c ****   uint16_t PrescalerValue = 0;
 512              		.loc 1 270 0
 513 0006 4FF00003 		mov	r3, #0
 514 000a FB84     		strh	r3, [r7, #38]	@ movhi
 271:src/hw_config.c ****   TIM_OCInitTypeDef  TIM_OCInitStructure;
 272:src/hw_config.c ****   TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
 273:src/hw_config.c **** 
 274:src/hw_config.c ****   /* --------------------------- System Clocks Configuration -----------------*/
 275:src/hw_config.c ****   /* TIM4 clock enable */
 276:src/hw_config.c ****   RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 515              		.loc 1 276 0
 516 000c 4FF00400 		mov	r0, #4
 517 0010 4FF00101 		mov	r1, #1
 518 0014 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 277:src/hw_config.c **** 
 278:src/hw_config.c ****     /* -----------------------------------------------------------------------
 279:src/hw_config.c ****     TIM4 Configuration: Output Compare Timing Mode:
 280:src/hw_config.c **** 
 281:src/hw_config.c ****     In this example TIM4 input clock (TIM4CLK) is set to 2 * APB1 clock (PCLK1),
 282:src/hw_config.c ****     since APB1 prescaler is different from 1 (APB1 Prescaler = 4, see system_stm32f4xx.c file).
 283:src/hw_config.c ****       TIM4CLK = 2 * PCLK1
 284:src/hw_config.c ****       PCLK1 = HCLK / 4
 285:src/hw_config.c ****       => TIM4CLK = 2*(HCLK / 4) = HCLK/2 = SystemCoreClock/2
 286:src/hw_config.c **** 
 287:src/hw_config.c ****     To get TIM4 counter clock at 2 KHz, the prescaler is computed as follows:
 288:src/hw_config.c ****        Prescaler = (TIM4CLK / TIM1 counter clock) - 1
 289:src/hw_config.c ****        Prescaler = (168 MHz/(2 * 2 KHz)) - 1 = 41999
 290:src/hw_config.c **** 
 291:src/hw_config.c ****     To get TIM4 output clock at 1 Hz, the period (ARR)) is computed as follows:
 292:src/hw_config.c ****        ARR = (TIM4 counter clock / TIM4 output clock) - 1
 293:src/hw_config.c ****            = 1999
 294:src/hw_config.c **** 
 295:src/hw_config.c ****     TIM4 Channel1 duty cycle = (TIM4_CCR1/ TIM4_ARR)* 100 = 50%
 296:src/hw_config.c ****     TIM4 Channel2 duty cycle = (TIM4_CCR2/ TIM4_ARR)* 100 = 50%
 297:src/hw_config.c ****     TIM4 Channel3 duty cycle = (TIM4_CCR3/ TIM4_ARR)* 100 = 50%
 298:src/hw_config.c ****     TIM4 Channel4 duty cycle = (TIM4_CCR4/ TIM4_ARR)* 100 = 50%
 299:src/hw_config.c **** 
 300:src/hw_config.c ****     ==> TIM4_CCRx = TIM4_ARR/2 = 1000  (where x = 1, 2, 3 and 4).
 301:src/hw_config.c **** 
 302:src/hw_config.c ****     Note:
 303:src/hw_config.c ****      SystemCoreClock variable holds HCLK frequency and is defined in system_stm32f4xx.c file.
 304:src/hw_config.c ****      Each time the core clock (HCLK) changes, user had to call SystemCoreClockUpdate()
 305:src/hw_config.c ****      function to update SystemCoreClock variable value. Otherwise, any configuration
 306:src/hw_config.c ****      based on this variable will be incorrect.
 307:src/hw_config.c ****   ----------------------------------------------------------------------- */
 308:src/hw_config.c **** 
 309:src/hw_config.c ****   /* Compute the prescaler value */
 310:src/hw_config.c ****   PrescalerValue = (uint16_t) ((SystemCoreClock /2) / 2000) - 1;
 519              		.loc 1 310 0
 520 0018 40F20003 		movw	r3, #:lower16:SystemCoreClock
 521 001c C0F20003 		movt	r3, #:upper16:SystemCoreClock
 522 0020 1A68     		ldr	r2, [r3, #0]
 523 0022 44F6D353 		movw	r3, #19923
 524 0026 C1F26203 		movt	r3, 4194
 525 002a A3FB0213 		umull	r1, r3, r3, r2
 526 002e 4FEA1323 		lsr	r3, r3, #8
 527 0032 9BB2     		uxth	r3, r3
 528 0034 03F1FF33 		add	r3, r3, #-1
 529 0038 FB84     		strh	r3, [r7, #38]	@ movhi
 311:src/hw_config.c **** 
 312:src/hw_config.c ****   /* Time base configuration */
 313:src/hw_config.c ****   TIM_TimeBaseStructure.TIM_Period = TIM_ARR;
 530              		.loc 1 313 0
 531 003a 40F26C73 		movw	r3, #1900
 532 003e BB60     		str	r3, [r7, #8]
 314:src/hw_config.c ****   TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 533              		.loc 1 314 0
 534 0040 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 535 0042 BB80     		strh	r3, [r7, #4]	@ movhi
 315:src/hw_config.c ****   TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 536              		.loc 1 315 0
 537 0044 4FF00003 		mov	r3, #0
 538 0048 BB81     		strh	r3, [r7, #12]	@ movhi
 316:src/hw_config.c ****   TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 539              		.loc 1 316 0
 540 004a 4FF00003 		mov	r3, #0
 541 004e FB80     		strh	r3, [r7, #6]	@ movhi
 317:src/hw_config.c ****   TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 542              		.loc 1 317 0
 543 0050 4FF40060 		mov	r0, #2048
 544 0054 C4F20000 		movt	r0, 16384
 545 0058 07F10403 		add	r3, r7, #4
 546 005c 1946     		mov	r1, r3
 547 005e FFF7FEFF 		bl	TIM_TimeBaseInit
 318:src/hw_config.c **** 
 319:src/hw_config.c ****   /* Enable TIM4 Preload register on ARR */
 320:src/hw_config.c ****   TIM_ARRPreloadConfig(TIM4, ENABLE);
 548              		.loc 1 320 0
 549 0062 4FF40060 		mov	r0, #2048
 550 0066 C4F20000 		movt	r0, 16384
 551 006a 4FF00101 		mov	r1, #1
 552 006e FFF7FEFF 		bl	TIM_ARRPreloadConfig
 321:src/hw_config.c **** 
 322:src/hw_config.c ****   /* TIM PWM1 Mode configuration: Channel */
 323:src/hw_config.c ****   TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 553              		.loc 1 323 0
 554 0072 4FF06003 		mov	r3, #96
 555 0076 3B82     		strh	r3, [r7, #16]	@ movhi
 324:src/hw_config.c ****   TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 556              		.loc 1 324 0
 557 0078 4FF00103 		mov	r3, #1
 558 007c 7B82     		strh	r3, [r7, #18]	@ movhi
 325:src/hw_config.c ****   TIM_OCInitStructure.TIM_Pulse = TIM_CCR;
 559              		.loc 1 325 0
 560 007e 4FF47A73 		mov	r3, #1000
 561 0082 BB61     		str	r3, [r7, #24]
 326:src/hw_config.c ****   TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 562              		.loc 1 326 0
 563 0084 4FF00003 		mov	r3, #0
 564 0088 BB83     		strh	r3, [r7, #28]	@ movhi
 327:src/hw_config.c **** 
 328:src/hw_config.c ****   /* Output Compare PWM1 Mode configuration: Channel1 */
 329:src/hw_config.c ****   TIM_OC1Init(TIM4, &TIM_OCInitStructure);
 565              		.loc 1 329 0
 566 008a 4FF40060 		mov	r0, #2048
 567 008e C4F20000 		movt	r0, 16384
 568 0092 07F11003 		add	r3, r7, #16
 569 0096 1946     		mov	r1, r3
 570 0098 FFF7FEFF 		bl	TIM_OC1Init
 330:src/hw_config.c ****   TIM_CCxCmd(TIM4, TIM_Channel_1, DISABLE);
 571              		.loc 1 330 0
 572 009c 4FF40060 		mov	r0, #2048
 573 00a0 C4F20000 		movt	r0, 16384
 574 00a4 4FF00001 		mov	r1, #0
 575 00a8 4FF00002 		mov	r2, #0
 576 00ac FFF7FEFF 		bl	TIM_CCxCmd
 331:src/hw_config.c **** 
 332:src/hw_config.c ****   TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
 577              		.loc 1 332 0
 578 00b0 4FF40060 		mov	r0, #2048
 579 00b4 C4F20000 		movt	r0, 16384
 580 00b8 4FF00801 		mov	r1, #8
 581 00bc FFF7FEFF 		bl	TIM_OC1PreloadConfig
 333:src/hw_config.c **** 
 334:src/hw_config.c ****   /* Output Compare PWM1 Mode configuration: Channel2 */
 335:src/hw_config.c ****   TIM_OC2Init(TIM4, &TIM_OCInitStructure);
 582              		.loc 1 335 0
 583 00c0 4FF40060 		mov	r0, #2048
 584 00c4 C4F20000 		movt	r0, 16384
 585 00c8 07F11003 		add	r3, r7, #16
 586 00cc 1946     		mov	r1, r3
 587 00ce FFF7FEFF 		bl	TIM_OC2Init
 336:src/hw_config.c ****   TIM_CCxCmd(TIM4, TIM_Channel_2, DISABLE);
 588              		.loc 1 336 0
 589 00d2 4FF40060 		mov	r0, #2048
 590 00d6 C4F20000 		movt	r0, 16384
 591 00da 4FF00401 		mov	r1, #4
 592 00de 4FF00002 		mov	r2, #0
 593 00e2 FFF7FEFF 		bl	TIM_CCxCmd
 337:src/hw_config.c **** 
 338:src/hw_config.c ****   TIM_OC2PreloadConfig(TIM4, TIM_OCPreload_Enable);
 594              		.loc 1 338 0
 595 00e6 4FF40060 		mov	r0, #2048
 596 00ea C4F20000 		movt	r0, 16384
 597 00ee 4FF00801 		mov	r1, #8
 598 00f2 FFF7FEFF 		bl	TIM_OC2PreloadConfig
 339:src/hw_config.c **** 
 340:src/hw_config.c ****   /* Output Compare PWM1 Mode configuration: Channel3 */
 341:src/hw_config.c ****   TIM_OC3Init(TIM4, &TIM_OCInitStructure);
 599              		.loc 1 341 0
 600 00f6 4FF40060 		mov	r0, #2048
 601 00fa C4F20000 		movt	r0, 16384
 602 00fe 07F11003 		add	r3, r7, #16
 603 0102 1946     		mov	r1, r3
 604 0104 FFF7FEFF 		bl	TIM_OC3Init
 342:src/hw_config.c ****   TIM_CCxCmd(TIM4, TIM_Channel_3, DISABLE);
 605              		.loc 1 342 0
 606 0108 4FF40060 		mov	r0, #2048
 607 010c C4F20000 		movt	r0, 16384
 608 0110 4FF00801 		mov	r1, #8
 609 0114 4FF00002 		mov	r2, #0
 610 0118 FFF7FEFF 		bl	TIM_CCxCmd
 343:src/hw_config.c **** 
 344:src/hw_config.c ****   TIM_OC3PreloadConfig(TIM4, TIM_OCPreload_Enable);
 611              		.loc 1 344 0
 612 011c 4FF40060 		mov	r0, #2048
 613 0120 C4F20000 		movt	r0, 16384
 614 0124 4FF00801 		mov	r1, #8
 615 0128 FFF7FEFF 		bl	TIM_OC3PreloadConfig
 345:src/hw_config.c **** 
 346:src/hw_config.c ****   /* Output Compare PWM1 Mode configuration: Channel4 */
 347:src/hw_config.c ****   TIM_OC4Init(TIM4, &TIM_OCInitStructure);
 616              		.loc 1 347 0
 617 012c 4FF40060 		mov	r0, #2048
 618 0130 C4F20000 		movt	r0, 16384
 619 0134 07F11003 		add	r3, r7, #16
 620 0138 1946     		mov	r1, r3
 621 013a FFF7FEFF 		bl	TIM_OC4Init
 348:src/hw_config.c ****   TIM_CCxCmd(TIM4, TIM_Channel_4, DISABLE);
 622              		.loc 1 348 0
 623 013e 4FF40060 		mov	r0, #2048
 624 0142 C4F20000 		movt	r0, 16384
 625 0146 4FF00C01 		mov	r1, #12
 626 014a 4FF00002 		mov	r2, #0
 627 014e FFF7FEFF 		bl	TIM_CCxCmd
 349:src/hw_config.c **** 
 350:src/hw_config.c ****   TIM_OC4PreloadConfig(TIM4, TIM_OCPreload_Enable);
 628              		.loc 1 350 0
 629 0152 4FF40060 		mov	r0, #2048
 630 0156 C4F20000 		movt	r0, 16384
 631 015a 4FF00801 		mov	r1, #8
 632 015e FFF7FEFF 		bl	TIM_OC4PreloadConfig
 351:src/hw_config.c **** }
 633              		.loc 1 351 0
 634 0162 07F12807 		add	r7, r7, #40
 635 0166 BD46     		mov	sp, r7
 636 0168 80BD     		pop	{r7, pc}
 637              		.cfi_endproc
 638              	.LFE118:
 640 016a 00BF     		.text
 641              	.Letext0:
 642              		.file 2 "/usr/local/csl/arm-2012.03/bin/../lib/gcc/arm-none-eabi/4.6.3/../../../../arm-none-eabi/i
 643              		.file 3 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 644              		.file 4 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_gpio.h"
 645              		.file 5 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_tim.h"
 646              		.file 6 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_usart.h"
 647              		.file 7 "src/include/stm32f4_discovery.h"
 648              		.file 8 "src/include/stm32f4_discovery_lis3dsh.h"
 649              		.file 9 "libs/CMSIS/Include/core_cm4.h"
 650              		.file 10 "libs/Device/STM32F4xx/Include/system_stm32f4xx.h"
DEFINED SYMBOLS
                            *ABS*:00000000 hw_config.c
     /tmp/ccPwWWpy.s:20     .text.prvSetupHardware:00000000 $t
     /tmp/ccPwWWpy.s:25     .text.prvSetupHardware:00000000 prvSetupHardware
     /tmp/ccPwWWpy.s:75     .text.prvLED_Config:00000000 prvLED_Config
     /tmp/ccPwWWpy.s:432    .text.prvMEMS_Config:00000000 prvMEMS_Config
     /tmp/ccPwWWpy.s:175    .text.RCC_Configuration:00000000 RCC_Configuration
     /tmp/ccPwWWpy.s:216    .text.GPIO_Configuration:00000000 GPIO_Configuration
     /tmp/ccPwWWpy.s:279    .text.TIM_Configuration:00000000 TIM_Configuration
     /tmp/ccPwWWpy.s:373    .text.USART_Configuration:00000000 USART_Configuration
     /tmp/ccPwWWpy.s:70     .text.prvLED_Config:00000000 $t
     /tmp/ccPwWWpy.s:170    .text.RCC_Configuration:00000000 $t
     /tmp/ccPwWWpy.s:211    .text.GPIO_Configuration:00000000 $t
     /tmp/ccPwWWpy.s:274    .text.TIM_Configuration:00000000 $t
     /tmp/ccPwWWpy.s:368    .text.USART_Configuration:00000000 $t
     /tmp/ccPwWWpy.s:427    .text.prvMEMS_Config:00000000 $t
     /tmp/ccPwWWpy.s:464    .text.LIS3DSH_TIMEOUT_UserCallback:00000000 $t
     /tmp/ccPwWWpy.s:469    .text.LIS3DSH_TIMEOUT_UserCallback:00000000 LIS3DSH_TIMEOUT_UserCallback
     /tmp/ccPwWWpy.s:490    .text.prvTIM4_Config:00000000 $t
     /tmp/ccPwWWpy.s:495    .text.prvTIM4_Config:00000000 prvTIM4_Config
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
NVIC_SetVectorTable
NVIC_PriorityGroupConfig
STM_EVAL_PBInit
RCC_AHB1PeriphClockCmd
GPIO_Init
GPIO_PinAFConfig
RCC_APB1PeriphClockCmd
TIM_TimeBaseStructInit
TIM_TimeBaseInit
TIM_OCStructInit
TIM_OC1Init
TIM_OC2Init
TIM_OC3Init
TIM_OC4Init
TIM_Cmd
USART_Init
USART_Cmd
LIS3DSH_Init
SystemCoreClock
TIM_ARRPreloadConfig
TIM_CCxCmd
TIM_OC1PreloadConfig
TIM_OC2PreloadConfig
TIM_OC3PreloadConfig
TIM_OC4PreloadConfig
