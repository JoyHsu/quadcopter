   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"port.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	ulKernelPriority
  20              		.section	.rodata.ulKernelPriority,"a",%progbits
  21              		.align	2
  24              	ulKernelPriority:
  25 0000 FF000000 		.word	255
  26              		.section	.data.uxCriticalNesting,"aw",%progbits
  27              		.align	2
  30              	uxCriticalNesting:
  31 0000 AAAAAAAA 		.word	-1431655766
  32              		.global	Counter
  33              		.section	.bss.Counter,"aw",%nobits
  36              	Counter:
  37 0000 00       		.space	1
  38              		.global	TempAcceleration
  39              		.section	.bss.TempAcceleration,"aw",%nobits
  42              	TempAcceleration:
  43 0000 00       		.space	1
  44              		.global	ClickReg
  45              		.section	.bss.ClickReg,"aw",%nobits
  48              	ClickReg:
  49 0000 00       		.space	1
  50              		.section	.text.pxPortInitialiseStack,"ax",%progbits
  51              		.align	2
  52              		.global	pxPortInitialiseStack
  53              		.thumb
  54              		.thumb_func
  56              	pxPortInitialiseStack:
  57              	.LFB110:
  58              		.file 1 "FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c"
   1:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
   2:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS V7.1.1 - Copyright (C) 2012 Real Time Engineers Ltd.
   3:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
   4:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
   5:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
   6:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
   7:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    available.                                                         *
  10:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  11:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    for microcontrollers - completely free of charge!                  *
  17:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  18:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  20:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  22:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  23:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  24:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  25:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     This file is part of the FreeRTOS distribution.
  26:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  27:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     more details. You should have received a copy of the GNU General Public
  37:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS WEB site.
  41:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  42:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     1 tab == 4 spaces!
  43:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     
  44:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  45:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  46:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  47:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    not run, what could be wrong?                                      *
  48:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  49:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  50:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  51:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  52:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  53:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     
  54:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org - Documentation, training, latest information, 
  55:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     license and contact details.
  56:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     
  57:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  58:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     including FreeRTOS+Trace - an indispensable productivity tool.
  59:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  60:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     Real Time Engineers ltd license FreeRTOS to High Integrity Systems, who sell 
  61:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     the code with commercial support, indemnification, and middleware, under 
  62:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     the OpenRTOS brand: http://www.OpenRTOS.com.  High Integrity Systems also
  63:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     provide a safety engineered and independently SIL3 certified version under 
  64:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     the SafeRTOS brand: http://www.SafeRTOS.com.
  65:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** */
  66:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  67:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------
  68:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Implementation of functions defined in portable.h for the ARM CM4F port.
  69:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  *----------------------------------------------------------*/
  70:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  71:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Scheduler includes. */
  72:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #include "FreeRTOS.h"
  73:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #include "task.h"
  74:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #include "../../../src/stm32f4xx_it.h"
  75:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #include "../../../src/main.h"
  76:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  77:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #ifndef __VFP_FP__
  78:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#error This port can only be used when the project options are configured to enable hardware float
  79:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif
  80:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  81:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the NVIC. */
  82:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CTRL		( ( volatile unsigned long * ) 0xe000e010 )
  83:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_LOAD		( ( volatile unsigned long * ) 0xe000e014 )
  84:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_INT_CTRL			( ( volatile unsigned long * ) 0xe000ed04 )
  85:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSPRI2			( ( volatile unsigned long * ) 0xe000ed20 )
  86:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CLK		0x00000004
  87:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_INT		0x00000002
  88:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_ENABLE		0x00000001
  89:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSVSET			0x10000000
  90:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSV_PRI			( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 16 )
  91:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_PRI		( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 24 )
  92:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  93:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the VFP. */
  94:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portFPCCR					( ( volatile unsigned long * ) 0xe000ef34 ) /* Floating point context control
  95:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portASPEN_AND_LSPEN_BITS	( 0x3UL << 30UL )
  96:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  97:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to set up the initial stack. */
  98:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_XPSR			( 0x01000000 )
  99:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_EXEC_RETURN		( 0xfffffffd )
 100:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 101:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* The priority used by the kernel is assigned to a variable to make access
 102:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** from inline assembler easier. */
 103:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** const unsigned long ulKernelPriority = configKERNEL_INTERRUPT_PRIORITY;
 104:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 105:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 106:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** variable. */
 107:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static unsigned portBASE_TYPE uxCriticalNesting = 0xaaaaaaaa;
 108:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 109:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 110:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Setup the timer to generate the tick interrupts.
 111:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 112:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void prvSetupTimerInterrupt( void );
 113:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 114:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 115:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Exception handlers.
 116:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 117:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 118:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void );
 119:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 120:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 121:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 122:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 123:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 124:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void vPortStartFirstTask( void ) __attribute__ (( naked ));
 125:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 126:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 127:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Function to enable the VFP.
 128:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 129:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  static void vPortEnableVFP( void ) __attribute__ (( naked ));
 130:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 131:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 132:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** uint8_t Counter  = 0;
 133:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** extern __IO int8_t XOffset;
 134:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** extern __IO int8_t YOffset;
 135:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** extern uint8_t Buffer[4];
 136:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** __IO uint8_t TempAcceleration = 0;
 137:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** uint8_t ClickReg = 0;
 138:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** extern __IO uint32_t TimingDelay;
 139:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** extern __IO uint8_t SingleClickDetect;
 140:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 141:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 142:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 143:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 144:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 145:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 146:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvPa
 147:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
  59              		.loc 1 147 0
  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 16
  62              		@ frame_needed = 1, uses_anonymous_args = 0
  63              		@ link register save eliminated.
  64 0000 80B4     		push	{r7}
  65              	.LCFI0:
  66              		.cfi_def_cfa_offset 4
  67              		.cfi_offset 7, -4
  68 0002 85B0     		sub	sp, sp, #20
  69              	.LCFI1:
  70              		.cfi_def_cfa_offset 24
  71 0004 00AF     		add	r7, sp, #0
  72              	.LCFI2:
  73              		.cfi_def_cfa_register 7
  74 0006 F860     		str	r0, [r7, #12]
  75 0008 B960     		str	r1, [r7, #8]
  76 000a 7A60     		str	r2, [r7, #4]
 148:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 149:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	interrupt. */
 150:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 151:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Offset added to account for the way the MCU uses the stack on entry/exit
 152:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	of interrupts, and to ensure alignment. */
 153:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
  77              		.loc 1 153 0
  78 000c FB68     		ldr	r3, [r7, #12]
  79 000e A3F10403 		sub	r3, r3, #4
  80 0012 FB60     		str	r3, [r7, #12]
 154:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 155:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  81              		.loc 1 155 0
  82 0014 FB68     		ldr	r3, [r7, #12]
  83 0016 4FF08072 		mov	r2, #16777216
  84 001a 1A60     		str	r2, [r3, #0]
 156:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
  85              		.loc 1 156 0
  86 001c FB68     		ldr	r3, [r7, #12]
  87 001e A3F10403 		sub	r3, r3, #4
  88 0022 FB60     		str	r3, [r7, #12]
 157:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
  89              		.loc 1 157 0
  90 0024 BA68     		ldr	r2, [r7, #8]
  91 0026 FB68     		ldr	r3, [r7, #12]
  92 0028 1A60     		str	r2, [r3, #0]
 158:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
  93              		.loc 1 158 0
  94 002a FB68     		ldr	r3, [r7, #12]
  95 002c A3F10403 		sub	r3, r3, #4
  96 0030 FB60     		str	r3, [r7, #12]
 159:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = 0;	/* LR */
  97              		.loc 1 159 0
  98 0032 FB68     		ldr	r3, [r7, #12]
  99 0034 4FF00002 		mov	r2, #0
 100 0038 1A60     		str	r2, [r3, #0]
 160:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 161:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Save code space by skipping register initialisation. */
 162:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 101              		.loc 1 162 0
 102 003a FB68     		ldr	r3, [r7, #12]
 103 003c A3F11403 		sub	r3, r3, #20
 104 0040 FB60     		str	r3, [r7, #12]
 163:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 105              		.loc 1 163 0
 106 0042 7A68     		ldr	r2, [r7, #4]
 107 0044 FB68     		ldr	r3, [r7, #12]
 108 0046 1A60     		str	r2, [r3, #0]
 164:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 165:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* A save method is being used that requires each task to maintain its
 166:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	own exec return value. */
 167:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
 109              		.loc 1 167 0
 110 0048 FB68     		ldr	r3, [r7, #12]
 111 004a A3F10403 		sub	r3, r3, #4
 112 004e FB60     		str	r3, [r7, #12]
 168:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 113              		.loc 1 168 0
 114 0050 FB68     		ldr	r3, [r7, #12]
 115 0052 6FF00202 		mvn	r2, #2
 116 0056 1A60     		str	r2, [r3, #0]
 169:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 170:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 117              		.loc 1 170 0
 118 0058 FB68     		ldr	r3, [r7, #12]
 119 005a A3F12003 		sub	r3, r3, #32
 120 005e FB60     		str	r3, [r7, #12]
 171:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 172:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	return pxTopOfStack;
 121              		.loc 1 172 0
 122 0060 FB68     		ldr	r3, [r7, #12]
 173:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 123              		.loc 1 173 0
 124 0062 1846     		mov	r0, r3
 125 0064 07F11407 		add	r7, r7, #20
 126 0068 BD46     		mov	sp, r7
 127 006a 80BC     		pop	{r7}
 128 006c 7047     		bx	lr
 129              		.cfi_endproc
 130              	.LFE110:
 132 006e 00BF     		.section	.text.SVC_Handler,"ax",%progbits
 133              		.align	2
 134              		.global	SVC_Handler
 135              		.thumb
 136              		.thumb_func
 138              	SVC_Handler:
 139              	.LFB111:
 174:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 175:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 176:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void )
 177:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 140              		.loc 1 177 0
 141              		.cfi_startproc
 142              		@ Naked Function: prologue and epilogue provided by programmer.
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 1, uses_anonymous_args = 0
 178:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile (
 145              		.loc 1 178 0
 146              	@ 178 "FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 147 0000 054B     			ldr	r3, pxCurrentTCBConst2		
 148 0002 1968     		ldr r1, [r3]					
 149 0004 0868     		ldr r0, [r1]					
 150 0006 B0E8F04F 		ldmia r0!, {r4-r11, r14}		
 151 000a 80F30988 		msr psp, r0						
 152 000e 4FF00000 		mov r0, #0 						
 153 0012 80F31188 		msr	basepri, r0					
 154 0016 7047     		bx r14							
 155              										
 156              		.align 2						
 157 0018 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 158              	
 159              	@ 0 "" 2
 179:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 180:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 181:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 182:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldmia r0!, {r4-r11, r14}		\n" /* Pop the registers that are not automatically saved on excep
 183:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 184:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	mov r0, #0 						\n"
 185:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	msr	basepri, r0					\n"
 186:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	bx r14							\n"
 187:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"									\n"
 188:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	.align 2						\n"
 189:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 190:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				);
 191:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 160              		.loc 1 191 0
 161              		.thumb
 162              		.cfi_endproc
 163              	.LFE111:
 165              		.section	.text.vPortStartFirstTask,"ax",%progbits
 166              		.align	2
 167              		.thumb
 168              		.thumb_func
 170              	vPortStartFirstTask:
 171              	.LFB112:
 192:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 193:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void vPortStartFirstTask( void )
 195:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 172              		.loc 1 195 0
 173              		.cfi_startproc
 174              		@ Naked Function: prologue and epilogue provided by programmer.
 175              		@ args = 0, pretend = 0, frame = 0
 176              		@ frame_needed = 1, uses_anonymous_args = 0
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile(
 177              		.loc 1 196 0
 178              	@ 196 "FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 179 0000 0348     		 ldr r0, =0xE000ED08 	
 180 0002 0068     	 ldr r0, [r0] 			
 181 0004 0068     	 ldr r0, [r0] 			
 182 0006 80F30888 	 msr msp, r0			
 183 000a 62B6     	 cpsie i				
 184 000c 00DF     	 svc 0					
 185 000e 00BF     	 nop					
 186              	
 187              	@ 0 "" 2
 197:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 199:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 200:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 201:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 202:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" svc 0					\n" /* System call to start first task. */
 203:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" nop					\n"
 204:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				);
 205:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 188              		.loc 1 205 0
 189              		.thumb
 190              		.cfi_endproc
 191              	.LFE112:
 193              		.section	.text.xPortStartScheduler,"ax",%progbits
 194              		.align	2
 195              		.global	xPortStartScheduler
 196              		.thumb
 197              		.thumb_func
 199              	xPortStartScheduler:
 200              	.LFB113:
 206:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 207:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 208:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 209:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 210:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 211:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** portBASE_TYPE xPortStartScheduler( void )
 212:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 201              		.loc 1 212 0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 1, uses_anonymous_args = 0
 205 0000 80B5     		push	{r7, lr}
 206              	.LCFI3:
 207              		.cfi_def_cfa_offset 8
 208              		.cfi_offset 14, -4
 209              		.cfi_offset 7, -8
 210 0002 00AF     		add	r7, sp, #0
 211              	.LCFI4:
 212              		.cfi_def_cfa_register 7
 213:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Make PendSV and SysTick the lowest priority interrupts. */
 214:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 213              		.loc 1 214 0
 214 0004 4EF62053 		movw	r3, #60704
 215 0008 CEF20003 		movt	r3, 57344
 216 000c 4EF62052 		movw	r2, #60704
 217 0010 CEF20002 		movt	r2, 57344
 218 0014 1268     		ldr	r2, [r2, #0]
 219 0016 42F47F02 		orr	r2, r2, #16711680
 220 001a 1A60     		str	r2, [r3, #0]
 215:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 221              		.loc 1 215 0
 222 001c 4EF62053 		movw	r3, #60704
 223 0020 CEF20003 		movt	r3, 57344
 224 0024 4EF62052 		movw	r2, #60704
 225 0028 CEF20002 		movt	r2, 57344
 226 002c 1268     		ldr	r2, [r2, #0]
 227 002e 42F07F42 		orr	r2, r2, #-16777216
 228 0032 1A60     		str	r2, [r3, #0]
 216:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 217:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 218:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	here already. */
 219:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	prvSetupTimerInterrupt();
 229              		.loc 1 219 0
 230 0034 FFF7FEFF 		bl	prvSetupTimerInterrupt
 220:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 221:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 222:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting = 0;
 231              		.loc 1 222 0
 232 0038 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 233 003c C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 234 0040 4FF00002 		mov	r2, #0
 235 0044 1A60     		str	r2, [r3, #0]
 223:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 224:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Ensure the VFP is enabled - it should be anyway. */
 225:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	vPortEnableVFP();
 236              		.loc 1 225 0
 237 0046 FFF7FEFF 		bl	vPortEnableVFP
 226:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 227:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Lazy save always. */
 228:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 238              		.loc 1 228 0
 239 004a 4EF63473 		movw	r3, #61236
 240 004e CEF20003 		movt	r3, 57344
 241 0052 4EF63472 		movw	r2, #61236
 242 0056 CEF20002 		movt	r2, 57344
 243 005a 1268     		ldr	r2, [r2, #0]
 244 005c 42F04042 		orr	r2, r2, #-1073741824
 245 0060 1A60     		str	r2, [r3, #0]
 229:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 230:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Start the first task. */
 231:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	vPortStartFirstTask();
 246              		.loc 1 231 0
 247 0062 FFF7FEFF 		bl	vPortStartFirstTask
 232:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 233:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Should not get here! */
 234:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	return 0;
 248              		.loc 1 234 0
 249 0066 4FF00003 		mov	r3, #0
 235:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 250              		.loc 1 235 0
 251 006a 1846     		mov	r0, r3
 252 006c 80BD     		pop	{r7, pc}
 253              		.cfi_endproc
 254              	.LFE113:
 256 006e 00BF     		.section	.text.vPortEndScheduler,"ax",%progbits
 257              		.align	2
 258              		.global	vPortEndScheduler
 259              		.thumb
 260              		.thumb_func
 262              	vPortEndScheduler:
 263              	.LFB114:
 236:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 237:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 238:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortEndScheduler( void )
 239:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 264              		.loc 1 239 0
 265              		.cfi_startproc
 266              		@ args = 0, pretend = 0, frame = 0
 267              		@ frame_needed = 1, uses_anonymous_args = 0
 268              		@ link register save eliminated.
 269 0000 80B4     		push	{r7}
 270              	.LCFI5:
 271              		.cfi_def_cfa_offset 4
 272              		.cfi_offset 7, -4
 273 0002 00AF     		add	r7, sp, #0
 274              	.LCFI6:
 275              		.cfi_def_cfa_register 7
 240:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* It is unlikely that the CM4F port will require this function as there
 241:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	is nothing to return to.  */
 242:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 276              		.loc 1 242 0
 277 0004 BD46     		mov	sp, r7
 278 0006 80BC     		pop	{r7}
 279 0008 7047     		bx	lr
 280              		.cfi_endproc
 281              	.LFE114:
 283 000a 00BF     		.section	.text.vPortYieldFromISR,"ax",%progbits
 284              		.align	2
 285              		.global	vPortYieldFromISR
 286              		.thumb
 287              		.thumb_func
 289              	vPortYieldFromISR:
 290              	.LFB115:
 243:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 244:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 245:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortYieldFromISR( void )
 246:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 291              		.loc 1 246 0
 292              		.cfi_startproc
 293              		@ args = 0, pretend = 0, frame = 0
 294              		@ frame_needed = 1, uses_anonymous_args = 0
 295              		@ link register save eliminated.
 296 0000 80B4     		push	{r7}
 297              	.LCFI7:
 298              		.cfi_def_cfa_offset 4
 299              		.cfi_offset 7, -4
 300 0002 00AF     		add	r7, sp, #0
 301              	.LCFI8:
 302              		.cfi_def_cfa_register 7
 247:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Set a PendSV to request a context switch. */
 248:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 303              		.loc 1 248 0
 304 0004 4EF60453 		movw	r3, #60676
 305 0008 CEF20003 		movt	r3, 57344
 306 000c 4FF08052 		mov	r2, #268435456
 307 0010 1A60     		str	r2, [r3, #0]
 249:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 308              		.loc 1 249 0
 309 0012 BD46     		mov	sp, r7
 310 0014 80BC     		pop	{r7}
 311 0016 7047     		bx	lr
 312              		.cfi_endproc
 313              	.LFE115:
 315              		.section	.text.vPortEnterCritical,"ax",%progbits
 316              		.align	2
 317              		.global	vPortEnterCritical
 318              		.thumb
 319              		.thumb_func
 321              	vPortEnterCritical:
 322              	.LFB116:
 250:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 251:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 252:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortEnterCritical( void )
 253:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 323              		.loc 1 253 0
 324              		.cfi_startproc
 325              		@ args = 0, pretend = 0, frame = 0
 326              		@ frame_needed = 1, uses_anonymous_args = 0
 327              		@ link register save eliminated.
 328 0000 80B4     		push	{r7}
 329              	.LCFI9:
 330              		.cfi_def_cfa_offset 4
 331              		.cfi_offset 7, -4
 332 0002 00AF     		add	r7, sp, #0
 333              	.LCFI10:
 334              		.cfi_def_cfa_register 7
 254:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 335              		.loc 1 254 0
 336              	@ 254 "FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 337 0004 4FF0BF00 			mov r0, #191								
 338 0008 80F31188 		msr basepri, r0							
 339              	
 340              	@ 0 "" 2
 255:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting++;
 341              		.loc 1 255 0
 342              		.thumb
 343 000c 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 344 0010 C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 345 0014 1B68     		ldr	r3, [r3, #0]
 346 0016 03F10102 		add	r2, r3, #1
 347 001a 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 348 001e C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 349 0022 1A60     		str	r2, [r3, #0]
 256:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 350              		.loc 1 256 0
 351 0024 BD46     		mov	sp, r7
 352 0026 80BC     		pop	{r7}
 353 0028 7047     		bx	lr
 354              		.cfi_endproc
 355              	.LFE116:
 357 002a 00BF     		.section	.text.vPortExitCritical,"ax",%progbits
 358              		.align	2
 359              		.global	vPortExitCritical
 360              		.thumb
 361              		.thumb_func
 363              	vPortExitCritical:
 364              	.LFB117:
 257:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 258:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 259:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortExitCritical( void )
 260:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 365              		.loc 1 260 0
 366              		.cfi_startproc
 367              		@ args = 0, pretend = 0, frame = 0
 368              		@ frame_needed = 1, uses_anonymous_args = 0
 369              		@ link register save eliminated.
 370 0000 80B4     		push	{r7}
 371              	.LCFI11:
 372              		.cfi_def_cfa_offset 4
 373              		.cfi_offset 7, -4
 374 0002 00AF     		add	r7, sp, #0
 375              	.LCFI12:
 376              		.cfi_def_cfa_register 7
 261:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting--;
 377              		.loc 1 261 0
 378 0004 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 379 0008 C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 380 000c 1B68     		ldr	r3, [r3, #0]
 381 000e 03F1FF32 		add	r2, r3, #-1
 382 0012 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 383 0016 C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 384 001a 1A60     		str	r2, [r3, #0]
 262:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	if( uxCriticalNesting == 0 )
 385              		.loc 1 262 0
 386 001c 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 387 0020 C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 388 0024 1B68     		ldr	r3, [r3, #0]
 389 0026 002B     		cmp	r3, #0
 390 0028 03D1     		bne	.L8
 263:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 264:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		portENABLE_INTERRUPTS();
 391              		.loc 1 264 0
 392              	@ 264 "FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 393 002a 4FF00000 			mov r0, #0					
 394 002e 80F31188 		msr basepri, r0				
 395              	
 396              	@ 0 "" 2
 397              		.thumb
 398              	.L8:
 265:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 266:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 399              		.loc 1 266 0
 400 0032 BD46     		mov	sp, r7
 401 0034 80BC     		pop	{r7}
 402 0036 7047     		bx	lr
 403              		.cfi_endproc
 404              	.LFE117:
 406              		.section	.text.PendSV_Handler,"ax",%progbits
 407              		.align	2
 408              		.global	PendSV_Handler
 409              		.thumb
 410              		.thumb_func
 412              	PendSV_Handler:
 413              	.LFB118:
 267:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 268:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 269:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void )
 270:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 414              		.loc 1 270 0
 415              		.cfi_startproc
 416              		@ Naked Function: prologue and epilogue provided by programmer.
 417              		@ args = 0, pretend = 0, frame = 0
 418              		@ frame_needed = 1, uses_anonymous_args = 0
 271:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* This is a naked function. */
 272:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 273:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile
 419              		.loc 1 273 0
 420              	@ 273 "FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 421 0000 EFF30980 			mrs r0, psp							
 422              											
 423 0004 114B     		ldr	r3, pxCurrentTCBConst				
 424 0006 1A68     		ldr	r2, [r3]						
 425              											
 426 0008 1EF0100F 		tst r14, #0x10						
 427 000c 08BF     		it eq								
 428 000e 20ED108A 		vstmdbeq r0!, {s16-s31}				
 429              											
 430 0012 20E9F04F 		stmdb r0!, {r4-r11, r14}			
 431              											
 432 0016 1060     		str r0, [r2]						
 433              											
 434 0018 2DE90840 		stmdb sp!, {r3, r14}				
 435 001c 4FF0BF00 		mov r0, #191 							
 436 0020 80F31188 		msr basepri, r0						
 437 0024 FFF7FEFF 		bl vTaskSwitchContext				
 438 0028 4FF00000 		mov r0, #0							
 439 002c 80F31188 		msr basepri, r0						
 440 0030 BDE80840 		ldmia sp!, {r3, r14}				
 441              											
 442 0034 1968     		ldr r1, [r3]						
 443 0036 0868     		ldr r0, [r1]						
 444              											
 445 0038 B0E8F04F 		ldmia r0!, {r4-r11, r14}			
 446              											
 447 003c 1EF0100F 		tst r14, #0x10						
 448 0040 08BF     		it eq								
 449 0042 B0EC108A 		vldmiaeq r0!, {s16-s31}				
 450              											
 451 0046 80F30988 		msr psp, r0							
 452 004a 7047     		bx r14								
 453              											
 454              		.align 2							
 455 004c 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 456              	
 457              	@ 0 "" 2
 274:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	(
 275:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	mrs r0, psp							\n"
 276:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 277:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr	r3, pxCurrentTCBConst				\n" /* Get the location of the current TCB. */
 278:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr	r2, [r3]						\n"
 279:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 280:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, push high vfp registers. *
 281:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	it eq								\n"
 282:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	vstmdbeq r0!, {s16-s31}				\n"
 283:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 284:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb r0!, {r4-r11, r14}			\n" /* Save the core registers. */
 285:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 286:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 287:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 288:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb sp!, {r3, r14}				\n"
 289:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	mov r0, %0 							\n"
 290:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
 291:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	bl vTaskSwitchContext				\n"
 292:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	mov r0, #0							\n"
 293:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
 294:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia sp!, {r3, r14}				\n"
 295:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 296:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr r1, [r3]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 297:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr r0, [r1]						\n"
 298:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 299:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia r0!, {r4-r11, r14}			\n" /* Pop the core registers. */
 300:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 301:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, pop the high vfp registers
 302:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	it eq								\n"
 303:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	vldmiaeq r0!, {s16-s31}				\n"
 304:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 305:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr psp, r0							\n"
 306:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	bx r14								\n"
 307:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 308:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	.align 2							\n"
 309:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 310:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 311:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	);
 312:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 458              		.loc 1 312 0
 459              		.thumb
 460              		.cfi_endproc
 461              	.LFE118:
 463              		.section	.text.SysTick_Handler,"ax",%progbits
 464              		.align	2
 465              		.global	SysTick_Handler
 466              		.thumb
 467              		.thumb_func
 469              	SysTick_Handler:
 470              	.LFB119:
 313:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 314:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 315:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void )
 316:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 471              		.loc 1 316 0
 472              		.cfi_startproc
 473              		@ args = 0, pretend = 0, frame = 8
 474              		@ frame_needed = 1, uses_anonymous_args = 0
 475 0000 80B5     		push	{r7, lr}
 476              	.LCFI13:
 477              		.cfi_def_cfa_offset 8
 478              		.cfi_offset 14, -4
 479              		.cfi_offset 7, -8
 480 0002 82B0     		sub	sp, sp, #8
 481              	.LCFI14:
 482              		.cfi_def_cfa_offset 16
 483 0004 00AF     		add	r7, sp, #0
 484              	.LCFI15:
 485              		.cfi_def_cfa_register 7
 317:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** unsigned long ulDummy;
 318:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 319:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* If using preemption, also force a context switch. */
 320:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#if configUSE_PREEMPTION == 1
 321:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 486              		.loc 1 321 0
 487 0006 4EF60453 		movw	r3, #60676
 488 000a CEF20003 		movt	r3, 57344
 489 000e 4FF08052 		mov	r2, #268435456
 490 0012 1A60     		str	r2, [r3, #0]
 322:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#endif
 323:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 324:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 491              		.loc 1 324 0
 492 0014 4FF00003 		mov	r3, #0
 493 0018 7B60     		str	r3, [r7, #4]
 494              	@ 324 "FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 495 001a 4FF0BF00 			mov r0, #191								
 496 001e 80F31188 		msr basepri, r0							
 497              	
 498              	@ 0 "" 2
 325:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 326:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		vTaskIncrementTick();
 499              		.loc 1 326 0
 500              		.thumb
 501 0022 FFF7FEFF 		bl	vTaskIncrementTick
 327:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 328:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 502              		.loc 1 328 0
 503              	@ 328 "FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 504 0026 4FF00000 			mov r0, #0					
 505 002a 80F31188 		msr basepri, r0				
 506              	
 507              	@ 0 "" 2
 329:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****   uint8_t temp1, temp2 = 0;
 508              		.loc 1 329 0
 509              		.thumb
 510 002e 4FF00003 		mov	r3, #0
 511 0032 FB70     		strb	r3, [r7, #3]
 330:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****   
 331:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****   if (TimingDelay != 0x00)
 512              		.loc 1 331 0
 513 0034 40F20003 		movw	r3, #:lower16:TimingDelay
 514 0038 C0F20003 		movt	r3, #:upper16:TimingDelay
 515 003c 1B68     		ldr	r3, [r3, #0]
 516 003e 002B     		cmp	r3, #0
 517 0040 02D0     		beq	.L12
 332:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****   {
 333:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     TimingDelay_Decrement();
 518              		.loc 1 333 0
 519 0042 FFF7FEFF 		bl	TimingDelay_Decrement
 520 0046 6CE1     		b	.L11
 521              	.L12:
 334:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****   }
 335:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****   else
 336:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****   {
 337:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     Counter ++;
 522              		.loc 1 337 0
 523 0048 40F20003 		movw	r3, #:lower16:Counter
 524 004c C0F20003 		movt	r3, #:upper16:Counter
 525 0050 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 526 0052 03F10103 		add	r3, r3, #1
 527 0056 DAB2     		uxtb	r2, r3
 528 0058 40F20003 		movw	r3, #:lower16:Counter
 529 005c C0F20003 		movt	r3, #:upper16:Counter
 530 0060 1A70     		strb	r2, [r3, #0]
 338:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     if (Counter == 10)
 531              		.loc 1 338 0
 532 0062 40F20003 		movw	r3, #:lower16:Counter
 533 0066 C0F20003 		movt	r3, #:upper16:Counter
 534 006a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 535 006c 0A2B     		cmp	r3, #10
 536 006e 40F05881 		bne	.L11
 339:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     {
 340:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****       Buffer[0] = 0;
 537              		.loc 1 340 0
 538 0072 40F20003 		movw	r3, #:lower16:Buffer
 539 0076 C0F20003 		movt	r3, #:upper16:Buffer
 540 007a 4FF00002 		mov	r2, #0
 541 007e 1A70     		strb	r2, [r3, #0]
 341:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****       Buffer[2] = 0;
 542              		.loc 1 341 0
 543 0080 40F20003 		movw	r3, #:lower16:Buffer
 544 0084 C0F20003 		movt	r3, #:upper16:Buffer
 545 0088 4FF00002 		mov	r2, #0
 546 008c 9A70     		strb	r2, [r3, #2]
 342:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 343:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****       LIS302DL_Read(Buffer, LIS302DL_OUT_X_ADDR, 6);
 547              		.loc 1 343 0
 548 008e 40F20000 		movw	r0, #:lower16:Buffer
 549 0092 C0F20000 		movt	r0, #:upper16:Buffer
 550 0096 4FF02901 		mov	r1, #41
 551 009a 4FF00602 		mov	r2, #6
 552 009e FFF7FEFF 		bl	LIS302DL_Read
 344:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****       /* Remove the offsets values from data */
 345:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****       Buffer[0] -= XOffset;
 553              		.loc 1 345 0
 554 00a2 40F20003 		movw	r3, #:lower16:Buffer
 555 00a6 C0F20003 		movt	r3, #:upper16:Buffer
 556 00aa 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 557 00ac 40F20003 		movw	r3, #:lower16:XOffset
 558 00b0 C0F20003 		movt	r3, #:upper16:XOffset
 559 00b4 1B78     		ldrb	r3, [r3, #0]
 560 00b6 DBB2     		uxtb	r3, r3
 561 00b8 DBB2     		uxtb	r3, r3
 562 00ba D31A     		subs	r3, r2, r3
 563 00bc DAB2     		uxtb	r2, r3
 564 00be 40F20003 		movw	r3, #:lower16:Buffer
 565 00c2 C0F20003 		movt	r3, #:upper16:Buffer
 566 00c6 1A70     		strb	r2, [r3, #0]
 346:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****       Buffer[2] -= YOffset;
 567              		.loc 1 346 0
 568 00c8 40F20003 		movw	r3, #:lower16:Buffer
 569 00cc C0F20003 		movt	r3, #:upper16:Buffer
 570 00d0 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 571 00d2 40F20003 		movw	r3, #:lower16:YOffset
 572 00d6 C0F20003 		movt	r3, #:upper16:YOffset
 573 00da 1B78     		ldrb	r3, [r3, #0]
 574 00dc DBB2     		uxtb	r3, r3
 575 00de DBB2     		uxtb	r3, r3
 576 00e0 D31A     		subs	r3, r2, r3
 577 00e2 DAB2     		uxtb	r2, r3
 578 00e4 40F20003 		movw	r3, #:lower16:Buffer
 579 00e8 C0F20003 		movt	r3, #:upper16:Buffer
 580 00ec 9A70     		strb	r2, [r3, #2]
 347:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 348:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****       /* Update autoreload and capture compare registers value*/
 349:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****       temp1 = ABS((int8_t)(Buffer[0]));
 581              		.loc 1 349 0
 582 00ee 40F20003 		movw	r3, #:lower16:Buffer
 583 00f2 C0F20003 		movt	r3, #:upper16:Buffer
 584 00f6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 585 00f8 DBB2     		uxtb	r3, r3
 586 00fa 5BB2     		sxtb	r3, r3
 587 00fc 002B     		cmp	r3, #0
 588 00fe B8BF     		it	lt
 589 0100 5B42     		rsblt	r3, r3, #0
 590 0102 BB70     		strb	r3, [r7, #2]
 350:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****       temp2 = ABS((int8_t)(Buffer[2]));
 591              		.loc 1 350 0
 592 0104 40F20003 		movw	r3, #:lower16:Buffer
 593 0108 C0F20003 		movt	r3, #:upper16:Buffer
 594 010c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 595 010e DBB2     		uxtb	r3, r3
 596 0110 5BB2     		sxtb	r3, r3
 597 0112 002B     		cmp	r3, #0
 598 0114 B8BF     		it	lt
 599 0116 5B42     		rsblt	r3, r3, #0
 600 0118 FB70     		strb	r3, [r7, #3]
 351:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****       TempAcceleration = MAX(temp1, temp2);
 601              		.loc 1 351 0
 602 011a BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 603 011c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 604 011e 9A42     		cmp	r2, r3
 605 0120 28BF     		it	cs
 606 0122 1346     		movcs	r3, r2
 607 0124 DAB2     		uxtb	r2, r3
 608 0126 40F20003 		movw	r3, #:lower16:TempAcceleration
 609 012a C0F20003 		movt	r3, #:upper16:TempAcceleration
 610 012e 1A70     		strb	r2, [r3, #0]
 352:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 353:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****       if(TempAcceleration != 0)
 611              		.loc 1 353 0
 612 0130 40F20003 		movw	r3, #:lower16:TempAcceleration
 613 0134 C0F20003 		movt	r3, #:upper16:TempAcceleration
 614 0138 1B78     		ldrb	r3, [r3, #0]
 615 013a DBB2     		uxtb	r3, r3
 616 013c 002B     		cmp	r3, #0
 617 013e 00F0D980 		beq	.L14
 354:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****       {
 355:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         if ((int8_t)Buffer[0] < -2)
 618              		.loc 1 355 0
 619 0142 40F20003 		movw	r3, #:lower16:Buffer
 620 0146 C0F20003 		movt	r3, #:upper16:Buffer
 621 014a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 622 014c DBB2     		uxtb	r3, r3
 623 014e 5BB2     		sxtb	r3, r3
 624 0150 13F1020F 		cmn	r3, #2
 625 0154 2BDA     		bge	.L15
 356:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         {
 357:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 358:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         	STM_EVAL_LEDOn(LED6);
 626              		.loc 1 358 0
 627 0156 4FF00300 		mov	r0, #3
 628 015a FFF7FEFF 		bl	STM_EVAL_LEDOn
 359:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 360:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 361:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         	if ((int8_t)Buffer[0] <= 2)
 629              		.loc 1 361 0
 630 015e 40F20003 		movw	r3, #:lower16:Buffer
 631 0162 C0F20003 		movt	r3, #:upper16:Buffer
 632 0166 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 633 0168 DBB2     		uxtb	r3, r3
 634 016a 5BB2     		sxtb	r3, r3
 635 016c 022B     		cmp	r3, #2
 636 016e 03DC     		bgt	.L16
 362:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         	{
 363:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         		STM_EVAL_LEDOff(LED3);
 637              		.loc 1 363 0
 638 0170 4FF00100 		mov	r0, #1
 639 0174 FFF7FEFF 		bl	STM_EVAL_LEDOff
 640              	.L16:
 364:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         	}
 365:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 366:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         	if ((int8_t)Buffer[2] <= 2)
 641              		.loc 1 366 0
 642 0178 40F20003 		movw	r3, #:lower16:Buffer
 643 017c C0F20003 		movt	r3, #:upper16:Buffer
 644 0180 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 645 0182 DBB2     		uxtb	r3, r3
 646 0184 5BB2     		sxtb	r3, r3
 647 0186 022B     		cmp	r3, #2
 648 0188 03DC     		bgt	.L17
 367:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         	{
 368:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         		STM_EVAL_LEDOff(LED4);
 649              		.loc 1 368 0
 650 018a 4FF00000 		mov	r0, #0
 651 018e FFF7FEFF 		bl	STM_EVAL_LEDOff
 652              	.L17:
 369:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         	}
 370:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 371:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         	if ((int8_t)Buffer[2] >= -2)
 653              		.loc 1 371 0
 654 0192 40F20003 		movw	r3, #:lower16:Buffer
 655 0196 C0F20003 		movt	r3, #:upper16:Buffer
 656 019a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 657 019c DBB2     		uxtb	r3, r3
 658 019e 5BB2     		sxtb	r3, r3
 659 01a0 13F1020F 		cmn	r3, #2
 660 01a4 03DB     		blt	.L15
 372:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         	{
 373:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         		STM_EVAL_LEDOff(LED5);
 661              		.loc 1 373 0
 662 01a6 4FF00200 		mov	r0, #2
 663 01aa FFF7FEFF 		bl	STM_EVAL_LEDOff
 664              	.L15:
 374:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         	}
 375:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 376:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         }
 377:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         if ((int8_t)Buffer[0] > 2)
 665              		.loc 1 377 0
 666 01ae 40F20003 		movw	r3, #:lower16:Buffer
 667 01b2 C0F20003 		movt	r3, #:upper16:Buffer
 668 01b6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 669 01b8 DBB2     		uxtb	r3, r3
 670 01ba 5BB2     		sxtb	r3, r3
 671 01bc 022B     		cmp	r3, #2
 672 01be 2CDD     		ble	.L18
 378:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         {
 379:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 380:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			STM_EVAL_LEDOn(LED3);
 673              		.loc 1 380 0
 674 01c0 4FF00100 		mov	r0, #1
 675 01c4 FFF7FEFF 		bl	STM_EVAL_LEDOn
 381:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 382:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			if ((int8_t)Buffer[2] <= 2)
 676              		.loc 1 382 0
 677 01c8 40F20003 		movw	r3, #:lower16:Buffer
 678 01cc C0F20003 		movt	r3, #:upper16:Buffer
 679 01d0 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 680 01d2 DBB2     		uxtb	r3, r3
 681 01d4 5BB2     		sxtb	r3, r3
 682 01d6 022B     		cmp	r3, #2
 683 01d8 03DC     		bgt	.L19
 383:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			{
 384:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			STM_EVAL_LEDOff(LED4);
 684              		.loc 1 384 0
 685 01da 4FF00000 		mov	r0, #0
 686 01de FFF7FEFF 		bl	STM_EVAL_LEDOff
 687              	.L19:
 385:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			}
 386:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 387:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			if ((int8_t)Buffer[2] >= -2)
 688              		.loc 1 387 0
 689 01e2 40F20003 		movw	r3, #:lower16:Buffer
 690 01e6 C0F20003 		movt	r3, #:upper16:Buffer
 691 01ea 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 692 01ec DBB2     		uxtb	r3, r3
 693 01ee 5BB2     		sxtb	r3, r3
 694 01f0 13F1020F 		cmn	r3, #2
 695 01f4 03DB     		blt	.L20
 388:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			{
 389:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                 	STM_EVAL_LEDOff(LED5);
 696              		.loc 1 389 0
 697 01f6 4FF00200 		mov	r0, #2
 698 01fa FFF7FEFF 		bl	STM_EVAL_LEDOff
 699              	.L20:
 390:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			}
 391:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 392:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			if ((int8_t)Buffer[0] >= -2)
 700              		.loc 1 392 0
 701 01fe 40F20003 		movw	r3, #:lower16:Buffer
 702 0202 C0F20003 		movt	r3, #:upper16:Buffer
 703 0206 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 704 0208 DBB2     		uxtb	r3, r3
 705 020a 5BB2     		sxtb	r3, r3
 706 020c 13F1020F 		cmn	r3, #2
 707 0210 03DB     		blt	.L18
 393:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			{
 394:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****                 	STM_EVAL_LEDOff(LED6);
 708              		.loc 1 394 0
 709 0212 4FF00300 		mov	r0, #3
 710 0216 FFF7FEFF 		bl	STM_EVAL_LEDOff
 711              	.L18:
 395:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			}
 396:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 397:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         }
 398:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         if ((int8_t)Buffer[2] > 2)
 712              		.loc 1 398 0
 713 021a 40F20003 		movw	r3, #:lower16:Buffer
 714 021e C0F20003 		movt	r3, #:upper16:Buffer
 715 0222 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 716 0224 DBB2     		uxtb	r3, r3
 717 0226 5BB2     		sxtb	r3, r3
 718 0228 022B     		cmp	r3, #2
 719 022a 2CDD     		ble	.L21
 399:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         {
 400:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 401:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			STM_EVAL_LEDOn(LED4);
 720              		.loc 1 401 0
 721 022c 4FF00000 		mov	r0, #0
 722 0230 FFF7FEFF 		bl	STM_EVAL_LEDOn
 402:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 403:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			if ((int8_t)Buffer[0] <= 2)
 723              		.loc 1 403 0
 724 0234 40F20003 		movw	r3, #:lower16:Buffer
 725 0238 C0F20003 		movt	r3, #:upper16:Buffer
 726 023c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 727 023e DBB2     		uxtb	r3, r3
 728 0240 5BB2     		sxtb	r3, r3
 729 0242 022B     		cmp	r3, #2
 730 0244 03DC     		bgt	.L22
 404:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			{
 405:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         				STM_EVAL_LEDOff(LED3);
 731              		.loc 1 405 0
 732 0246 4FF00100 		mov	r0, #1
 733 024a FFF7FEFF 		bl	STM_EVAL_LEDOff
 734              	.L22:
 406:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			}
 407:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 408:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			if ((int8_t)Buffer[2] >= -2)
 735              		.loc 1 408 0
 736 024e 40F20003 		movw	r3, #:lower16:Buffer
 737 0252 C0F20003 		movt	r3, #:upper16:Buffer
 738 0256 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 739 0258 DBB2     		uxtb	r3, r3
 740 025a 5BB2     		sxtb	r3, r3
 741 025c 13F1020F 		cmn	r3, #2
 742 0260 03DB     		blt	.L23
 409:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			{
 410:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         				STM_EVAL_LEDOff(LED5);
 743              		.loc 1 410 0
 744 0262 4FF00200 		mov	r0, #2
 745 0266 FFF7FEFF 		bl	STM_EVAL_LEDOff
 746              	.L23:
 411:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			}
 412:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 413:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			if ((int8_t)Buffer[0] >= -2)
 747              		.loc 1 413 0
 748 026a 40F20003 		movw	r3, #:lower16:Buffer
 749 026e C0F20003 		movt	r3, #:upper16:Buffer
 750 0272 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 751 0274 DBB2     		uxtb	r3, r3
 752 0276 5BB2     		sxtb	r3, r3
 753 0278 13F1020F 		cmn	r3, #2
 754 027c 03DB     		blt	.L21
 414:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			{
 415:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         				STM_EVAL_LEDOff(LED6);
 755              		.loc 1 415 0
 756 027e 4FF00300 		mov	r0, #3
 757 0282 FFF7FEFF 		bl	STM_EVAL_LEDOff
 758              	.L21:
 416:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			}
 417:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 418:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         }
 419:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         if ((int8_t)Buffer[2] < -2)
 759              		.loc 1 419 0
 760 0286 40F20003 		movw	r3, #:lower16:Buffer
 761 028a C0F20003 		movt	r3, #:upper16:Buffer
 762 028e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 763 0290 DBB2     		uxtb	r3, r3
 764 0292 5BB2     		sxtb	r3, r3
 765 0294 13F1020F 		cmn	r3, #2
 766 0298 3CDA     		bge	.L24
 420:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         {
 421:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 422:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			STM_EVAL_LEDOn(LED5);
 767              		.loc 1 422 0
 768 029a 4FF00200 		mov	r0, #2
 769 029e FFF7FEFF 		bl	STM_EVAL_LEDOn
 423:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 424:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			if ((int8_t)Buffer[0] <= 2)
 770              		.loc 1 424 0
 771 02a2 40F20003 		movw	r3, #:lower16:Buffer
 772 02a6 C0F20003 		movt	r3, #:upper16:Buffer
 773 02aa 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 774 02ac DBB2     		uxtb	r3, r3
 775 02ae 5BB2     		sxtb	r3, r3
 776 02b0 022B     		cmp	r3, #2
 777 02b2 03DC     		bgt	.L25
 425:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			{
 426:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         				STM_EVAL_LEDOff(LED3);
 778              		.loc 1 426 0
 779 02b4 4FF00100 		mov	r0, #1
 780 02b8 FFF7FEFF 		bl	STM_EVAL_LEDOff
 781              	.L25:
 427:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			}
 428:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 429:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			if ((int8_t)Buffer[2] <= 2)
 782              		.loc 1 429 0
 783 02bc 40F20003 		movw	r3, #:lower16:Buffer
 784 02c0 C0F20003 		movt	r3, #:upper16:Buffer
 785 02c4 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 786 02c6 DBB2     		uxtb	r3, r3
 787 02c8 5BB2     		sxtb	r3, r3
 788 02ca 022B     		cmp	r3, #2
 789 02cc 03DC     		bgt	.L26
 430:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			{
 431:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			STM_EVAL_LEDOff(LED4);
 790              		.loc 1 431 0
 791 02ce 4FF00000 		mov	r0, #0
 792 02d2 FFF7FEFF 		bl	STM_EVAL_LEDOff
 793              	.L26:
 432:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			}
 433:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 434:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			if ((int8_t)Buffer[0] >= -2)
 794              		.loc 1 434 0
 795 02d6 40F20003 		movw	r3, #:lower16:Buffer
 796 02da C0F20003 		movt	r3, #:upper16:Buffer
 797 02de 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 798 02e0 DBB2     		uxtb	r3, r3
 799 02e2 5BB2     		sxtb	r3, r3
 800 02e4 13F1020F 		cmn	r3, #2
 801 02e8 14DB     		blt	.L24
 435:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			{
 436:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         				STM_EVAL_LEDOff(LED6);
 802              		.loc 1 436 0
 803 02ea 4FF00300 		mov	r0, #3
 804 02ee FFF7FEFF 		bl	STM_EVAL_LEDOff
 805 02f2 0FE0     		b	.L24
 806              	.L14:
 437:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         			}
 438:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****         }
 439:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****       }
 440:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****       else
 441:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              {
 442:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              	STM_EVAL_LEDOff(LED3);
 807              		.loc 1 442 0
 808 02f4 4FF00100 		mov	r0, #1
 809 02f8 FFF7FEFF 		bl	STM_EVAL_LEDOff
 443:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              	STM_EVAL_LEDOff(LED4);
 810              		.loc 1 443 0
 811 02fc 4FF00000 		mov	r0, #0
 812 0300 FFF7FEFF 		bl	STM_EVAL_LEDOff
 444:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              	STM_EVAL_LEDOff(LED5);
 813              		.loc 1 444 0
 814 0304 4FF00200 		mov	r0, #2
 815 0308 FFF7FEFF 		bl	STM_EVAL_LEDOff
 445:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              	STM_EVAL_LEDOff(LED6);
 816              		.loc 1 445 0
 817 030c 4FF00300 		mov	r0, #3
 818 0310 FFF7FEFF 		bl	STM_EVAL_LEDOff
 819              	.L24:
 446:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 447:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****              }
 448:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****       Counter = 0x00;
 820              		.loc 1 448 0
 821 0314 40F20003 		movw	r3, #:lower16:Counter
 822 0318 C0F20003 		movt	r3, #:upper16:Counter
 823 031c 4FF00002 		mov	r2, #0
 824 0320 1A70     		strb	r2, [r3, #0]
 825              	.L11:
 449:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     }
 450:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****   }
 451:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 826              		.loc 1 451 0
 827 0322 07F10807 		add	r7, r7, #8
 828 0326 BD46     		mov	sp, r7
 829 0328 80BD     		pop	{r7, pc}
 830              		.cfi_endproc
 831              	.LFE119:
 833 032a 00BF     		.section	.text.prvSetupTimerInterrupt,"ax",%progbits
 834              		.align	2
 835              		.thumb
 836              		.thumb_func
 838              	prvSetupTimerInterrupt:
 839              	.LFB120:
 452:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 453:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 454:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 455:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 456:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 457:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * frequency.
 458:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 459:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void prvSetupTimerInterrupt( void )
 460:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 840              		.loc 1 460 0
 841              		.cfi_startproc
 842              		@ args = 0, pretend = 0, frame = 0
 843              		@ frame_needed = 1, uses_anonymous_args = 0
 844              		@ link register save eliminated.
 845 0000 80B4     		push	{r7}
 846              	.LCFI16:
 847              		.cfi_def_cfa_offset 4
 848              		.cfi_offset 7, -4
 849 0002 00AF     		add	r7, sp, #0
 850              	.LCFI17:
 851              		.cfi_def_cfa_register 7
 461:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 462:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 852              		.loc 1 462 0
 853 0004 4EF21403 		movw	r3, #57364
 854 0008 CEF20003 		movt	r3, 57344
 855 000c 40F20002 		movw	r2, #:lower16:SystemCoreClock
 856 0010 C0F20002 		movt	r2, #:upper16:SystemCoreClock
 857 0014 1168     		ldr	r1, [r2, #0]
 858 0016 44F6D352 		movw	r2, #19923
 859 001a C1F26202 		movt	r2, 4194
 860 001e A2FB0102 		umull	r0, r2, r2, r1
 861 0022 4FEA9212 		lsr	r2, r2, #6
 862 0026 02F1FF32 		add	r2, r2, #-1
 863 002a 1A60     		str	r2, [r3, #0]
 463:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 864              		.loc 1 463 0
 865 002c 4EF21003 		movw	r3, #57360
 866 0030 CEF20003 		movt	r3, 57344
 867 0034 4FF00702 		mov	r2, #7
 868 0038 1A60     		str	r2, [r3, #0]
 464:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 869              		.loc 1 464 0
 870 003a BD46     		mov	sp, r7
 871 003c 80BC     		pop	{r7}
 872 003e 7047     		bx	lr
 873              		.cfi_endproc
 874              	.LFE120:
 876              		.section	.text.vPortEnableVFP,"ax",%progbits
 877              		.align	2
 878              		.thumb
 879              		.thumb_func
 881              	vPortEnableVFP:
 882              	.LFB121:
 465:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 466:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 467:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* This is a naked function. */
 468:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void vPortEnableVFP( void )
 469:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 883              		.loc 1 469 0
 884              		.cfi_startproc
 885              		@ Naked Function: prologue and epilogue provided by programmer.
 886              		@ args = 0, pretend = 0, frame = 0
 887              		@ frame_needed = 1, uses_anonymous_args = 0
 470:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile
 888              		.loc 1 470 0
 889              	@ 470 "FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 890 0000 DFF80C00 			ldr.w r0, =0xE000ED88		
 891 0004 0168     		ldr r1, [r0]				
 892              									
 893 0006 41F47001 		orr r1, r1, #( 0xf << 20 )	
 894 000a 0160     		str r1, [r0]				
 895 000c 7047     		bx r14						
 896              	@ 0 "" 2
 471:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	(
 472:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
 473:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"	ldr r1, [r0]				\n"
 474:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"								\n"
 475:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
 476:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"	str r1, [r0]				\n"
 477:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"	bx r14						"
 478:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	);
 479:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 897              		.loc 1 479 0
 898              		.thumb
 899              		.cfi_endproc
 900              	.LFE121:
 902 000e 0000     		.text
 903              	.Letext0:
 904              		.file 2 "FreeRTOS/Source/include/projdefs.h"
 905              		.file 3 "/usr/local/csl/arm-2012.03/bin/../lib/gcc/arm-none-eabi/4.6.3/../../../../arm-none-eabi/i
 906              		.file 4 "FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM4F/portmacro.h"
 907              		.file 5 "libs/CMSIS/Include/core_cm4.h"
 908              		.file 6 "libs/Device/STM32F4xx/Include/system_stm32f4xx.h"
 909              		.file 7 "FreeRTOS/Source/include/../../../src/stm32f4_discovery.h"
DEFINED SYMBOLS
                            *ABS*:00000000 port.c
     /tmp/ccwqpRqm.s:24     .rodata.ulKernelPriority:00000000 ulKernelPriority
     /tmp/ccwqpRqm.s:21     .rodata.ulKernelPriority:00000000 $d
     /tmp/ccwqpRqm.s:27     .data.uxCriticalNesting:00000000 $d
     /tmp/ccwqpRqm.s:30     .data.uxCriticalNesting:00000000 uxCriticalNesting
     /tmp/ccwqpRqm.s:36     .bss.Counter:00000000 Counter
     /tmp/ccwqpRqm.s:37     .bss.Counter:00000000 $d
     /tmp/ccwqpRqm.s:42     .bss.TempAcceleration:00000000 TempAcceleration
     /tmp/ccwqpRqm.s:43     .bss.TempAcceleration:00000000 $d
     /tmp/ccwqpRqm.s:48     .bss.ClickReg:00000000 ClickReg
     /tmp/ccwqpRqm.s:49     .bss.ClickReg:00000000 $d
     /tmp/ccwqpRqm.s:51     .text.pxPortInitialiseStack:00000000 $t
     /tmp/ccwqpRqm.s:56     .text.pxPortInitialiseStack:00000000 pxPortInitialiseStack
     /tmp/ccwqpRqm.s:133    .text.SVC_Handler:00000000 $t
     /tmp/ccwqpRqm.s:138    .text.SVC_Handler:00000000 SVC_Handler
     /tmp/ccwqpRqm.s:157    .text.SVC_Handler:00000018 pxCurrentTCBConst2
     /tmp/ccwqpRqm.s:157    .text.SVC_Handler:00000018 $d
     /tmp/ccwqpRqm.s:166    .text.vPortStartFirstTask:00000000 $t
     /tmp/ccwqpRqm.s:170    .text.vPortStartFirstTask:00000000 vPortStartFirstTask
     /tmp/ccwqpRqm.s:194    .text.xPortStartScheduler:00000000 $t
     /tmp/ccwqpRqm.s:199    .text.xPortStartScheduler:00000000 xPortStartScheduler
     /tmp/ccwqpRqm.s:838    .text.prvSetupTimerInterrupt:00000000 prvSetupTimerInterrupt
     /tmp/ccwqpRqm.s:881    .text.vPortEnableVFP:00000000 vPortEnableVFP
     /tmp/ccwqpRqm.s:257    .text.vPortEndScheduler:00000000 $t
     /tmp/ccwqpRqm.s:262    .text.vPortEndScheduler:00000000 vPortEndScheduler
     /tmp/ccwqpRqm.s:284    .text.vPortYieldFromISR:00000000 $t
     /tmp/ccwqpRqm.s:289    .text.vPortYieldFromISR:00000000 vPortYieldFromISR
     /tmp/ccwqpRqm.s:316    .text.vPortEnterCritical:00000000 $t
     /tmp/ccwqpRqm.s:321    .text.vPortEnterCritical:00000000 vPortEnterCritical
     /tmp/ccwqpRqm.s:358    .text.vPortExitCritical:00000000 $t
     /tmp/ccwqpRqm.s:363    .text.vPortExitCritical:00000000 vPortExitCritical
     /tmp/ccwqpRqm.s:407    .text.PendSV_Handler:00000000 $t
     /tmp/ccwqpRqm.s:412    .text.PendSV_Handler:00000000 PendSV_Handler
     /tmp/ccwqpRqm.s:455    .text.PendSV_Handler:0000004c pxCurrentTCBConst
     /tmp/ccwqpRqm.s:455    .text.PendSV_Handler:0000004c $d
     /tmp/ccwqpRqm.s:464    .text.SysTick_Handler:00000000 $t
     /tmp/ccwqpRqm.s:469    .text.SysTick_Handler:00000000 SysTick_Handler
     /tmp/ccwqpRqm.s:834    .text.prvSetupTimerInterrupt:00000000 $t
     /tmp/ccwqpRqm.s:877    .text.vPortEnableVFP:00000000 $t
     /tmp/ccwqpRqm.s:902    .text.vPortEnableVFP:0000000e $d
     /tmp/ccwqpRqm.s:193    .text.vPortStartFirstTask:00000010 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
vTaskIncrementTick
TimingDelay
TimingDelay_Decrement
Buffer
LIS302DL_Read
XOffset
YOffset
STM_EVAL_LEDOn
STM_EVAL_LEDOff
SystemCoreClock
