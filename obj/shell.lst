   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"shell.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.strcmp,"ax",%progbits
  20              		.align	2
  21              		.global	strcmp
  22              		.thumb
  23              		.thumb_func
  25              	strcmp:
  26              	.LFB110:
  27              		.file 1 "src/shell.c"
   1:src/shell.c   **** /* Scheduler includes. */
   2:src/shell.c   **** #include "FreeRTOS.h"
   3:src/shell.c   **** #include "task.h"
   4:src/shell.c   **** #include "queue.h"
   5:src/shell.c   **** #include "semphr.h"
   6:src/shell.c   **** 
   7:src/shell.c   **** 
   8:src/shell.c   **** #define MAX_ARGC 4
   9:src/shell.c   **** #define MAX_CMDNAME 3
  10:src/shell.c   **** #define MAX_CMDHELP 1
  11:src/shell.c   **** #define HISTORY_COUNT 1
  12:src/shell.c   **** #define CMDBUF_SIZE 10
  13:src/shell.c   **** 
  14:src/shell.c   **** int strcmp(const char *a, const char *b) __attribute__ ((naked));
  15:src/shell.c   **** int strcmp(const char *a, const char *b)
  16:src/shell.c   **** {
  28              		.loc 1 16 0
  29              		.cfi_startproc
  30              		@ Naked Function: prologue and epilogue provided by programmer.
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  17:src/shell.c   ****         __asm__(
  33              		.loc 1 17 0
  34              	@ 17 "src/shell.c" 1
  35              		strcmp_lop:                
  36 0000 10F8012B 	   ldrb    r2, [r0],#1     
  37 0004 11F8013B 	   ldrb    r3, [r1],#1     
  38 0008 012A     	   cmp     r2, #1          
  39 000a 88BF     	   it      hi              
  40 000c 9A42     	   cmphi   r2, r3          
  41 000e 3FF4F7AF 	   beq     strcmp_lop      
  42 0012 A2EB0300 	        sub     r0, r2, r3          
  43 0016 7047     	   bx      lr              
  44              	
  45              	@ 0 "" 2
  18:src/shell.c   ****         "strcmp_lop:                \n"
  19:src/shell.c   ****         "   ldrb    r2, [r0],#1     \n"
  20:src/shell.c   ****         "   ldrb    r3, [r1],#1     \n"
  21:src/shell.c   ****         "   cmp     r2, #1          \n"
  22:src/shell.c   ****         "   it      hi              \n"
  23:src/shell.c   ****         "   cmphi   r2, r3          \n"
  24:src/shell.c   ****         "   beq     strcmp_lop      \n"
  25:src/shell.c   ****                 "        sub     r0, r2, r3          \n"
  26:src/shell.c   ****         "   bx      lr              \n"
  27:src/shell.c   ****                 :::
  28:src/shell.c   ****         );
  29:src/shell.c   **** }
  46              		.loc 1 29 0
  47              		.thumb
  48 0018 1846     		mov	r0, r3
  49              		.cfi_endproc
  50              	.LFE110:
  52              		.global	next_line
  53 001a 00BF     		.section	.data.next_line,"aw",%progbits
  54              		.align	2
  57              	next_line:
  58 0000 0A       		.byte	10
  59 0001 0D       		.byte	13
  60 0002 00       		.byte	0
  61              		.comm	cmd,10,4
  62              		.global	cur_his
  63 0003 00       		.section	.bss.cur_his,"aw",%nobits
  64              		.align	2
  67              	cur_his:
  68 0000 00000000 		.space	4
  69              		.comm	CMD_TYPE,1,1
  70              		.global	cmd_data
  71              		.section	.rodata.cmd_data,"a",%progbits
  72              		.align	2
  75              	cmd_data:
  76 0000 70776D00 		.ascii	"pwm\000"
  77 0004 00000000 		.word	pwm
  78 0008 5000     		.ascii	"P\000"
  79 000a 0000     		.space	2
  80              		.section	.rodata
  81              		.align	2
  82              	.LC0:
  83 0000 25730A00 		.ascii	"%s\012\000"
  84              		.align	2
  85              	.LC1:
  86 0004 257300   		.ascii	"%s\000"
  87              		.section	.text.pwm,"ax",%progbits
  88              		.align	2
  89              		.global	pwm
  90              		.thumb
  91              		.thumb_func
  93              	pwm:
  94              	.LFB111:
  30:src/shell.c   **** 
  31:src/shell.c   **** #define PWM_MOTOR_MIN 100
  32:src/shell.c   **** 
  33:src/shell.c   **** extern xQueueHandle xQueueUARTSend;
  34:src/shell.c   **** extern xQueueHandle xQueueUARTRecvie;
  35:src/shell.c   **** extern xQueueHandle xQueueShell2PWM;
  36:src/shell.c   **** extern void Motor_Control(u16 Motor1, u16 Motor2, u16 Motor3, u16 Motor4);
  37:src/shell.c   **** 
  38:src/shell.c   **** char next_line[3] = {'\n','\r','\0'};
  39:src/shell.c   **** char cmd[HISTORY_COUNT][CMDBUF_SIZE];
  40:src/shell.c   **** int cur_his=0;
  41:src/shell.c   **** 
  42:src/shell.c   **** /* Command handlers. */
  43:src/shell.c   **** void pwm(int argc, char *argv[]);
  44:src/shell.c   **** 
  45:src/shell.c   **** /* Enumeration for command types. */
  46:src/shell.c   **** enum {
  47:src/shell.c   **** 	CMD_PWM = 0,
  48:src/shell.c   **** 	CMD_COUNT
  49:src/shell.c   **** } CMD_TYPE;
  50:src/shell.c   **** 
  51:src/shell.c   **** /* Structure for command handler. */
  52:src/shell.c   **** typedef struct {
  53:src/shell.c   **** 	char cmd[MAX_CMDNAME + 1];
  54:src/shell.c   **** 	void (*func)(int, char**);
  55:src/shell.c   **** 	char description[MAX_CMDHELP + 1];
  56:src/shell.c   **** } hcmd_entry;
  57:src/shell.c   **** 
  58:src/shell.c   **** const hcmd_entry cmd_data[CMD_COUNT] = {
  59:src/shell.c   **** 	[CMD_PWM] = {.cmd = "pwm", .func = pwm, .description = "P"}
  60:src/shell.c   **** };
  61:src/shell.c   **** 
  62:src/shell.c   **** 
  63:src/shell.c   **** void pwm(int argc, char* argv[])
  64:src/shell.c   **** {
  95              		.loc 1 64 0
  96              		.cfi_startproc
  97              		@ args = 0, pretend = 0, frame = 8
  98              		@ frame_needed = 1, uses_anonymous_args = 0
  99 0000 80B5     		push	{r7, lr}
 100              	.LCFI0:
 101              		.cfi_def_cfa_offset 8
 102              		.cfi_offset 14, -4
 103              		.cfi_offset 7, -8
 104 0002 82B0     		sub	sp, sp, #8
 105              	.LCFI1:
 106              		.cfi_def_cfa_offset 16
 107 0004 00AF     		add	r7, sp, #0
 108              	.LCFI2:
 109              		.cfi_def_cfa_register 7
 110 0006 7860     		str	r0, [r7, #4]
 111 0008 3960     		str	r1, [r7, #0]
  65:src/shell.c   **** 	
  66:src/shell.c   **** 	qprintf(xQueueUARTSend, "%s\n", argv[1]);
 112              		.loc 1 66 0
 113 000a 40F20003 		movw	r3, #:lower16:xQueueUARTSend
 114 000e C0F20003 		movt	r3, #:upper16:xQueueUARTSend
 115 0012 1A68     		ldr	r2, [r3, #0]
 116 0014 3B68     		ldr	r3, [r7, #0]
 117 0016 03F10403 		add	r3, r3, #4
 118 001a 1B68     		ldr	r3, [r3, #0]
 119 001c 1046     		mov	r0, r2
 120 001e 40F20001 		movw	r1, #:lower16:.LC0
 121 0022 C0F20001 		movt	r1, #:upper16:.LC0
 122 0026 1A46     		mov	r2, r3
 123 0028 FFF7FEFF 		bl	qprintf
  67:src/shell.c   **** 	qprintf(xQueueShell2PWM, "%s", argv[1]);
 124              		.loc 1 67 0
 125 002c 40F20003 		movw	r3, #:lower16:xQueueShell2PWM
 126 0030 C0F20003 		movt	r3, #:upper16:xQueueShell2PWM
 127 0034 1A68     		ldr	r2, [r3, #0]
 128 0036 3B68     		ldr	r3, [r7, #0]
 129 0038 03F10403 		add	r3, r3, #4
 130 003c 1B68     		ldr	r3, [r3, #0]
 131 003e 1046     		mov	r0, r2
 132 0040 40F20001 		movw	r1, #:lower16:.LC1
 133 0044 C0F20001 		movt	r1, #:upper16:.LC1
 134 0048 1A46     		mov	r2, r3
 135 004a FFF7FEFF 		bl	qprintf
  68:src/shell.c   **** 	//qprintf(xQueueUARTSend, "finish\n");
  69:src/shell.c   **** }
 136              		.loc 1 69 0
 137 004e 07F10807 		add	r7, r7, #8
 138 0052 BD46     		mov	sp, r7
 139 0054 80BD     		pop	{r7, pc}
 140              		.cfi_endproc
 141              	.LFE111:
 143 0056 00BF     		.section	.text.cmdtok,"ax",%progbits
 144              		.align	2
 145              		.global	cmdtok
 146              		.thumb
 147              		.thumb_func
 149              	cmdtok:
 150              	.LFB112:
  70:src/shell.c   **** 
  71:src/shell.c   **** /* ref tim37021 */
  72:src/shell.c   **** int cmdtok(char *argv[], char *cmd)
  73:src/shell.c   **** {
 151              		.loc 1 73 0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 32
 154              		@ frame_needed = 1, uses_anonymous_args = 0
 155 0000 80B5     		push	{r7, lr}
 156              	.LCFI3:
 157              		.cfi_def_cfa_offset 8
 158              		.cfi_offset 14, -4
 159              		.cfi_offset 7, -8
 160 0002 88B0     		sub	sp, sp, #32
 161              	.LCFI4:
 162              		.cfi_def_cfa_offset 40
 163 0004 00AF     		add	r7, sp, #0
 164              	.LCFI5:
 165              		.cfi_def_cfa_register 7
 166 0006 7860     		str	r0, [r7, #4]
 167 0008 3960     		str	r1, [r7, #0]
  74:src/shell.c   **** 	char tmp[CMDBUF_SIZE];
  75:src/shell.c   **** 	int i = 0;
 168              		.loc 1 75 0
 169 000a 4FF00003 		mov	r3, #0
 170 000e FB61     		str	r3, [r7, #28]
  76:src/shell.c   **** 	int j = 0;
 171              		.loc 1 76 0
 172 0010 4FF00003 		mov	r3, #0
 173 0014 BB61     		str	r3, [r7, #24]
  77:src/shell.c   **** 	int flag;
  78:src/shell.c   **** 
  79:src/shell.c   **** 	int x = -1;
 174              		.loc 1 79 0
 175 0016 4FF0FF33 		mov	r3, #-1
 176 001a 7B61     		str	r3, [r7, #20]
  80:src/shell.c   **** 	
  81:src/shell.c   **** 	while (*cmd != '\0'){
 177              		.loc 1 81 0
 178 001c 4AE0     		b	.L4
 179              	.L11:
  82:src/shell.c   **** 		if(*cmd == ' '){
 180              		.loc 1 82 0
 181 001e 3B68     		ldr	r3, [r7, #0]
 182 0020 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 183 0022 202B     		cmp	r3, #32
 184 0024 04D1     		bne	.L5
  83:src/shell.c   **** 			cmd++;
 185              		.loc 1 83 0
 186 0026 3B68     		ldr	r3, [r7, #0]
 187 0028 03F10103 		add	r3, r3, #1
 188 002c 3B60     		str	r3, [r7, #0]
 189 002e 41E0     		b	.L4
 190              	.L5:
 191              	.LBB2:
  84:src/shell.c   **** 		}
  85:src/shell.c   **** 		else {
  86:src/shell.c   **** 			while (1) {
  87:src/shell.c   **** 				/* solve "" & '' in echo command*/
  88:src/shell.c   **** 				if ((*cmd == '\'') || (*cmd == '\"')){
 192              		.loc 1 88 0
 193 0030 3B68     		ldr	r3, [r7, #0]
 194 0032 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 195 0034 272B     		cmp	r3, #39
 196 0036 03D0     		beq	.L6
 197              		.loc 1 88 0 is_stmt 0 discriminator 1
 198 0038 3B68     		ldr	r3, [r7, #0]
 199 003a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 200 003c 222B     		cmp	r3, #34
 201 003e 04D1     		bne	.L7
 202              	.L6:
  89:src/shell.c   **** 					cmd++;
 203              		.loc 1 89 0 is_stmt 1
 204 0040 3B68     		ldr	r3, [r7, #0]
 205 0042 03F10103 		add	r3, r3, #1
 206 0046 3B60     		str	r3, [r7, #0]
 207 0048 33E0     		b	.L8
 208              	.L7:
  90:src/shell.c   **** 				}
  91:src/shell.c   **** 				else if ((*cmd != ' ') && (*cmd != '\0')){
 209              		.loc 1 91 0
 210 004a 3B68     		ldr	r3, [r7, #0]
 211 004c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 212 004e 202B     		cmp	r3, #32
 213 0050 13D0     		beq	.L9
 214              		.loc 1 91 0 is_stmt 0 discriminator 1
 215 0052 3B68     		ldr	r3, [r7, #0]
 216 0054 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 217 0056 002B     		cmp	r3, #0
 218 0058 0FD0     		beq	.L9
  92:src/shell.c   **** 					tmp[i++] = *cmd;
 219              		.loc 1 92 0 is_stmt 1
 220 005a 3B68     		ldr	r3, [r7, #0]
 221 005c 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 222 005e FB69     		ldr	r3, [r7, #28]
 223 0060 07F10801 		add	r1, r7, #8
 224 0064 CB18     		adds	r3, r1, r3
 225 0066 1A70     		strb	r2, [r3, #0]
 226 0068 FB69     		ldr	r3, [r7, #28]
 227 006a 03F10103 		add	r3, r3, #1
 228 006e FB61     		str	r3, [r7, #28]
  93:src/shell.c   **** 					cmd++;
 229              		.loc 1 93 0
 230 0070 3B68     		ldr	r3, [r7, #0]
 231 0072 03F10103 		add	r3, r3, #1
 232 0076 3B60     		str	r3, [r7, #0]
 233 0078 1BE0     		b	.L8
 234              	.L9:
  94:src/shell.c   **** 				}
  95:src/shell.c   **** 				else { 
  96:src/shell.c   **** 				tmp[i] = '\0';
 235              		.loc 1 96 0
 236 007a FB69     		ldr	r3, [r7, #28]
 237 007c 07F10802 		add	r2, r7, #8
 238 0080 D318     		adds	r3, r2, r3
 239 0082 4FF00002 		mov	r2, #0
 240 0086 1A70     		strb	r2, [r3, #0]
  97:src/shell.c   **** 				i = 0;
 241              		.loc 1 97 0
 242 0088 4FF00003 		mov	r3, #0
 243 008c FB61     		str	r3, [r7, #28]
  98:src/shell.c   **** 				break;
 244              		.loc 1 98 0
 245 008e 00BF     		nop
  99:src/shell.c   **** 				}		
 100:src/shell.c   **** 			}
 101:src/shell.c   **** 			strcpy(argv[j++],tmp);
 246              		.loc 1 101 0
 247 0090 BB69     		ldr	r3, [r7, #24]
 248 0092 4FEA8303 		lsl	r3, r3, #2
 249 0096 7A68     		ldr	r2, [r7, #4]
 250 0098 D318     		adds	r3, r2, r3
 251 009a 1B68     		ldr	r3, [r3, #0]
 252 009c BA69     		ldr	r2, [r7, #24]
 253 009e 02F10102 		add	r2, r2, #1
 254 00a2 BA61     		str	r2, [r7, #24]
 255 00a4 1846     		mov	r0, r3
 256 00a6 07F10803 		add	r3, r7, #8
 257 00aa 1946     		mov	r1, r3
 258 00ac FFF7FEFF 		bl	strcpy
 259 00b0 00E0     		b	.L4
 260              	.L8:
 100:src/shell.c   **** 			}
 261              		.loc 1 100 0
 262 00b2 BDE7     		b	.L5
 263              	.L4:
 264              	.LBE2:
  81:src/shell.c   **** 	while (*cmd != '\0'){
 265              		.loc 1 81 0 discriminator 1
 266 00b4 3B68     		ldr	r3, [r7, #0]
 267 00b6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 268 00b8 002B     		cmp	r3, #0
 269 00ba B0D1     		bne	.L11
 102:src/shell.c   **** 		}
 103:src/shell.c   **** 	}
 104:src/shell.c   **** 
 105:src/shell.c   **** 	return j;	
 270              		.loc 1 105 0
 271 00bc BB69     		ldr	r3, [r7, #24]
 106:src/shell.c   **** }
 272              		.loc 1 106 0
 273 00be 1846     		mov	r0, r3
 274 00c0 07F12007 		add	r7, r7, #32
 275 00c4 BD46     		mov	sp, r7
 276 00c6 80BD     		pop	{r7, pc}
 277              		.cfi_endproc
 278              	.LFE112:
 280              		.section	.text.check_keyword,"ax",%progbits
 281              		.align	2
 282              		.global	check_keyword
 283              		.thumb
 284              		.thumb_func
 286              	check_keyword:
 287              	.LFB113:
 107:src/shell.c   **** 
 108:src/shell.c   **** 
 109:src/shell.c   **** void check_keyword()
 110:src/shell.c   **** {
 288              		.loc 1 110 0
 289              		.cfi_startproc
 290              		@ args = 0, pretend = 0, frame = 72
 291              		@ frame_needed = 1, uses_anonymous_args = 0
 292 0000 80B5     		push	{r7, lr}
 293              	.LCFI6:
 294              		.cfi_def_cfa_offset 8
 295              		.cfi_offset 14, -4
 296              		.cfi_offset 7, -8
 297 0002 92B0     		sub	sp, sp, #72
 298              	.LCFI7:
 299              		.cfi_def_cfa_offset 80
 300 0004 00AF     		add	r7, sp, #0
 301              	.LCFI8:
 302              		.cfi_def_cfa_register 7
 111:src/shell.c   **** 	/*use hardcoded array*/	
 112:src/shell.c   **** 	char tok[MAX_ARGC + 1][5];
 113:src/shell.c   **** 
 114:src/shell.c   **** 	char *argv[MAX_ARGC + 1];
 115:src/shell.c   **** 	int k = 0;
 303              		.loc 1 115 0
 304 0006 4FF00003 		mov	r3, #0
 305 000a 7B64     		str	r3, [r7, #68]
 116:src/shell.c   **** 
 117:src/shell.c   **** 	for (k;k<MAX_ARGC + 1;k++){
 306              		.loc 1 117 0
 307 000c 13E0     		b	.L13
 308              	.L14:
 118:src/shell.c   **** 	argv[k] = &tok[k][0];
 309              		.loc 1 118 0 discriminator 2
 310 000e 7A6C     		ldr	r2, [r7, #68]
 311 0010 1346     		mov	r3, r2
 312 0012 4FEA8303 		lsl	r3, r3, #2
 313 0016 9B18     		adds	r3, r3, r2
 314 0018 07F12002 		add	r2, r7, #32
 315 001c D218     		adds	r2, r2, r3
 316 001e 7B6C     		ldr	r3, [r7, #68]
 317 0020 4FEA8303 		lsl	r3, r3, #2
 318 0024 07F14801 		add	r1, r7, #72
 319 0028 CB18     		adds	r3, r1, r3
 320 002a 43F83C2C 		str	r2, [r3, #-60]
 117:src/shell.c   **** 	for (k;k<MAX_ARGC + 1;k++){
 321              		.loc 1 117 0 discriminator 2
 322 002e 7B6C     		ldr	r3, [r7, #68]
 323 0030 03F10103 		add	r3, r3, #1
 324 0034 7B64     		str	r3, [r7, #68]
 325              	.L13:
 117:src/shell.c   **** 	for (k;k<MAX_ARGC + 1;k++){
 326              		.loc 1 117 0 is_stmt 0 discriminator 1
 327 0036 7B6C     		ldr	r3, [r7, #68]
 328 0038 042B     		cmp	r3, #4
 329 003a E8DD     		ble	.L14
 119:src/shell.c   **** 	}
 120:src/shell.c   **** 	int i;
 121:src/shell.c   **** 	int argc;
 122:src/shell.c   **** 	
 123:src/shell.c   **** 	char cmdstr[CMDBUF_SIZE];
 124:src/shell.c   **** 	strcpy(cmdstr, &cmd[cur_his][0]);
 330              		.loc 1 124 0 is_stmt 1
 331 003c 40F20003 		movw	r3, #:lower16:cur_his
 332 0040 C0F20003 		movt	r3, #:upper16:cur_his
 333 0044 1B68     		ldr	r3, [r3, #0]
 334 0046 1A46     		mov	r2, r3
 335 0048 1346     		mov	r3, r2
 336 004a 4FEA8303 		lsl	r3, r3, #2
 337 004e 9B18     		adds	r3, r3, r2
 338 0050 4FEA4303 		lsl	r3, r3, #1
 339 0054 1A46     		mov	r2, r3
 340 0056 40F20003 		movw	r3, #:lower16:cmd
 341 005a C0F20003 		movt	r3, #:upper16:cmd
 342 005e D318     		adds	r3, r2, r3
 343 0060 3A46     		mov	r2, r7
 344 0062 1046     		mov	r0, r2
 345 0064 1946     		mov	r1, r3
 346 0066 FFF7FEFF 		bl	strcpy
 125:src/shell.c   **** 	
 126:src/shell.c   **** 	argc = cmdtok(argv, cmdstr);
 347              		.loc 1 126 0
 348 006a 07F10C03 		add	r3, r7, #12
 349 006e 1846     		mov	r0, r3
 350 0070 3B46     		mov	r3, r7
 351 0072 1946     		mov	r1, r3
 352 0074 FFF7FEFF 		bl	cmdtok
 353 0078 F863     		str	r0, [r7, #60]
 127:src/shell.c   **** 
 128:src/shell.c   **** 
 129:src/shell.c   **** 	for (i = 0; i < CMD_COUNT; i++) {
 354              		.loc 1 129 0
 355 007a 4FF00003 		mov	r3, #0
 356 007e 3B64     		str	r3, [r7, #64]
 357 0080 2CE0     		b	.L15
 358              	.L18:
 130:src/shell.c   **** 		if (!strcmp(cmd_data[i].cmd, argv[0])) {
 359              		.loc 1 130 0
 360 0082 3A6C     		ldr	r2, [r7, #64]
 361 0084 1346     		mov	r3, r2
 362 0086 4FEA4303 		lsl	r3, r3, #1
 363 008a 9B18     		adds	r3, r3, r2
 364 008c 4FEA8303 		lsl	r3, r3, #2
 365 0090 40F20002 		movw	r2, #:lower16:cmd_data
 366 0094 C0F20002 		movt	r2, #:upper16:cmd_data
 367 0098 9A18     		adds	r2, r3, r2
 368 009a FB68     		ldr	r3, [r7, #12]
 369 009c 1046     		mov	r0, r2
 370 009e 1946     		mov	r1, r3
 371 00a0 FFF7FEFF 		bl	strcmp
 372 00a4 0346     		mov	r3, r0
 373 00a6 002B     		cmp	r3, #0
 374 00a8 14D1     		bne	.L16
 131:src/shell.c   **** 			cmd_data[i].func(argc, argv);
 375              		.loc 1 131 0
 376 00aa 40F20002 		movw	r2, #:lower16:cmd_data
 377 00ae C0F20002 		movt	r2, #:upper16:cmd_data
 378 00b2 396C     		ldr	r1, [r7, #64]
 379 00b4 0B46     		mov	r3, r1
 380 00b6 4FEA4303 		lsl	r3, r3, #1
 381 00ba 5B18     		adds	r3, r3, r1
 382 00bc 4FEA8303 		lsl	r3, r3, #2
 383 00c0 D318     		adds	r3, r2, r3
 384 00c2 03F10403 		add	r3, r3, #4
 385 00c6 1B68     		ldr	r3, [r3, #0]
 386 00c8 F86B     		ldr	r0, [r7, #60]
 387 00ca 07F10C02 		add	r2, r7, #12
 388 00ce 1146     		mov	r1, r2
 389 00d0 9847     		blx	r3
 132:src/shell.c   **** 			break;
 390              		.loc 1 132 0
 391 00d2 06E0     		b	.L17
 392              	.L16:
 129:src/shell.c   **** 	for (i = 0; i < CMD_COUNT; i++) {
 393              		.loc 1 129 0
 394 00d4 3B6C     		ldr	r3, [r7, #64]
 395 00d6 03F10103 		add	r3, r3, #1
 396 00da 3B64     		str	r3, [r7, #64]
 397              	.L15:
 129:src/shell.c   **** 	for (i = 0; i < CMD_COUNT; i++) {
 398              		.loc 1 129 0 is_stmt 0 discriminator 1
 399 00dc 3B6C     		ldr	r3, [r7, #64]
 400 00de 002B     		cmp	r3, #0
 401 00e0 CFDD     		ble	.L18
 402              	.L17:
 133:src/shell.c   **** 		}
 134:src/shell.c   **** 	}
 135:src/shell.c   **** 
 136:src/shell.c   **** 	if (i == CMD_COUNT) {
 403              		.loc 1 136 0 is_stmt 1
 404 00e2 3B6C     		ldr	r3, [r7, #64]
 405 00e4 012B     		cmp	r3, #1
 406 00e6 09D1     		bne	.L12
 137:src/shell.c   ****  		 Motor_Control(PWM_MOTOR_MIN, PWM_MOTOR_MIN, PWM_MOTOR_MIN, PWM_MOTOR_MIN);
 407              		.loc 1 137 0
 408 00e8 4FF06400 		mov	r0, #100
 409 00ec 4FF06401 		mov	r1, #100
 410 00f0 4FF06402 		mov	r2, #100
 411 00f4 4FF06403 		mov	r3, #100
 412 00f8 FFF7FEFF 		bl	Motor_Control
 413              	.L12:
 138:src/shell.c   **** 	}
 139:src/shell.c   **** 
 140:src/shell.c   **** }
 414              		.loc 1 140 0
 415 00fc 07F14807 		add	r7, r7, #72
 416 0100 BD46     		mov	sp, r7
 417 0102 80BD     		pop	{r7, pc}
 418              		.cfi_endproc
 419              	.LFE113:
 421              		.section	.rodata
 422 0007 00       		.align	2
 423              	.LC2:
 424 0008 0D536865 		.ascii	"\015Shell:~$\000"
 424      6C6C3A7E 
 424      2400
 425 0012 0000     		.align	2
 426              	.LC3:
 427 0014 08200800 		.ascii	"\010 \010\000"
 428              		.align	2
 429              	.LC4:
 430 0018 256300   		.ascii	"%c\000"
 431 001b 00       		.section	.text.shell,"ax",%progbits
 432              		.align	2
 433              		.global	shell
 434              		.thumb
 435              		.thumb_func
 437              	shell:
 438              	.LFB114:
 141:src/shell.c   **** 
 142:src/shell.c   **** void shell(void *pvParameters)
 143:src/shell.c   **** {
 439              		.loc 1 143 0
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 24
 442              		@ frame_needed = 1, uses_anonymous_args = 0
 443 0000 80B5     		push	{r7, lr}
 444              	.LCFI9:
 445              		.cfi_def_cfa_offset 8
 446              		.cfi_offset 14, -4
 447              		.cfi_offset 7, -8
 448 0002 86B0     		sub	sp, sp, #24
 449              	.LCFI10:
 450              		.cfi_def_cfa_offset 32
 451 0004 00AF     		add	r7, sp, #0
 452              	.LCFI11:
 453              		.cfi_def_cfa_register 7
 454 0006 7860     		str	r0, [r7, #4]
 144:src/shell.c   **** 	char put_ch;
 145:src/shell.c   **** 	char *p = NULL;
 455              		.loc 1 145 0
 456 0008 4FF00003 		mov	r3, #0
 457 000c 7B61     		str	r3, [r7, #20]
 146:src/shell.c   **** 	char *str ="\rShell:~$";	
 458              		.loc 1 146 0
 459 000e 40F20003 		movw	r3, #:lower16:.LC2
 460 0012 C0F20003 		movt	r3, #:upper16:.LC2
 461 0016 3B61     		str	r3, [r7, #16]
 462              	.L29:
 463              	.LBB3:
 147:src/shell.c   **** 
 148:src/shell.c   **** 	for (;; cur_his = (cur_his + 1) % HISTORY_COUNT) {
 149:src/shell.c   **** 		/* need use & that p can work correct, idk why p = cmd[cur_his] can't work */
 150:src/shell.c   **** 		p = &cmd[cur_his][0];
 464              		.loc 1 150 0
 465 0018 40F20003 		movw	r3, #:lower16:cur_his
 466 001c C0F20003 		movt	r3, #:upper16:cur_his
 467 0020 1B68     		ldr	r3, [r3, #0]
 468 0022 1A46     		mov	r2, r3
 469 0024 1346     		mov	r3, r2
 470 0026 4FEA8303 		lsl	r3, r3, #2
 471 002a 9B18     		adds	r3, r3, r2
 472 002c 4FEA4303 		lsl	r3, r3, #1
 473 0030 1A46     		mov	r2, r3
 474 0032 40F20003 		movw	r3, #:lower16:cmd
 475 0036 C0F20003 		movt	r3, #:upper16:cmd
 476 003a D318     		adds	r3, r2, r3
 477 003c 7B61     		str	r3, [r7, #20]
 151:src/shell.c   **** 
 152:src/shell.c   **** 		//printf("%s",str);
 153:src/shell.c   **** 		qprintf(xQueueUARTSend, "%s", str);
 478              		.loc 1 153 0
 479 003e 40F20003 		movw	r3, #:lower16:xQueueUARTSend
 480 0042 C0F20003 		movt	r3, #:upper16:xQueueUARTSend
 481 0046 1B68     		ldr	r3, [r3, #0]
 482 0048 1846     		mov	r0, r3
 483 004a 40F20001 		movw	r1, #:lower16:.LC1
 484 004e C0F20001 		movt	r1, #:upper16:.LC1
 485 0052 3A69     		ldr	r2, [r7, #16]
 486 0054 FFF7FEFF 		bl	qprintf
 487 0058 00E0     		b	.L28
 488              	.L30:
 154:src/shell.c   **** 
 155:src/shell.c   **** 
 156:src/shell.c   **** 		while (1) {
 157:src/shell.c   **** 			put_ch = receive_byte();			
 158:src/shell.c   **** 
 159:src/shell.c   **** 			if (put_ch == '\r' || put_ch == '\n') {
 160:src/shell.c   **** 				*p = '\0';
 161:src/shell.c   **** 				qprintf(xQueueUARTSend, "%s",next_line);
 162:src/shell.c   **** 				break;
 163:src/shell.c   **** 			}
 164:src/shell.c   **** 			else if (put_ch== 127 || put_ch == '\b') {
 165:src/shell.c   **** 				if (p > &cmd[cur_his][0]) {
 166:src/shell.c   **** 					p--;
 167:src/shell.c   **** 					qprintf(xQueueUARTSend, "\b \b");
 168:src/shell.c   **** 				}
 169:src/shell.c   **** 			}
 170:src/shell.c   **** 			else if (p - &cmd[cur_his][0] < CMDBUF_SIZE - 1) {
 171:src/shell.c   **** 				*(p++) = put_ch;
 172:src/shell.c   **** 				qprintf(xQueueUARTSend, "%c",put_ch);
 173:src/shell.c   **** 			}
 174:src/shell.c   **** 
 175:src/shell.c   **** 		}
 489              		.loc 1 175 0
 490 005a 00BF     		nop
 491              	.L28:
 492              	.LBB4:
 157:src/shell.c   **** 			put_ch = receive_byte();			
 493              		.loc 1 157 0
 494 005c FFF7FEFF 		bl	receive_byte
 495 0060 0346     		mov	r3, r0
 496 0062 FB73     		strb	r3, [r7, #15]
 159:src/shell.c   **** 			if (put_ch == '\r' || put_ch == '\n') {
 497              		.loc 1 159 0
 498 0064 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 499 0066 0D2B     		cmp	r3, #13
 500 0068 02D0     		beq	.L21
 159:src/shell.c   **** 			if (put_ch == '\r' || put_ch == '\n') {
 501              		.loc 1 159 0 is_stmt 0 discriminator 1
 502 006a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 503 006c 0A2B     		cmp	r3, #10
 504 006e 1ED1     		bne	.L22
 505              	.L21:
 160:src/shell.c   **** 				*p = '\0';
 506              		.loc 1 160 0 is_stmt 1
 507 0070 7B69     		ldr	r3, [r7, #20]
 508 0072 4FF00002 		mov	r2, #0
 509 0076 1A70     		strb	r2, [r3, #0]
 161:src/shell.c   **** 				qprintf(xQueueUARTSend, "%s",next_line);
 510              		.loc 1 161 0
 511 0078 40F20003 		movw	r3, #:lower16:xQueueUARTSend
 512 007c C0F20003 		movt	r3, #:upper16:xQueueUARTSend
 513 0080 1B68     		ldr	r3, [r3, #0]
 514 0082 1846     		mov	r0, r3
 515 0084 40F20001 		movw	r1, #:lower16:.LC1
 516 0088 C0F20001 		movt	r1, #:upper16:.LC1
 517 008c 40F20002 		movw	r2, #:lower16:next_line
 518 0090 C0F20002 		movt	r2, #:upper16:next_line
 519 0094 FFF7FEFF 		bl	qprintf
 162:src/shell.c   **** 				break;
 520              		.loc 1 162 0
 521 0098 00BF     		nop
 522              	.LBE4:
 176:src/shell.c   **** 		check_keyword();	
 523              		.loc 1 176 0
 524 009a FFF7FEFF 		bl	check_keyword
 525              	.LBE3:
 148:src/shell.c   **** 	for (;; cur_his = (cur_his + 1) % HISTORY_COUNT) {
 526              		.loc 1 148 0
 527 009e 40F20003 		movw	r3, #:lower16:cur_his
 528 00a2 C0F20003 		movt	r3, #:upper16:cur_his
 529 00a6 4FF00002 		mov	r2, #0
 530 00aa 1A60     		str	r2, [r3, #0]
 177:src/shell.c   **** 		
 178:src/shell.c   **** 	}
 531              		.loc 1 178 0
 532 00ac B4E7     		b	.L29
 533              	.L22:
 534              	.LBB6:
 535              	.LBB5:
 164:src/shell.c   **** 			else if (put_ch== 127 || put_ch == '\b') {
 536              		.loc 1 164 0
 537 00ae FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 538 00b0 7F2B     		cmp	r3, #127
 539 00b2 02D0     		beq	.L24
 164:src/shell.c   **** 			else if (put_ch== 127 || put_ch == '\b') {
 540              		.loc 1 164 0 is_stmt 0 discriminator 1
 541 00b4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 542 00b6 082B     		cmp	r3, #8
 543 00b8 25D1     		bne	.L25
 544              	.L24:
 165:src/shell.c   **** 				if (p > &cmd[cur_his][0]) {
 545              		.loc 1 165 0 is_stmt 1
 546 00ba 40F20003 		movw	r3, #:lower16:cur_his
 547 00be C0F20003 		movt	r3, #:upper16:cur_his
 548 00c2 1B68     		ldr	r3, [r3, #0]
 549 00c4 1A46     		mov	r2, r3
 550 00c6 1346     		mov	r3, r2
 551 00c8 4FEA8303 		lsl	r3, r3, #2
 552 00cc 9B18     		adds	r3, r3, r2
 553 00ce 4FEA4303 		lsl	r3, r3, #1
 554 00d2 1A46     		mov	r2, r3
 555 00d4 40F20003 		movw	r3, #:lower16:cmd
 556 00d8 C0F20003 		movt	r3, #:upper16:cmd
 557 00dc D218     		adds	r2, r2, r3
 558 00de 7B69     		ldr	r3, [r7, #20]
 559 00e0 9A42     		cmp	r2, r3
 560 00e2 3CD2     		bcs	.L27
 166:src/shell.c   **** 					p--;
 561              		.loc 1 166 0
 562 00e4 7B69     		ldr	r3, [r7, #20]
 563 00e6 03F1FF33 		add	r3, r3, #-1
 564 00ea 7B61     		str	r3, [r7, #20]
 167:src/shell.c   **** 					qprintf(xQueueUARTSend, "\b \b");
 565              		.loc 1 167 0
 566 00ec 40F20003 		movw	r3, #:lower16:xQueueUARTSend
 567 00f0 C0F20003 		movt	r3, #:upper16:xQueueUARTSend
 568 00f4 1B68     		ldr	r3, [r3, #0]
 569 00f6 1846     		mov	r0, r3
 570 00f8 40F20001 		movw	r1, #:lower16:.LC3
 571 00fc C0F20001 		movt	r1, #:upper16:.LC3
 572 0100 FFF7FEFF 		bl	qprintf
 165:src/shell.c   **** 				if (p > &cmd[cur_his][0]) {
 573              		.loc 1 165 0
 574 0104 2BE0     		b	.L27
 575              	.L25:
 170:src/shell.c   **** 			else if (p - &cmd[cur_his][0] < CMDBUF_SIZE - 1) {
 576              		.loc 1 170 0
 577 0106 7969     		ldr	r1, [r7, #20]
 578 0108 40F20003 		movw	r3, #:lower16:cur_his
 579 010c C0F20003 		movt	r3, #:upper16:cur_his
 580 0110 1B68     		ldr	r3, [r3, #0]
 581 0112 1A46     		mov	r2, r3
 582 0114 1346     		mov	r3, r2
 583 0116 4FEA8303 		lsl	r3, r3, #2
 584 011a 9B18     		adds	r3, r3, r2
 585 011c 4FEA4303 		lsl	r3, r3, #1
 586 0120 1A46     		mov	r2, r3
 587 0122 40F20003 		movw	r3, #:lower16:cmd
 588 0126 C0F20003 		movt	r3, #:upper16:cmd
 589 012a D318     		adds	r3, r2, r3
 590 012c CB1A     		subs	r3, r1, r3
 591 012e 082B     		cmp	r3, #8
 592 0130 93DC     		bgt	.L30
 171:src/shell.c   **** 				*(p++) = put_ch;
 593              		.loc 1 171 0
 594 0132 7B69     		ldr	r3, [r7, #20]
 595 0134 FA7B     		ldrb	r2, [r7, #15]
 596 0136 1A70     		strb	r2, [r3, #0]
 597 0138 7B69     		ldr	r3, [r7, #20]
 598 013a 03F10103 		add	r3, r3, #1
 599 013e 7B61     		str	r3, [r7, #20]
 172:src/shell.c   **** 				qprintf(xQueueUARTSend, "%c",put_ch);
 600              		.loc 1 172 0
 601 0140 40F20003 		movw	r3, #:lower16:xQueueUARTSend
 602 0144 C0F20003 		movt	r3, #:upper16:xQueueUARTSend
 603 0148 1A68     		ldr	r2, [r3, #0]
 604 014a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 605 014c 1046     		mov	r0, r2
 606 014e 40F20001 		movw	r1, #:lower16:.LC4
 607 0152 C0F20001 		movt	r1, #:upper16:.LC4
 608 0156 1A46     		mov	r2, r3
 609 0158 FFF7FEFF 		bl	qprintf
 610              	.LBE5:
 175:src/shell.c   **** 		}
 611              		.loc 1 175 0
 612 015c 7DE7     		b	.L30
 613              	.L27:
 614 015e 7CE7     		b	.L30
 615              	.LBE6:
 616              		.cfi_endproc
 617              	.LFE114:
 619              		.text
 620              	.Letext0:
 621              		.file 2 "/usr/local/csl/arm-2012.03/bin/../lib/gcc/arm-none-eabi/4.6.3/../../../../arm-none-eabi/i
 622              		.file 3 "FreeRTOS/Source/include/queue.h"
 623              		.file 4 "<built-in>"
 624              		.file 5 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 shell.c
     /tmp/cc4HF3xv.s:20     .text.strcmp:00000000 $t
     /tmp/cc4HF3xv.s:25     .text.strcmp:00000000 strcmp
     /tmp/cc4HF3xv.s:35     .text.strcmp:00000000 strcmp_lop
     /tmp/cc4HF3xv.s:57     .data.next_line:00000000 next_line
     /tmp/cc4HF3xv.s:54     .data.next_line:00000000 $d
                            *COM*:0000000a cmd
     /tmp/cc4HF3xv.s:67     .bss.cur_his:00000000 cur_his
     /tmp/cc4HF3xv.s:64     .bss.cur_his:00000000 $d
                            *COM*:00000001 CMD_TYPE
     /tmp/cc4HF3xv.s:75     .rodata.cmd_data:00000000 cmd_data
     /tmp/cc4HF3xv.s:72     .rodata.cmd_data:00000000 $d
     /tmp/cc4HF3xv.s:93     .text.pwm:00000000 pwm
     /tmp/cc4HF3xv.s:81     .rodata:00000000 $d
     /tmp/cc4HF3xv.s:82     .rodata:00000000 .LC0
     /tmp/cc4HF3xv.s:85     .rodata:00000004 .LC1
     /tmp/cc4HF3xv.s:88     .text.pwm:00000000 $t
     /tmp/cc4HF3xv.s:144    .text.cmdtok:00000000 $t
     /tmp/cc4HF3xv.s:149    .text.cmdtok:00000000 cmdtok
     /tmp/cc4HF3xv.s:281    .text.check_keyword:00000000 $t
     /tmp/cc4HF3xv.s:286    .text.check_keyword:00000000 check_keyword
     /tmp/cc4HF3xv.s:423    .rodata:00000008 .LC2
     /tmp/cc4HF3xv.s:426    .rodata:00000014 .LC3
     /tmp/cc4HF3xv.s:429    .rodata:00000018 .LC4
     /tmp/cc4HF3xv.s:432    .text.shell:00000000 $t
     /tmp/cc4HF3xv.s:437    .text.shell:00000000 shell
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
xQueueUARTSend
qprintf
xQueueShell2PWM
strcpy
Motor_Control
receive_byte
