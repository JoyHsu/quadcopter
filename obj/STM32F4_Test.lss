
obj/STM32F4_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cc0  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000008  08004e48  08004e48  0000ce48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08004e50  08004e50  0000ce50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000055c  20000000  08004e54  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000029c  20000560  080053b0  00010560  2**3
                  ALLOC
  6 ._user_heap_stack 00000400  200007fc  080053b0  000107fc  2**0
                  ALLOC
  7 .ARM.attributes 00000035  00000000  00000000  0001055c  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000b6eb  00000000  00000000  00010591  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001c26  00000000  00000000  0001bc7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000046f2  00000000  00000000  0001d8a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000c30  00000000  00000000  00021f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b18  00000000  00000000  00022bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003e3f  00000000  00000000  000236dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004034  00000000  00000000  0002751b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000030  00000000  00000000  0002b54f  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002a60  00000000  00000000  0002b580  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	f240 5460 	movw	r4, #1376	; 0x560
 800018e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000192:	7823      	ldrb	r3, [r4, #0]
 8000194:	b963      	cbnz	r3, 80001b0 <__do_global_dtors_aux+0x28>
 8000196:	f240 0000 	movw	r0, #0
 800019a:	f2c0 0000 	movt	r0, #0
 800019e:	b128      	cbz	r0, 80001ac <__do_global_dtors_aux+0x24>
 80001a0:	f644 6030 	movw	r0, #20016	; 0x4e30
 80001a4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001a8:	f3af 8000 	nop.w
 80001ac:	2101      	movs	r1, #1
 80001ae:	7021      	strb	r1, [r4, #0]
 80001b0:	bd10      	pop	{r4, pc}
 80001b2:	bf00      	nop

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	f240 0300 	movw	r3, #0
 80001ba:	f2c0 0300 	movt	r3, #0
 80001be:	b14b      	cbz	r3, 80001d4 <frame_dummy+0x20>
 80001c0:	f644 6030 	movw	r0, #20016	; 0x4e30
 80001c4:	f240 5164 	movw	r1, #1380	; 0x564
 80001c8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001cc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80001d0:	f3af 8000 	nop.w
 80001d4:	f240 505c 	movw	r0, #1372	; 0x55c
 80001d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80001dc:	6801      	ldr	r1, [r0, #0]
 80001de:	b129      	cbz	r1, 80001ec <frame_dummy+0x38>
 80001e0:	f240 0300 	movw	r3, #0
 80001e4:	f2c0 0300 	movt	r3, #0
 80001e8:	b103      	cbz	r3, 80001ec <frame_dummy+0x38>
 80001ea:	4798      	blx	r3
 80001ec:	bd08      	pop	{r3, pc}
 80001ee:	bf00      	nop

080001f0 <__libc_init_array>:
 80001f0:	b570      	push	{r4, r5, r6, lr}
 80001f2:	f644 6648 	movw	r6, #20040	; 0x4e48
 80001f6:	f644 6548 	movw	r5, #20040	; 0x4e48
 80001fa:	f6c0 0600 	movt	r6, #2048	; 0x800
 80001fe:	f6c0 0500 	movt	r5, #2048	; 0x800
 8000202:	1b76      	subs	r6, r6, r5
 8000204:	10b6      	asrs	r6, r6, #2
 8000206:	d006      	beq.n	8000216 <__libc_init_array+0x26>
 8000208:	2400      	movs	r4, #0
 800020a:	f855 3b04 	ldr.w	r3, [r5], #4
 800020e:	3401      	adds	r4, #1
 8000210:	4798      	blx	r3
 8000212:	42a6      	cmp	r6, r4
 8000214:	d1f9      	bne.n	800020a <__libc_init_array+0x1a>
 8000216:	f644 6650 	movw	r6, #20048	; 0x4e50
 800021a:	f644 6548 	movw	r5, #20040	; 0x4e48
 800021e:	f6c0 0600 	movt	r6, #2048	; 0x800
 8000222:	f6c0 0500 	movt	r5, #2048	; 0x800
 8000226:	1b76      	subs	r6, r6, r5
 8000228:	f004 fe02 	bl	8004e30 <_init>
 800022c:	10b6      	asrs	r6, r6, #2
 800022e:	d006      	beq.n	800023e <__libc_init_array+0x4e>
 8000230:	2400      	movs	r4, #0
 8000232:	f855 3b04 	ldr.w	r3, [r5], #4
 8000236:	3401      	adds	r4, #1
 8000238:	4798      	blx	r3
 800023a:	42a6      	cmp	r6, r4
 800023c:	d1f9      	bne.n	8000232 <__libc_init_array+0x42>
 800023e:	bd70      	pop	{r4, r5, r6, pc}

08000240 <malloc>:
 8000240:	f240 0300 	movw	r3, #0
 8000244:	4601      	mov	r1, r0
 8000246:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800024a:	6818      	ldr	r0, [r3, #0]
 800024c:	f000 b808 	b.w	8000260 <_malloc_r>

08000250 <free>:
 8000250:	f240 0300 	movw	r3, #0
 8000254:	4601      	mov	r1, r0
 8000256:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800025a:	6818      	ldr	r0, [r3, #0]
 800025c:	f000 bc28 	b.w	8000ab0 <_free_r>

08000260 <_malloc_r>:
 8000260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000264:	f101 040b 	add.w	r4, r1, #11
 8000268:	2c16      	cmp	r4, #22
 800026a:	b083      	sub	sp, #12
 800026c:	4606      	mov	r6, r0
 800026e:	d930      	bls.n	80002d2 <_malloc_r+0x72>
 8000270:	f024 0407 	bic.w	r4, r4, #7
 8000274:	0fe3      	lsrs	r3, r4, #31
 8000276:	428c      	cmp	r4, r1
 8000278:	bf2c      	ite	cs
 800027a:	4619      	movcs	r1, r3
 800027c:	f043 0101 	orrcc.w	r1, r3, #1
 8000280:	2900      	cmp	r1, #0
 8000282:	d12f      	bne.n	80002e4 <_malloc_r+0x84>
 8000284:	4630      	mov	r0, r6
 8000286:	f001 fb7b 	bl	8001980 <__malloc_lock>
 800028a:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800028e:	d22d      	bcs.n	80002ec <_malloc_r+0x8c>
 8000290:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8000294:	f240 05f4 	movw	r5, #244	; 0xf4
 8000298:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800029c:	eb05 02ce 	add.w	r2, r5, lr, lsl #3
 80002a0:	68d3      	ldr	r3, [r2, #12]
 80002a2:	4293      	cmp	r3, r2
 80002a4:	f000 8223 	beq.w	80006ee <_malloc_r+0x48e>
 80002a8:	685c      	ldr	r4, [r3, #4]
 80002aa:	f103 0708 	add.w	r7, r3, #8
 80002ae:	68da      	ldr	r2, [r3, #12]
 80002b0:	4630      	mov	r0, r6
 80002b2:	f024 0403 	bic.w	r4, r4, #3
 80002b6:	6899      	ldr	r1, [r3, #8]
 80002b8:	191b      	adds	r3, r3, r4
 80002ba:	685c      	ldr	r4, [r3, #4]
 80002bc:	60ca      	str	r2, [r1, #12]
 80002be:	f044 0401 	orr.w	r4, r4, #1
 80002c2:	6091      	str	r1, [r2, #8]
 80002c4:	605c      	str	r4, [r3, #4]
 80002c6:	f001 fb65 	bl	8001994 <__malloc_unlock>
 80002ca:	4638      	mov	r0, r7
 80002cc:	b003      	add	sp, #12
 80002ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80002d2:	2300      	movs	r3, #0
 80002d4:	2410      	movs	r4, #16
 80002d6:	428c      	cmp	r4, r1
 80002d8:	bf2c      	ite	cs
 80002da:	4619      	movcs	r1, r3
 80002dc:	f043 0101 	orrcc.w	r1, r3, #1
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d0cf      	beq.n	8000284 <_malloc_r+0x24>
 80002e4:	230c      	movs	r3, #12
 80002e6:	2700      	movs	r7, #0
 80002e8:	6033      	str	r3, [r6, #0]
 80002ea:	e7ee      	b.n	80002ca <_malloc_r+0x6a>
 80002ec:	ea5f 2e54 	movs.w	lr, r4, lsr #9
 80002f0:	bf04      	itt	eq
 80002f2:	ea4f 0ed4 	moveq.w	lr, r4, lsr #3
 80002f6:	ea4f 01ce 	moveq.w	r1, lr, lsl #3
 80002fa:	f040 808c 	bne.w	8000416 <_malloc_r+0x1b6>
 80002fe:	f240 05f4 	movw	r5, #244	; 0xf4
 8000302:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8000306:	1869      	adds	r1, r5, r1
 8000308:	68cf      	ldr	r7, [r1, #12]
 800030a:	42b9      	cmp	r1, r7
 800030c:	d106      	bne.n	800031c <_malloc_r+0xbc>
 800030e:	e00d      	b.n	800032c <_malloc_r+0xcc>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f280 8181 	bge.w	8000618 <_malloc_r+0x3b8>
 8000316:	68ff      	ldr	r7, [r7, #12]
 8000318:	42b9      	cmp	r1, r7
 800031a:	d007      	beq.n	800032c <_malloc_r+0xcc>
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	f023 0303 	bic.w	r3, r3, #3
 8000322:	1b1a      	subs	r2, r3, r4
 8000324:	2a0f      	cmp	r2, #15
 8000326:	ddf3      	ble.n	8000310 <_malloc_r+0xb0>
 8000328:	f10e 3eff 	add.w	lr, lr, #4294967295
 800032c:	f10e 0e01 	add.w	lr, lr, #1
 8000330:	f240 00f4 	movw	r0, #244	; 0xf4
 8000334:	692f      	ldr	r7, [r5, #16]
 8000336:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800033a:	f100 0208 	add.w	r2, r0, #8
 800033e:	4297      	cmp	r7, r2
 8000340:	bf08      	it	eq
 8000342:	6843      	ldreq	r3, [r0, #4]
 8000344:	d026      	beq.n	8000394 <_malloc_r+0x134>
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	f023 0c03 	bic.w	ip, r3, #3
 800034c:	ebc4 030c 	rsb	r3, r4, ip
 8000350:	2b0f      	cmp	r3, #15
 8000352:	f300 819c 	bgt.w	800068e <_malloc_r+0x42e>
 8000356:	2b00      	cmp	r3, #0
 8000358:	6142      	str	r2, [r0, #20]
 800035a:	6102      	str	r2, [r0, #16]
 800035c:	f280 8095 	bge.w	800048a <_malloc_r+0x22a>
 8000360:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8000364:	f080 8173 	bcs.w	800064e <_malloc_r+0x3ee>
 8000368:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800036c:	f04f 0801 	mov.w	r8, #1
 8000370:	6843      	ldr	r3, [r0, #4]
 8000372:	eb00 01cc 	add.w	r1, r0, ip, lsl #3
 8000376:	ea4f 0cac 	mov.w	ip, ip, asr #2
 800037a:	fa08 f80c 	lsl.w	r8, r8, ip
 800037e:	60f9      	str	r1, [r7, #12]
 8000380:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8000384:	ea48 0303 	orr.w	r3, r8, r3
 8000388:	6043      	str	r3, [r0, #4]
 800038a:	f8c7 c008 	str.w	ip, [r7, #8]
 800038e:	f8cc 700c 	str.w	r7, [ip, #12]
 8000392:	608f      	str	r7, [r1, #8]
 8000394:	2701      	movs	r7, #1
 8000396:	ea4f 01ae 	mov.w	r1, lr, asr #2
 800039a:	fa07 f701 	lsl.w	r7, r7, r1
 800039e:	429f      	cmp	r7, r3
 80003a0:	d87e      	bhi.n	80004a0 <_malloc_r+0x240>
 80003a2:	423b      	tst	r3, r7
 80003a4:	d106      	bne.n	80003b4 <_malloc_r+0x154>
 80003a6:	f02e 0e03 	bic.w	lr, lr, #3
 80003aa:	007f      	lsls	r7, r7, #1
 80003ac:	f10e 0e04 	add.w	lr, lr, #4
 80003b0:	423b      	tst	r3, r7
 80003b2:	d0fa      	beq.n	80003aa <_malloc_r+0x14a>
 80003b4:	eb05 09ce 	add.w	r9, r5, lr, lsl #3
 80003b8:	46f0      	mov	r8, lr
 80003ba:	46cc      	mov	ip, r9
 80003bc:	f8dc 000c 	ldr.w	r0, [ip, #12]
 80003c0:	4584      	cmp	ip, r0
 80003c2:	d107      	bne.n	80003d4 <_malloc_r+0x174>
 80003c4:	e174      	b.n	80006b0 <_malloc_r+0x450>
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	f280 819b 	bge.w	8000702 <_malloc_r+0x4a2>
 80003cc:	68c0      	ldr	r0, [r0, #12]
 80003ce:	4584      	cmp	ip, r0
 80003d0:	f000 816e 	beq.w	80006b0 <_malloc_r+0x450>
 80003d4:	6841      	ldr	r1, [r0, #4]
 80003d6:	f021 0103 	bic.w	r1, r1, #3
 80003da:	1b0b      	subs	r3, r1, r4
 80003dc:	2b0f      	cmp	r3, #15
 80003de:	ddf2      	ble.n	80003c6 <_malloc_r+0x166>
 80003e0:	4607      	mov	r7, r0
 80003e2:	1901      	adds	r1, r0, r4
 80003e4:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80003e8:	f044 0801 	orr.w	r8, r4, #1
 80003ec:	f857 4f08 	ldr.w	r4, [r7, #8]!
 80003f0:	f043 0c01 	orr.w	ip, r3, #1
 80003f4:	f8c0 8004 	str.w	r8, [r0, #4]
 80003f8:	4630      	mov	r0, r6
 80003fa:	f8c1 c004 	str.w	ip, [r1, #4]
 80003fe:	f8c4 e00c 	str.w	lr, [r4, #12]
 8000402:	f8ce 4008 	str.w	r4, [lr, #8]
 8000406:	6169      	str	r1, [r5, #20]
 8000408:	6129      	str	r1, [r5, #16]
 800040a:	60ca      	str	r2, [r1, #12]
 800040c:	608a      	str	r2, [r1, #8]
 800040e:	50cb      	str	r3, [r1, r3]
 8000410:	f001 fac0 	bl	8001994 <__malloc_unlock>
 8000414:	e759      	b.n	80002ca <_malloc_r+0x6a>
 8000416:	f1be 0f04 	cmp.w	lr, #4
 800041a:	bf9e      	ittt	ls
 800041c:	ea4f 1e94 	movls.w	lr, r4, lsr #6
 8000420:	f10e 0e38 	addls.w	lr, lr, #56	; 0x38
 8000424:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8000428:	f67f af69 	bls.w	80002fe <_malloc_r+0x9e>
 800042c:	f1be 0f14 	cmp.w	lr, #20
 8000430:	bf9c      	itt	ls
 8000432:	f10e 0e5b 	addls.w	lr, lr, #91	; 0x5b
 8000436:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 800043a:	f67f af60 	bls.w	80002fe <_malloc_r+0x9e>
 800043e:	f1be 0f54 	cmp.w	lr, #84	; 0x54
 8000442:	bf9e      	ittt	ls
 8000444:	ea4f 3e14 	movls.w	lr, r4, lsr #12
 8000448:	f10e 0e6e 	addls.w	lr, lr, #110	; 0x6e
 800044c:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8000450:	f67f af55 	bls.w	80002fe <_malloc_r+0x9e>
 8000454:	f5be 7faa 	cmp.w	lr, #340	; 0x154
 8000458:	bf9e      	ittt	ls
 800045a:	ea4f 3ed4 	movls.w	lr, r4, lsr #15
 800045e:	f10e 0e77 	addls.w	lr, lr, #119	; 0x77
 8000462:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8000466:	f67f af4a 	bls.w	80002fe <_malloc_r+0x9e>
 800046a:	f240 5354 	movw	r3, #1364	; 0x554
 800046e:	459e      	cmp	lr, r3
 8000470:	bf95      	itete	ls
 8000472:	ea4f 4e94 	movls.w	lr, r4, lsr #18
 8000476:	f44f 717c 	movhi.w	r1, #1008	; 0x3f0
 800047a:	f10e 0e7c 	addls.w	lr, lr, #124	; 0x7c
 800047e:	f04f 0e7e 	movhi.w	lr, #126	; 0x7e
 8000482:	bf98      	it	ls
 8000484:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8000488:	e739      	b.n	80002fe <_malloc_r+0x9e>
 800048a:	eb07 030c 	add.w	r3, r7, ip
 800048e:	4630      	mov	r0, r6
 8000490:	3708      	adds	r7, #8
 8000492:	685a      	ldr	r2, [r3, #4]
 8000494:	f042 0201 	orr.w	r2, r2, #1
 8000498:	605a      	str	r2, [r3, #4]
 800049a:	f001 fa7b 	bl	8001994 <__malloc_unlock>
 800049e:	e714      	b.n	80002ca <_malloc_r+0x6a>
 80004a0:	68af      	ldr	r7, [r5, #8]
 80004a2:	f240 03f4 	movw	r3, #244	; 0xf4
 80004a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	f022 0803 	bic.w	r8, r2, #3
 80004b0:	4544      	cmp	r4, r8
 80004b2:	ebc4 0208 	rsb	r2, r4, r8
 80004b6:	bf94      	ite	ls
 80004b8:	2100      	movls	r1, #0
 80004ba:	2101      	movhi	r1, #1
 80004bc:	2a0f      	cmp	r2, #15
 80004be:	bfd8      	it	le
 80004c0:	f041 0101 	orrle.w	r1, r1, #1
 80004c4:	2900      	cmp	r1, #0
 80004c6:	f000 80b5 	beq.w	8000634 <_malloc_r+0x3d4>
 80004ca:	f240 5a7c 	movw	sl, #1404	; 0x57c
 80004ce:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80004d2:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 80004d6:	3201      	adds	r2, #1
 80004d8:	f8da 3000 	ldr.w	r3, [sl]
 80004dc:	4423      	add	r3, r4
 80004de:	bf08      	it	eq
 80004e0:	f103 0b10 	addeq.w	fp, r3, #16
 80004e4:	d006      	beq.n	80004f4 <_malloc_r+0x294>
 80004e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80004ea:	330f      	adds	r3, #15
 80004ec:	f423 637e 	bic.w	r3, r3, #4064	; 0xfe0
 80004f0:	f023 0b1f 	bic.w	fp, r3, #31
 80004f4:	4630      	mov	r0, r6
 80004f6:	4659      	mov	r1, fp
 80004f8:	f001 f9fa 	bl	80018f0 <_sbrk_r>
 80004fc:	1c42      	adds	r2, r0, #1
 80004fe:	4681      	mov	r9, r0
 8000500:	f000 8131 	beq.w	8000766 <_malloc_r+0x506>
 8000504:	eb07 0308 	add.w	r3, r7, r8
 8000508:	4283      	cmp	r3, r0
 800050a:	f200 8106 	bhi.w	800071a <_malloc_r+0x4ba>
 800050e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8000512:	454b      	cmp	r3, r9
 8000514:	445a      	add	r2, fp
 8000516:	f8ca 2004 	str.w	r2, [sl, #4]
 800051a:	f000 8131 	beq.w	8000780 <_malloc_r+0x520>
 800051e:	f8d5 0408 	ldr.w	r0, [r5, #1032]	; 0x408
 8000522:	f240 01f4 	movw	r1, #244	; 0xf4
 8000526:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800052a:	3001      	adds	r0, #1
 800052c:	4630      	mov	r0, r6
 800052e:	bf17      	itett	ne
 8000530:	ebc3 0309 	rsbne	r3, r3, r9
 8000534:	f8c1 9408 	streq.w	r9, [r1, #1032]	; 0x408
 8000538:	18d2      	addne	r2, r2, r3
 800053a:	f8ca 2004 	strne.w	r2, [sl, #4]
 800053e:	f019 0307 	ands.w	r3, r9, #7
 8000542:	bf1f      	itttt	ne
 8000544:	f1c3 0208 	rsbne	r2, r3, #8
 8000548:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 800054c:	4491      	addne	r9, r2
 800054e:	f103 0208 	addne.w	r2, r3, #8
 8000552:	eb09 030b 	add.w	r3, r9, fp
 8000556:	bf08      	it	eq
 8000558:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 800055c:	051b      	lsls	r3, r3, #20
 800055e:	0d1b      	lsrs	r3, r3, #20
 8000560:	ebc3 0b02 	rsb	fp, r3, r2
 8000564:	4659      	mov	r1, fp
 8000566:	f001 f9c3 	bl	80018f0 <_sbrk_r>
 800056a:	1c43      	adds	r3, r0, #1
 800056c:	f000 811d 	beq.w	80007aa <_malloc_r+0x54a>
 8000570:	ebc9 0100 	rsb	r1, r9, r0
 8000574:	4459      	add	r1, fp
 8000576:	f041 0101 	orr.w	r1, r1, #1
 800057a:	f8da 2004 	ldr.w	r2, [sl, #4]
 800057e:	42af      	cmp	r7, r5
 8000580:	f240 537c 	movw	r3, #1404	; 0x57c
 8000584:	f8c5 9008 	str.w	r9, [r5, #8]
 8000588:	445a      	add	r2, fp
 800058a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800058e:	f8c9 1004 	str.w	r1, [r9, #4]
 8000592:	f8ca 2004 	str.w	r2, [sl, #4]
 8000596:	d019      	beq.n	80005cc <_malloc_r+0x36c>
 8000598:	f1b8 0f0f 	cmp.w	r8, #15
 800059c:	f240 80dd 	bls.w	800075a <_malloc_r+0x4fa>
 80005a0:	f1a8 010c 	sub.w	r1, r8, #12
 80005a4:	f8d7 c004 	ldr.w	ip, [r7, #4]
 80005a8:	f021 0107 	bic.w	r1, r1, #7
 80005ac:	f04f 0e05 	mov.w	lr, #5
 80005b0:	1878      	adds	r0, r7, r1
 80005b2:	290f      	cmp	r1, #15
 80005b4:	f00c 0c01 	and.w	ip, ip, #1
 80005b8:	ea41 0c0c 	orr.w	ip, r1, ip
 80005bc:	f8c7 c004 	str.w	ip, [r7, #4]
 80005c0:	f8c0 e004 	str.w	lr, [r0, #4]
 80005c4:	f8c0 e008 	str.w	lr, [r0, #8]
 80005c8:	f200 80e6 	bhi.w	8000798 <_malloc_r+0x538>
 80005cc:	f240 537c 	movw	r3, #1404	; 0x57c
 80005d0:	f8da 102c 	ldr.w	r1, [sl, #44]	; 0x2c
 80005d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005d8:	68af      	ldr	r7, [r5, #8]
 80005da:	428a      	cmp	r2, r1
 80005dc:	f8da 1030 	ldr.w	r1, [sl, #48]	; 0x30
 80005e0:	bf88      	it	hi
 80005e2:	62da      	strhi	r2, [r3, #44]	; 0x2c
 80005e4:	f240 537c 	movw	r3, #1404	; 0x57c
 80005e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005ec:	428a      	cmp	r2, r1
 80005ee:	bf88      	it	hi
 80005f0:	631a      	strhi	r2, [r3, #48]	; 0x30
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f023 0303 	bic.w	r3, r3, #3
 80005f8:	429c      	cmp	r4, r3
 80005fa:	ebc4 0203 	rsb	r2, r4, r3
 80005fe:	bf94      	ite	ls
 8000600:	2300      	movls	r3, #0
 8000602:	2301      	movhi	r3, #1
 8000604:	2a0f      	cmp	r2, #15
 8000606:	bfd8      	it	le
 8000608:	f043 0301 	orrle.w	r3, r3, #1
 800060c:	b193      	cbz	r3, 8000634 <_malloc_r+0x3d4>
 800060e:	4630      	mov	r0, r6
 8000610:	2700      	movs	r7, #0
 8000612:	f001 f9bf 	bl	8001994 <__malloc_unlock>
 8000616:	e658      	b.n	80002ca <_malloc_r+0x6a>
 8000618:	18fb      	adds	r3, r7, r3
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	68b9      	ldr	r1, [r7, #8]
 800061e:	4630      	mov	r0, r6
 8000620:	685c      	ldr	r4, [r3, #4]
 8000622:	3708      	adds	r7, #8
 8000624:	60ca      	str	r2, [r1, #12]
 8000626:	f044 0401 	orr.w	r4, r4, #1
 800062a:	6091      	str	r1, [r2, #8]
 800062c:	605c      	str	r4, [r3, #4]
 800062e:	f001 f9b1 	bl	8001994 <__malloc_unlock>
 8000632:	e64a      	b.n	80002ca <_malloc_r+0x6a>
 8000634:	193b      	adds	r3, r7, r4
 8000636:	f042 0201 	orr.w	r2, r2, #1
 800063a:	f044 0401 	orr.w	r4, r4, #1
 800063e:	4630      	mov	r0, r6
 8000640:	607c      	str	r4, [r7, #4]
 8000642:	3708      	adds	r7, #8
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	60ab      	str	r3, [r5, #8]
 8000648:	f001 f9a4 	bl	8001994 <__malloc_unlock>
 800064c:	e63d      	b.n	80002ca <_malloc_r+0x6a>
 800064e:	ea4f 235c 	mov.w	r3, ip, lsr #9
 8000652:	2b04      	cmp	r3, #4
 8000654:	d95c      	bls.n	8000710 <_malloc_r+0x4b0>
 8000656:	2b14      	cmp	r3, #20
 8000658:	d878      	bhi.n	800074c <_malloc_r+0x4ec>
 800065a:	335b      	adds	r3, #91	; 0x5b
 800065c:	00d8      	lsls	r0, r3, #3
 800065e:	1828      	adds	r0, r5, r0
 8000660:	f240 08f4 	movw	r8, #244	; 0xf4
 8000664:	f2c2 0800 	movt	r8, #8192	; 0x2000
 8000668:	6881      	ldr	r1, [r0, #8]
 800066a:	4281      	cmp	r1, r0
 800066c:	d103      	bne.n	8000676 <_malloc_r+0x416>
 800066e:	e060      	b.n	8000732 <_malloc_r+0x4d2>
 8000670:	6889      	ldr	r1, [r1, #8]
 8000672:	4288      	cmp	r0, r1
 8000674:	d004      	beq.n	8000680 <_malloc_r+0x420>
 8000676:	684b      	ldr	r3, [r1, #4]
 8000678:	f023 0303 	bic.w	r3, r3, #3
 800067c:	459c      	cmp	ip, r3
 800067e:	d3f7      	bcc.n	8000670 <_malloc_r+0x410>
 8000680:	68c8      	ldr	r0, [r1, #12]
 8000682:	686b      	ldr	r3, [r5, #4]
 8000684:	60f8      	str	r0, [r7, #12]
 8000686:	60b9      	str	r1, [r7, #8]
 8000688:	60cf      	str	r7, [r1, #12]
 800068a:	6087      	str	r7, [r0, #8]
 800068c:	e682      	b.n	8000394 <_malloc_r+0x134>
 800068e:	1939      	adds	r1, r7, r4
 8000690:	f043 0501 	orr.w	r5, r3, #1
 8000694:	6141      	str	r1, [r0, #20]
 8000696:	f044 0401 	orr.w	r4, r4, #1
 800069a:	6101      	str	r1, [r0, #16]
 800069c:	4630      	mov	r0, r6
 800069e:	607c      	str	r4, [r7, #4]
 80006a0:	3708      	adds	r7, #8
 80006a2:	60ca      	str	r2, [r1, #12]
 80006a4:	608a      	str	r2, [r1, #8]
 80006a6:	604d      	str	r5, [r1, #4]
 80006a8:	50cb      	str	r3, [r1, r3]
 80006aa:	f001 f973 	bl	8001994 <__malloc_unlock>
 80006ae:	e60c      	b.n	80002ca <_malloc_r+0x6a>
 80006b0:	f108 0801 	add.w	r8, r8, #1
 80006b4:	f10c 0c08 	add.w	ip, ip, #8
 80006b8:	f018 0f03 	tst.w	r8, #3
 80006bc:	f47f ae7e 	bne.w	80003bc <_malloc_r+0x15c>
 80006c0:	464b      	mov	r3, r9
 80006c2:	f01e 0f03 	tst.w	lr, #3
 80006c6:	f1a3 0108 	sub.w	r1, r3, #8
 80006ca:	f10e 3eff 	add.w	lr, lr, #4294967295
 80006ce:	d079      	beq.n	80007c4 <_malloc_r+0x564>
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	428b      	cmp	r3, r1
 80006d4:	d0f5      	beq.n	80006c2 <_malloc_r+0x462>
 80006d6:	686b      	ldr	r3, [r5, #4]
 80006d8:	007f      	lsls	r7, r7, #1
 80006da:	429f      	cmp	r7, r3
 80006dc:	f63f aee0 	bhi.w	80004a0 <_malloc_r+0x240>
 80006e0:	2f00      	cmp	r7, #0
 80006e2:	f43f aedd 	beq.w	80004a0 <_malloc_r+0x240>
 80006e6:	421f      	tst	r7, r3
 80006e8:	d071      	beq.n	80007ce <_malloc_r+0x56e>
 80006ea:	46c6      	mov	lr, r8
 80006ec:	e662      	b.n	80003b4 <_malloc_r+0x154>
 80006ee:	f103 0208 	add.w	r2, r3, #8
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	bf08      	it	eq
 80006f8:	f10e 0e02 	addeq.w	lr, lr, #2
 80006fc:	f43f ae18 	beq.w	8000330 <_malloc_r+0xd0>
 8000700:	e5d2      	b.n	80002a8 <_malloc_r+0x48>
 8000702:	4607      	mov	r7, r0
 8000704:	1843      	adds	r3, r0, r1
 8000706:	68c2      	ldr	r2, [r0, #12]
 8000708:	4630      	mov	r0, r6
 800070a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800070e:	e5d4      	b.n	80002ba <_malloc_r+0x5a>
 8000710:	ea4f 139c 	mov.w	r3, ip, lsr #6
 8000714:	3338      	adds	r3, #56	; 0x38
 8000716:	00d8      	lsls	r0, r3, #3
 8000718:	e7a1      	b.n	800065e <_malloc_r+0x3fe>
 800071a:	42af      	cmp	r7, r5
 800071c:	f240 02f4 	movw	r2, #244	; 0xf4
 8000720:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000724:	f43f aef3 	beq.w	800050e <_malloc_r+0x2ae>
 8000728:	6897      	ldr	r7, [r2, #8]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	f023 0303 	bic.w	r3, r3, #3
 8000730:	e762      	b.n	80005f8 <_malloc_r+0x398>
 8000732:	f04f 0901 	mov.w	r9, #1
 8000736:	f8d8 c004 	ldr.w	ip, [r8, #4]
 800073a:	109b      	asrs	r3, r3, #2
 800073c:	4608      	mov	r0, r1
 800073e:	fa09 f303 	lsl.w	r3, r9, r3
 8000742:	ea43 030c 	orr.w	r3, r3, ip
 8000746:	f8c8 3004 	str.w	r3, [r8, #4]
 800074a:	e79b      	b.n	8000684 <_malloc_r+0x424>
 800074c:	2b54      	cmp	r3, #84	; 0x54
 800074e:	d80f      	bhi.n	8000770 <_malloc_r+0x510>
 8000750:	ea4f 331c 	mov.w	r3, ip, lsr #12
 8000754:	336e      	adds	r3, #110	; 0x6e
 8000756:	00d8      	lsls	r0, r3, #3
 8000758:	e781      	b.n	800065e <_malloc_r+0x3fe>
 800075a:	2301      	movs	r3, #1
 800075c:	464f      	mov	r7, r9
 800075e:	f8c9 3004 	str.w	r3, [r9, #4]
 8000762:	2300      	movs	r3, #0
 8000764:	e748      	b.n	80005f8 <_malloc_r+0x398>
 8000766:	68af      	ldr	r7, [r5, #8]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f023 0303 	bic.w	r3, r3, #3
 800076e:	e743      	b.n	80005f8 <_malloc_r+0x398>
 8000770:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8000774:	d81d      	bhi.n	80007b2 <_malloc_r+0x552>
 8000776:	ea4f 33dc 	mov.w	r3, ip, lsr #15
 800077a:	3377      	adds	r3, #119	; 0x77
 800077c:	00d8      	lsls	r0, r3, #3
 800077e:	e76e      	b.n	800065e <_malloc_r+0x3fe>
 8000780:	0519      	lsls	r1, r3, #20
 8000782:	0d09      	lsrs	r1, r1, #20
 8000784:	2900      	cmp	r1, #0
 8000786:	f47f aeca 	bne.w	800051e <_malloc_r+0x2be>
 800078a:	68ab      	ldr	r3, [r5, #8]
 800078c:	eb0b 0108 	add.w	r1, fp, r8
 8000790:	f041 0101 	orr.w	r1, r1, #1
 8000794:	6059      	str	r1, [r3, #4]
 8000796:	e719      	b.n	80005cc <_malloc_r+0x36c>
 8000798:	4630      	mov	r0, r6
 800079a:	f107 0108 	add.w	r1, r7, #8
 800079e:	9301      	str	r3, [sp, #4]
 80007a0:	f000 f986 	bl	8000ab0 <_free_r>
 80007a4:	9b01      	ldr	r3, [sp, #4]
 80007a6:	685a      	ldr	r2, [r3, #4]
 80007a8:	e710      	b.n	80005cc <_malloc_r+0x36c>
 80007aa:	2101      	movs	r1, #1
 80007ac:	f04f 0b00 	mov.w	fp, #0
 80007b0:	e6e3      	b.n	800057a <_malloc_r+0x31a>
 80007b2:	f240 5154 	movw	r1, #1364	; 0x554
 80007b6:	428b      	cmp	r3, r1
 80007b8:	d80d      	bhi.n	80007d6 <_malloc_r+0x576>
 80007ba:	ea4f 439c 	mov.w	r3, ip, lsr #18
 80007be:	337c      	adds	r3, #124	; 0x7c
 80007c0:	00d8      	lsls	r0, r3, #3
 80007c2:	e74c      	b.n	800065e <_malloc_r+0x3fe>
 80007c4:	686b      	ldr	r3, [r5, #4]
 80007c6:	ea23 0307 	bic.w	r3, r3, r7
 80007ca:	606b      	str	r3, [r5, #4]
 80007cc:	e784      	b.n	80006d8 <_malloc_r+0x478>
 80007ce:	007f      	lsls	r7, r7, #1
 80007d0:	f108 0804 	add.w	r8, r8, #4
 80007d4:	e787      	b.n	80006e6 <_malloc_r+0x486>
 80007d6:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 80007da:	237e      	movs	r3, #126	; 0x7e
 80007dc:	e73f      	b.n	800065e <_malloc_r+0x3fe>
 80007de:	bf00      	nop

080007e0 <memcpy>:
 80007e0:	2a03      	cmp	r2, #3
 80007e2:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 80007e6:	d809      	bhi.n	80007fc <memcpy+0x1c>
 80007e8:	b12a      	cbz	r2, 80007f6 <memcpy+0x16>
 80007ea:	2300      	movs	r3, #0
 80007ec:	5ccc      	ldrb	r4, [r1, r3]
 80007ee:	54c4      	strb	r4, [r0, r3]
 80007f0:	3301      	adds	r3, #1
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d1fa      	bne.n	80007ec <memcpy+0xc>
 80007f6:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80007fa:	4770      	bx	lr
 80007fc:	0785      	lsls	r5, r0, #30
 80007fe:	4402      	add	r2, r0
 8000800:	4603      	mov	r3, r0
 8000802:	d005      	beq.n	8000810 <memcpy+0x30>
 8000804:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000808:	f803 4b01 	strb.w	r4, [r3], #1
 800080c:	079c      	lsls	r4, r3, #30
 800080e:	d1f9      	bne.n	8000804 <memcpy+0x24>
 8000810:	f011 0503 	ands.w	r5, r1, #3
 8000814:	d042      	beq.n	800089c <memcpy+0xbc>
 8000816:	1ad4      	subs	r4, r2, r3
 8000818:	426e      	negs	r6, r5
 800081a:	2c03      	cmp	r4, #3
 800081c:	598f      	ldr	r7, [r1, r6]
 800081e:	dd12      	ble.n	8000846 <memcpy+0x66>
 8000820:	f1c5 0c04 	rsb	ip, r5, #4
 8000824:	00ed      	lsls	r5, r5, #3
 8000826:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800082a:	3104      	adds	r1, #4
 800082c:	fa27 f805 	lsr.w	r8, r7, r5
 8000830:	598c      	ldr	r4, [r1, r6]
 8000832:	4627      	mov	r7, r4
 8000834:	fa04 f40c 	lsl.w	r4, r4, ip
 8000838:	ea44 0408 	orr.w	r4, r4, r8
 800083c:	f843 4b04 	str.w	r4, [r3], #4
 8000840:	1ad4      	subs	r4, r2, r3
 8000842:	2c03      	cmp	r4, #3
 8000844:	dcf1      	bgt.n	800082a <memcpy+0x4a>
 8000846:	429a      	cmp	r2, r3
 8000848:	d9d5      	bls.n	80007f6 <memcpy+0x16>
 800084a:	2200      	movs	r2, #0
 800084c:	5c8d      	ldrb	r5, [r1, r2]
 800084e:	549d      	strb	r5, [r3, r2]
 8000850:	3201      	adds	r2, #1
 8000852:	42a2      	cmp	r2, r4
 8000854:	d1fa      	bne.n	800084c <memcpy+0x6c>
 8000856:	e7ce      	b.n	80007f6 <memcpy+0x16>
 8000858:	680c      	ldr	r4, [r1, #0]
 800085a:	601c      	str	r4, [r3, #0]
 800085c:	684c      	ldr	r4, [r1, #4]
 800085e:	605c      	str	r4, [r3, #4]
 8000860:	688c      	ldr	r4, [r1, #8]
 8000862:	609c      	str	r4, [r3, #8]
 8000864:	68cc      	ldr	r4, [r1, #12]
 8000866:	60dc      	str	r4, [r3, #12]
 8000868:	690c      	ldr	r4, [r1, #16]
 800086a:	611c      	str	r4, [r3, #16]
 800086c:	694c      	ldr	r4, [r1, #20]
 800086e:	615c      	str	r4, [r3, #20]
 8000870:	698c      	ldr	r4, [r1, #24]
 8000872:	619c      	str	r4, [r3, #24]
 8000874:	69cc      	ldr	r4, [r1, #28]
 8000876:	61dc      	str	r4, [r3, #28]
 8000878:	6a0c      	ldr	r4, [r1, #32]
 800087a:	621c      	str	r4, [r3, #32]
 800087c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800087e:	625c      	str	r4, [r3, #36]	; 0x24
 8000880:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8000882:	629c      	str	r4, [r3, #40]	; 0x28
 8000884:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8000886:	62dc      	str	r4, [r3, #44]	; 0x2c
 8000888:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 800088a:	631c      	str	r4, [r3, #48]	; 0x30
 800088c:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800088e:	635c      	str	r4, [r3, #52]	; 0x34
 8000890:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8000892:	639c      	str	r4, [r3, #56]	; 0x38
 8000894:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8000896:	3140      	adds	r1, #64	; 0x40
 8000898:	63dc      	str	r4, [r3, #60]	; 0x3c
 800089a:	3340      	adds	r3, #64	; 0x40
 800089c:	1ad4      	subs	r4, r2, r3
 800089e:	2c3f      	cmp	r4, #63	; 0x3f
 80008a0:	dcda      	bgt.n	8000858 <memcpy+0x78>
 80008a2:	e00a      	b.n	80008ba <memcpy+0xda>
 80008a4:	680c      	ldr	r4, [r1, #0]
 80008a6:	601c      	str	r4, [r3, #0]
 80008a8:	684c      	ldr	r4, [r1, #4]
 80008aa:	605c      	str	r4, [r3, #4]
 80008ac:	688c      	ldr	r4, [r1, #8]
 80008ae:	609c      	str	r4, [r3, #8]
 80008b0:	68cc      	ldr	r4, [r1, #12]
 80008b2:	3110      	adds	r1, #16
 80008b4:	60dc      	str	r4, [r3, #12]
 80008b6:	3310      	adds	r3, #16
 80008b8:	1ad4      	subs	r4, r2, r3
 80008ba:	2c0f      	cmp	r4, #15
 80008bc:	dcf2      	bgt.n	80008a4 <memcpy+0xc4>
 80008be:	e004      	b.n	80008ca <memcpy+0xea>
 80008c0:	f851 4b04 	ldr.w	r4, [r1], #4
 80008c4:	f843 4b04 	str.w	r4, [r3], #4
 80008c8:	1ad4      	subs	r4, r2, r3
 80008ca:	2c03      	cmp	r4, #3
 80008cc:	dcf8      	bgt.n	80008c0 <memcpy+0xe0>
 80008ce:	e7ba      	b.n	8000846 <memcpy+0x66>

080008d0 <memset>:
 80008d0:	2a03      	cmp	r2, #3
 80008d2:	b2c9      	uxtb	r1, r1
 80008d4:	b470      	push	{r4, r5, r6}
 80008d6:	d807      	bhi.n	80008e8 <memset+0x18>
 80008d8:	b122      	cbz	r2, 80008e4 <memset+0x14>
 80008da:	2300      	movs	r3, #0
 80008dc:	54c1      	strb	r1, [r0, r3]
 80008de:	3301      	adds	r3, #1
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d1fb      	bne.n	80008dc <memset+0xc>
 80008e4:	bc70      	pop	{r4, r5, r6}
 80008e6:	4770      	bx	lr
 80008e8:	0785      	lsls	r5, r0, #30
 80008ea:	4402      	add	r2, r0
 80008ec:	4603      	mov	r3, r0
 80008ee:	d003      	beq.n	80008f8 <memset+0x28>
 80008f0:	f803 1b01 	strb.w	r1, [r3], #1
 80008f4:	079c      	lsls	r4, r3, #30
 80008f6:	d1fb      	bne.n	80008f0 <memset+0x20>
 80008f8:	020c      	lsls	r4, r1, #8
 80008fa:	1ad5      	subs	r5, r2, r3
 80008fc:	1864      	adds	r4, r4, r1
 80008fe:	0426      	lsls	r6, r4, #16
 8000900:	2d3f      	cmp	r5, #63	; 0x3f
 8000902:	4434      	add	r4, r6
 8000904:	dd1a      	ble.n	800093c <memset+0x6c>
 8000906:	601c      	str	r4, [r3, #0]
 8000908:	605c      	str	r4, [r3, #4]
 800090a:	609c      	str	r4, [r3, #8]
 800090c:	60dc      	str	r4, [r3, #12]
 800090e:	611c      	str	r4, [r3, #16]
 8000910:	615c      	str	r4, [r3, #20]
 8000912:	619c      	str	r4, [r3, #24]
 8000914:	61dc      	str	r4, [r3, #28]
 8000916:	621c      	str	r4, [r3, #32]
 8000918:	625c      	str	r4, [r3, #36]	; 0x24
 800091a:	629c      	str	r4, [r3, #40]	; 0x28
 800091c:	62dc      	str	r4, [r3, #44]	; 0x2c
 800091e:	631c      	str	r4, [r3, #48]	; 0x30
 8000920:	635c      	str	r4, [r3, #52]	; 0x34
 8000922:	639c      	str	r4, [r3, #56]	; 0x38
 8000924:	63dc      	str	r4, [r3, #60]	; 0x3c
 8000926:	3340      	adds	r3, #64	; 0x40
 8000928:	1ad5      	subs	r5, r2, r3
 800092a:	2d3f      	cmp	r5, #63	; 0x3f
 800092c:	dceb      	bgt.n	8000906 <memset+0x36>
 800092e:	e005      	b.n	800093c <memset+0x6c>
 8000930:	601c      	str	r4, [r3, #0]
 8000932:	605c      	str	r4, [r3, #4]
 8000934:	609c      	str	r4, [r3, #8]
 8000936:	60dc      	str	r4, [r3, #12]
 8000938:	3310      	adds	r3, #16
 800093a:	1ad5      	subs	r5, r2, r3
 800093c:	2d0f      	cmp	r5, #15
 800093e:	dcf7      	bgt.n	8000930 <memset+0x60>
 8000940:	e002      	b.n	8000948 <memset+0x78>
 8000942:	f843 4b04 	str.w	r4, [r3], #4
 8000946:	1ad5      	subs	r5, r2, r3
 8000948:	2d03      	cmp	r5, #3
 800094a:	dcfa      	bgt.n	8000942 <memset+0x72>
 800094c:	4293      	cmp	r3, r2
 800094e:	d2c9      	bcs.n	80008e4 <memset+0x14>
 8000950:	f803 1b01 	strb.w	r1, [r3], #1
 8000954:	4293      	cmp	r3, r2
 8000956:	d1fb      	bne.n	8000950 <memset+0x80>
 8000958:	e7c4      	b.n	80008e4 <memset+0x14>
 800095a:	bf00      	nop

0800095c <strncpy>:
 800095c:	ea41 0300 	orr.w	r3, r1, r0
 8000960:	f013 0f03 	tst.w	r3, #3
 8000964:	4603      	mov	r3, r0
 8000966:	b470      	push	{r4, r5, r6}
 8000968:	bf14      	ite	ne
 800096a:	2400      	movne	r4, #0
 800096c:	2401      	moveq	r4, #1
 800096e:	2a03      	cmp	r2, #3
 8000970:	bf94      	ite	ls
 8000972:	2400      	movls	r4, #0
 8000974:	f004 0401 	andhi.w	r4, r4, #1
 8000978:	460d      	mov	r5, r1
 800097a:	b9c4      	cbnz	r4, 80009ae <strncpy+0x52>
 800097c:	b1aa      	cbz	r2, 80009aa <strncpy+0x4e>
 800097e:	780c      	ldrb	r4, [r1, #0]
 8000980:	3a01      	subs	r2, #1
 8000982:	f803 4b01 	strb.w	r4, [r3], #1
 8000986:	b14c      	cbz	r4, 800099c <strncpy+0x40>
 8000988:	461c      	mov	r4, r3
 800098a:	b172      	cbz	r2, 80009aa <strncpy+0x4e>
 800098c:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 8000990:	3a01      	subs	r2, #1
 8000992:	f804 6b01 	strb.w	r6, [r4], #1
 8000996:	4623      	mov	r3, r4
 8000998:	2e00      	cmp	r6, #0
 800099a:	d1f6      	bne.n	800098a <strncpy+0x2e>
 800099c:	b12a      	cbz	r2, 80009aa <strncpy+0x4e>
 800099e:	189a      	adds	r2, r3, r2
 80009a0:	2100      	movs	r1, #0
 80009a2:	f803 1b01 	strb.w	r1, [r3], #1
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d1fb      	bne.n	80009a2 <strncpy+0x46>
 80009aa:	bc70      	pop	{r4, r5, r6}
 80009ac:	4770      	bx	lr
 80009ae:	4629      	mov	r1, r5
 80009b0:	f855 4b04 	ldr.w	r4, [r5], #4
 80009b4:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
 80009b8:	ea26 0604 	bic.w	r6, r6, r4
 80009bc:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 80009c0:	d1dc      	bne.n	800097c <strncpy+0x20>
 80009c2:	3a04      	subs	r2, #4
 80009c4:	f843 4b04 	str.w	r4, [r3], #4
 80009c8:	2a03      	cmp	r2, #3
 80009ca:	d8f0      	bhi.n	80009ae <strncpy+0x52>
 80009cc:	4629      	mov	r1, r5
 80009ce:	e7d5      	b.n	800097c <strncpy+0x20>

080009d0 <atexit>:
 80009d0:	4601      	mov	r1, r0
 80009d2:	2000      	movs	r0, #0
 80009d4:	4602      	mov	r2, r0
 80009d6:	4603      	mov	r3, r0
 80009d8:	f000 b932 	b.w	8000c40 <__register_exitproc>

080009dc <__libc_fini_array>:
 80009dc:	b538      	push	{r3, r4, r5, lr}
 80009de:	f644 6454 	movw	r4, #20052	; 0x4e54
 80009e2:	f644 6550 	movw	r5, #20048	; 0x4e50
 80009e6:	f6c0 0400 	movt	r4, #2048	; 0x800
 80009ea:	f6c0 0500 	movt	r5, #2048	; 0x800
 80009ee:	1b64      	subs	r4, r4, r5
 80009f0:	10a4      	asrs	r4, r4, #2
 80009f2:	d006      	beq.n	8000a02 <__libc_fini_array+0x26>
 80009f4:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 80009f8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80009fc:	4798      	blx	r3
 80009fe:	3c01      	subs	r4, #1
 8000a00:	d1fa      	bne.n	80009f8 <__libc_fini_array+0x1c>
 8000a02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a06:	f004 ba19 	b.w	8004e3c <_fini>
 8000a0a:	bf00      	nop

08000a0c <_malloc_trim_r>:
 8000a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a0e:	f240 04f4 	movw	r4, #244	; 0xf4
 8000a12:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000a16:	460f      	mov	r7, r1
 8000a18:	4605      	mov	r5, r0
 8000a1a:	f000 ffb1 	bl	8001980 <__malloc_lock>
 8000a1e:	68a3      	ldr	r3, [r4, #8]
 8000a20:	4628      	mov	r0, r5
 8000a22:	685e      	ldr	r6, [r3, #4]
 8000a24:	f026 0603 	bic.w	r6, r6, #3
 8000a28:	f506 637e 	add.w	r3, r6, #4064	; 0xfe0
 8000a2c:	330f      	adds	r3, #15
 8000a2e:	1bdf      	subs	r7, r3, r7
 8000a30:	0b3f      	lsrs	r7, r7, #12
 8000a32:	3f01      	subs	r7, #1
 8000a34:	033f      	lsls	r7, r7, #12
 8000a36:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8000a3a:	db07      	blt.n	8000a4c <_malloc_trim_r+0x40>
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	f000 ff57 	bl	80018f0 <_sbrk_r>
 8000a42:	68a3      	ldr	r3, [r4, #8]
 8000a44:	199b      	adds	r3, r3, r6
 8000a46:	4298      	cmp	r0, r3
 8000a48:	4628      	mov	r0, r5
 8000a4a:	d003      	beq.n	8000a54 <_malloc_trim_r+0x48>
 8000a4c:	f000 ffa2 	bl	8001994 <__malloc_unlock>
 8000a50:	2000      	movs	r0, #0
 8000a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a54:	4279      	negs	r1, r7
 8000a56:	f000 ff4b 	bl	80018f0 <_sbrk_r>
 8000a5a:	3001      	adds	r0, #1
 8000a5c:	d010      	beq.n	8000a80 <_malloc_trim_r+0x74>
 8000a5e:	f240 5380 	movw	r3, #1408	; 0x580
 8000a62:	68a1      	ldr	r1, [r4, #8]
 8000a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a68:	1bf6      	subs	r6, r6, r7
 8000a6a:	4628      	mov	r0, r5
 8000a6c:	f046 0601 	orr.w	r6, r6, #1
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	604e      	str	r6, [r1, #4]
 8000a74:	1bd7      	subs	r7, r2, r7
 8000a76:	601f      	str	r7, [r3, #0]
 8000a78:	f000 ff8c 	bl	8001994 <__malloc_unlock>
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a80:	2100      	movs	r1, #0
 8000a82:	4628      	mov	r0, r5
 8000a84:	f000 ff34 	bl	80018f0 <_sbrk_r>
 8000a88:	68a3      	ldr	r3, [r4, #8]
 8000a8a:	1ac2      	subs	r2, r0, r3
 8000a8c:	2a0f      	cmp	r2, #15
 8000a8e:	dd0d      	ble.n	8000aac <_malloc_trim_r+0xa0>
 8000a90:	f240 44fc 	movw	r4, #1276	; 0x4fc
 8000a94:	f240 5180 	movw	r1, #1408	; 0x580
 8000a98:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000a9c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000aa0:	f042 0201 	orr.w	r2, r2, #1
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	6823      	ldr	r3, [r4, #0]
 8000aa8:	1ac0      	subs	r0, r0, r3
 8000aaa:	6008      	str	r0, [r1, #0]
 8000aac:	4628      	mov	r0, r5
 8000aae:	e7cd      	b.n	8000a4c <_malloc_trim_r+0x40>

08000ab0 <_free_r>:
 8000ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ab2:	460d      	mov	r5, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	2900      	cmp	r1, #0
 8000ab8:	d075      	beq.n	8000ba6 <_free_r+0xf6>
 8000aba:	f000 ff61 	bl	8001980 <__malloc_lock>
 8000abe:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8000ac2:	f240 00f4 	movw	r0, #244	; 0xf4
 8000ac6:	f1a5 0108 	sub.w	r1, r5, #8
 8000aca:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000ace:	f026 0301 	bic.w	r3, r6, #1
 8000ad2:	18ca      	adds	r2, r1, r3
 8000ad4:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8000ad8:	6857      	ldr	r7, [r2, #4]
 8000ada:	4594      	cmp	ip, r2
 8000adc:	f027 0703 	bic.w	r7, r7, #3
 8000ae0:	d07e      	beq.n	8000be0 <_free_r+0x130>
 8000ae2:	f016 0601 	ands.w	r6, r6, #1
 8000ae6:	6057      	str	r7, [r2, #4]
 8000ae8:	d04d      	beq.n	8000b86 <_free_r+0xd6>
 8000aea:	2600      	movs	r6, #0
 8000aec:	19d5      	adds	r5, r2, r7
 8000aee:	686d      	ldr	r5, [r5, #4]
 8000af0:	f015 0f01 	tst.w	r5, #1
 8000af4:	d106      	bne.n	8000b04 <_free_r+0x54>
 8000af6:	19db      	adds	r3, r3, r7
 8000af8:	6895      	ldr	r5, [r2, #8]
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	d064      	beq.n	8000bc8 <_free_r+0x118>
 8000afe:	68d2      	ldr	r2, [r2, #12]
 8000b00:	60ea      	str	r2, [r5, #12]
 8000b02:	6095      	str	r5, [r2, #8]
 8000b04:	f043 0201 	orr.w	r2, r3, #1
 8000b08:	50cb      	str	r3, [r1, r3]
 8000b0a:	604a      	str	r2, [r1, #4]
 8000b0c:	2e00      	cmp	r6, #0
 8000b0e:	d135      	bne.n	8000b7c <_free_r+0xcc>
 8000b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b14:	d348      	bcc.n	8000ba8 <_free_r+0xf8>
 8000b16:	099e      	lsrs	r6, r3, #6
 8000b18:	0a5a      	lsrs	r2, r3, #9
 8000b1a:	3638      	adds	r6, #56	; 0x38
 8000b1c:	00f5      	lsls	r5, r6, #3
 8000b1e:	2a04      	cmp	r2, #4
 8000b20:	d916      	bls.n	8000b50 <_free_r+0xa0>
 8000b22:	f102 065b 	add.w	r6, r2, #91	; 0x5b
 8000b26:	00f5      	lsls	r5, r6, #3
 8000b28:	2a14      	cmp	r2, #20
 8000b2a:	d911      	bls.n	8000b50 <_free_r+0xa0>
 8000b2c:	0b1e      	lsrs	r6, r3, #12
 8000b2e:	366e      	adds	r6, #110	; 0x6e
 8000b30:	00f5      	lsls	r5, r6, #3
 8000b32:	2a54      	cmp	r2, #84	; 0x54
 8000b34:	d90c      	bls.n	8000b50 <_free_r+0xa0>
 8000b36:	0bde      	lsrs	r6, r3, #15
 8000b38:	3677      	adds	r6, #119	; 0x77
 8000b3a:	00f5      	lsls	r5, r6, #3
 8000b3c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8000b40:	d906      	bls.n	8000b50 <_free_r+0xa0>
 8000b42:	f240 5554 	movw	r5, #1364	; 0x554
 8000b46:	42aa      	cmp	r2, r5
 8000b48:	d874      	bhi.n	8000c34 <_free_r+0x184>
 8000b4a:	0c9e      	lsrs	r6, r3, #18
 8000b4c:	367c      	adds	r6, #124	; 0x7c
 8000b4e:	00f5      	lsls	r5, r6, #3
 8000b50:	1940      	adds	r0, r0, r5
 8000b52:	f240 05f4 	movw	r5, #244	; 0xf4
 8000b56:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8000b5a:	6882      	ldr	r2, [r0, #8]
 8000b5c:	4282      	cmp	r2, r0
 8000b5e:	d103      	bne.n	8000b68 <_free_r+0xb8>
 8000b60:	e05f      	b.n	8000c22 <_free_r+0x172>
 8000b62:	6892      	ldr	r2, [r2, #8]
 8000b64:	4290      	cmp	r0, r2
 8000b66:	d004      	beq.n	8000b72 <_free_r+0xc2>
 8000b68:	6855      	ldr	r5, [r2, #4]
 8000b6a:	f025 0503 	bic.w	r5, r5, #3
 8000b6e:	42ab      	cmp	r3, r5
 8000b70:	d3f7      	bcc.n	8000b62 <_free_r+0xb2>
 8000b72:	68d3      	ldr	r3, [r2, #12]
 8000b74:	60cb      	str	r3, [r1, #12]
 8000b76:	608a      	str	r2, [r1, #8]
 8000b78:	60d1      	str	r1, [r2, #12]
 8000b7a:	6099      	str	r1, [r3, #8]
 8000b7c:	4620      	mov	r0, r4
 8000b7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8000b82:	f000 bf07 	b.w	8001994 <__malloc_unlock>
 8000b86:	f855 5c08 	ldr.w	r5, [r5, #-8]
 8000b8a:	f100 0c08 	add.w	ip, r0, #8
 8000b8e:	1b49      	subs	r1, r1, r5
 8000b90:	195b      	adds	r3, r3, r5
 8000b92:	688d      	ldr	r5, [r1, #8]
 8000b94:	4565      	cmp	r5, ip
 8000b96:	d042      	beq.n	8000c1e <_free_r+0x16e>
 8000b98:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8000b9c:	f8c5 c00c 	str.w	ip, [r5, #12]
 8000ba0:	f8cc 5008 	str.w	r5, [ip, #8]
 8000ba4:	e7a2      	b.n	8000aec <_free_r+0x3c>
 8000ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ba8:	08db      	lsrs	r3, r3, #3
 8000baa:	2501      	movs	r5, #1
 8000bac:	6846      	ldr	r6, [r0, #4]
 8000bae:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8000bb2:	109b      	asrs	r3, r3, #2
 8000bb4:	fa05 f303 	lsl.w	r3, r5, r3
 8000bb8:	60ca      	str	r2, [r1, #12]
 8000bba:	6895      	ldr	r5, [r2, #8]
 8000bbc:	4333      	orrs	r3, r6
 8000bbe:	6043      	str	r3, [r0, #4]
 8000bc0:	608d      	str	r5, [r1, #8]
 8000bc2:	60e9      	str	r1, [r5, #12]
 8000bc4:	6091      	str	r1, [r2, #8]
 8000bc6:	e7d9      	b.n	8000b7c <_free_r+0xcc>
 8000bc8:	4f1c      	ldr	r7, [pc, #112]	; (8000c3c <_free_r+0x18c>)
 8000bca:	42bd      	cmp	r5, r7
 8000bcc:	d197      	bne.n	8000afe <_free_r+0x4e>
 8000bce:	6141      	str	r1, [r0, #20]
 8000bd0:	f043 0201 	orr.w	r2, r3, #1
 8000bd4:	6101      	str	r1, [r0, #16]
 8000bd6:	60cd      	str	r5, [r1, #12]
 8000bd8:	608d      	str	r5, [r1, #8]
 8000bda:	604a      	str	r2, [r1, #4]
 8000bdc:	50cb      	str	r3, [r1, r3]
 8000bde:	e7cd      	b.n	8000b7c <_free_r+0xcc>
 8000be0:	07f2      	lsls	r2, r6, #31
 8000be2:	443b      	add	r3, r7
 8000be4:	d407      	bmi.n	8000bf6 <_free_r+0x146>
 8000be6:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8000bea:	1a89      	subs	r1, r1, r2
 8000bec:	189b      	adds	r3, r3, r2
 8000bee:	688d      	ldr	r5, [r1, #8]
 8000bf0:	68ca      	ldr	r2, [r1, #12]
 8000bf2:	60ea      	str	r2, [r5, #12]
 8000bf4:	6095      	str	r5, [r2, #8]
 8000bf6:	f240 5200 	movw	r2, #1280	; 0x500
 8000bfa:	f043 0501 	orr.w	r5, r3, #1
 8000bfe:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000c02:	604d      	str	r5, [r1, #4]
 8000c04:	6081      	str	r1, [r0, #8]
 8000c06:	6812      	ldr	r2, [r2, #0]
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d3b7      	bcc.n	8000b7c <_free_r+0xcc>
 8000c0c:	f240 537c 	movw	r3, #1404	; 0x57c
 8000c10:	4620      	mov	r0, r4
 8000c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c16:	6819      	ldr	r1, [r3, #0]
 8000c18:	f7ff fef8 	bl	8000a0c <_malloc_trim_r>
 8000c1c:	e7ae      	b.n	8000b7c <_free_r+0xcc>
 8000c1e:	2601      	movs	r6, #1
 8000c20:	e764      	b.n	8000aec <_free_r+0x3c>
 8000c22:	2701      	movs	r7, #1
 8000c24:	6868      	ldr	r0, [r5, #4]
 8000c26:	10b6      	asrs	r6, r6, #2
 8000c28:	4613      	mov	r3, r2
 8000c2a:	fa07 f606 	lsl.w	r6, r7, r6
 8000c2e:	4330      	orrs	r0, r6
 8000c30:	6068      	str	r0, [r5, #4]
 8000c32:	e79f      	b.n	8000b74 <_free_r+0xc4>
 8000c34:	f44f 757c 	mov.w	r5, #1008	; 0x3f0
 8000c38:	267e      	movs	r6, #126	; 0x7e
 8000c3a:	e789      	b.n	8000b50 <_free_r+0xa0>
 8000c3c:	200000fc 	.word	0x200000fc

08000c40 <__register_exitproc>:
 8000c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c44:	f644 54a8 	movw	r4, #19880	; 0x4da8
 8000c48:	f6c0 0400 	movt	r4, #2048	; 0x800
 8000c4c:	b084      	sub	sp, #16
 8000c4e:	4605      	mov	r5, r0
 8000c50:	6826      	ldr	r6, [r4, #0]
 8000c52:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8000c54:	2c00      	cmp	r4, #0
 8000c56:	d042      	beq.n	8000cde <__register_exitproc+0x9e>
 8000c58:	6860      	ldr	r0, [r4, #4]
 8000c5a:	281f      	cmp	r0, #31
 8000c5c:	dd1a      	ble.n	8000c94 <__register_exitproc+0x54>
 8000c5e:	f240 2041 	movw	r0, #577	; 0x241
 8000c62:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000c66:	b920      	cbnz	r0, 8000c72 <__register_exitproc+0x32>
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	b004      	add	sp, #16
 8000c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c72:	208c      	movs	r0, #140	; 0x8c
 8000c74:	9103      	str	r1, [sp, #12]
 8000c76:	9202      	str	r2, [sp, #8]
 8000c78:	9301      	str	r3, [sp, #4]
 8000c7a:	f7ff fae1 	bl	8000240 <malloc>
 8000c7e:	9903      	ldr	r1, [sp, #12]
 8000c80:	9a02      	ldr	r2, [sp, #8]
 8000c82:	9b01      	ldr	r3, [sp, #4]
 8000c84:	4604      	mov	r4, r0
 8000c86:	2800      	cmp	r0, #0
 8000c88:	d0ee      	beq.n	8000c68 <__register_exitproc+0x28>
 8000c8a:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	e884 0081 	stmia.w	r4, {r0, r7}
 8000c92:	64b4      	str	r4, [r6, #72]	; 0x48
 8000c94:	b1dd      	cbz	r5, 8000cce <__register_exitproc+0x8e>
 8000c96:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8000c9a:	b320      	cbz	r0, 8000ce6 <__register_exitproc+0xa6>
 8000c9c:	f8d0 8100 	ldr.w	r8, [r0, #256]	; 0x100
 8000ca0:	6866      	ldr	r6, [r4, #4]
 8000ca2:	2701      	movs	r7, #1
 8000ca4:	2d02      	cmp	r5, #2
 8000ca6:	f106 0c20 	add.w	ip, r6, #32
 8000caa:	fa07 f706 	lsl.w	r7, r7, r6
 8000cae:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
 8000cb2:	ea48 0207 	orr.w	r2, r8, r7
 8000cb6:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
 8000cba:	bf08      	it	eq
 8000cbc:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8000cc0:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 8000cc4:	bf04      	itt	eq
 8000cc6:	431f      	orreq	r7, r3
 8000cc8:	f8c0 7104 	streq.w	r7, [r0, #260]	; 0x104
 8000ccc:	e000      	b.n	8000cd0 <__register_exitproc+0x90>
 8000cce:	6866      	ldr	r6, [r4, #4]
 8000cd0:	1cb3      	adds	r3, r6, #2
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	3601      	adds	r6, #1
 8000cd6:	6066      	str	r6, [r4, #4]
 8000cd8:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8000cdc:	e7c6      	b.n	8000c6c <__register_exitproc+0x2c>
 8000cde:	f106 044c 	add.w	r4, r6, #76	; 0x4c
 8000ce2:	64b4      	str	r4, [r6, #72]	; 0x48
 8000ce4:	e7b8      	b.n	8000c58 <__register_exitproc+0x18>
 8000ce6:	f240 2041 	movw	r0, #577	; 0x241
 8000cea:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000cee:	2800      	cmp	r0, #0
 8000cf0:	d0ba      	beq.n	8000c68 <__register_exitproc+0x28>
 8000cf2:	f44f 7084 	mov.w	r0, #264	; 0x108
 8000cf6:	9103      	str	r1, [sp, #12]
 8000cf8:	9202      	str	r2, [sp, #8]
 8000cfa:	9301      	str	r3, [sp, #4]
 8000cfc:	f7ff faa0 	bl	8000240 <malloc>
 8000d00:	9903      	ldr	r1, [sp, #12]
 8000d02:	9a02      	ldr	r2, [sp, #8]
 8000d04:	9b01      	ldr	r3, [sp, #4]
 8000d06:	2800      	cmp	r0, #0
 8000d08:	d0ae      	beq.n	8000c68 <__register_exitproc+0x28>
 8000d0a:	2600      	movs	r6, #0
 8000d0c:	f8c0 6100 	str.w	r6, [r0, #256]	; 0x100
 8000d10:	f8c0 6104 	str.w	r6, [r0, #260]	; 0x104
 8000d14:	46b0      	mov	r8, r6
 8000d16:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8000d1a:	e7c1      	b.n	8000ca0 <__register_exitproc+0x60>

08000d1c <rb_getc>:
 * \param   rb    pointer to ringbuffer struct
 * \param   data  pointer to data byte
 * \return  number of bytes read (0 if buffer was empty)
 */
static inline int rb_getc(struct ringbuf *rb, char *data)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
    if (!rb->len)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d102      	bne.n	8000d34 <rb_getc+0x18>
        return 0;
 8000d2e:	f04f 0300 	mov.w	r3, #0
 8000d32:	e025      	b.n	8000d80 <rb_getc+0x64>

    vPortEnterCritical();
 8000d34:	f002 fe50 	bl	80039d8 <vPortEnterCritical>

    *data = rb->buf[rb->pos++];
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6819      	ldr	r1, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	461a      	mov	r2, r3
 8000d42:	188a      	adds	r2, r1, r2
 8000d44:	7811      	ldrb	r1, [r2, #0]
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	7011      	strb	r1, [r2, #0]
 8000d4a:	f103 0201 	add.w	r2, r3, #1
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	609a      	str	r2, [r3, #8]
	if (rb->pos >= rb->bufsize)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	db06      	blt.n	8000d6c <rb_getc+0x50>
		rb->pos -= rb->bufsize;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	689a      	ldr	r2, [r3, #8]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	1ad2      	subs	r2, r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
	rb->len--;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	f103 32ff 	add.w	r2, r3, #4294967295
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	60da      	str	r2, [r3, #12]

    vPortExitCritical();
 8000d78:	f002 fe44 	bl	8003a04 <vPortExitCritical>
    return 1;
 8000d7c:	f04f 0301 	mov.w	r3, #1
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	f107 0708 	add.w	r7, r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop

08000d8c <rb_putc>:
 * \param   rb    pointer to ringbuffer struct
 * \param   data  pointer to data byte
 * \return  number of bytes written (0 if buffer was full)
 */
static inline int rb_putc(struct ringbuf *rb, const char data)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	70fb      	strb	r3, [r7, #3]
    if (rb->len >= rb->bufsize)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	68da      	ldr	r2, [r3, #12]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	db02      	blt.n	8000daa <rb_putc+0x1e>
        return 0;
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	e021      	b.n	8000dee <rb_putc+0x62>

    vPortEnterCritical();
 8000daa:	f002 fe15 	bl	80039d8 <vPortEnterCritical>

	int i = rb->pos + rb->len;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	18d3      	adds	r3, r2, r3
 8000db8:	60fb      	str	r3, [r7, #12]
	if (i >= rb->bufsize)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	dc04      	bgt.n	8000dce <rb_putc+0x42>
		i -= rb->bufsize;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	68fa      	ldr	r2, [r7, #12]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	60fb      	str	r3, [r7, #12]

	rb->buf[i] = data;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	18d3      	adds	r3, r2, r3
 8000dd6:	78fa      	ldrb	r2, [r7, #3]
 8000dd8:	701a      	strb	r2, [r3, #0]
	rb->len++;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	f103 0201 	add.w	r2, r3, #1
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	60da      	str	r2, [r3, #12]

    vPortExitCritical();
 8000de6:	f002 fe0d 	bl	8003a04 <vPortExitCritical>
    return 1;
 8000dea:	f04f 0301 	mov.w	r3, #1
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	f107 0710 	add.w	r7, r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <USART1_IRQHandler>:
    uint32_t    tx_bytes;
} uart_stats;


void USART1_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
    if (USART1->SR & USART_SR_RXNE) {
 8000dfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e02:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	f003 0320 	and.w	r3, r3, #32
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d029      	beq.n	8000e66 <USART1_IRQHandler+0x6e>
        if (!rb_putc(&rx_buf, USART1->DR))
 8000e12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e16:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000e1a:	889b      	ldrh	r3, [r3, #4]
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	f240 5004 	movw	r0, #1284	; 0x504
 8000e24:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f7ff ffaf 	bl	8000d8c <rb_putc>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d10c      	bne.n	8000e4e <USART1_IRQHandler+0x56>
            uart_stats.rx_overrun++;
 8000e34:	f240 63b0 	movw	r3, #1712	; 0x6b0
 8000e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f103 0201 	add.w	r2, r3, #1
 8000e42:	f240 63b0 	movw	r3, #1712	; 0x6b0
 8000e46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	e00b      	b.n	8000e66 <USART1_IRQHandler+0x6e>
        else
            uart_stats.rx_bytes++;
 8000e4e:	f240 63b0 	movw	r3, #1712	; 0x6b0
 8000e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f103 0201 	add.w	r2, r3, #1
 8000e5c:	f240 63b0 	movw	r3, #1712	; 0x6b0
 8000e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e64:	605a      	str	r2, [r3, #4]
    }

    if (USART1->SR & USART_SR_TXE) {
 8000e66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e6a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d02c      	beq.n	8000ed4 <USART1_IRQHandler+0xdc>
        char c;
        if (rb_getc(&tx_buf, &c)) {
 8000e7a:	f240 5014 	movw	r0, #1300	; 0x514
 8000e7e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000e82:	f107 0307 	add.w	r3, r7, #7
 8000e86:	4619      	mov	r1, r3
 8000e88:	f7ff ff48 	bl	8000d1c <rb_getc>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d006      	beq.n	8000ea0 <USART1_IRQHandler+0xa8>
            // send a queued byte
            //
            USART1->DR = c;
 8000e92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e96:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000e9a:	79fa      	ldrb	r2, [r7, #7]
 8000e9c:	809a      	strh	r2, [r3, #4]
 8000e9e:	e00d      	b.n	8000ebc <USART1_IRQHandler+0xc4>
        }
        else {
            // nothing to send, disable interrupt
            //
            USART1->CR1 &= ~USART_CR1_TXEIE;
 8000ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000ea8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eac:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000eb0:	8992      	ldrh	r2, [r2, #12]
 8000eb2:	b292      	uxth	r2, r2
 8000eb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000eb8:	b292      	uxth	r2, r2
 8000eba:	819a      	strh	r2, [r3, #12]
        }
        uart_stats.tx_bytes++;
 8000ebc:	f240 63b0 	movw	r3, #1712	; 0x6b0
 8000ec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	f103 0201 	add.w	r2, r3, #1
 8000eca:	f240 63b0 	movw	r3, #1712	; 0x6b0
 8000ece:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ed2:	609a      	str	r2, [r3, #8]
    }
}
 8000ed4:	f107 0708 	add.w	r7, r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <get_us_time>:
 *   this function must be called at least
 *   once every 65ms to work correctly.
 *
 */
uint64_t get_us_time()
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
    static uint16_t t0;
    static uint64_t tickcount;

    vPortEnterCritical();
 8000ee2:	f002 fd79 	bl	80039d8 <vPortEnterCritical>

    int t = TIM7->CNT;
 8000ee6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000eea:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef0:	607b      	str	r3, [r7, #4]
    if (t < t0)
 8000ef2:	f240 63bc 	movw	r3, #1724	; 0x6bc
 8000ef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	dd03      	ble.n	8000f0c <get_us_time+0x30>
        t += 0x10000;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000f0a:	607b      	str	r3, [r7, #4]

    tickcount += t - t0;
 8000f0c:	f240 63bc 	movw	r3, #1724	; 0x6bc
 8000f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	1ad1      	subs	r1, r2, r3
 8000f1a:	460a      	mov	r2, r1
 8000f1c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000f20:	f240 61c0 	movw	r1, #1728	; 0x6c0
 8000f24:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000f28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f2c:	1880      	adds	r0, r0, r2
 8000f2e:	eb41 0103 	adc.w	r1, r1, r3
 8000f32:	f240 63c0 	movw	r3, #1728	; 0x6c0
 8000f36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f3a:	e9c3 0100 	strd	r0, r1, [r3]
    t0 = t;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	f240 63bc 	movw	r3, #1724	; 0x6bc
 8000f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f4a:	801a      	strh	r2, [r3, #0]

    vPortExitCritical();
 8000f4c:	f002 fd5a 	bl	8003a04 <vPortExitCritical>

    return tickcount;
 8000f50:	f240 63c0 	movw	r3, #1728	; 0x6c0
 8000f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f58:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f107 0708 	add.w	r7, r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <init_us_timer>:
/**
 * Set up TIM7 as a 16bit, microsecond-timer.
 *
 */
void init_us_timer()
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;
    RCC_GetClocksFreq(&RCC_Clocks);
 8000f6e:	463b      	mov	r3, r7
 8000f70:	4618      	mov	r0, r3
 8000f72:	f003 f81b 	bl	8003fac <RCC_GetClocksFreq>

    RCC->APB1ENR |= RCC_APB1Periph_TIM7;
 8000f76:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000f7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f7e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000f82:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f86:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000f88:	f042 0220 	orr.w	r2, r2, #32
 8000f8c:	641a      	str	r2, [r3, #64]	; 0x40
    TIM7->PSC = (RCC_Clocks.PCLK2_Frequency / 1000000) - 1;
 8000f8e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f92:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000f96:	68f9      	ldr	r1, [r7, #12]
 8000f98:	f64d 6283 	movw	r2, #56963	; 0xde83
 8000f9c:	f2c4 321b 	movt	r2, #17179	; 0x431b
 8000fa0:	fba2 0201 	umull	r0, r2, r2, r1
 8000fa4:	ea4f 4292 	mov.w	r2, r2, lsr #18
 8000fa8:	b292      	uxth	r2, r2
 8000faa:	f102 32ff 	add.w	r2, r2, #4294967295
 8000fae:	b292      	uxth	r2, r2
 8000fb0:	851a      	strh	r2, [r3, #40]	; 0x28
    TIM7->ARR = 0xFFFF;
 8000fb2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fb6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000fba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fbe:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM7->CR1 = TIM_CR1_CEN;
 8000fc0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fc4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000fc8:	f04f 0201 	mov.w	r2, #1
 8000fcc:	801a      	strh	r2, [r3, #0]
}
 8000fce:	f107 0710 	add.w	r7, r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop

08000fd8 <main>:
  * @brief  Main program.
  * @param  None
  * @retval None
  */
int main(void)
{ 
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af04      	add	r7, sp, #16
	/* create a pipe for MEMS->TIM4 data exchange */
	xQueue=xQueueCreate(1,queueSIZE*sizeof(uint8_t));
 8000fde:	f04f 0001 	mov.w	r0, #1
 8000fe2:	f04f 0106 	mov.w	r1, #6
 8000fe6:	f002 f8e3 	bl	80031b0 <xQueueCreate>
 8000fea:	4602      	mov	r2, r0
 8000fec:	f240 73ec 	movw	r3, #2028	; 0x7ec
 8000ff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ff4:	601a      	str	r2, [r3, #0]

	/* create semaphores... */
	vSemaphoreCreateBinary( xSemaphoreSW );
 8000ff6:	f04f 0001 	mov.w	r0, #1
 8000ffa:	f04f 0100 	mov.w	r1, #0
 8000ffe:	f002 f8d7 	bl	80031b0 <xQueueCreate>
 8001002:	4602      	mov	r2, r0
 8001004:	f240 63c8 	movw	r3, #1736	; 0x6c8
 8001008:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	f240 63c8 	movw	r3, #1736	; 0x6c8
 8001012:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d00d      	beq.n	8001038 <main+0x60>
 800101c:	f240 63c8 	movw	r3, #1736	; 0x6c8
 8001020:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f04f 0100 	mov.w	r1, #0
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	f04f 0300 	mov.w	r3, #0
 8001034:	f002 f924 	bl	8003280 <xQueueGenericSend>

	/* ...and clean them up */
	if(xSemaphoreTake(xSemaphoreSW, ( portTickType ) 0) == pdTRUE);
 8001038:	f240 63c8 	movw	r3, #1736	; 0x6c8
 800103c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f04f 0100 	mov.w	r1, #0
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	f002 f9a6 	bl	80033a0 <xQueueGenericReceive>

	/* initialize hardware... */
	prvSetupHardware();
 8001054:	f000 ff74 	bl	8001f40 <prvSetupHardware>
	/* Start the tasks defined within this file/specific to this demo. */
	//xTaskCreate( vLEDTask, ( signed portCHAR * ) "LED3", configMINIMAL_STACK_SIZE, (void *)LEDS[0],tskIDLE_PRIORITY, &xLED_Tasks[0] );
	//xTaskCreate( vLEDTask, ( signed portCHAR * ) "LED4", configMINIMAL_STACK_SIZE, (void *)LEDS[1],tskIDLE_PRIORITY, &xLED_Tasks[1] );
	//xTaskCreate( vLEDTask, ( signed portCHAR * ) "LED5", configMINIMAL_STACK_SIZE, (void *)LEDS[2],tskIDLE_PRIORITY, &xLED_Tasks[2] );
	//xTaskCreate( vLEDTask, ( signed portCHAR * ) "LED6", configMINIMAL_STACK_SIZE, (void *)LEDS[3],tskIDLE_PRIORITY, &xLED_Tasks[3] );
	xTaskCreate( vSWITCHTask, ( signed portCHAR * ) "SWITCH", configMINIMAL_STACK_SIZE, NULL,tskIDLE_PRIORITY, NULL );
 8001058:	f04f 0300 	mov.w	r3, #0
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	f04f 0300 	mov.w	r3, #0
 8001062:	9301      	str	r3, [sp, #4]
 8001064:	f04f 0300 	mov.w	r3, #0
 8001068:	9302      	str	r3, [sp, #8]
 800106a:	f04f 0300 	mov.w	r3, #0
 800106e:	9303      	str	r3, [sp, #12]
 8001070:	f241 40cd 	movw	r0, #5325	; 0x14cd
 8001074:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001078:	f644 511c 	movw	r1, #19740	; 0x4d1c
 800107c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001080:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001084:	f04f 0300 	mov.w	r3, #0
 8001088:	f001 f924 	bl	80022d4 <xTaskGenericCreate>
	xTaskCreate( vMEMSTask, ( signed portCHAR * ) "MEMS", configMINIMAL_STACK_SIZE, NULL,tskIDLE_PRIORITY, &xMEMS_Task );
 800108c:	f04f 0300 	mov.w	r3, #0
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	f240 73d8 	movw	r3, #2008	; 0x7d8
 8001096:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	f04f 0300 	mov.w	r3, #0
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	9303      	str	r3, [sp, #12]
 80010a8:	f241 100d 	movw	r0, #4365	; 0x110d
 80010ac:	f6c0 0000 	movt	r0, #2048	; 0x800
 80010b0:	f644 5124 	movw	r1, #19748	; 0x4d24
 80010b4:	f6c0 0100 	movt	r1, #2048	; 0x800
 80010b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010bc:	f04f 0300 	mov.w	r3, #0
 80010c0:	f001 f908 	bl	80022d4 <xTaskGenericCreate>
	xTaskCreate( vBALANCETask, ( signed portCHAR * ) "BALANCE", configMINIMAL_STACK_SIZE, NULL,tskIDLE_PRIORITY, &xBALANCE_Task );
 80010c4:	f04f 0300 	mov.w	r3, #0
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	f240 73f4 	movw	r3, #2036	; 0x7f4
 80010ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010d2:	9301      	str	r3, [sp, #4]
 80010d4:	f04f 0300 	mov.w	r3, #0
 80010d8:	9302      	str	r3, [sp, #8]
 80010da:	f04f 0300 	mov.w	r3, #0
 80010de:	9303      	str	r3, [sp, #12]
 80010e0:	f241 300d 	movw	r0, #4877	; 0x130d
 80010e4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80010e8:	f644 512c 	movw	r1, #19756	; 0x4d2c
 80010ec:	f6c0 0100 	movt	r1, #2048	; 0x800
 80010f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010f4:	f04f 0300 	mov.w	r3, #0
 80010f8:	f001 f8ec 	bl	80022d4 <xTaskGenericCreate>

	/* Start the scheduler. */
	vTaskStartScheduler();
 80010fc:	f001 fa9e 	bl	800263c <vTaskStartScheduler>

	/* Will only get here if there was not enough heap space to create the idle task. */
	return 0;  
 8001100:	f04f 0300 	mov.w	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop

0800110c <vMEMSTask>:

/*-----------------------------------------------------------*/

void vMEMSTask(void *pvParameters)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	/* queue for MEMS data length */
    volatile int *LED;
    LED = (int *) pvParameters;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	61bb      	str	r3, [r7, #24]


	uint8_t Buffer_x[1];
	uint8_t Buffer_y[1];
	uint8_t counter  = 0;
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	77fb      	strb	r3, [r7, #31]
	__IO uint32_t TimingDelay = 0;
 800111e:	f04f 0300 	mov.w	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
	__IO int8_t XOffset;
	__IO int8_t YOffset;

      Buffer_x[0] = 0;
 8001124:	f04f 0300 	mov.w	r3, #0
 8001128:	753b      	strb	r3, [r7, #20]
      Buffer_y[0] = 0;
 800112a:	f04f 0300 	mov.w	r3, #0
 800112e:	743b      	strb	r3, [r7, #16]

  	uint8_t TempAcceleration = 0;               
 8001130:	f04f 0300 	mov.w	r3, #0
 8001134:	75fb      	strb	r3, [r7, #23]
  	XOffset = Buffer_x[0];
 8001136:	7d3b      	ldrb	r3, [r7, #20]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	72fb      	strb	r3, [r7, #11]
  	YOffset = Buffer_y[0];
 800113c:	7c3b      	ldrb	r3, [r7, #16]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	72bb      	strb	r3, [r7, #10]

	int8_t temp1 = 0;
 8001142:	f04f 0300 	mov.w	r3, #0
 8001146:	75bb      	strb	r3, [r7, #22]
	int8_t temp2 = 0;
 8001148:	f04f 0300 	mov.w	r3, #0
 800114c:	757b      	strb	r3, [r7, #21]
 800114e:	e000      	b.n	8001152 <vMEMSTask+0x46>
		}
		counter = 0x00;

    }
  }
}
 8001150:	bf00      	nop
	int8_t temp1 = 0;
	int8_t temp2 = 0;

for( ;; )
{
	counter++;
 8001152:	7ffb      	ldrb	r3, [r7, #31]
 8001154:	f103 0301 	add.w	r3, r3, #1
 8001158:	77fb      	strb	r3, [r7, #31]
	if (counter == 10)
 800115a:	7ffb      	ldrb	r3, [r7, #31]
 800115c:	2b0a      	cmp	r3, #10
 800115e:	d1f7      	bne.n	8001150 <vMEMSTask+0x44>
	{

  	LIS302DL_Read(Buffer_x, LIS302DL_OUT_X_ADDR, 1);
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4618      	mov	r0, r3
 8001166:	f04f 0129 	mov.w	r1, #41	; 0x29
 800116a:	f04f 0201 	mov.w	r2, #1
 800116e:	f000 fd4f 	bl	8001c10 <LIS302DL_Read>
	LIS302DL_Read(Buffer_y, LIS302DL_OUT_Y_ADDR, 1);
 8001172:	f107 0310 	add.w	r3, r7, #16
 8001176:	4618      	mov	r0, r3
 8001178:	f04f 012b 	mov.w	r1, #43	; 0x2b
 800117c:	f04f 0201 	mov.w	r2, #1
 8001180:	f000 fd46 	bl	8001c10 <LIS302DL_Read>

      /* Remove the offsets values from data */
      Buffer_x[0] -= XOffset;
 8001184:	7d3a      	ldrb	r2, [r7, #20]
 8001186:	7afb      	ldrb	r3, [r7, #11]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	b2db      	uxtb	r3, r3
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	b2db      	uxtb	r3, r3
 8001190:	753b      	strb	r3, [r7, #20]
      Buffer_y[0] -= YOffset;
 8001192:	7c3a      	ldrb	r2, [r7, #16]
 8001194:	7abb      	ldrb	r3, [r7, #10]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	b2db      	uxtb	r3, r3
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	b2db      	uxtb	r3, r3
 800119e:	743b      	strb	r3, [r7, #16]

      /* Update autoreload and capture compare registers value*/
      temp1 = ABS((int8_t)(Buffer_x[0]));
 80011a0:	7d3b      	ldrb	r3, [r7, #20]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	b25b      	sxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	bfb8      	it	lt
 80011aa:	425b      	neglt	r3, r3
 80011ac:	75bb      	strb	r3, [r7, #22]
      temp2 = ABS((int8_t)(Buffer_y[0]));
 80011ae:	7c3b      	ldrb	r3, [r7, #16]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	b25b      	sxtb	r3, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	bfb8      	it	lt
 80011b8:	425b      	neglt	r3, r3
 80011ba:	757b      	strb	r3, [r7, #21]
      TempAcceleration = MAX(temp1, temp2);
 80011bc:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80011c0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	bfa8      	it	ge
 80011c8:	4613      	movge	r3, r2
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	75fb      	strb	r3, [r7, #23]
   /************************************************
	* buffer value error can work right

   *****************************************************/

	if(TempAcceleration != 0)
 80011ce:	7dfb      	ldrb	r3, [r7, #23]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0bd      	beq.n	8001150 <vMEMSTask+0x44>
      {
	
        if ((int8_t)Buffer_x[0] < -2)
 80011d4:	7d3b      	ldrb	r3, [r7, #20]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	b25b      	sxtb	r3, r3
 80011da:	f113 0f02 	cmn.w	r3, #2
 80011de:	da1f      	bge.n	8001220 <vMEMSTask+0x114>
        {
				STM_EVAL_LEDOn(LED4);
 80011e0:	f04f 0000 	mov.w	r0, #0
 80011e4:	f000 fbe0 	bl	80019a8 <STM_EVAL_LEDOn>


                if ((int8_t)Buffer_x[0] <= 2)
 80011e8:	7d3b      	ldrb	r3, [r7, #20]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	b25b      	sxtb	r3, r3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	dc03      	bgt.n	80011fa <vMEMSTask+0xee>
                {
                        STM_EVAL_LEDOff(LED3);
 80011f2:	f04f 0001 	mov.w	r0, #1
 80011f6:	f000 fbf1 	bl	80019dc <STM_EVAL_LEDOff>

                }

                if ((int8_t)Buffer_y[0] <= 2)
 80011fa:	7c3b      	ldrb	r3, [r7, #16]
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	b25b      	sxtb	r3, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	dc03      	bgt.n	800120c <vMEMSTask+0x100>
                {
                       STM_EVAL_LEDOff(LED6);
 8001204:	f04f 0003 	mov.w	r0, #3
 8001208:	f000 fbe8 	bl	80019dc <STM_EVAL_LEDOff>
                }

                if ((int8_t)Buffer_y[0] >= -2)
 800120c:	7c3b      	ldrb	r3, [r7, #16]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	b25b      	sxtb	r3, r3
 8001212:	f113 0f02 	cmn.w	r3, #2
 8001216:	db03      	blt.n	8001220 <vMEMSTask+0x114>
                {
                        STM_EVAL_LEDOff(LED5);
 8001218:	f04f 0002 	mov.w	r0, #2
 800121c:	f000 fbde 	bl	80019dc <STM_EVAL_LEDOff>
                }

        }
        if ((int8_t)Buffer_x[0] > 2)
 8001220:	7d3b      	ldrb	r3, [r7, #20]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	b25b      	sxtb	r3, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	dd20      	ble.n	800126c <vMEMSTask+0x160>
        {
				STM_EVAL_LEDOn(LED5);
 800122a:	f04f 0002 	mov.w	r0, #2
 800122e:	f000 fbbb 	bl	80019a8 <STM_EVAL_LEDOn>

                                if ((int8_t)Buffer_y[0] <= 2)
 8001232:	7c3b      	ldrb	r3, [r7, #16]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	b25b      	sxtb	r3, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	dc03      	bgt.n	8001244 <vMEMSTask+0x138>
                                {
                                STM_EVAL_LEDOff(LED4);
 800123c:	f04f 0000 	mov.w	r0, #0
 8001240:	f000 fbcc 	bl	80019dc <STM_EVAL_LEDOff>
                                }

                                if ((int8_t)Buffer_y[0] >= -2)
 8001244:	7c3b      	ldrb	r3, [r7, #16]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	b25b      	sxtb	r3, r3
 800124a:	f113 0f02 	cmn.w	r3, #2
 800124e:	db03      	blt.n	8001258 <vMEMSTask+0x14c>
                                {
                        		STM_EVAL_LEDOff(LED3);
 8001250:	f04f 0001 	mov.w	r0, #1
 8001254:	f000 fbc2 	bl	80019dc <STM_EVAL_LEDOff>
                                }

                                if ((int8_t)Buffer_x[0] >= -2)
 8001258:	7d3b      	ldrb	r3, [r7, #20]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	b25b      	sxtb	r3, r3
 800125e:	f113 0f02 	cmn.w	r3, #2
 8001262:	db03      	blt.n	800126c <vMEMSTask+0x160>
                                {
		                        STM_EVAL_LEDOff(LED6);
 8001264:	f04f 0003 	mov.w	r0, #3
 8001268:	f000 fbb8 	bl	80019dc <STM_EVAL_LEDOff>
                                }

        }
        if ((int8_t)Buffer_y[0] > 2)
 800126c:	7c3b      	ldrb	r3, [r7, #16]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	b25b      	sxtb	r3, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	dd20      	ble.n	80012b8 <vMEMSTask+0x1ac>
        {

				STM_EVAL_LEDOn(LED3);
 8001276:	f04f 0001 	mov.w	r0, #1
 800127a:	f000 fb95 	bl	80019a8 <STM_EVAL_LEDOn>

                                if ((int8_t)Buffer_x[0] <= 2)
 800127e:	7d3b      	ldrb	r3, [r7, #20]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	b25b      	sxtb	r3, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	dc03      	bgt.n	8001290 <vMEMSTask+0x184>
                                {
                                        STM_EVAL_LEDOff(LED4);
 8001288:	f04f 0000 	mov.w	r0, #0
 800128c:	f000 fba6 	bl	80019dc <STM_EVAL_LEDOff>
                                }

                                if ((int8_t)Buffer_y[0] >= -2)
 8001290:	7c3b      	ldrb	r3, [r7, #16]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	b25b      	sxtb	r3, r3
 8001296:	f113 0f02 	cmn.w	r3, #2
 800129a:	db03      	blt.n	80012a4 <vMEMSTask+0x198>
                                {
                                        STM_EVAL_LEDOff(LED5);
 800129c:	f04f 0002 	mov.w	r0, #2
 80012a0:	f000 fb9c 	bl	80019dc <STM_EVAL_LEDOff>
                                }

                                if ((int8_t)Buffer_x[0] >= -2)
 80012a4:	7d3b      	ldrb	r3, [r7, #20]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	b25b      	sxtb	r3, r3
 80012aa:	f113 0f02 	cmn.w	r3, #2
 80012ae:	db03      	blt.n	80012b8 <vMEMSTask+0x1ac>
                                {
                                        STM_EVAL_LEDOff(LED6);
 80012b0:	f04f 0003 	mov.w	r0, #3
 80012b4:	f000 fb92 	bl	80019dc <STM_EVAL_LEDOff>
                                }

        }
        if ((int8_t)Buffer_y[0] < -2)
 80012b8:	7c3b      	ldrb	r3, [r7, #16]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	b25b      	sxtb	r3, r3
 80012be:	f113 0f02 	cmn.w	r3, #2
 80012c2:	da1f      	bge.n	8001304 <vMEMSTask+0x1f8>
        {

			STM_EVAL_LEDOn(LED6);
 80012c4:	f04f 0003 	mov.w	r0, #3
 80012c8:	f000 fb6e 	bl	80019a8 <STM_EVAL_LEDOn>

                                if ((int8_t)Buffer_x[0] <= 2)
 80012cc:	7d3b      	ldrb	r3, [r7, #20]
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	b25b      	sxtb	r3, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	dc03      	bgt.n	80012de <vMEMSTask+0x1d2>
                                {
                                        STM_EVAL_LEDOff(LED3);
 80012d6:	f04f 0001 	mov.w	r0, #1
 80012da:	f000 fb7f 	bl	80019dc <STM_EVAL_LEDOff>
                                }

                                if ((int8_t)Buffer_y[0] <= 2)
 80012de:	7c3b      	ldrb	r3, [r7, #16]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	b25b      	sxtb	r3, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	dc03      	bgt.n	80012f0 <vMEMSTask+0x1e4>
                                {
                               STM_EVAL_LEDOff(LED4);
 80012e8:	f04f 0000 	mov.w	r0, #0
 80012ec:	f000 fb76 	bl	80019dc <STM_EVAL_LEDOff>
                                }

                                if ((int8_t)Buffer_x[0] >= -2)
 80012f0:	7d3b      	ldrb	r3, [r7, #20]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	f113 0f02 	cmn.w	r3, #2
 80012fa:	db03      	blt.n	8001304 <vMEMSTask+0x1f8>
                                {
                                STM_EVAL_LEDOff(LED5);
 80012fc:	f04f 0002 	mov.w	r0, #2
 8001300:	f000 fb6c 	bl	80019dc <STM_EVAL_LEDOff>
	STM_EVAL_LEDOn(LED3);
	STM_EVAL_LEDOn(LED5);
	STM_EVAL_LEDOn(LED6);
*/
		}
		counter = 0x00;
 8001304:	f04f 0300 	mov.w	r3, #0
 8001308:	77fb      	strb	r3, [r7, #31]

    }
  }
}
 800130a:	e721      	b.n	8001150 <vMEMSTask+0x44>

0800130c <vBALANCETask>:
}

/*-----------------------------------------------------------*/

void vBALANCETask(void *pvParameters)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	uint8_t temp1, temp2 = 0;
 8001314:	f04f 0300 	mov.w	r3, #0
 8001318:	75fb      	strb	r3, [r7, #23]
	__IO uint8_t TempAcceleration = 0;
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	757b      	strb	r3, [r7, #21]
	uint8_t xBuffer_receive[queueSIZE];
	for( ;; )
	{
	 if(xQueueReceive(xQueue,xBuffer_receive,0)==pdPASS)
 8001320:	f240 73ec 	movw	r3, #2028	; 0x7ec
 8001324:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f107 030c 	add.w	r3, r7, #12
 8001330:	4619      	mov	r1, r3
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	f04f 0300 	mov.w	r3, #0
 800133a:	f002 f831 	bl	80033a0 <xQueueGenericReceive>
 800133e:	4603      	mov	r3, r0
 8001340:	2b01      	cmp	r3, #1
 8001342:	f040 80c0 	bne.w	80014c6 <vBALANCETask+0x1ba>
		{
		/* Disable All TIM4 Capture Compare Channels */
		TIM_CCxCmd(TIM4, TIM_Channel_1, DISABLE);
 8001346:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800134a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800134e:	f04f 0100 	mov.w	r1, #0
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	f003 fca7 	bl	8004ca8 <TIM_CCxCmd>
		TIM_CCxCmd(TIM4, TIM_Channel_2, DISABLE);
 800135a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800135e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001362:	f04f 0104 	mov.w	r1, #4
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	f003 fc9d 	bl	8004ca8 <TIM_CCxCmd>
		TIM_CCxCmd(TIM4, TIM_Channel_3, DISABLE);
 800136e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001372:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001376:	f04f 0108 	mov.w	r1, #8
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	f003 fc93 	bl	8004ca8 <TIM_CCxCmd>
		TIM_CCxCmd(TIM4, TIM_Channel_4, DISABLE);
 8001382:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001386:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800138a:	f04f 010c 	mov.w	r1, #12
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	f003 fc89 	bl	8004ca8 <TIM_CCxCmd>

		/* Update autoreload and capture compare registers value*/
		temp1=((int8_t)(xBuffer_receive[0])<0)?(int8_t)(xBuffer_receive[0])*(-1):(int8_t)(xBuffer_receive[0]); //ABS
 8001396:	7b3b      	ldrb	r3, [r7, #12]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	b25b      	sxtb	r3, r3
 800139c:	2b00      	cmp	r3, #0
 800139e:	bfb8      	it	lt
 80013a0:	425b      	neglt	r3, r3
 80013a2:	75bb      	strb	r3, [r7, #22]
		temp2=((int8_t)(xBuffer_receive[2])<0)?(int8_t)(xBuffer_receive[2])*(-1):(int8_t)(xBuffer_receive[2]); //ABS
 80013a4:	7bbb      	ldrb	r3, [r7, #14]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	b25b      	sxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	bfb8      	it	lt
 80013ae:	425b      	neglt	r3, r3
 80013b0:	75fb      	strb	r3, [r7, #23]
		TempAcceleration = (temp1<temp2)?temp2:temp1; //MAX(temp1,temp2)
 80013b2:	7dba      	ldrb	r2, [r7, #22]
 80013b4:	7dfb      	ldrb	r3, [r7, #23]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	bf28      	it	cs
 80013ba:	4613      	movcs	r3, r2
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	757b      	strb	r3, [r7, #21]

		if(TempAcceleration != 0)
 80013c0:	7d7b      	ldrb	r3, [r7, #21]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d07e      	beq.n	80014c6 <vBALANCETask+0x1ba>
		{
			if ((int8_t)xBuffer_receive[0] < -2)
 80013c8:	7b3b      	ldrb	r3, [r7, #12]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	b25b      	sxtb	r3, r3
 80013ce:	f113 0f02 	cmn.w	r3, #2
 80013d2:	da16      	bge.n	8001402 <vBALANCETask+0xf6>
			{
				/* Enable TIM4 Capture Compare Channel 4 */
				TIM_CCxCmd(TIM4, TIM_Channel_4, ENABLE);
 80013d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80013d8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80013dc:	f04f 010c 	mov.w	r1, #12
 80013e0:	f04f 0201 	mov.w	r2, #1
 80013e4:	f003 fc60 	bl	8004ca8 <TIM_CCxCmd>
				/* Sets the TIM4 Capture Compare4 Register value */
				TIM_SetCompare4(TIM4, TIM_CCR/TempAcceleration);
 80013e8:	7d7b      	ldrb	r3, [r7, #21]
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80013f4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80013f8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80013fc:	4619      	mov	r1, r3
 80013fe:	f003 fbcd 	bl	8004b9c <TIM_SetCompare4>
			}
			if ((int8_t)xBuffer_receive[0] > 2)
 8001402:	7b3b      	ldrb	r3, [r7, #12]
 8001404:	b2db      	uxtb	r3, r3
 8001406:	b25b      	sxtb	r3, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	dd16      	ble.n	800143a <vBALANCETask+0x12e>
			{
				/* Enable TIM4 Capture Compare Channel 2 */
				TIM_CCxCmd(TIM4, TIM_Channel_2, ENABLE);
 800140c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001410:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001414:	f04f 0104 	mov.w	r1, #4
 8001418:	f04f 0201 	mov.w	r2, #1
 800141c:	f003 fc44 	bl	8004ca8 <TIM_CCxCmd>
				/* Sets the TIM4 Capture Compare2 Register value */
				TIM_SetCompare2(TIM4, TIM_CCR/TempAcceleration);
 8001420:	7d7b      	ldrb	r3, [r7, #21]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001428:	fb92 f3f3 	sdiv	r3, r2, r3
 800142c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001430:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001434:	4619      	mov	r1, r3
 8001436:	f003 fb95 	bl	8004b64 <TIM_SetCompare2>
			}
			if ((int8_t)xBuffer_receive[2] > 2)
 800143a:	7bbb      	ldrb	r3, [r7, #14]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	b25b      	sxtb	r3, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	dd16      	ble.n	8001472 <vBALANCETask+0x166>
			{
				/* Enable TIM4 Capture Compare Channel 1 */
				TIM_CCxCmd(TIM4, TIM_Channel_1, ENABLE);
 8001444:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001448:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800144c:	f04f 0100 	mov.w	r1, #0
 8001450:	f04f 0201 	mov.w	r2, #1
 8001454:	f003 fc28 	bl	8004ca8 <TIM_CCxCmd>
				/* Sets the TIM4 Capture Compare1 Register value */
				TIM_SetCompare1(TIM4, TIM_CCR/TempAcceleration);
 8001458:	7d7b      	ldrb	r3, [r7, #21]
 800145a:	b2db      	uxtb	r3, r3
 800145c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001460:	fb92 f3f3 	sdiv	r3, r2, r3
 8001464:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001468:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800146c:	4619      	mov	r1, r3
 800146e:	f003 fb6b 	bl	8004b48 <TIM_SetCompare1>
			}
			if ((int8_t)xBuffer_receive[2] < -2)
 8001472:	7bbb      	ldrb	r3, [r7, #14]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	b25b      	sxtb	r3, r3
 8001478:	f113 0f02 	cmn.w	r3, #2
 800147c:	da16      	bge.n	80014ac <vBALANCETask+0x1a0>
			{
				/* Enable TIM4 Capture Compare Channel 3 */
				TIM_CCxCmd(TIM4, TIM_Channel_3, ENABLE);
 800147e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001482:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001486:	f04f 0108 	mov.w	r1, #8
 800148a:	f04f 0201 	mov.w	r2, #1
 800148e:	f003 fc0b 	bl	8004ca8 <TIM_CCxCmd>
				/* Sets the TIM4 Capture Compare3 Register value */
				TIM_SetCompare3(TIM4, TIM_CCR/TempAcceleration);
 8001492:	7d7b      	ldrb	r3, [r7, #21]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800149a:	fb92 f3f3 	sdiv	r3, r2, r3
 800149e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80014a2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80014a6:	4619      	mov	r1, r3
 80014a8:	f003 fb6a 	bl	8004b80 <TIM_SetCompare3>
			}

			/* Time base configuration */
			TIM_SetAutoreload(TIM4,  TIM_ARR/TempAcceleration);
 80014ac:	7d7b      	ldrb	r3, [r7, #21]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	f240 726c 	movw	r2, #1900	; 0x76c
 80014b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80014b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80014bc:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80014c0:	4619      	mov	r1, r3
 80014c2:	f003 f8e1 	bl	8004688 <TIM_SetAutoreload>
		}
	 }
	taskYIELD(); 	//task is going to ready state to allow next one to run
 80014c6:	f002 fa7b 	bl	80039c0 <vPortYieldFromISR>
	}
 80014ca:	e729      	b.n	8001320 <vBALANCETask+0x14>

080014cc <vSWITCHTask>:
}

/*-----------------------------------------------------------*/

void vSWITCHTask( void *pvParameters )
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	static int i=0;
	for( ;; )
	{
		if(xSemaphoreTake(xSemaphoreSW,( portTickType ) 0) == pdTRUE)
 80014d4:	f240 63c8 	movw	r3, #1736	; 0x6c8
 80014d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f04f 0100 	mov.w	r1, #0
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	f001 ff58 	bl	80033a0 <xQueueGenericReceive>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	f040 808c 	bne.w	8001610 <vSWITCHTask+0x144>
		{
			i^=1;		//just switch the state if semaphore was given
 80014f8:	f240 63cc 	movw	r3, #1740	; 0x6cc
 80014fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f083 0201 	eor.w	r2, r3, #1
 8001506:	f240 63cc 	movw	r3, #1740	; 0x6cc
 800150a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800150e:	601a      	str	r2, [r3, #0]

			if(i==0)	//LED3..LD6 tasks ready, BALANCE, MEMS suspended
 8001510:	f240 63cc 	movw	r3, #1740	; 0x6cc
 8001514:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d13c      	bne.n	8001598 <vSWITCHTask+0xcc>
			{
				vTaskSuspend(xBALANCE_Task);
 800151e:	f240 73f4 	movw	r3, #2036	; 0x7f4
 8001522:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f000 ffa9 	bl	8002480 <vTaskSuspend>
				TIM_Cmd(TIM4, DISABLE);
 800152e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001532:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001536:	f04f 0100 	mov.w	r1, #0
 800153a:	f003 f8d3 	bl	80046e4 <TIM_Cmd>
				vTaskSuspend(xMEMS_Task);
 800153e:	f240 73d8 	movw	r3, #2008	; 0x7d8
 8001542:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f000 ff99 	bl	8002480 <vTaskSuspend>
				prvLED_Config(GPIO);
 800154e:	f04f 0000 	mov.w	r0, #0
 8001552:	f000 fd11 	bl	8001f78 <prvLED_Config>
				vTaskResume(xLED_Tasks[0]);
 8001556:	f240 73dc 	movw	r3, #2012	; 0x7dc
 800155a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f001 f815 	bl	8002590 <vTaskResume>
				vTaskResume(xLED_Tasks[1]);
 8001566:	f240 73dc 	movw	r3, #2012	; 0x7dc
 800156a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	4618      	mov	r0, r3
 8001572:	f001 f80d 	bl	8002590 <vTaskResume>
				vTaskResume(xLED_Tasks[2]);
 8001576:	f240 73dc 	movw	r3, #2012	; 0x7dc
 800157a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	4618      	mov	r0, r3
 8001582:	f001 f805 	bl	8002590 <vTaskResume>
				vTaskResume(xLED_Tasks[3]);
 8001586:	f240 73dc 	movw	r3, #2012	; 0x7dc
 800158a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	4618      	mov	r0, r3
 8001592:	f000 fffd 	bl	8002590 <vTaskResume>
 8001596:	e03b      	b.n	8001610 <vSWITCHTask+0x144>
			}
			else		//MEMS and BALANCE ready, LED tasks suspended
			{
				vTaskSuspend(xLED_Tasks[0]);
 8001598:	f240 73dc 	movw	r3, #2012	; 0x7dc
 800159c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 ff6c 	bl	8002480 <vTaskSuspend>
				vTaskSuspend(xLED_Tasks[1]);
 80015a8:	f240 73dc 	movw	r3, #2012	; 0x7dc
 80015ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 ff64 	bl	8002480 <vTaskSuspend>
				vTaskSuspend(xLED_Tasks[2]);
 80015b8:	f240 73dc 	movw	r3, #2012	; 0x7dc
 80015bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 ff5c 	bl	8002480 <vTaskSuspend>
				vTaskSuspend(xLED_Tasks[3]);
 80015c8:	f240 73dc 	movw	r3, #2012	; 0x7dc
 80015cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 ff54 	bl	8002480 <vTaskSuspend>
				prvLED_Config(TIMER);
 80015d8:	f04f 0001 	mov.w	r0, #1
 80015dc:	f000 fccc 	bl	8001f78 <prvLED_Config>
				TIM_Cmd(TIM4, ENABLE);
 80015e0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80015e4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80015e8:	f04f 0101 	mov.w	r1, #1
 80015ec:	f003 f87a 	bl	80046e4 <TIM_Cmd>
				vTaskResume(xBALANCE_Task);
 80015f0:	f240 73f4 	movw	r3, #2036	; 0x7f4
 80015f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 ffc8 	bl	8002590 <vTaskResume>
				vTaskResume(xMEMS_Task);
 8001600:	f240 73d8 	movw	r3, #2008	; 0x7d8
 8001604:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f000 ffc0 	bl	8002590 <vTaskResume>
			}
		}
		taskYIELD(); 	//task is going to ready state to allow next one to run
 8001610:	f002 f9d6 	bl	80039c0 <vPortYieldFromISR>
	}
 8001614:	e75e      	b.n	80014d4 <vSWITCHTask+0x8>
 8001616:	bf00      	nop

08001618 <Reset_Handler>:
 8001618:	2100      	movs	r1, #0
 800161a:	f000 b804 	b.w	8001626 <LoopCopyDataInit>

0800161e <CopyDataInit>:
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <LoopFillZerobss+0x22>)
 8001620:	585b      	ldr	r3, [r3, r1]
 8001622:	5043      	str	r3, [r0, r1]
 8001624:	3104      	adds	r1, #4

08001626 <LoopCopyDataInit>:
 8001626:	480f      	ldr	r0, [pc, #60]	; (8001664 <LoopFillZerobss+0x26>)
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <LoopFillZerobss+0x2a>)
 800162a:	1842      	adds	r2, r0, r1
 800162c:	429a      	cmp	r2, r3
 800162e:	f4ff aff6 	bcc.w	800161e <CopyDataInit>
 8001632:	4a0e      	ldr	r2, [pc, #56]	; (800166c <LoopFillZerobss+0x2e>)
 8001634:	f000 b803 	b.w	800163e <LoopFillZerobss>

08001638 <FillZerobss>:
 8001638:	2300      	movs	r3, #0
 800163a:	f842 3b04 	str.w	r3, [r2], #4

0800163e <LoopFillZerobss>:
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <LoopFillZerobss+0x32>)
 8001640:	429a      	cmp	r2, r3
 8001642:	f4ff aff9 	bcc.w	8001638 <FillZerobss>
 8001646:	480b      	ldr	r0, [pc, #44]	; (8001674 <LoopFillZerobss+0x36>)
 8001648:	6801      	ldr	r1, [r0, #0]
 800164a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800164e:	6001      	str	r1, [r0, #0]
 8001650:	f000 f814 	bl	800167c <SystemInit>
 8001654:	f7fe fdcc 	bl	80001f0 <__libc_init_array>
 8001658:	f7ff fcbe 	bl	8000fd8 <main>
 800165c:	4770      	bx	lr
 800165e:	0000      	.short	0x0000
 8001660:	08004e54 	.word	0x08004e54
 8001664:	20000000 	.word	0x20000000
 8001668:	2000055c 	.word	0x2000055c
 800166c:	20000560 	.word	0x20000560
 8001670:	200007fc 	.word	0x200007fc
 8001674:	e000ed88 	.word	0xe000ed88

08001678 <ADC_IRQHandler>:
 8001678:	f7ff bffe 	b.w	8001678 <ADC_IRQHandler>

0800167c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001680:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001684:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001688:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800168c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	f042 0201 	orr.w	r2, r2, #1
 8001696:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001698:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800169c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80016a6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80016aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016ae:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80016b2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80016bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016c0:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80016c2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80016c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016ca:	f243 0210 	movw	r2, #12304	; 0x3010
 80016ce:	f2c2 4200 	movt	r2, #9216	; 0x2400
 80016d2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80016d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80016d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016dc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80016e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80016e4:	6812      	ldr	r2, [r2, #0]
 80016e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016ea:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80016ec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80016f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80016fa:	f000 f809 	bl	8001710 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016fe:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001702:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001706:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800170a:	609a      	str	r2, [r3, #8]
#endif
}
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop

08001710 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001722:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001726:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800172a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800172e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001738:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800173a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800173e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001748:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f103 0301 	add.w	r3, r3, #1
 8001750:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d103      	bne.n	8001760 <SetSysClock+0x50>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800175e:	d1ec      	bne.n	800173a <SetSysClock+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001760:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001764:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <SetSysClock+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 8001772:	f04f 0301 	mov.w	r3, #1
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	e002      	b.n	8001780 <SetSysClock+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800177a:	f04f 0300 	mov.w	r3, #0
 800177e:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	2b01      	cmp	r3, #1
 8001784:	f040 8082 	bne.w	800188c <SetSysClock+0x17c>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001788:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800178c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001790:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001794:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001798:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800179a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800179e:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80017a0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80017a4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80017a8:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80017ac:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80017b0:	6812      	ldr	r2, [r2, #0]
 80017b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017b6:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80017b8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80017bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017c0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80017c4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017c8:	6892      	ldr	r2, [r2, #8]
 80017ca:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80017cc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80017d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017d4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80017d8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017dc:	6892      	ldr	r2, [r2, #8]
 80017de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017e2:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80017e4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80017e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017ec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80017f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017f4:	6892      	ldr	r2, [r2, #8]
 80017f6:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80017fa:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80017fc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001800:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001804:	f245 4208 	movw	r2, #21512	; 0x5408
 8001808:	f2c0 7240 	movt	r2, #1856	; 0x740
 800180c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800180e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001812:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001816:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800181a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001824:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001826:	bf00      	nop
 8001828:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800182c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f6      	beq.n	8001828 <SetSysClock+0x118>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800183a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800183e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001842:	f240 6205 	movw	r2, #1541	; 0x605
 8001846:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001848:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800184c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001850:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001854:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001858:	6892      	ldr	r2, [r2, #8]
 800185a:	f022 0203 	bic.w	r2, r2, #3
 800185e:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001860:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001864:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001868:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800186c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001870:	6892      	ldr	r2, [r2, #8]
 8001872:	f042 0202 	orr.w	r2, r2, #2
 8001876:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001878:	bf00      	nop
 800187a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800187e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 030c 	and.w	r3, r3, #12
 8001888:	2b08      	cmp	r3, #8
 800188a:	d1f6      	bne.n	800187a <SetSysClock+0x16a>

/******************************************************************************/
/*                        I2S clock configuration                             */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 800188c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001890:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001894:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001898:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800189c:	6892      	ldr	r2, [r2, #8]
 800189e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80018a2:	609a      	str	r2, [r3, #8]

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 80018a4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80018a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018ac:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80018b0:	f2c5 0200 	movt	r2, #20480	; 0x5000
 80018b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 80018b8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80018bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018c0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80018c4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018c8:	6812      	ldr	r2, [r2, #0]
 80018ca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80018ce:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 80018d0:	bf00      	nop
 80018d2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80018d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f6      	beq.n	80018d2 <SetSysClock+0x1c2>
  {
  }
}
 80018e4:	f107 070c 	add.w	r7, r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop

080018f0 <_sbrk_r>:
    return 1;
}


void *_sbrk_r(struct _reent *r, ptrdiff_t incr)
{
 80018f0:	b490      	push	{r4, r7}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
    extern char end;   // provided by the linker script

    if (__brkval == 0)
 80018fa:	f240 73f8 	movw	r3, #2040	; 0x7f8
 80018fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d108      	bne.n	800191a <_sbrk_r+0x2a>
        __brkval = &end;
 8001908:	f240 73f8 	movw	r3, #2040	; 0x7f8
 800190c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001910:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8001914:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001918:	601a      	str	r2, [r3, #0]

    if (__brkval + incr > (char*)__get_MSP() - __malloc_margin) {
 800191a:	f240 73f8 	movw	r3, #2040	; 0x7f8
 800191e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	18d2      	adds	r2, r2, r3
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8001928:	f3ef 8408 	mrs	r4, MSP
  return(result);
 800192c:	4623      	mov	r3, r4
 800192e:	4619      	mov	r1, r3
 8001930:	f240 5328 	movw	r3, #1320	; 0x528
 8001934:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	1acb      	subs	r3, r1, r3
 800193c:	429a      	cmp	r2, r3
 800193e:	d906      	bls.n	800194e <_sbrk_r+0x5e>
        r->_errno = ENOMEM;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f04f 020c 	mov.w	r2, #12
 8001946:	601a      	str	r2, [r3, #0]
        return (void*)-1;
 8001948:	f04f 33ff 	mov.w	r3, #4294967295
 800194c:	e012      	b.n	8001974 <_sbrk_r+0x84>
    }

    void *ret = __brkval;
 800194e:	f240 73f8 	movw	r3, #2040	; 0x7f8
 8001952:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	60fb      	str	r3, [r7, #12]
    __brkval += incr;
 800195a:	f240 73f8 	movw	r3, #2040	; 0x7f8
 800195e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	18d2      	adds	r2, r2, r3
 8001968:	f240 73f8 	movw	r3, #2040	; 0x7f8
 800196c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001970:	601a      	str	r2, [r3, #0]

    return ret;
 8001972:	68fb      	ldr	r3, [r7, #12]
}
 8001974:	4618      	mov	r0, r3
 8001976:	f107 0710 	add.w	r7, r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bc90      	pop	{r4, r7}
 800197e:	4770      	bx	lr

08001980 <__malloc_lock>:
    return -1;
}


void __malloc_lock(struct _reent *r)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
    vPortEnterCritical();
 8001988:	f002 f826 	bl	80039d8 <vPortEnterCritical>
}
 800198c:	f107 0708 	add.w	r7, r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <__malloc_unlock>:


void __malloc_unlock(struct _reent *r)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
    vPortExitCritical();
 800199c:	f002 f832 	bl	8003a04 <vPortExitCritical>
}
 80019a0:	f107 0708 	add.w	r7, r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 80019b2:	79fa      	ldrb	r2, [r7, #7]
 80019b4:	f240 532c 	movw	r3, #1324	; 0x52c
 80019b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80019c0:	79f9      	ldrb	r1, [r7, #7]
 80019c2:	f644 630c 	movw	r3, #19980	; 0x4e0c
 80019c6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80019ca:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80019ce:	8313      	strh	r3, [r2, #24]
}
 80019d0:	f107 070c 	add.w	r7, r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop

080019dc <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 80019e6:	79fa      	ldrb	r2, [r7, #7]
 80019e8:	f240 532c 	movw	r3, #1324	; 0x52c
 80019ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80019f4:	79f9      	ldrb	r1, [r7, #7]
 80019f6:	f644 630c 	movw	r3, #19980	; 0x4e0c
 80019fa:	f6c0 0300 	movt	r3, #2048	; 0x800
 80019fe:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001a02:	8353      	strh	r3, [r2, #26]
}
 8001a04:	f107 070c 	add.w	r7, r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop

08001a10 <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	71fa      	strb	r2, [r7, #7]
 8001a1c:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 8001a1e:	79fa      	ldrb	r2, [r7, #7]
 8001a20:	f644 6318 	movw	r3, #19992	; 0x4e18
 8001a24:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f04f 0101 	mov.w	r1, #1
 8001a32:	f002 fba1 	bl	8004178 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001a36:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a3a:	f04f 0101 	mov.w	r1, #1
 8001a3e:	f002 fbef 	bl	8004220 <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 8001a4e:	79fa      	ldrb	r2, [r7, #7]
 8001a50:	f644 6314 	movw	r3, #19988	; 0x4e14
 8001a54:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001a58:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001a5c:	61bb      	str	r3, [r7, #24]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 8001a5e:	79fa      	ldrb	r2, [r7, #7]
 8001a60:	f240 533c 	movw	r3, #1340	; 0x53c
 8001a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f107 0318 	add.w	r3, r7, #24
 8001a72:	4619      	mov	r1, r3
 8001a74:	f002 f988 	bl	8003d88 <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 8001a78:	79bb      	ldrb	r3, [r7, #6]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d13a      	bne.n	8001af4 <STM_EVAL_PBInit+0xe4>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 8001a7e:	79fa      	ldrb	r2, [r7, #7]
 8001a80:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001a84:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001a88:	5c9a      	ldrb	r2, [r3, r2]
 8001a8a:	79f9      	ldrb	r1, [r7, #7]
 8001a8c:	f644 6324 	movw	r3, #20004	; 0x4e24
 8001a90:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001a94:	5c5b      	ldrb	r3, [r3, r1]
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f002 fd23 	bl	80044e4 <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 8001a9e:	79fa      	ldrb	r2, [r7, #7]
 8001aa0:	f644 631c 	movw	r3, #19996	; 0x4e1c
 8001aa4:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001aa8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001aac:	613b      	str	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8001aae:	f04f 0300 	mov.w	r3, #0
 8001ab2:	753b      	strb	r3, [r7, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 8001ab4:	f04f 0308 	mov.w	r3, #8
 8001ab8:	757b      	strb	r3, [r7, #21]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8001aba:	f04f 0301 	mov.w	r3, #1
 8001abe:	75bb      	strb	r3, [r7, #22]
    EXTI_Init(&EXTI_InitStructure);
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f002 f8c3 	bl	8003c50 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 8001aca:	79fa      	ldrb	r2, [r7, #7]
 8001acc:	f644 6328 	movw	r3, #20008	; 0x4e28
 8001ad0:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001ad4:	5c9b      	ldrb	r3, [r3, r2]
 8001ad6:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8001ad8:	f04f 030f 	mov.w	r3, #15
 8001adc:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8001ade:	f04f 030f 	mov.w	r3, #15
 8001ae2:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001ae4:	f04f 0301 	mov.w	r3, #1
 8001ae8:	73fb      	strb	r3, [r7, #15]

    NVIC_Init(&NVIC_InitStructure); 
 8001aea:	f107 030c 	add.w	r3, r7, #12
 8001aee:	4618      	mov	r0, r3
 8001af0:	f002 f826 	bl	8003b40 <NVIC_Init>
  }
}
 8001af4:	f107 0720 	add.w	r7, r7, #32
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <LIS302DL_Init>:
  * @param  LIS302DL_Config_Struct: pointer to a LIS302DL_Config_TypeDef structure 
  *         that contains the configuration setting for the LIS302DL.
  * @retval None
  */
void LIS302DL_Init(LIS302DL_InitTypeDef *LIS302DL_InitStruct)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface ---------------------------------------*/
  LIS302DL_LowLevel_Init();
 8001b0a:	f000 f8c1 	bl	8001c90 <LIS302DL_LowLevel_Init>
  
  /* Configure MEMS: data rate, power mode, full scale, self test and axes */
  ctrl = (uint8_t) (LIS302DL_InitStruct->Output_DataRate | LIS302DL_InitStruct->Power_Mode | \
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	785a      	ldrb	r2, [r3, #1]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	b2da      	uxtb	r2, r3
                    LIS302DL_InitStruct->Full_Scale | LIS302DL_InitStruct->Self_Test | \
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	78db      	ldrb	r3, [r3, #3]
  
  /* Configure the low level interface ---------------------------------------*/
  LIS302DL_LowLevel_Init();
  
  /* Configure MEMS: data rate, power mode, full scale, self test and axes */
  ctrl = (uint8_t) (LIS302DL_InitStruct->Output_DataRate | LIS302DL_InitStruct->Power_Mode | \
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	b2da      	uxtb	r2, r3
                    LIS302DL_InitStruct->Full_Scale | LIS302DL_InitStruct->Self_Test | \
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	791b      	ldrb	r3, [r3, #4]
  
  /* Configure the low level interface ---------------------------------------*/
  LIS302DL_LowLevel_Init();
  
  /* Configure MEMS: data rate, power mode, full scale, self test and axes */
  ctrl = (uint8_t) (LIS302DL_InitStruct->Output_DataRate | LIS302DL_InitStruct->Power_Mode | \
 8001b26:	4313      	orrs	r3, r2
 8001b28:	b2da      	uxtb	r2, r3
                    LIS302DL_InitStruct->Full_Scale | LIS302DL_InitStruct->Self_Test | \
                    LIS302DL_InitStruct->Axes_Enable);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	789b      	ldrb	r3, [r3, #2]
  
  /* Configure the low level interface ---------------------------------------*/
  LIS302DL_LowLevel_Init();
  
  /* Configure MEMS: data rate, power mode, full scale, self test and axes */
  ctrl = (uint8_t) (LIS302DL_InitStruct->Output_DataRate | LIS302DL_InitStruct->Power_Mode | \
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	73fb      	strb	r3, [r7, #15]
                    LIS302DL_InitStruct->Full_Scale | LIS302DL_InitStruct->Self_Test | \
                    LIS302DL_InitStruct->Axes_Enable);
  
  /* Write value to MEMS CTRL_REG1 regsister */
  LIS302DL_Write(&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 8001b34:	f107 030f 	add.w	r3, r7, #15
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f04f 0120 	mov.w	r1, #32
 8001b3e:	f04f 0201 	mov.w	r2, #1
 8001b42:	f000 f82d 	bl	8001ba0 <LIS302DL_Write>
}
 8001b46:	f107 0710 	add.w	r7, r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop

08001b50 <LIS302DL_InterruptConfig>:
  * @param  LIS302DL_InterruptConfig_TypeDef: pointer to a LIS302DL_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the LIS302DL Interrupt.
  * @retval None
  */
void LIS302DL_InterruptConfig(LIS302DL_InterruptConfigTypeDef *LIS302DL_IntConfigStruct)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 8001b58:	f04f 0300 	mov.w	r3, #0
 8001b5c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFG register */
  LIS302DL_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 8001b5e:	f107 030f 	add.w	r3, r7, #15
 8001b62:	4618      	mov	r0, r3
 8001b64:	f04f 0138 	mov.w	r1, #56	; 0x38
 8001b68:	f04f 0201 	mov.w	r2, #1
 8001b6c:	f000 f850 	bl	8001c10 <LIS302DL_Read>
  
  /* Configure latch Interrupt request, click interrupts and double click interrupts */                   
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	781a      	ldrb	r2, [r3, #0]
                   LIS302DL_IntConfigStruct->SingleClick_Axes | \
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	785b      	ldrb	r3, [r3, #1]
  
  /* Read CLICK_CFG register */
  LIS302DL_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
  
  /* Configure latch Interrupt request, click interrupts and double click interrupts */                   
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	b2da      	uxtb	r2, r3
                   LIS302DL_IntConfigStruct->SingleClick_Axes | \
                   LIS302DL_IntConfigStruct->DoubleClick_Axes);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	789b      	ldrb	r3, [r3, #2]
  
  /* Read CLICK_CFG register */
  LIS302DL_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
  
  /* Configure latch Interrupt request, click interrupts and double click interrupts */                   
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 8001b80:	4313      	orrs	r3, r2
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	73fb      	strb	r3, [r7, #15]
                   LIS302DL_IntConfigStruct->SingleClick_Axes | \
                   LIS302DL_IntConfigStruct->DoubleClick_Axes);
  
  /* Write value to MEMS CLICK_CFG register */
  LIS302DL_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 8001b86:	f107 030f 	add.w	r3, r7, #15
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f04f 0138 	mov.w	r1, #56	; 0x38
 8001b90:	f04f 0201 	mov.w	r2, #1
 8001b94:	f000 f804 	bl	8001ba0 <LIS302DL_Write>
}
 8001b98:	f107 0710 	add.w	r7, r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <LIS302DL_Write>:
  * @param  WriteAddr : LIS302DL's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void LIS302DL_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	460a      	mov	r2, r1
 8001bac:	70fa      	strb	r2, [r7, #3]
 8001bae:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8001bb0:	883b      	ldrh	r3, [r7, #0]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d903      	bls.n	8001bbe <LIS302DL_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bbc:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  LIS302DL_CS_LOW();
 8001bbe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001bc2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001bc6:	f04f 0108 	mov.w	r1, #8
 8001bca:	f002 f98d 	bl	8003ee8 <GPIO_ResetBits>
  
  /* Send the Address of the indexed register */
  LIS302DL_SendByte(WriteAddr);
 8001bce:	78fb      	ldrb	r3, [r7, #3]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 f943 	bl	8001e5c <LIS302DL_SendByte>
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8001bd6:	e00c      	b.n	8001bf2 <LIS302DL_Write+0x52>
  {
    LIS302DL_SendByte(*pBuffer);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f000 f93d 	bl	8001e5c <LIS302DL_SendByte>
    NumByteToWrite--;
 8001be2:	883b      	ldrh	r3, [r7, #0]
 8001be4:	f103 33ff 	add.w	r3, r3, #4294967295
 8001be8:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f103 0301 	add.w	r3, r3, #1
 8001bf0:	607b      	str	r3, [r7, #4]
  LIS302DL_CS_LOW();
  
  /* Send the Address of the indexed register */
  LIS302DL_SendByte(WriteAddr);
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8001bf2:	883b      	ldrh	r3, [r7, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1ef      	bne.n	8001bd8 <LIS302DL_Write+0x38>
    NumByteToWrite--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  LIS302DL_CS_HIGH();
 8001bf8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001bfc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001c00:	f04f 0108 	mov.w	r1, #8
 8001c04:	f002 f962 	bl	8003ecc <GPIO_SetBits>
}
 8001c08:	f107 0708 	add.w	r7, r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <LIS302DL_Read>:
  * @param  ReadAddr : LIS302DL's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the LIS302DL.
  * @retval None
  */
void LIS302DL_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	460a      	mov	r2, r1
 8001c1c:	70fa      	strb	r2, [r7, #3]
 8001c1e:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8001c20:	883b      	ldrh	r3, [r7, #0]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d904      	bls.n	8001c30 <LIS302DL_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001c2c:	70fb      	strb	r3, [r7, #3]
 8001c2e:	e003      	b.n	8001c38 <LIS302DL_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8001c30:	78fb      	ldrb	r3, [r7, #3]
 8001c32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c36:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  LIS302DL_CS_LOW();
 8001c38:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001c3c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001c40:	f04f 0108 	mov.w	r1, #8
 8001c44:	f002 f950 	bl	8003ee8 <GPIO_ResetBits>
  
  /* Send the Address of the indexed register */
  LIS302DL_SendByte(ReadAddr);
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f906 	bl	8001e5c <LIS302DL_SendByte>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8001c50:	e00f      	b.n	8001c72 <LIS302DL_Read+0x62>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to LIS302DL (Slave device) */
    *pBuffer = LIS302DL_SendByte(DUMMY_BYTE);
 8001c52:	f04f 0000 	mov.w	r0, #0
 8001c56:	f000 f901 	bl	8001e5c <LIS302DL_SendByte>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8001c62:	883b      	ldrh	r3, [r7, #0]
 8001c64:	f103 33ff 	add.w	r3, r3, #4294967295
 8001c68:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f103 0301 	add.w	r3, r3, #1
 8001c70:	607b      	str	r3, [r7, #4]
  
  /* Send the Address of the indexed register */
  LIS302DL_SendByte(ReadAddr);
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8001c72:	883b      	ldrh	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1ec      	bne.n	8001c52 <LIS302DL_Read+0x42>
    NumByteToRead--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  LIS302DL_CS_HIGH();
 8001c78:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001c7c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001c80:	f04f 0108 	mov.w	r1, #8
 8001c84:	f002 f922 	bl	8003ecc <GPIO_SetBits>
}
 8001c88:	f107 0708 	add.w	r7, r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <LIS302DL_LowLevel_Init>:
  * @brief  Initializes the low level interface used to drive the LIS302DL
  * @param  None
  * @retval None
  */
static void LIS302DL_LowLevel_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  SPI_InitTypeDef  SPI_InitStructure;

  /* Enable the SPI periph */
  RCC_APB2PeriphClockCmd(LIS302DL_SPI_CLK, ENABLE);
 8001c96:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001c9a:	f04f 0101 	mov.w	r1, #1
 8001c9e:	f002 fabf 	bl	8004220 <RCC_APB2PeriphClockCmd>

  /* Enable SCK, MOSI and MISO GPIO clocks */
  RCC_AHB1PeriphClockCmd(LIS302DL_SPI_SCK_GPIO_CLK | LIS302DL_SPI_MISO_GPIO_CLK | LIS302DL_SPI_MOSI_GPIO_CLK, ENABLE);
 8001ca2:	f04f 0001 	mov.w	r0, #1
 8001ca6:	f04f 0101 	mov.w	r1, #1
 8001caa:	f002 fa65 	bl	8004178 <RCC_AHB1PeriphClockCmd>

  /* Enable CS  GPIO clock */
  RCC_AHB1PeriphClockCmd(LIS302DL_SPI_CS_GPIO_CLK, ENABLE);
 8001cae:	f04f 0010 	mov.w	r0, #16
 8001cb2:	f04f 0101 	mov.w	r1, #1
 8001cb6:	f002 fa5f 	bl	8004178 <RCC_AHB1PeriphClockCmd>
  
  /* Enable INT1 GPIO clock */
  RCC_AHB1PeriphClockCmd(LIS302DL_SPI_INT1_GPIO_CLK, ENABLE);
 8001cba:	f04f 0010 	mov.w	r0, #16
 8001cbe:	f04f 0101 	mov.w	r1, #1
 8001cc2:	f002 fa59 	bl	8004178 <RCC_AHB1PeriphClockCmd>
  
  /* Enable INT2 GPIO clock */
  RCC_AHB1PeriphClockCmd(LIS302DL_SPI_INT2_GPIO_CLK, ENABLE);
 8001cc6:	f04f 0010 	mov.w	r0, #16
 8001cca:	f04f 0101 	mov.w	r1, #1
 8001cce:	f002 fa53 	bl	8004178 <RCC_AHB1PeriphClockCmd>

  GPIO_PinAFConfig(LIS302DL_SPI_SCK_GPIO_PORT, LIS302DL_SPI_SCK_SOURCE, LIS302DL_SPI_SCK_AF);
 8001cd2:	f04f 0000 	mov.w	r0, #0
 8001cd6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001cda:	f04f 0105 	mov.w	r1, #5
 8001cde:	f04f 0205 	mov.w	r2, #5
 8001ce2:	f002 f90f 	bl	8003f04 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(LIS302DL_SPI_MISO_GPIO_PORT, LIS302DL_SPI_MISO_SOURCE, LIS302DL_SPI_MISO_AF);
 8001ce6:	f04f 0000 	mov.w	r0, #0
 8001cea:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001cee:	f04f 0106 	mov.w	r1, #6
 8001cf2:	f04f 0205 	mov.w	r2, #5
 8001cf6:	f002 f905 	bl	8003f04 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(LIS302DL_SPI_MOSI_GPIO_PORT, LIS302DL_SPI_MOSI_SOURCE, LIS302DL_SPI_MOSI_AF);
 8001cfa:	f04f 0000 	mov.w	r0, #0
 8001cfe:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001d02:	f04f 0107 	mov.w	r1, #7
 8001d06:	f04f 0205 	mov.w	r2, #5
 8001d0a:	f002 f8fb 	bl	8003f04 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001d0e:	f04f 0302 	mov.w	r3, #2
 8001d12:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
 8001d1a:	f04f 0302 	mov.w	r3, #2
 8001d1e:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001d20:	f04f 0302 	mov.w	r3, #2
 8001d24:	777b      	strb	r3, [r7, #29]

  /* SPI SCK pin configuration */
  GPIO_InitStructure.GPIO_Pin = LIS302DL_SPI_SCK_PIN;
 8001d26:	f04f 0320 	mov.w	r3, #32
 8001d2a:	61bb      	str	r3, [r7, #24]
  GPIO_Init(LIS302DL_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8001d2c:	f04f 0000 	mov.w	r0, #0
 8001d30:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001d34:	f107 0318 	add.w	r3, r7, #24
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f002 f825 	bl	8003d88 <GPIO_Init>

  /* SPI  MOSI pin configuration */
  GPIO_InitStructure.GPIO_Pin =  LIS302DL_SPI_MOSI_PIN;
 8001d3e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8001d42:	61bb      	str	r3, [r7, #24]
  GPIO_Init(LIS302DL_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 8001d44:	f04f 0000 	mov.w	r0, #0
 8001d48:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001d4c:	f107 0318 	add.w	r3, r7, #24
 8001d50:	4619      	mov	r1, r3
 8001d52:	f002 f819 	bl	8003d88 <GPIO_Init>

  /* SPI MISO pin configuration */
  GPIO_InitStructure.GPIO_Pin = LIS302DL_SPI_MISO_PIN;
 8001d56:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001d5a:	61bb      	str	r3, [r7, #24]
  GPIO_Init(LIS302DL_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 8001d5c:	f04f 0000 	mov.w	r0, #0
 8001d60:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001d64:	f107 0318 	add.w	r3, r7, #24
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f002 f80d 	bl	8003d88 <GPIO_Init>

  /* SPI configuration -------------------------------------------------------*/
  SPI_I2S_DeInit(LIS302DL_SPI);
 8001d6e:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8001d72:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001d76:	f002 fad1 	bl	800431c <SPI_I2S_DeInit>
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	80bb      	strh	r3, [r7, #4]
  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	813b      	strh	r3, [r7, #8]
  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	817b      	strh	r3, [r7, #10]
  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	81bb      	strh	r3, [r7, #12]
  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8001d92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d96:	81fb      	strh	r3, [r7, #14]
  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
 8001d98:	f04f 0308 	mov.w	r3, #8
 8001d9c:	823b      	strh	r3, [r7, #16]
  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8001d9e:	f04f 0300 	mov.w	r3, #0
 8001da2:	827b      	strh	r3, [r7, #18]
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 8001da4:	f04f 0307 	mov.w	r3, #7
 8001da8:	82bb      	strh	r3, [r7, #20]
  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8001daa:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001dae:	80fb      	strh	r3, [r7, #6]
  SPI_Init(LIS302DL_SPI, &SPI_InitStructure);
 8001db0:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8001db4:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001db8:	f107 0304 	add.w	r3, r7, #4
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f002 faf1 	bl	80043a4 <SPI_Init>

  /* Enable SPI1  */
  SPI_Cmd(LIS302DL_SPI, ENABLE);
 8001dc2:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8001dc6:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001dca:	f04f 0101 	mov.w	r1, #1
 8001dce:	f002 fb2d 	bl	800442c <SPI_Cmd>

  /* Configure GPIO PIN for Lis Chip select */
  GPIO_InitStructure.GPIO_Pin = LIS302DL_SPI_CS_PIN;
 8001dd2:	f04f 0308 	mov.w	r3, #8
 8001dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001dd8:	f04f 0301 	mov.w	r3, #1
 8001ddc:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001dde:	f04f 0300 	mov.w	r3, #0
 8001de2:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001de4:	f04f 0302 	mov.w	r3, #2
 8001de8:	777b      	strb	r3, [r7, #29]
  GPIO_Init(LIS302DL_SPI_CS_GPIO_PORT, &GPIO_InitStructure);
 8001dea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001dee:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001df2:	f107 0318 	add.w	r3, r7, #24
 8001df6:	4619      	mov	r1, r3
 8001df8:	f001 ffc6 	bl	8003d88 <GPIO_Init>

  /* Deselect : Chip Select high */
  GPIO_SetBits(LIS302DL_SPI_CS_GPIO_PORT, LIS302DL_SPI_CS_PIN);
 8001dfc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e00:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001e04:	f04f 0108 	mov.w	r1, #8
 8001e08:	f002 f860 	bl	8003ecc <GPIO_SetBits>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.GPIO_Pin = LIS302DL_SPI_INT1_PIN;
 8001e0c:	f04f 0301 	mov.w	r3, #1
 8001e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001e18:	f04f 0300 	mov.w	r3, #0
 8001e1c:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001e1e:	f04f 0302 	mov.w	r3, #2
 8001e22:	777b      	strb	r3, [r7, #29]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8001e24:	f04f 0300 	mov.w	r3, #0
 8001e28:	77fb      	strb	r3, [r7, #31]
  GPIO_Init(LIS302DL_SPI_INT1_GPIO_PORT, &GPIO_InitStructure);
 8001e2a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e2e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001e32:	f107 0318 	add.w	r3, r7, #24
 8001e36:	4619      	mov	r1, r3
 8001e38:	f001 ffa6 	bl	8003d88 <GPIO_Init>
  
  GPIO_InitStructure.GPIO_Pin = LIS302DL_SPI_INT2_PIN;
 8001e3c:	f04f 0302 	mov.w	r3, #2
 8001e40:	61bb      	str	r3, [r7, #24]
  GPIO_Init(LIS302DL_SPI_INT2_GPIO_PORT, &GPIO_InitStructure);
 8001e42:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e46:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001e4a:	f107 0318 	add.w	r3, r7, #24
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f001 ff9a 	bl	8003d88 <GPIO_Init>
}
 8001e54:	f107 0720 	add.w	r7, r7, #32
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <LIS302DL_SendByte>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval The received byte value
  */
static uint8_t LIS302DL_SendByte(uint8_t byte)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	71fb      	strb	r3, [r7, #7]
  /* Loop while DR register in not emplty */
  LIS302DLTimeout = LIS302DL_FLAG_TIMEOUT;
 8001e66:	f240 5340 	movw	r3, #1344	; 0x540
 8001e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e72:	601a      	str	r2, [r3, #0]
  while (SPI_I2S_GetFlagStatus(LIS302DL_SPI, SPI_I2S_FLAG_TXE) == RESET)
 8001e74:	e017      	b.n	8001ea6 <LIS302DL_SendByte+0x4a>
  {
    if((LIS302DLTimeout--) == 0) return LIS302DL_TIMEOUT_UserCallback();
 8001e76:	f240 5340 	movw	r3, #1344	; 0x540
 8001e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	bf14      	ite	ne
 8001e84:	2200      	movne	r2, #0
 8001e86:	2201      	moveq	r2, #1
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	f103 31ff 	add.w	r1, r3, #4294967295
 8001e8e:	f240 5340 	movw	r3, #1344	; 0x540
 8001e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e96:	6019      	str	r1, [r3, #0]
 8001e98:	2a00      	cmp	r2, #0
 8001e9a:	d004      	beq.n	8001ea6 <LIS302DL_SendByte+0x4a>
 8001e9c:	f000 f960 	bl	8002160 <LIS302DL_TIMEOUT_UserCallback>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	e046      	b.n	8001f34 <LIS302DL_SendByte+0xd8>
  */
static uint8_t LIS302DL_SendByte(uint8_t byte)
{
  /* Loop while DR register in not emplty */
  LIS302DLTimeout = LIS302DL_FLAG_TIMEOUT;
  while (SPI_I2S_GetFlagStatus(LIS302DL_SPI, SPI_I2S_FLAG_TXE) == RESET)
 8001ea6:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8001eaa:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001eae:	f04f 0102 	mov.w	r1, #2
 8001eb2:	f002 faf7 	bl	80044a4 <SPI_I2S_GetFlagStatus>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0dc      	beq.n	8001e76 <LIS302DL_SendByte+0x1a>
  {
    if((LIS302DLTimeout--) == 0) return LIS302DL_TIMEOUT_UserCallback();
  }
  
  /* Send a Byte through the SPI peripheral */
  SPI_I2S_SendData(LIS302DL_SPI, byte);
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8001ec4:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f002 fadd 	bl	8004488 <SPI_I2S_SendData>
  
  /* Wait to receive a Byte */
  LIS302DLTimeout = LIS302DL_FLAG_TIMEOUT;
 8001ece:	f240 5340 	movw	r3, #1344	; 0x540
 8001ed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ed6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001eda:	601a      	str	r2, [r3, #0]
  while (SPI_I2S_GetFlagStatus(LIS302DL_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 8001edc:	e017      	b.n	8001f0e <LIS302DL_SendByte+0xb2>
  {
    if((LIS302DLTimeout--) == 0) return LIS302DL_TIMEOUT_UserCallback();
 8001ede:	f240 5340 	movw	r3, #1344	; 0x540
 8001ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	bf14      	ite	ne
 8001eec:	2200      	movne	r2, #0
 8001eee:	2201      	moveq	r2, #1
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	f103 31ff 	add.w	r1, r3, #4294967295
 8001ef6:	f240 5340 	movw	r3, #1344	; 0x540
 8001efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001efe:	6019      	str	r1, [r3, #0]
 8001f00:	2a00      	cmp	r2, #0
 8001f02:	d004      	beq.n	8001f0e <LIS302DL_SendByte+0xb2>
 8001f04:	f000 f92c 	bl	8002160 <LIS302DL_TIMEOUT_UserCallback>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	e012      	b.n	8001f34 <LIS302DL_SendByte+0xd8>
  /* Send a Byte through the SPI peripheral */
  SPI_I2S_SendData(LIS302DL_SPI, byte);
  
  /* Wait to receive a Byte */
  LIS302DLTimeout = LIS302DL_FLAG_TIMEOUT;
  while (SPI_I2S_GetFlagStatus(LIS302DL_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 8001f0e:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8001f12:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001f16:	f04f 0101 	mov.w	r1, #1
 8001f1a:	f002 fac3 	bl	80044a4 <SPI_I2S_GetFlagStatus>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0dc      	beq.n	8001ede <LIS302DL_SendByte+0x82>
  {
    if((LIS302DLTimeout--) == 0) return LIS302DL_TIMEOUT_UserCallback();
  }
  
  /* Return the Byte read from the SPI bus */
  return (uint8_t)SPI_I2S_ReceiveData(LIS302DL_SPI);
 8001f24:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8001f28:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001f2c:	f002 fa9e 	bl	800446c <SPI_I2S_ReceiveData>
 8001f30:	4603      	mov	r3, r0
 8001f32:	b2db      	uxtb	r3, r3
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	f107 0708 	add.w	r7, r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop

08001f40 <prvSetupHardware>:
#include "hw_config.h"


/*-----------------------------------------------------------*/
void prvSetupHardware( void )
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
	/* Set the Vector Table base address at 0x08000000 */
	NVIC_SetVectorTable( NVIC_VectTab_FLASH, 0x0 );
 8001f44:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001f48:	f04f 0100 	mov.w	r1, #0
 8001f4c:	f001 fe6a 	bl	8003c24 <NVIC_SetVectorTable>
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8001f50:	f44f 7040 	mov.w	r0, #768	; 0x300
 8001f54:	f001 fde0 	bl	8003b18 <NVIC_PriorityGroupConfig>

	/* Configure LED IOs as output push-pull */
    /* Initialize LEDs on STM32F4_Discovery board */
	prvLED_Config(GPIO);
 8001f58:	f04f 0000 	mov.w	r0, #0
 8001f5c:	f000 f80c 	bl	8001f78 <prvLED_Config>
	/* Configure User button pin (PA0) as external interrupt -> modes switching */
	STM_EVAL_PBInit(BUTTON_USER,BUTTON_MODE_EXTI);
 8001f60:	f04f 0000 	mov.w	r0, #0
 8001f64:	f04f 0101 	mov.w	r1, #1
 8001f68:	f7ff fd52 	bl	8001a10 <STM_EVAL_PBInit>

	/* Configuration of Timer4 to control LEDs based on MEMS data */
	prvTIM4_Config();
 8001f6c:	f000 f8fc 	bl	8002168 <prvTIM4_Config>

	/* Configure LIS302 in order to produce data used for TIM4 reconfiguration and LED control */
	prvMEMS_Config();
 8001f70:	f000 f864 	bl	800203c <prvMEMS_Config>
}
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop

08001f78 <prvLED_Config>:

void prvLED_Config(char state)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  /* GPIOD Periph clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8001f82:	f04f 0008 	mov.w	r0, #8
 8001f86:	f04f 0101 	mov.w	r1, #1
 8001f8a:	f002 f8f5 	bl	8004178 <RCC_AHB1PeriphClockCmd>
  /* Configure PD12, PD13, PD14 and PD15 in output push-pull mode */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13| GPIO_Pin_14| GPIO_Pin_15;
 8001f8e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001f92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001f94:	f04f 0300 	mov.w	r3, #0
 8001f98:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001f9a:	f04f 0303 	mov.w	r3, #3
 8001f9e:	737b      	strb	r3, [r7, #13]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001fa0:	f04f 0300 	mov.w	r3, #0
 8001fa4:	73fb      	strb	r3, [r7, #15]

  if(state==GPIO)
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10c      	bne.n	8001fc6 <prvLED_Config+0x4e>
  {
	  /* standard output pin */
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001fac:	f04f 0301 	mov.w	r3, #1
 8001fb0:	733b      	strb	r3, [r7, #12]
	  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001fb2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001fb6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001fba:	f107 0308 	add.w	r3, r7, #8
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	f001 fee2 	bl	8003d88 <GPIO_Init>
 8001fc4:	e036      	b.n	8002034 <prvLED_Config+0xbc>
  }
  else
  {
	  /*-------------------------- GPIO Configuration ----------------------------*/
	  /* GPIOD Configuration: Pins 12, 13, 14 and 15 in output push-pull - alternative mode */
	  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 8001fc6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001fca:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001fcc:	f04f 0302 	mov.w	r3, #2
 8001fd0:	733b      	strb	r3, [r7, #12]
	  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001fd2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001fd6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001fda:	f107 0308 	add.w	r3, r7, #8
 8001fde:	4619      	mov	r1, r3
 8001fe0:	f001 fed2 	bl	8003d88 <GPIO_Init>

	  /* Connect TIM4 pins to AF2 */
	  GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_TIM4);
 8001fe4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001fe8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001fec:	f04f 010c 	mov.w	r1, #12
 8001ff0:	f04f 0202 	mov.w	r2, #2
 8001ff4:	f001 ff86 	bl	8003f04 <GPIO_PinAFConfig>
	  GPIO_PinAFConfig(GPIOD, GPIO_PinSource13, GPIO_AF_TIM4);
 8001ff8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001ffc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002000:	f04f 010d 	mov.w	r1, #13
 8002004:	f04f 0202 	mov.w	r2, #2
 8002008:	f001 ff7c 	bl	8003f04 <GPIO_PinAFConfig>
	  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_TIM4);
 800200c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8002010:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002014:	f04f 010e 	mov.w	r1, #14
 8002018:	f04f 0202 	mov.w	r2, #2
 800201c:	f001 ff72 	bl	8003f04 <GPIO_PinAFConfig>
	  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_TIM4);
 8002020:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8002024:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002028:	f04f 010f 	mov.w	r1, #15
 800202c:	f04f 0202 	mov.w	r2, #2
 8002030:	f001 ff68 	bl	8003f04 <GPIO_PinAFConfig>
  }
}
 8002034:	f107 0710 	add.w	r7, r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <prvMEMS_Config>:


void prvMEMS_Config(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
	uint8_t ctrl = 0;
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	72fb      	strb	r3, [r7, #11]
	uint32_t i=0;		//simple index for software delay
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]

	LIS302DL_InitTypeDef  LIS302DL_InitStruct;
	LIS302DL_InterruptConfigTypeDef LIS302DL_InterruptStruct;

	/* Set configuration of LIS302DL*/
	LIS302DL_InitStruct.Power_Mode = LIS302DL_LOWPOWERMODE_ACTIVE;
 800204e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002052:	713b      	strb	r3, [r7, #4]
	LIS302DL_InitStruct.Output_DataRate = LIS302DL_DATARATE_100;
 8002054:	f04f 0300 	mov.w	r3, #0
 8002058:	717b      	strb	r3, [r7, #5]
	LIS302DL_InitStruct.Axes_Enable = LIS302DL_X_ENABLE | LIS302DL_Y_ENABLE | LIS302DL_Z_ENABLE;
 800205a:	f04f 0307 	mov.w	r3, #7
 800205e:	71bb      	strb	r3, [r7, #6]
	LIS302DL_InitStruct.Full_Scale = LIS302DL_FULLSCALE_2_3;
 8002060:	f04f 0300 	mov.w	r3, #0
 8002064:	71fb      	strb	r3, [r7, #7]
	LIS302DL_InitStruct.Self_Test = LIS302DL_SELFTEST_NORMAL;
 8002066:	f04f 0300 	mov.w	r3, #0
 800206a:	723b      	strb	r3, [r7, #8]
	LIS302DL_Init(&LIS302DL_InitStruct);
 800206c:	f107 0304 	add.w	r3, r7, #4
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff fd43 	bl	8001afc <LIS302DL_Init>

	/* Set configuration of Internal High Pass Filter of LIS302DL*/
	LIS302DL_InterruptStruct.Latch_Request = LIS302DL_INTERRUPTREQUEST_LATCHED;
 8002076:	f04f 0340 	mov.w	r3, #64	; 0x40
 800207a:	703b      	strb	r3, [r7, #0]
	LIS302DL_InterruptStruct.SingleClick_Axes = LIS302DL_CLICKINTERRUPT_Z_ENABLE;
 800207c:	f04f 0310 	mov.w	r3, #16
 8002080:	707b      	strb	r3, [r7, #1]
	LIS302DL_InterruptStruct.DoubleClick_Axes = LIS302DL_DOUBLECLICKINTERRUPT_Z_ENABLE;
 8002082:	f04f 0320 	mov.w	r3, #32
 8002086:	70bb      	strb	r3, [r7, #2]
	LIS302DL_InterruptConfig(&LIS302DL_InterruptStruct);
 8002088:	463b      	mov	r3, r7
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fd60 	bl	8001b50 <LIS302DL_InterruptConfig>

	/* Required delay for the MEMS Accelerometer: Turn-on time = 3/Output data Rate
	                                                            = 3/100 = 30ms */
	for(i=0;i<0x1FFFF;i++);
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	e003      	b.n	80020a0 <prvMEMS_Config+0x64>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f103 0301 	add.w	r3, r3, #1
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80020a6:	f2c0 0301 	movt	r3, #1
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d9f4      	bls.n	8002098 <prvMEMS_Config+0x5c>

	/* Configure Interrupt control register: enable Click interrupt1 */
	ctrl = 0x07;
 80020ae:	f04f 0307 	mov.w	r3, #7
 80020b2:	72fb      	strb	r3, [r7, #11]
	LIS302DL_Write(&ctrl, LIS302DL_CTRL_REG3_ADDR, 1);
 80020b4:	f107 030b 	add.w	r3, r7, #11
 80020b8:	4618      	mov	r0, r3
 80020ba:	f04f 0122 	mov.w	r1, #34	; 0x22
 80020be:	f04f 0201 	mov.w	r2, #1
 80020c2:	f7ff fd6d 	bl	8001ba0 <LIS302DL_Write>

	/* Enable Interrupt generation on click/double click on Z axis */
	ctrl = 0x70;
 80020c6:	f04f 0370 	mov.w	r3, #112	; 0x70
 80020ca:	72fb      	strb	r3, [r7, #11]
	LIS302DL_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 80020cc:	f107 030b 	add.w	r3, r7, #11
 80020d0:	4618      	mov	r0, r3
 80020d2:	f04f 0138 	mov.w	r1, #56	; 0x38
 80020d6:	f04f 0201 	mov.w	r2, #1
 80020da:	f7ff fd61 	bl	8001ba0 <LIS302DL_Write>

	/* Configure Click Threshold on X/Y axis (10 x 0.5g) */
	ctrl = 0xAA;
 80020de:	f04f 03aa 	mov.w	r3, #170	; 0xaa
 80020e2:	72fb      	strb	r3, [r7, #11]
	LIS302DL_Write(&ctrl, LIS302DL_CLICK_THSY_X_REG_ADDR, 1);
 80020e4:	f107 030b 	add.w	r3, r7, #11
 80020e8:	4618      	mov	r0, r3
 80020ea:	f04f 013b 	mov.w	r1, #59	; 0x3b
 80020ee:	f04f 0201 	mov.w	r2, #1
 80020f2:	f7ff fd55 	bl	8001ba0 <LIS302DL_Write>

	/* Configure Click Threshold on Z axis (10 x 0.5g) */
	ctrl = 0x0A;
 80020f6:	f04f 030a 	mov.w	r3, #10
 80020fa:	72fb      	strb	r3, [r7, #11]
	LIS302DL_Write(&ctrl, LIS302DL_CLICK_THSZ_REG_ADDR, 1);
 80020fc:	f107 030b 	add.w	r3, r7, #11
 8002100:	4618      	mov	r0, r3
 8002102:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8002106:	f04f 0201 	mov.w	r2, #1
 800210a:	f7ff fd49 	bl	8001ba0 <LIS302DL_Write>

	/* Configure Time Limit */
	ctrl = 0x03;
 800210e:	f04f 0303 	mov.w	r3, #3
 8002112:	72fb      	strb	r3, [r7, #11]
	LIS302DL_Write(&ctrl, LIS302DL_CLICK_TIMELIMIT_REG_ADDR, 1);
 8002114:	f107 030b 	add.w	r3, r7, #11
 8002118:	4618      	mov	r0, r3
 800211a:	f04f 013d 	mov.w	r1, #61	; 0x3d
 800211e:	f04f 0201 	mov.w	r2, #1
 8002122:	f7ff fd3d 	bl	8001ba0 <LIS302DL_Write>

	/* Configure Latency */
	ctrl = 0x7F;
 8002126:	f04f 037f 	mov.w	r3, #127	; 0x7f
 800212a:	72fb      	strb	r3, [r7, #11]
	LIS302DL_Write(&ctrl, LIS302DL_CLICK_LATENCY_REG_ADDR, 1);
 800212c:	f107 030b 	add.w	r3, r7, #11
 8002130:	4618      	mov	r0, r3
 8002132:	f04f 013e 	mov.w	r1, #62	; 0x3e
 8002136:	f04f 0201 	mov.w	r2, #1
 800213a:	f7ff fd31 	bl	8001ba0 <LIS302DL_Write>

	/* Configure Click Window */
	ctrl = 0x7F;
 800213e:	f04f 037f 	mov.w	r3, #127	; 0x7f
 8002142:	72fb      	strb	r3, [r7, #11]
	LIS302DL_Write(&ctrl, LIS302DL_CLICK_WINDOW_REG_ADDR, 1);
 8002144:	f107 030b 	add.w	r3, r7, #11
 8002148:	4618      	mov	r0, r3
 800214a:	f04f 013f 	mov.w	r1, #63	; 0x3f
 800214e:	f04f 0201 	mov.w	r2, #1
 8002152:	f7ff fd25 	bl	8001ba0 <LIS302DL_Write>
}
 8002156:	f107 0710 	add.w	r7, r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop

08002160 <LIS302DL_TIMEOUT_UserCallback>:
  * @brief  MEMS accelerometer management of the timeout situation.
  * @param  None.
  * @retval None.
  */
uint32_t LIS302DL_TIMEOUT_UserCallback(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* MEMS Accelerometer Timeout error has occured */
  while (1)
  {
  }
 8002164:	e7fe      	b.n	8002164 <LIS302DL_TIMEOUT_UserCallback+0x4>
 8002166:	bf00      	nop

08002168 <prvTIM4_Config>:
}

void prvTIM4_Config(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08a      	sub	sp, #40	; 0x28
 800216c:	af00      	add	r7, sp, #0
  uint16_t PrescalerValue = 0;
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	84fb      	strh	r3, [r7, #38]	; 0x26
  TIM_OCInitTypeDef  TIM_OCInitStructure;
  TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;

  /* --------------------------- System Clocks Configuration -----------------*/
  /* TIM4 clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8002174:	f04f 0004 	mov.w	r0, #4
 8002178:	f04f 0101 	mov.w	r1, #1
 800217c:	f002 f826 	bl	80041cc <RCC_APB1PeriphClockCmd>
     function to update SystemCoreClock variable value. Otherwise, any configuration
     based on this variable will be incorrect.
  ----------------------------------------------------------------------- */

  /* Compute the prescaler value */
  PrescalerValue = (uint16_t) ((SystemCoreClock /2) / 2000) - 1;
 8002180:	f240 5324 	movw	r3, #1316	; 0x524
 8002184:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 800218e:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8002192:	fba3 1302 	umull	r1, r3, r3, r2
 8002196:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800219a:	b29b      	uxth	r3, r3
 800219c:	f103 33ff 	add.w	r3, r3, #4294967295
 80021a0:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Time base configuration */
  TIM_TimeBaseStructure.TIM_Period = TIM_ARR;
 80021a2:	f240 736c 	movw	r3, #1900	; 0x76c
 80021a6:	60bb      	str	r3, [r7, #8]
  TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 80021a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021aa:	80bb      	strh	r3, [r7, #4]
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80021ac:	f04f 0300 	mov.w	r3, #0
 80021b0:	81bb      	strh	r3, [r7, #12]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80021b2:	f04f 0300 	mov.w	r3, #0
 80021b6:	80fb      	strh	r3, [r7, #6]
  TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 80021b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80021bc:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80021c0:	f107 0304 	add.w	r3, r7, #4
 80021c4:	4619      	mov	r1, r3
 80021c6:	f002 f9e5 	bl	8004594 <TIM_TimeBaseInit>

  /* Enable TIM4 Preload register on ARR */
  TIM_ARRPreloadConfig(TIM4, ENABLE);
 80021ca:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80021ce:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80021d2:	f04f 0101 	mov.w	r1, #1
 80021d6:	f002 fa65 	bl	80046a4 <TIM_ARRPreloadConfig>

  /* TIM PWM1 Mode configuration: Channel */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80021da:	f04f 0360 	mov.w	r3, #96	; 0x60
 80021de:	823b      	strh	r3, [r7, #16]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80021e0:	f04f 0301 	mov.w	r3, #1
 80021e4:	827b      	strh	r3, [r7, #18]
  TIM_OCInitStructure.TIM_Pulse = TIM_CCR;
 80021e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ea:	61bb      	str	r3, [r7, #24]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 80021ec:	f04f 0300 	mov.w	r3, #0
 80021f0:	83bb      	strh	r3, [r7, #28]

  /* Output Compare PWM1 Mode configuration: Channel1 */
  TIM_OC1Init(TIM4, &TIM_OCInitStructure);
 80021f2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80021f6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80021fa:	f107 0310 	add.w	r3, r7, #16
 80021fe:	4619      	mov	r1, r3
 8002200:	f002 fa90 	bl	8004724 <TIM_OC1Init>
  TIM_CCxCmd(TIM4, TIM_Channel_1, DISABLE);
 8002204:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002208:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800220c:	f04f 0100 	mov.w	r1, #0
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	f002 fd48 	bl	8004ca8 <TIM_CCxCmd>

  TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
 8002218:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800221c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002220:	f04f 0108 	mov.w	r1, #8
 8002224:	f002 fcc8 	bl	8004bb8 <TIM_OC1PreloadConfig>

  /* Output Compare PWM1 Mode configuration: Channel2 */
  TIM_OC2Init(TIM4, &TIM_OCInitStructure);
 8002228:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800222c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002230:	f107 0310 	add.w	r3, r7, #16
 8002234:	4619      	mov	r1, r3
 8002236:	f002 faf3 	bl	8004820 <TIM_OC2Init>
  TIM_CCxCmd(TIM4, TIM_Channel_2, DISABLE);
 800223a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800223e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002242:	f04f 0104 	mov.w	r1, #4
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	f002 fd2d 	bl	8004ca8 <TIM_CCxCmd>

  TIM_OC2PreloadConfig(TIM4, TIM_OCPreload_Enable);
 800224e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002252:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002256:	f04f 0108 	mov.w	r1, #8
 800225a:	f002 fcc9 	bl	8004bf0 <TIM_OC2PreloadConfig>

  /* Output Compare PWM1 Mode configuration: Channel3 */
  TIM_OC3Init(TIM4, &TIM_OCInitStructure);
 800225e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002262:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002266:	f107 0310 	add.w	r3, r7, #16
 800226a:	4619      	mov	r1, r3
 800226c:	f002 fb6c 	bl	8004948 <TIM_OC3Init>
  TIM_CCxCmd(TIM4, TIM_Channel_3, DISABLE);
 8002270:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002274:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002278:	f04f 0108 	mov.w	r1, #8
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	f002 fd12 	bl	8004ca8 <TIM_CCxCmd>

  TIM_OC3PreloadConfig(TIM4, TIM_OCPreload_Enable);
 8002284:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002288:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800228c:	f04f 0108 	mov.w	r1, #8
 8002290:	f002 fcce 	bl	8004c30 <TIM_OC3PreloadConfig>

  /* Output Compare PWM1 Mode configuration: Channel4 */
  TIM_OC4Init(TIM4, &TIM_OCInitStructure);
 8002294:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002298:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800229c:	f107 0310 	add.w	r3, r7, #16
 80022a0:	4619      	mov	r1, r3
 80022a2:	f002 fbe1 	bl	8004a68 <TIM_OC4Init>
  TIM_CCxCmd(TIM4, TIM_Channel_4, DISABLE);
 80022a6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80022aa:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80022ae:	f04f 010c 	mov.w	r1, #12
 80022b2:	f04f 0200 	mov.w	r2, #0
 80022b6:	f002 fcf7 	bl	8004ca8 <TIM_CCxCmd>

  TIM_OC4PreloadConfig(TIM4, TIM_OCPreload_Enable);
 80022ba:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80022be:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80022c2:	f04f 0108 	mov.w	r1, #8
 80022c6:	f002 fccf 	bl	8004c68 <TIM_OC4PreloadConfig>
}
 80022ca:	f107 0728 	add.w	r7, r7, #40	; 0x28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop

080022d4 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08a      	sub	sp, #40	; 0x28
 80022d8:	af02      	add	r7, sp, #8
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	4613      	mov	r3, r2
 80022e2:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 80022e4:	88fb      	ldrh	r3, [r7, #6]
 80022e6:	4618      	mov	r0, r3
 80022e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022ea:	f000 fe53 	bl	8002f94 <prvAllocateTCBAndStack>
 80022ee:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 80a5 	beq.w	8002442 <xTaskGenericCreate+0x16e>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022fc:	88fb      	ldrh	r3, [r7, #6]
 80022fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8002302:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002306:	18d3      	adds	r3, r2, r3
 8002308:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	f023 0307 	bic.w	r3, r3, #7
 8002310:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8002312:	88fb      	ldrh	r3, [r7, #6]
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	69b8      	ldr	r0, [r7, #24]
 8002318:	68b9      	ldr	r1, [r7, #8]
 800231a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800231c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800231e:	f000 fd11 	bl	8002d44 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002322:	6978      	ldr	r0, [r7, #20]
 8002324:	68f9      	ldr	r1, [r7, #12]
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	f001 fac2 	bl	80038b0 <pxPortInitialiseStack>
 800232c:	4602      	mov	r2, r0
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
 8002332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 8002338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
 800233e:	f001 fb4b 	bl	80039d8 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8002342:	f240 73ac 	movw	r3, #1964	; 0x7ac
 8002346:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f103 0201 	add.w	r2, r3, #1
 8002350:	f240 73ac 	movw	r3, #1964	; 0x7ac
 8002354:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002358:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 800235a:	f240 63d0 	movw	r3, #1744	; 0x6d0
 800235e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10f      	bne.n	8002388 <xTaskGenericCreate+0xb4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8002368:	f240 63d0 	movw	r3, #1744	; 0x6d0
 800236c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 8002374:	f240 73ac 	movw	r3, #1964	; 0x7ac
 8002378:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d118      	bne.n	80023b4 <xTaskGenericCreate+0xe0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8002382:	f000 fd23 	bl	8002dcc <prvInitialiseTaskLists>
 8002386:	e015      	b.n	80023b4 <xTaskGenericCreate+0xe0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8002388:	f240 73bc 	movw	r3, #1980	; 0x7bc
 800238c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10e      	bne.n	80023b4 <xTaskGenericCreate+0xe0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8002396:	f240 63d0 	movw	r3, #1744	; 0x6d0
 800239a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d805      	bhi.n	80023b4 <xTaskGenericCreate+0xe0>
					{
						pxCurrentTCB = pxNewTCB;
 80023a8:	f240 63d0 	movw	r3, #1744	; 0x6d0
 80023ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b8:	f240 73b4 	movw	r3, #1972	; 0x7b4
 80023bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d906      	bls.n	80023d4 <xTaskGenericCreate+0x100>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ca:	f240 73b4 	movw	r3, #1972	; 0x7b4
 80023ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023d2:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
 80023d4:	f240 73d0 	movw	r3, #2000	; 0x7d0
 80023d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f103 0201 	add.w	r2, r3, #1
 80023e2:	f240 73d0 	movw	r3, #2000	; 0x7d0
 80023e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023ea:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f0:	f240 73b8 	movw	r3, #1976	; 0x7b8
 80023f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d906      	bls.n	800240c <xTaskGenericCreate+0x138>
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002402:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8002406:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002410:	4613      	mov	r3, r2
 8002412:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002416:	189b      	adds	r3, r3, r2
 8002418:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800241c:	461a      	mov	r2, r3
 800241e:	f240 63d4 	movw	r3, #1748	; 0x6d4
 8002422:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002426:	18d2      	adds	r2, r2, r3
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	f103 0304 	add.w	r3, r3, #4
 800242e:	4610      	mov	r0, r2
 8002430:	4619      	mov	r1, r3
 8002432:	f001 f9b1 	bl	8003798 <vListInsertEnd>

			xReturn = pdPASS;
 8002436:	f04f 0301 	mov.w	r3, #1
 800243a:	61fb      	str	r3, [r7, #28]
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 800243c:	f001 fae2 	bl	8003a04 <vPortExitCritical>
 8002440:	e002      	b.n	8002448 <xTaskGenericCreate+0x174>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002442:	f04f 33ff 	mov.w	r3, #4294967295
 8002446:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d111      	bne.n	8002472 <xTaskGenericCreate+0x19e>
	{
		if( xSchedulerRunning != pdFALSE )
 800244e:	f240 73bc 	movw	r3, #1980	; 0x7bc
 8002452:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00a      	beq.n	8002472 <xTaskGenericCreate+0x19e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 800245c:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8002460:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246a:	429a      	cmp	r2, r3
 800246c:	d201      	bcs.n	8002472 <xTaskGenericCreate+0x19e>
			{
				portYIELD_WITHIN_API();
 800246e:	f001 faa7 	bl	80039c0 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
 8002472:	69fb      	ldr	r3, [r7, #28]
}
 8002474:	4618      	mov	r0, r3
 8002476:	f107 0720 	add.w	r7, r7, #32
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop

08002480 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
 8002488:	f001 faa6 	bl	80039d8 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
 800248c:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8002490:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	429a      	cmp	r2, r3
 800249a:	d102      	bne.n	80024a2 <vTaskSuspend+0x22>
			{
				pxTaskToSuspend = NULL;
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d105      	bne.n	80024b4 <vTaskSuspend+0x34>
 80024a8:	f240 63d0 	movw	r3, #1744	; 0x6d0
 80024ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	e000      	b.n	80024b6 <vTaskSuspend+0x36>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f103 0304 	add.w	r3, r3, #4
 80024be:	4618      	mov	r0, r3
 80024c0:	f001 f9cc 	bl	800385c <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <vTaskSuspend+0x58>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f103 0318 	add.w	r3, r3, #24
 80024d2:	4618      	mov	r0, r3
 80024d4:	f001 f9c2 	bl	800385c <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f103 0304 	add.w	r3, r3, #4
 80024de:	f240 7094 	movw	r0, #1940	; 0x794
 80024e2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80024e6:	4619      	mov	r1, r3
 80024e8:	f001 f956 	bl	8003798 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 80024ec:	f001 fa8a 	bl	8003a04 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d11f      	bne.n	8002536 <vTaskSuspend+0xb6>
		{
			if( xSchedulerRunning != pdFALSE )
 80024f6:	f240 73bc 	movw	r3, #1980	; 0x7bc
 80024fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d002      	beq.n	800250a <vTaskSuspend+0x8a>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
 8002504:	f001 fa5c 	bl	80039c0 <vPortYieldFromISR>
 8002508:	e015      	b.n	8002536 <vTaskSuspend+0xb6>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800250a:	f240 7394 	movw	r3, #1940	; 0x794
 800250e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	f240 73ac 	movw	r3, #1964	; 0x7ac
 8002518:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	429a      	cmp	r2, r3
 8002520:	d107      	bne.n	8002532 <vTaskSuspend+0xb2>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 8002522:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8002526:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	e001      	b.n	8002536 <vTaskSuspend+0xb6>
				}
				else
				{
					vTaskSwitchContext();
 8002532:	f000 fa59 	bl	80029e8 <vTaskSwitchContext>
				}
			}
		}
	}
 8002536:	f107 0710 	add.w	r7, r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop

08002540 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
 8002548:	f04f 0300 	mov.w	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	695a      	ldr	r2, [r3, #20]
 8002556:	f240 7394 	movw	r3, #1940	; 0x794
 800255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800255e:	429a      	cmp	r2, r3
 8002560:	d10e      	bne.n	8002580 <xTaskIsTaskSuspended+0x40>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002566:	f240 7368 	movw	r3, #1896	; 0x768
 800256a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800256e:	429a      	cmp	r2, r3
 8002570:	d006      	beq.n	8002580 <xTaskIsTaskSuspended+0x40>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	2b00      	cmp	r3, #0
 8002578:	d102      	bne.n	8002580 <xTaskIsTaskSuspended+0x40>
				{
					xReturn = pdTRUE;
 800257a:	f04f 0301 	mov.w	r3, #1
 800257e:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
 8002580:	68fb      	ldr	r3, [r7, #12]
	}
 8002582:	4618      	mov	r0, r3
 8002584:	f107 0714 	add.w	r7, r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop

08002590 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d048      	beq.n	8002634 <vTaskResume+0xa4>
 80025a2:	f240 63d0 	movw	r3, #1744	; 0x6d0
 80025a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d040      	beq.n	8002634 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 80025b2:	f001 fa11 	bl	80039d8 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f7ff ffc2 	bl	8002540 <xTaskIsTaskSuspended>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d136      	bne.n	8002630 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f103 0304 	add.w	r3, r3, #4
 80025c8:	4618      	mov	r0, r3
 80025ca:	f001 f947 	bl	800385c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d2:	f240 73b8 	movw	r3, #1976	; 0x7b8
 80025d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d906      	bls.n	80025ee <vTaskResume+0x5e>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e4:	f240 73b8 	movw	r3, #1976	; 0x7b8
 80025e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f2:	4613      	mov	r3, r2
 80025f4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80025f8:	189b      	adds	r3, r3, r2
 80025fa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80025fe:	461a      	mov	r2, r3
 8002600:	f240 63d4 	movw	r3, #1748	; 0x6d4
 8002604:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002608:	18d2      	adds	r2, r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f103 0304 	add.w	r3, r3, #4
 8002610:	4610      	mov	r0, r2
 8002612:	4619      	mov	r1, r3
 8002614:	f001 f8c0 	bl	8003798 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800261c:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8002620:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	429a      	cmp	r2, r3
 800262a:	d301      	bcc.n	8002630 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
 800262c:	f001 f9c8 	bl	80039c0 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
 8002630:	f001 f9e8 	bl	8003a04 <vPortExitCritical>
		}
	}
 8002634:	f107 0710 	add.w	r7, r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af04      	add	r7, sp, #16
	/* Add the idle task at the lowest priority. */
	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
	{
		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
		be returned by the xTaskGetIdleTaskHandle() function. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	f240 73a8 	movw	r3, #1960	; 0x7a8
 800264c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002650:	9301      	str	r3, [sp, #4]
 8002652:	f04f 0300 	mov.w	r3, #0
 8002656:	9302      	str	r3, [sp, #8]
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	9303      	str	r3, [sp, #12]
 800265e:	f642 5021 	movw	r0, #11553	; 0x2d21
 8002662:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002666:	f644 5134 	movw	r1, #19764	; 0x4d34
 800266a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800266e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002672:	f04f 0300 	mov.w	r3, #0
 8002676:	f7ff fe2d 	bl	80022d4 <xTaskGenericCreate>
 800267a:	6078      	str	r0, [r7, #4]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d115      	bne.n	80026ae <vTaskStartScheduler+0x72>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
 8002682:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8002686:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
 800268a:	f240 73bc 	movw	r3, #1980	; 0x7bc
 800268e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002692:	f04f 0201 	mov.w	r2, #1
 8002696:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 8002698:	f240 73b0 	movw	r3, #1968	; 0x7b0
 800269c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80026a6:	f7fe fc5f 	bl	8000f68 <init_us_timer>
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80026aa:	f001 f951 	bl	8003950 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
 80026ae:	f107 0708 	add.w	r7, r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop

080026b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 80026bc:	f240 73c0 	movw	r3, #1984	; 0x7c0
 80026c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f103 0201 	add.w	r2, r3, #1
 80026ca:	f240 73c0 	movw	r3, #1984	; 0x7c0
 80026ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026d2:	601a      	str	r2, [r3, #0]
}
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop

080026dc <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 80026dc:	b590      	push	{r4, r7, lr}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80026e8:	f001 f976 	bl	80039d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80026ec:	f240 73c0 	movw	r3, #1984	; 0x7c0
 80026f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f103 32ff 	add.w	r2, r3, #4294967295
 80026fa:	f240 73c0 	movw	r3, #1984	; 0x7c0
 80026fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002702:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8002704:	f240 73c0 	movw	r3, #1984	; 0x7c0
 8002708:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	f040 8085 	bne.w	800281e <xTaskResumeAll+0x142>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 8002714:	f240 73ac 	movw	r3, #1964	; 0x7ac
 8002718:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d07d      	beq.n	800281e <xTaskResumeAll+0x142>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8002728:	e03c      	b.n	80027a4 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 800272a:	f240 7368 	movw	r3, #1896	; 0x768
 800272e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
 8002736:	f104 0318 	add.w	r3, r4, #24
 800273a:	4618      	mov	r0, r3
 800273c:	f001 f88e 	bl	800385c <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
 8002740:	f104 0304 	add.w	r3, r4, #4
 8002744:	4618      	mov	r0, r3
 8002746:	f001 f889 	bl	800385c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 800274a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800274c:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8002750:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d905      	bls.n	8002766 <xTaskResumeAll+0x8a>
 800275a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800275c:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8002760:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002768:	4613      	mov	r3, r2
 800276a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800276e:	189b      	adds	r3, r3, r2
 8002770:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002774:	461a      	mov	r2, r3
 8002776:	f240 63d4 	movw	r3, #1748	; 0x6d4
 800277a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800277e:	18d2      	adds	r2, r2, r3
 8002780:	f104 0304 	add.w	r3, r4, #4
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
 8002788:	f001 f806 	bl	8003798 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800278c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800278e:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8002792:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279a:	429a      	cmp	r2, r3
 800279c:	d302      	bcc.n	80027a4 <xTaskResumeAll+0xc8>
					{
						xYieldRequired = pdTRUE;
 800279e:	f04f 0301 	mov.w	r3, #1
 80027a2:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 80027a4:	f240 7368 	movw	r3, #1896	; 0x768
 80027a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1bb      	bne.n	800272a <xTaskResumeAll+0x4e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 80027b2:	f240 73c4 	movw	r3, #1988	; 0x7c4
 80027b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d018      	beq.n	80027f2 <xTaskResumeAll+0x116>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 80027c0:	e00d      	b.n	80027de <xTaskResumeAll+0x102>
					{
						vTaskIncrementTick();
 80027c2:	f000 f835 	bl	8002830 <vTaskIncrementTick>
						--uxMissedTicks;
 80027c6:	f240 73c4 	movw	r3, #1988	; 0x7c4
 80027ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f103 32ff 	add.w	r2, r3, #4294967295
 80027d4:	f240 73c4 	movw	r3, #1988	; 0x7c4
 80027d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027dc:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 80027de:	f240 73c4 	movw	r3, #1988	; 0x7c4
 80027e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1ea      	bne.n	80027c2 <xTaskResumeAll+0xe6>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
 80027ec:	f04f 0301 	mov.w	r3, #1
 80027f0:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d006      	beq.n	8002806 <xTaskResumeAll+0x12a>
 80027f8:	f240 73c8 	movw	r3, #1992	; 0x7c8
 80027fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d10b      	bne.n	800281e <xTaskResumeAll+0x142>
				{
					xAlreadyYielded = pdTRUE;
 8002806:	f04f 0301 	mov.w	r3, #1
 800280a:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
 800280c:	f240 73c8 	movw	r3, #1992	; 0x7c8
 8002810:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
 800281a:	f001 f8d1 	bl	80039c0 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 800281e:	f001 f8f1 	bl	8003a04 <vPortExitCritical>

	return xAlreadyYielded;
 8002822:	687b      	ldr	r3, [r7, #4]
}
 8002824:	4618      	mov	r0, r3
 8002826:	f107 070c 	add.w	r7, r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	bd90      	pop	{r4, r7, pc}
 800282e:	bf00      	nop

08002830 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8002836:	f240 73c0 	movw	r3, #1984	; 0x7c0
 800283a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	f040 80c0 	bne.w	80029c6 <vTaskIncrementTick+0x196>
	{
		++xTickCount;
 8002846:	f240 73b0 	movw	r3, #1968	; 0x7b0
 800284a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f103 0201 	add.w	r2, r3, #1
 8002854:	f240 73b0 	movw	r3, #1968	; 0x7b0
 8002858:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800285c:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
 800285e:	f240 73b0 	movw	r3, #1968	; 0x7b0
 8002862:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d140      	bne.n	80028ee <vTaskIncrementTick+0xbe>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
 800286c:	f240 7360 	movw	r3, #1888	; 0x760
 8002870:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 8002878:	f240 7364 	movw	r3, #1892	; 0x764
 800287c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	f240 7360 	movw	r3, #1888	; 0x760
 8002886:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800288a:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
 800288c:	f240 7364 	movw	r3, #1892	; 0x764
 8002890:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
 8002898:	f240 73cc 	movw	r3, #1996	; 0x7cc
 800289c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f103 0201 	add.w	r2, r3, #1
 80028a6:	f240 73cc 	movw	r3, #1996	; 0x7cc
 80028aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028ae:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028b0:	f240 7360 	movw	r3, #1888	; 0x760
 80028b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d107      	bne.n	80028d0 <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
 80028c0:	f240 5344 	movw	r3, #1348	; 0x544
 80028c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028c8:	f04f 32ff 	mov.w	r2, #4294967295
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	e00e      	b.n	80028ee <vTaskIncrementTick+0xbe>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80028d0:	f240 7360 	movw	r3, #1888	; 0x760
 80028d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	f240 5344 	movw	r3, #1348	; 0x544
 80028e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028ec:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
 80028ee:	f240 73b0 	movw	r3, #1968	; 0x7b0
 80028f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	f240 5344 	movw	r3, #1348	; 0x544
 80028fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d36b      	bcc.n	80029de <vTaskIncrementTick+0x1ae>
 8002906:	f240 7360 	movw	r3, #1888	; 0x760
 800290a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d107      	bne.n	8002926 <vTaskIncrementTick+0xf6>
 8002916:	f240 5344 	movw	r3, #1348	; 0x544
 800291a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800291e:	f04f 32ff 	mov.w	r2, #4294967295
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	e05b      	b.n	80029de <vTaskIncrementTick+0x1ae>
 8002926:	f240 7360 	movw	r3, #1888	; 0x760
 800292a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	607b      	str	r3, [r7, #4]
 800293c:	f240 73b0 	movw	r3, #1968	; 0x7b0
 8002940:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	429a      	cmp	r2, r3
 800294a:	d206      	bcs.n	800295a <vTaskIncrementTick+0x12a>
 800294c:	f240 5344 	movw	r3, #1348	; 0x544
 8002950:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	e041      	b.n	80029de <vTaskIncrementTick+0x1ae>
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	f103 0304 	add.w	r3, r3, #4
 8002960:	4618      	mov	r0, r3
 8002962:	f000 ff7b 	bl	800385c <vListRemove>
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296a:	2b00      	cmp	r3, #0
 800296c:	d005      	beq.n	800297a <vTaskIncrementTick+0x14a>
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	f103 0318 	add.w	r3, r3, #24
 8002974:	4618      	mov	r0, r3
 8002976:	f000 ff71 	bl	800385c <vListRemove>
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800297e:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8002982:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d906      	bls.n	800299a <vTaskIncrementTick+0x16a>
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002990:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8002994:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800299e:	4613      	mov	r3, r2
 80029a0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80029a4:	189b      	adds	r3, r3, r2
 80029a6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80029aa:	461a      	mov	r2, r3
 80029ac:	f240 63d4 	movw	r3, #1748	; 0x6d4
 80029b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029b4:	18d2      	adds	r2, r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f103 0304 	add.w	r3, r3, #4
 80029bc:	4610      	mov	r0, r2
 80029be:	4619      	mov	r1, r3
 80029c0:	f000 feea 	bl	8003798 <vListInsertEnd>
 80029c4:	e79f      	b.n	8002906 <vTaskIncrementTick+0xd6>
	}
	else
	{
		++uxMissedTicks;
 80029c6:	f240 73c4 	movw	r3, #1988	; 0x7c4
 80029ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f103 0201 	add.w	r2, r3, #1
 80029d4:	f240 73c4 	movw	r3, #1988	; 0x7c4
 80029d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029dc:	601a      	str	r2, [r3, #0]
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
 80029de:	f107 0710 	add.w	r7, r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop

080029e8 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 80029ee:	f240 73c0 	movw	r3, #1984	; 0x7c0
 80029f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d007      	beq.n	8002a0c <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 80029fc:	f240 73c8 	movw	r3, #1992	; 0x7c8
 8002a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a04:	f04f 0201 	mov.w	r2, #1
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	e071      	b.n	8002af0 <vTaskSwitchContext+0x108>
			unsigned long ulTempCounter;
			
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTempCounter );
				#else
					ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();
 8002a0c:	f7fe fa66 	bl	8000edc <get_us_time>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4613      	mov	r3, r2
 8002a16:	607b      	str	r3, [r7, #4]
				/* Add the amount of time the task has been running to the accumulated
				time so far.  The time the task started running was stored in
				ulTaskSwitchedInTime.  Note that there is no overflow protection here
				so count values are only valid until the timer overflows.  Generally
				this will be about 1 hour assuming a 1uS timer increment. */
				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
 8002a18:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8002a1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8002a24:	f240 73d4 	movw	r3, #2004	; 0x7d4
 8002a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	1ac3      	subs	r3, r0, r3
 8002a32:	18cb      	adds	r3, r1, r3
 8002a34:	64d3      	str	r3, [r2, #76]	; 0x4c
				ulTaskSwitchedInTime = ulTempCounter;
 8002a36:	f240 73d4 	movw	r3, #2004	; 0x7d4
 8002a3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 8002a42:	e00b      	b.n	8002a5c <vTaskSwitchContext+0x74>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 8002a44:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8002a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f103 32ff 	add.w	r2, r3, #4294967295
 8002a52:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8002a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a5a:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 8002a5c:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8002a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	4613      	mov	r3, r2
 8002a68:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002a6c:	189b      	adds	r3, r3, r2
 8002a6e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002a72:	461a      	mov	r2, r3
 8002a74:	f240 63d4 	movw	r3, #1748	; 0x6d4
 8002a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a7c:	18d3      	adds	r3, r2, r3
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0df      	beq.n	8002a44 <vTaskSwitchContext+0x5c>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 8002a84:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8002a88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002a94:	189b      	adds	r3, r3, r2
 8002a96:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	f240 63d4 	movw	r3, #1748	; 0x6d4
 8002aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002aa4:	18d3      	adds	r3, r2, r3
 8002aa6:	603b      	str	r3, [r7, #0]
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	f103 0308 	add.w	r3, r3, #8
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d104      	bne.n	8002aca <vTaskSwitchContext+0xe2>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8002ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ad8:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
 8002ada:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8002ade:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002ae2:	f240 62d0 	movw	r2, #1744	; 0x6d0
 8002ae6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002aea:	6812      	ldr	r2, [r2, #0]
 8002aec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002aee:	60da      	str	r2, [r3, #12]
		vWriteTraceToBuffer();
	}
}
 8002af0:	f107 0708 	add.w	r7, r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 8002b02:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8002b06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f103 0318 	add.w	r3, r3, #24
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	4619      	mov	r1, r3
 8002b14:	f000 fe68 	bl	80037e8 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8002b18:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8002b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f103 0304 	add.w	r3, r3, #4
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 fe98 	bl	800385c <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b32:	d10e      	bne.n	8002b52 <vTaskPlaceOnEventList+0x5a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8002b34:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8002b38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f103 0304 	add.w	r3, r3, #4
 8002b42:	f240 7094 	movw	r0, #1940	; 0x794
 8002b46:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	f000 fe24 	bl	8003798 <vListInsertEnd>
 8002b50:	e00a      	b.n	8002b68 <vTaskPlaceOnEventList+0x70>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 8002b52:	f240 73b0 	movw	r3, #1968	; 0x7b0
 8002b56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	18d3      	adds	r3, r2, r3
 8002b60:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f000 f9d0 	bl	8002f08 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
 8002b68:	f107 0710 	add.w	r7, r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f103 0318 	add.w	r3, r3, #24
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 fe68 	bl	800385c <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8002b8c:	f240 73c0 	movw	r3, #1984	; 0x7c0
 8002b90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d12b      	bne.n	8002bf2 <xTaskRemoveFromEventList+0x82>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	f103 0304 	add.w	r3, r3, #4
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 fe5b 	bl	800385c <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002baa:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8002bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d906      	bls.n	8002bc6 <xTaskRemoveFromEventList+0x56>
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bbc:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8002bc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bca:	4613      	mov	r3, r2
 8002bcc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002bd0:	189b      	adds	r3, r3, r2
 8002bd2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	f240 63d4 	movw	r3, #1748	; 0x6d4
 8002bdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002be0:	18d2      	adds	r2, r2, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	f103 0304 	add.w	r3, r3, #4
 8002be8:	4610      	mov	r0, r2
 8002bea:	4619      	mov	r1, r3
 8002bec:	f000 fdd4 	bl	8003798 <vListInsertEnd>
 8002bf0:	e009      	b.n	8002c06 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	f103 0318 	add.w	r3, r3, #24
 8002bf8:	f240 7068 	movw	r0, #1896	; 0x768
 8002bfc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002c00:	4619      	mov	r1, r3
 8002c02:	f000 fdc9 	bl	8003798 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c0a:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8002c0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d303      	bcc.n	8002c22 <xTaskRemoveFromEventList+0xb2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8002c1a:	f04f 0301 	mov.w	r3, #1
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	e002      	b.n	8002c28 <xTaskRemoveFromEventList+0xb8>
	}
	else
	{
		xReturn = pdFALSE;
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8002c28:	68fb      	ldr	r3, [r7, #12]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f107 0710 	add.w	r7, r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002c3c:	f240 73cc 	movw	r3, #1996	; 0x7cc
 8002c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002c4a:	f240 73b0 	movw	r3, #1968	; 0x7b0
 8002c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	605a      	str	r2, [r3, #4]
}
 8002c58:	f107 070c 	add.w	r7, r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop

08002c64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8002c6e:	f000 feb3 	bl	80039d8 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7a:	d103      	bne.n	8002c84 <xTaskCheckForTimeOut+0x20>
			{
				xReturn = pdFALSE;
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	e038      	b.n	8002cf6 <xTaskCheckForTimeOut+0x92>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	f240 73cc 	movw	r3, #1996	; 0x7cc
 8002c8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d00c      	beq.n	8002cb0 <xTaskCheckForTimeOut+0x4c>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	f240 73b0 	movw	r3, #1968	; 0x7b0
 8002c9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d803      	bhi.n	8002cb0 <xTaskCheckForTimeOut+0x4c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8002ca8:	f04f 0301 	mov.w	r3, #1
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	e022      	b.n	8002cf6 <xTaskCheckForTimeOut+0x92>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
 8002cb0:	f240 73b0 	movw	r3, #1968	; 0x7b0
 8002cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	1ad2      	subs	r2, r2, r3
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d213      	bcs.n	8002cf0 <xTaskCheckForTimeOut+0x8c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6859      	ldr	r1, [r3, #4]
 8002cd0:	f240 73b0 	movw	r3, #1968	; 0x7b0
 8002cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	1acb      	subs	r3, r1, r3
 8002cdc:	18d2      	adds	r2, r2, r3
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7ff ffa6 	bl	8002c34 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	e002      	b.n	8002cf6 <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
 8002cf0:	f04f 0301 	mov.w	r3, #1
 8002cf4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002cf6:	f000 fe85 	bl	8003a04 <vPortExitCritical>

	return xReturn;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f107 0710 	add.w	r7, r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop

08002d08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
 8002d0c:	f240 73c8 	movw	r3, #1992	; 0x7c8
 8002d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d14:	f04f 0201 	mov.w	r2, #1
 8002d18:	601a      	str	r2, [r3, #0]
}
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	e000      	b.n	8002d2c <prvIdleTask+0xc>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
 8002d2a:	bf00      	nop
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8002d2c:	f000 f8a0 	bl	8002e70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8002d30:	f240 63d4 	movw	r3, #1748	; 0x6d4
 8002d34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d9f5      	bls.n	8002d2a <prvIdleTask+0xa>
			{
				taskYIELD();
 8002d3e:	f000 fe3f 	bl	80039c0 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
 8002d42:	e7f2      	b.n	8002d2a <prvIdleTask+0xa>

08002d44 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
 8002d50:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8002d58:	4618      	mov	r0, r3
 8002d5a:	68b9      	ldr	r1, [r7, #8]
 8002d5c:	f04f 0210 	mov.w	r2, #16
 8002d60:	f7fd fdfc 	bl	800095c <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d902      	bls.n	8002d7a <prvInitialiseTCBVariables+0x36>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 8002d74:	f04f 0304 	mov.w	r3, #4
 8002d78:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f103 0304 	add.w	r3, r3, #4
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 fcf5 	bl	800377c <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f103 0318 	add.w	r3, r3, #24
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 fcef 	bl	800377c <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f1c3 0205 	rsb	r2, r3, #5
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxTCB->pxTaskTag = NULL;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxTCB->ulRunTimeCounter = 0UL;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	64da      	str	r2, [r3, #76]	; 0x4c
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
 8002dc4:	f107 0710 	add.w	r7, r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	607b      	str	r3, [r7, #4]
 8002dd8:	e013      	b.n	8002e02 <prvInitialiseTaskLists+0x36>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002de2:	189b      	adds	r3, r3, r2
 8002de4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002de8:	461a      	mov	r2, r3
 8002dea:	f240 63d4 	movw	r3, #1748	; 0x6d4
 8002dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002df2:	18d3      	adds	r3, r2, r3
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 fca1 	bl	800373c <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f103 0301 	add.w	r3, r3, #1
 8002e00:	607b      	str	r3, [r7, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d9e8      	bls.n	8002dda <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 8002e08:	f240 7038 	movw	r0, #1848	; 0x738
 8002e0c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002e10:	f000 fc94 	bl	800373c <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 8002e14:	f240 704c 	movw	r0, #1868	; 0x74c
 8002e18:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002e1c:	f000 fc8e 	bl	800373c <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
 8002e20:	f240 7068 	movw	r0, #1896	; 0x768
 8002e24:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002e28:	f000 fc88 	bl	800373c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 8002e2c:	f240 707c 	movw	r0, #1916	; 0x77c
 8002e30:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002e34:	f000 fc82 	bl	800373c <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
 8002e38:	f240 7094 	movw	r0, #1940	; 0x794
 8002e3c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002e40:	f000 fc7c 	bl	800373c <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002e44:	f240 7360 	movw	r3, #1888	; 0x760
 8002e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e4c:	f240 7238 	movw	r2, #1848	; 0x738
 8002e50:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002e54:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002e56:	f240 7364 	movw	r3, #1892	; 0x764
 8002e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e5e:	f240 724c 	movw	r2, #1868	; 0x74c
 8002e62:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002e66:	601a      	str	r2, [r3, #0]
}
 8002e68:	f107 0708 	add.w	r7, r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8002e76:	f240 7390 	movw	r3, #1936	; 0x790
 8002e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d03c      	beq.n	8002efe <prvCheckTasksWaitingTermination+0x8e>
		{
			vTaskSuspendAll();
 8002e84:	f7ff fc18 	bl	80026b8 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002e88:	f240 737c 	movw	r3, #1916	; 0x77c
 8002e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	bf14      	ite	ne
 8002e96:	2300      	movne	r3, #0
 8002e98:	2301      	moveq	r3, #1
 8002e9a:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
 8002e9c:	f7ff fc1e 	bl	80026dc <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d12b      	bne.n	8002efe <prvCheckTasksWaitingTermination+0x8e>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 8002ea6:	f000 fd97 	bl	80039d8 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 8002eaa:	f240 737c 	movw	r3, #1916	; 0x77c
 8002eae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	f103 0304 	add.w	r3, r3, #4
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 fccc 	bl	800385c <vListRemove>
					--uxCurrentNumberOfTasks;
 8002ec4:	f240 73ac 	movw	r3, #1964	; 0x7ac
 8002ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f103 32ff 	add.w	r2, r3, #4294967295
 8002ed2:	f240 73ac 	movw	r3, #1964	; 0x7ac
 8002ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002eda:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 8002edc:	f240 7390 	movw	r3, #1936	; 0x790
 8002ee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f103 32ff 	add.w	r2, r3, #4294967295
 8002eea:	f240 7390 	movw	r3, #1936	; 0x790
 8002eee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ef2:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 8002ef4:	f000 fd86 	bl	8003a04 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8002ef8:	6838      	ldr	r0, [r7, #0]
 8002efa:	f000 f885 	bl	8003008 <prvDeleteTCB>
			}
		}
	}
	#endif
}
 8002efe:	f107 0708 	add.w	r7, r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop

08002f08 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8002f10:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8002f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8002f1e:	f240 73b0 	movw	r3, #1968	; 0x7b0
 8002f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d210      	bcs.n	8002f50 <prvAddCurrentTaskToDelayedList+0x48>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8002f2e:	f240 7364 	movw	r3, #1892	; 0x764
 8002f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8002f3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f103 0304 	add.w	r3, r3, #4
 8002f46:	4610      	mov	r0, r2
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f000 fc4d 	bl	80037e8 <vListInsert>
 8002f4e:	e01d      	b.n	8002f8c <prvAddCurrentTaskToDelayedList+0x84>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8002f50:	f240 7360 	movw	r3, #1888	; 0x760
 8002f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8002f5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f103 0304 	add.w	r3, r3, #4
 8002f68:	4610      	mov	r0, r2
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	f000 fc3c 	bl	80037e8 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8002f70:	f240 5344 	movw	r3, #1348	; 0x544
 8002f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d205      	bcs.n	8002f8c <prvAddCurrentTaskToDelayedList+0x84>
		{
			xNextTaskUnblockTime = xTimeToWake;
 8002f80:	f240 5344 	movw	r3, #1348	; 0x544
 8002f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002f8c:	f107 0708 	add.w	r7, r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	6039      	str	r1, [r7, #0]
 8002f9e:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 8002fa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002fa4:	f7fd f94c 	bl	8000240 <malloc>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	60fb      	str	r3, [r7, #12]

	if( pxNewTCB != NULL )
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d023      	beq.n	8002ffa <prvAllocateTCBAndStack+0x66>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d107      	bne.n	8002fc8 <prvAllocateTCBAndStack+0x34>
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fd f93e 	bl	8000240 <malloc>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	e000      	b.n	8002fca <prvAllocateTCBAndStack+0x36>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <prvAllocateTCBAndStack+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f7fd f93a 	bl	8000250 <free>
			pxNewTCB = NULL;
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	e00a      	b.n	8002ffa <prvAllocateTCBAndStack+0x66>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fe8:	88fb      	ldrh	r3, [r7, #6]
 8002fea:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002fee:	4610      	mov	r0, r2
 8002ff0:	f04f 01a5 	mov.w	r1, #165	; 0xa5
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	f7fd fc6b 	bl	80008d0 <memset>
		}
	}

	return pxNewTCB;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f107 0710 	add.w	r7, r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop

08003008 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003014:	4618      	mov	r0, r3
 8003016:	f7fd f91b 	bl	8000250 <free>
		vPortFree( pxTCB );
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7fd f918 	bl	8000250 <free>
	}
 8003020:	f107 0708 	add.w	r7, r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800302e:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8003032:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	607b      	str	r3, [r7, #4]

		return xReturn;
 800303a:	687b      	ldr	r3, [r7, #4]
	}
 800303c:	4618      	mov	r0, r3
 800303e:	f107 070c 	add.w	r7, r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr

08003048 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003058:	f240 63d0 	movw	r3, #1744	; 0x6d0
 800305c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003064:	429a      	cmp	r2, r3
 8003066:	d257      	bcs.n	8003118 <vTaskPriorityInherit+0xd0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
 8003068:	f240 63d0 	movw	r3, #1744	; 0x6d0
 800306c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003074:	f1c3 0205 	rsb	r2, r3, #5
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6959      	ldr	r1, [r3, #20]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003084:	4613      	mov	r3, r2
 8003086:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800308a:	189b      	adds	r3, r3, r2
 800308c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003090:	461a      	mov	r2, r3
 8003092:	f240 63d4 	movw	r3, #1748	; 0x6d4
 8003096:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800309a:	18d3      	adds	r3, r2, r3
 800309c:	4299      	cmp	r1, r3
 800309e:	d133      	bne.n	8003108 <vTaskPriorityInherit+0xc0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f103 0304 	add.w	r3, r3, #4
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 fbd8 	bl	800385c <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80030ac:	f240 63d0 	movw	r3, #1744	; 0x6d0
 80030b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c0:	f240 73b8 	movw	r3, #1976	; 0x7b8
 80030c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d906      	bls.n	80030dc <vTaskPriorityInherit+0x94>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d2:	f240 73b8 	movw	r3, #1976	; 0x7b8
 80030d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e0:	4613      	mov	r3, r2
 80030e2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80030e6:	189b      	adds	r3, r3, r2
 80030e8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80030ec:	461a      	mov	r2, r3
 80030ee:	f240 63d4 	movw	r3, #1748	; 0x6d4
 80030f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030f6:	18d2      	adds	r2, r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f103 0304 	add.w	r3, r3, #4
 80030fe:	4610      	mov	r0, r2
 8003100:	4619      	mov	r1, r3
 8003102:	f000 fb49 	bl	8003798 <vListInsertEnd>
 8003106:	e007      	b.n	8003118 <vTaskPriorityInherit+0xd0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003108:	f240 63d0 	movw	r3, #1744	; 0x6d0
 800310c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}
 8003118:	f107 0710 	add.w	r7, r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d03a      	beq.n	80031a8 <vTaskPriorityDisinherit+0x88>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313a:	429a      	cmp	r2, r3
 800313c:	d034      	beq.n	80031a8 <vTaskPriorityDisinherit+0x88>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f103 0304 	add.w	r3, r3, #4
 8003144:	4618      	mov	r0, r3
 8003146:	f000 fb89 	bl	800385c <vListRemove>

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003156:	f1c3 0205 	rsb	r2, r3, #5
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003162:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8003166:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d906      	bls.n	800317e <vTaskPriorityDisinherit+0x5e>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003174:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8003178:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003182:	4613      	mov	r3, r2
 8003184:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003188:	189b      	adds	r3, r3, r2
 800318a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800318e:	461a      	mov	r2, r3
 8003190:	f240 63d4 	movw	r3, #1748	; 0x6d4
 8003194:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003198:	18d2      	adds	r2, r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f103 0304 	add.w	r3, r3, #4
 80031a0:	4610      	mov	r0, r2
 80031a2:	4619      	mov	r1, r3
 80031a4:	f000 faf8 	bl	8003798 <vListInsertEnd>
			}
		}
	}
 80031a8:	f107 0710 	add.w	r7, r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 80031ba:	f04f 0300 	mov.w	r3, #0
 80031be:	617b      	str	r3, [r7, #20]

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d056      	beq.n	8003274 <xQueueCreate+0xc4>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 80031c6:	f04f 004c 	mov.w	r0, #76	; 0x4c
 80031ca:	f7fd f839 	bl	8000240 <malloc>
 80031ce:	4603      	mov	r3, r0
 80031d0:	613b      	str	r3, [r7, #16]
		if( pxNewQueue != NULL )
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d04d      	beq.n	8003274 <xQueueCreate+0xc4>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	fb02 f303 	mul.w	r3, r2, r3
 80031e0:	f103 0301 	add.w	r3, r3, #1
 80031e4:	60fb      	str	r3, [r7, #12]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f7fd f82a 	bl	8000240 <malloc>
 80031ec:	4603      	mov	r3, r0
 80031ee:	461a      	mov	r2, r3
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d038      	beq.n	800326e <xQueueCreate+0xbe>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6839      	ldr	r1, [r7, #0]
 8003204:	fb01 f303 	mul.w	r3, r1, r3
 8003208:	18d2      	adds	r2, r2, r3
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	605a      	str	r2, [r3, #4]
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	639a      	str	r2, [r3, #56]	; 0x38
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	609a      	str	r2, [r3, #8]
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f103 33ff 	add.w	r3, r3, #4294967295
 8003228:	6839      	ldr	r1, [r7, #0]
 800322a:	fb01 f303 	mul.w	r3, r1, r3
 800322e:	18d2      	adds	r2, r2, r3
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	60da      	str	r2, [r3, #12]
				pxNewQueue->uxLength = uxQueueLength;
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	641a      	str	r2, [r3, #64]	; 0x40
				pxNewQueue->xRxLock = queueUNLOCKED;
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f04f 32ff 	mov.w	r2, #4294967295
 8003246:	645a      	str	r2, [r3, #68]	; 0x44
				pxNewQueue->xTxLock = queueUNLOCKED;
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f04f 32ff 	mov.w	r2, #4294967295
 800324e:	649a      	str	r2, [r3, #72]	; 0x48

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	f103 0310 	add.w	r3, r3, #16
 8003256:	4618      	mov	r0, r3
 8003258:	f000 fa70 	bl	800373c <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8003262:	4618      	mov	r0, r3
 8003264:	f000 fa6a 	bl	800373c <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	617b      	str	r3, [r7, #20]
 800326c:	e002      	b.n	8003274 <xQueueCreate+0xc4>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
 800326e:	6938      	ldr	r0, [r7, #16]
 8003270:	f7fc ffee 	bl	8000250 <free>
		}
	}

	configASSERT( xReturn );

	return xReturn;
 8003274:	697b      	ldr	r3, [r7, #20]
}
 8003276:	4618      	mov	r0, r3
 8003278:	f107 0718 	add.w	r7, r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	61fb      	str	r3, [r7, #28]
 8003294:	e000      	b.n	8003298 <xQueueGenericSend+0x18>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 8003296:	bf00      	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003298:	f000 fb9e 	bl	80039d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d218      	bcs.n	80032da <xQueueGenericSend+0x5a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	68b9      	ldr	r1, [r7, #8]
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	f000 f93b 	bl	8003528 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00a      	beq.n	80032d0 <xQueueGenericSend+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff fc55 	bl	8002b70 <xTaskRemoveFromEventList>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d101      	bne.n	80032d0 <xQueueGenericSend+0x50>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
 80032cc:	f000 fb78 	bl	80039c0 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
 80032d0:	f000 fb98 	bl	8003a04 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 80032d4:	f04f 0301 	mov.w	r3, #1
 80032d8:	e05d      	b.n	8003396 <xQueueGenericSend+0x116>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d104      	bne.n	80032ea <xQueueGenericSend+0x6a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032e0:	f000 fb90 	bl	8003a04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	e055      	b.n	8003396 <xQueueGenericSend+0x116>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d107      	bne.n	8003300 <xQueueGenericSend+0x80>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80032f0:	f107 0314 	add.w	r3, r7, #20
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff fc9d 	bl	8002c34 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032fa:	f04f 0301 	mov.w	r3, #1
 80032fe:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 8003300:	f000 fb80 	bl	8003a04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003304:	f7ff f9d8 	bl	80026b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003308:	f000 fb66 	bl	80039d8 <vPortEnterCritical>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003314:	d103      	bne.n	800331e <xQueueGenericSend+0x9e>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	645a      	str	r2, [r3, #68]	; 0x44
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003326:	d103      	bne.n	8003330 <xQueueGenericSend+0xb0>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	649a      	str	r2, [r3, #72]	; 0x48
 8003330:	f000 fb68 	bl	8003a04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003334:	f107 0314 	add.w	r3, r7, #20
 8003338:	4618      	mov	r0, r3
 800333a:	f107 0304 	add.w	r3, r7, #4
 800333e:	4619      	mov	r1, r3
 8003340:	f7ff fc90 	bl	8002c64 <xTaskCheckForTimeOut>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d11e      	bne.n	8003388 <xQueueGenericSend+0x108>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 f9de 	bl	800370c <prvIsQueueFull>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d012      	beq.n	800337c <xQueueGenericSend+0xfc>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f103 0210 	add.w	r2, r3, #16
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4610      	mov	r0, r2
 8003360:	4619      	mov	r1, r3
 8003362:	f7ff fbc9 	bl	8002af8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 f96a 	bl	8003640 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800336c:	f7ff f9b6 	bl	80026dc <xTaskResumeAll>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d18f      	bne.n	8003296 <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 8003376:	f000 fb23 	bl	80039c0 <vPortYieldFromISR>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 800337a:	e78c      	b.n	8003296 <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 f95f 	bl	8003640 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003382:	f7ff f9ab 	bl	80026dc <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 8003386:	e786      	b.n	8003296 <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 f959 	bl	8003640 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800338e:	f7ff f9a5 	bl	80026dc <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003392:	f04f 0300 	mov.w	r3, #0
		}
	}
}
 8003396:	4618      	mov	r0, r3
 8003398:	f107 0720 	add.w	r7, r7, #32
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
 80033ac:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 80033ae:	f04f 0300 	mov.w	r3, #0
 80033b2:	61fb      	str	r3, [r7, #28]
 80033b4:	e000      	b.n	80033b8 <xQueueGenericReceive+0x18>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 80033b6:	bf00      	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80033b8:	f000 fb0e 	bl	80039d8 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d03f      	beq.n	8003444 <xQueueGenericReceive+0xa4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	68b9      	ldr	r1, [r7, #8]
 80033ce:	f000 f90f 	bl	80035f0 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d11e      	bne.n	8003416 <xQueueGenericReceive+0x76>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033dc:	f103 32ff 	add.w	r2, r3, #4294967295
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d104      	bne.n	80033f6 <xQueueGenericReceive+0x56>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 80033ec:	f7ff fe1c 	bl	8003028 <xTaskGetCurrentTaskHandle>
 80033f0:	4602      	mov	r2, r0
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d01d      	beq.n	800343a <xQueueGenericReceive+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f103 0310 	add.w	r3, r3, #16
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fbb3 	bl	8002b70 <xTaskRemoveFromEventList>
 800340a:	4603      	mov	r3, r0
 800340c:	2b01      	cmp	r3, #1
 800340e:	d114      	bne.n	800343a <xQueueGenericReceive+0x9a>
						{
							portYIELD_WITHIN_API();
 8003410:	f000 fad6 	bl	80039c0 <vPortYieldFromISR>
 8003414:	e011      	b.n	800343a <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00a      	beq.n	800343a <xQueueGenericReceive+0x9a>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff fba0 	bl	8002b70 <xTaskRemoveFromEventList>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <xQueueGenericReceive+0x9a>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 8003436:	f000 fac3 	bl	80039c0 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
 800343a:	f000 fae3 	bl	8003a04 <vPortExitCritical>
				return pdPASS;
 800343e:	f04f 0301 	mov.w	r3, #1
 8003442:	e06b      	b.n	800351c <xQueueGenericReceive+0x17c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d104      	bne.n	8003454 <xQueueGenericReceive+0xb4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800344a:	f000 fadb 	bl	8003a04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800344e:	f04f 0300 	mov.w	r3, #0
 8003452:	e063      	b.n	800351c <xQueueGenericReceive+0x17c>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d107      	bne.n	800346a <xQueueGenericReceive+0xca>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800345a:	f107 0310 	add.w	r3, r7, #16
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff fbe8 	bl	8002c34 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003464:	f04f 0301 	mov.w	r3, #1
 8003468:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 800346a:	f000 facb 	bl	8003a04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800346e:	f7ff f923 	bl	80026b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003472:	f000 fab1 	bl	80039d8 <vPortEnterCritical>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347e:	d103      	bne.n	8003488 <xQueueGenericReceive+0xe8>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	645a      	str	r2, [r3, #68]	; 0x44
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800348c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003490:	d103      	bne.n	800349a <xQueueGenericReceive+0xfa>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	649a      	str	r2, [r3, #72]	; 0x48
 800349a:	f000 fab3 	bl	8003a04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800349e:	f107 0310 	add.w	r3, r7, #16
 80034a2:	4618      	mov	r0, r3
 80034a4:	f107 0304 	add.w	r3, r7, #4
 80034a8:	4619      	mov	r1, r3
 80034aa:	f7ff fbdb 	bl	8002c64 <xTaskCheckForTimeOut>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d12c      	bne.n	800350e <xQueueGenericReceive+0x16e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 f913 	bl	80036e0 <prvIsQueueEmpty>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d020      	beq.n	8003502 <xQueueGenericReceive+0x162>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d108      	bne.n	80034da <xQueueGenericReceive+0x13a>
					{
						portENTER_CRITICAL();
 80034c8:	f000 fa86 	bl	80039d8 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff fdb9 	bl	8003048 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 80034d6:	f000 fa95 	bl	8003a04 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4610      	mov	r0, r2
 80034e4:	4619      	mov	r1, r3
 80034e6:	f7ff fb07 	bl	8002af8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 f8a8 	bl	8003640 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80034f0:	f7ff f8f4 	bl	80026dc <xTaskResumeAll>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f47f af5d 	bne.w	80033b6 <xQueueGenericReceive+0x16>
				{
					portYIELD_WITHIN_API();
 80034fc:	f000 fa60 	bl	80039c0 <vPortYieldFromISR>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8003500:	e759      	b.n	80033b6 <xQueueGenericReceive+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f89c 	bl	8003640 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003508:	f7ff f8e8 	bl	80026dc <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 800350c:	e753      	b.n	80033b6 <xQueueGenericReceive+0x16>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f896 	bl	8003640 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003514:	f7ff f8e2 	bl	80026dc <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8003518:	f04f 0300 	mov.w	r3, #0
		}
	}
}
 800351c:	4618      	mov	r0, r3
 800351e:	f107 0720 	add.w	r7, r7, #32
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop

08003528 <prvCopyDataToQueue>:
	vPortFree( pxQueue );
}
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10d      	bne.n	8003558 <prvCopyDataToQueue+0x30>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d14a      	bne.n	80035da <prvCopyDataToQueue+0xb2>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff fde9 	bl	8003120 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f04f 0200 	mov.w	r2, #0
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	e040      	b.n	80035da <prvCopyDataToQueue+0xb2>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d11b      	bne.n	8003596 <prvCopyDataToQueue+0x6e>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6899      	ldr	r1, [r3, #8]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	4608      	mov	r0, r1
 800356a:	4611      	mov	r1, r2
 800356c:	461a      	mov	r2, r3
 800356e:	f7fd f937 	bl	80007e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	18d2      	adds	r2, r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	429a      	cmp	r2, r3
 800358a:	d326      	bcc.n	80035da <prvCopyDataToQueue+0xb2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	609a      	str	r2, [r3, #8]
 8003594:	e021      	b.n	80035da <prvCopyDataToQueue+0xb2>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	68d9      	ldr	r1, [r3, #12]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	4608      	mov	r0, r1
 80035a2:	4611      	mov	r1, r2
 80035a4:	461a      	mov	r2, r3
 80035a6:	f7fd f91b 	bl	80007e0 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	f1c3 0300 	rsb	r3, r3, #0
 80035b6:	18d2      	adds	r2, r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d208      	bcs.n	80035da <prvCopyDataToQueue+0xb2>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	f1c3 0300 	rsb	r3, r3, #0
 80035d4:	18d2      	adds	r2, r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035de:	f103 0201 	add.w	r2, r3, #1
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80035e6:	f107 0710 	add.w	r7, r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop

080035f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d01a      	beq.n	8003638 <prvCopyDataFromQueue+0x48>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	18d2      	adds	r2, r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	429a      	cmp	r2, r3
 800361a:	d303      	bcc.n	8003624 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	6839      	ldr	r1, [r7, #0]
 800362e:	4608      	mov	r0, r1
 8003630:	4611      	mov	r1, r2
 8003632:	461a      	mov	r2, r3
 8003634:	f7fd f8d4 	bl	80007e0 <memcpy>
	}
}
 8003638:	f107 0708 	add.w	r7, r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003648:	f000 f9c6 	bl	80039d8 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800364c:	e014      	b.n	8003678 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	2b00      	cmp	r3, #0
 8003654:	d015      	beq.n	8003682 <prvUnlockQueue+0x42>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff fa87 	bl	8002b70 <xTaskRemoveFromEventList>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <prvUnlockQueue+0x2c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
 8003668:	f7ff fb4e 	bl	8002d08 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003670:	f103 32ff 	add.w	r2, r3, #4294967295
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800367c:	2b00      	cmp	r3, #0
 800367e:	dce6      	bgt.n	800364e <prvUnlockQueue+0xe>
 8003680:	e000      	b.n	8003684 <prvUnlockQueue+0x44>

				--( pxQueue->xTxLock );
			}
			else
			{
				break;
 8003682:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f04f 32ff 	mov.w	r2, #4294967295
 800368a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800368c:	f000 f9ba 	bl	8003a04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003690:	f000 f9a2 	bl	80039d8 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8003694:	e014      	b.n	80036c0 <prvUnlockQueue+0x80>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d015      	beq.n	80036ca <prvUnlockQueue+0x8a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f103 0310 	add.w	r3, r3, #16
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff fa63 	bl	8002b70 <xTaskRemoveFromEventList>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <prvUnlockQueue+0x74>
				{
					vTaskMissedYield();
 80036b0:	f7ff fb2a 	bl	8002d08 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b8:	f103 32ff 	add.w	r2, r3, #4294967295
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	645a      	str	r2, [r3, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	dce6      	bgt.n	8003696 <prvUnlockQueue+0x56>
 80036c8:	e000      	b.n	80036cc <prvUnlockQueue+0x8c>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
 80036ca:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f04f 32ff 	mov.w	r2, #4294967295
 80036d2:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80036d4:	f000 f996 	bl	8003a04 <vPortExitCritical>
}
 80036d8:	f107 0708 	add.w	r7, r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 80036e8:	f000 f976 	bl	80039d8 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	bf14      	ite	ne
 80036f4:	2300      	movne	r3, #0
 80036f6:	2301      	moveq	r3, #1
 80036f8:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 80036fa:	f000 f983 	bl	8003a04 <vPortExitCritical>

	return xReturn;
 80036fe:	68fb      	ldr	r3, [r7, #12]
}
 8003700:	4618      	mov	r0, r3
 8003702:	f107 0710 	add.w	r7, r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop

0800370c <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8003714:	f000 f960 	bl	80039d8 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003720:	429a      	cmp	r2, r3
 8003722:	bf14      	ite	ne
 8003724:	2300      	movne	r3, #0
 8003726:	2301      	moveq	r3, #1
 8003728:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 800372a:	f000 f96b 	bl	8003a04 <vPortExitCritical>

	return xReturn;
 800372e:	68fb      	ldr	r3, [r7, #12]
}
 8003730:	4618      	mov	r0, r3
 8003732:	f107 0710 	add.w	r7, r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop

0800373c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f103 0208 	add.w	r2, r3, #8
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f04f 32ff 	mov.w	r2, #4294967295
 8003754:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f103 0208 	add.w	r2, r3, #8
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f103 0208 	add.w	r2, r3, #8
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
}
 8003772:	f107 070c 	add.w	r7, r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr

0800377c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f04f 0200 	mov.w	r2, #0
 800378a:	611a      	str	r2, [r3, #16]
}
 800378c:	f107 070c 	add.w	r7, r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop

08003798 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f103 0201 	add.w	r2, r3, #1
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	601a      	str	r2, [r3, #0]
}
 80037de:	f107 0714 	add.w	r7, r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bc80      	pop	{r7}
 80037e6:	4770      	bx	lr

080037e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fe:	d103      	bne.n	8003808 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	e00d      	b.n	8003824 <vListInsert+0x3c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f103 0308 	add.w	r3, r3, #8
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	e002      	b.n	8003818 <vListInsert+0x30>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	429a      	cmp	r2, r3
 8003822:	d9f6      	bls.n	8003812 <vListInsert+0x2a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f103 0201 	add.w	r2, r3, #1
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	601a      	str	r2, [r3, #0]
}
 8003852:	f107 0714 	add.w	r7, r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr

0800385c <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6892      	ldr	r2, [r2, #8]
 800386c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6852      	ldr	r2, [r2, #4]
 8003876:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	429a      	cmp	r2, r3
 8003886:	d103      	bne.n	8003890 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f103 32ff 	add.w	r2, r3, #4294967295
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	601a      	str	r2, [r3, #0]
}
 80038a4:	f107 0714 	add.w	r7, r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bc80      	pop	{r7}
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop

080038b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f1a3 0304 	sub.w	r3, r3, #4
 80038c2:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038ca:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f1a3 0304 	sub.w	r3, r3, #4
 80038d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f1a3 0304 	sub.w	r3, r3, #4
 80038e0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f1a3 0314 	sub.w	r3, r3, #20
 80038f0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f1a3 0304 	sub.w	r3, r3, #4
 80038fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f06f 0202 	mvn.w	r2, #2
 8003906:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f1a3 0320 	sub.w	r3, r3, #32
 800390e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003910:	68fb      	ldr	r3, [r7, #12]
}
 8003912:	4618      	mov	r0, r3
 8003914:	f107 0714 	add.w	r7, r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop

08003920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003920:	4b05      	ldr	r3, [pc, #20]	; (8003938 <pxCurrentTCBConst2>)
 8003922:	6819      	ldr	r1, [r3, #0]
 8003924:	6808      	ldr	r0, [r1, #0]
 8003926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800392a:	f380 8809 	msr	PSP, r0
 800392e:	f04f 0000 	mov.w	r0, #0
 8003932:	f380 8811 	msr	BASEPRI, r0
 8003936:	4770      	bx	lr

08003938 <pxCurrentTCBConst2>:
 8003938:	200006d0 	.word	0x200006d0

0800393c <vPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void vPortStartFirstTask( void )
{
	__asm volatile(
 800393c:	4803      	ldr	r0, [pc, #12]	; (800394c <vPortStartFirstTask+0x10>)
 800393e:	6800      	ldr	r0, [r0, #0]
 8003940:	6800      	ldr	r0, [r0, #0]
 8003942:	f380 8808 	msr	MSP, r0
 8003946:	b662      	cpsie	i
 8003948:	df00      	svc	0
 800394a:	bf00      	nop
 800394c:	e000ed08 	.word	0xe000ed08

08003950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
	/* Make PendSV and SysTick the lowest priority interrupts. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8003954:	f64e 5320 	movw	r3, #60704	; 0xed20
 8003958:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800395c:	f64e 5220 	movw	r2, #60704	; 0xed20
 8003960:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8003964:	6812      	ldr	r2, [r2, #0]
 8003966:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
 800396a:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800396c:	f64e 5320 	movw	r3, #60704	; 0xed20
 8003970:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003974:	f64e 5220 	movw	r2, #60704	; 0xed20
 8003978:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800397c:	6812      	ldr	r2, [r2, #0]
 800397e:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8003982:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8003984:	f000 f89e 	bl	8003ac4 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003988:	f240 5348 	movw	r3, #1352	; 0x548
 800398c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003996:	f000 f8b5 	bl	8003b04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800399a:	f64e 7334 	movw	r3, #61236	; 0xef34
 800399e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80039a2:	f64e 7234 	movw	r2, #61236	; 0xef34
 80039a6:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80039b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80039b2:	f7ff ffc3 	bl	800393c <vPortStartFirstTask>

	/* Should not get here! */
	return 0;
 80039b6:	f04f 0300 	mov.w	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop

080039c0 <vPortYieldFromISR>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80039c4:	f64e 5304 	movw	r3, #60676	; 0xed04
 80039c8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80039cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039d0:	601a      	str	r2, [r3, #0]
}
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr

080039d8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80039dc:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80039e0:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
 80039e4:	f240 5348 	movw	r3, #1352	; 0x548
 80039e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f103 0201 	add.w	r2, r3, #1
 80039f2:	f240 5348 	movw	r3, #1352	; 0x548
 80039f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039fa:	601a      	str	r2, [r3, #0]
}
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop

08003a04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 8003a08:	f240 5348 	movw	r3, #1352	; 0x548
 8003a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f103 32ff 	add.w	r2, r3, #4294967295
 8003a16:	f240 5348 	movw	r3, #1352	; 0x548
 8003a1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a1e:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8003a20:	f240 5348 	movw	r3, #1352	; 0x548
 8003a24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d103      	bne.n	8003a36 <vPortExitCritical+0x32>
	{
		portENABLE_INTERRUPTS();
 8003a2e:	f04f 0000 	mov.w	r0, #0
 8003a32:	f380 8811 	msr	BASEPRI, r0
	}
}
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr

08003a3c <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003a3c:	f3ef 8009 	mrs	r0, PSP
 8003a40:	4b11      	ldr	r3, [pc, #68]	; (8003a88 <pxCurrentTCBConst>)
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	f01e 0f10 	tst.w	lr, #16
 8003a48:	bf08      	it	eq
 8003a4a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003a4e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a52:	6010      	str	r0, [r2, #0]
 8003a54:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003a58:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8003a5c:	f380 8811 	msr	BASEPRI, r0
 8003a60:	f7fe ffc2 	bl	80029e8 <vTaskSwitchContext>
 8003a64:	f04f 0000 	mov.w	r0, #0
 8003a68:	f380 8811 	msr	BASEPRI, r0
 8003a6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003a70:	6819      	ldr	r1, [r3, #0]
 8003a72:	6808      	ldr	r0, [r1, #0]
 8003a74:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a78:	f01e 0f10 	tst.w	lr, #16
 8003a7c:	bf08      	it	eq
 8003a7e:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003a82:	f380 8809 	msr	PSP, r0
 8003a86:	4770      	bx	lr

08003a88 <pxCurrentTCBConst>:
 8003a88:	200006d0 	.word	0x200006d0

08003a8c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8003a92:	f64e 5304 	movw	r3, #60676	; 0xed04
 8003a96:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a9e:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	607b      	str	r3, [r7, #4]
 8003aa6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8003aaa:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
 8003aae:	f7fe febf 	bl	8002830 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 8003ab2:	f04f 0000 	mov.w	r0, #0
 8003ab6:	f380 8811 	msr	BASEPRI, r0
}
 8003aba:	f107 0708 	add.w	r7, r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop

08003ac4 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003ac8:	f24e 0314 	movw	r3, #57364	; 0xe014
 8003acc:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003ad0:	f240 5224 	movw	r2, #1316	; 0x524
 8003ad4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003ad8:	6811      	ldr	r1, [r2, #0]
 8003ada:	f644 52d3 	movw	r2, #19923	; 0x4dd3
 8003ade:	f2c1 0262 	movt	r2, #4194	; 0x1062
 8003ae2:	fba2 0201 	umull	r0, r2, r2, r1
 8003ae6:	ea4f 1292 	mov.w	r2, r2, lsr #6
 8003aea:	f102 32ff 	add.w	r2, r2, #4294967295
 8003aee:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8003af0:	f24e 0310 	movw	r3, #57360	; 0xe010
 8003af4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003af8:	f04f 0207 	mov.w	r2, #7
 8003afc:	601a      	str	r2, [r3, #0]
}
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr

08003b04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003b04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003b14 <vPortEnableVFP+0x10>
 8003b08:	6801      	ldr	r1, [r0, #0]
 8003b0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003b0e:	6001      	str	r1, [r0, #0]
 8003b10:	4770      	bx	lr
 8003b12:	0000      	.short	0x0000
 8003b14:	e000ed88 	.word	0xe000ed88

08003b18 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8003b20:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8003b24:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	f042 62be 	orr.w	r2, r2, #99614720	; 0x5f00000
 8003b2e:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8003b32:	60da      	str	r2, [r3, #12]
}
 8003b34:	f107 070c 	add.w	r7, r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop

08003b40 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8003b48:	f04f 0300 	mov.w	r3, #0
 8003b4c:	73fb      	strb	r3, [r7, #15]
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	73bb      	strb	r3, [r7, #14]
 8003b54:	f04f 030f 	mov.w	r3, #15
 8003b58:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	78db      	ldrb	r3, [r3, #3]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d045      	beq.n	8003bee <NVIC_Init+0xae>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8003b62:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8003b66:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	ea6f 0303 	mvn.w	r3, r3
 8003b70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b74:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8003b78:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8003b7a:	7bfb      	ldrb	r3, [r7, #15]
 8003b7c:	f1c3 0304 	rsb	r3, r3, #4
 8003b80:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8003b82:	7b7a      	ldrb	r2, [r7, #13]
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
 8003b86:	fa42 f303 	asr.w	r3, r2, r3
 8003b8a:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	785b      	ldrb	r3, [r3, #1]
 8003b90:	461a      	mov	r2, r3
 8003b92:	7bbb      	ldrb	r3, [r7, #14]
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	789a      	ldrb	r2, [r3, #2]
 8003b9e:	7b7b      	ldrb	r3, [r7, #13]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
 8003bac:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003bb0:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8003bb2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8003bb6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	7812      	ldrb	r2, [r2, #0]
 8003bbe:	189b      	adds	r3, r3, r2
 8003bc0:	7bfa      	ldrb	r2, [r7, #15]
 8003bc2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003bc6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8003bca:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	7812      	ldrb	r2, [r2, #0]
 8003bd2:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8003bd6:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003bd8:	6879      	ldr	r1, [r7, #4]
 8003bda:	7809      	ldrb	r1, [r1, #0]
 8003bdc:	f001 011f 	and.w	r1, r1, #31
 8003be0:	f04f 0001 	mov.w	r0, #1
 8003be4:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003be8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003bec:	e014      	b.n	8003c18 <NVIC_Init+0xd8>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003bee:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8003bf2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	7812      	ldrb	r2, [r2, #0]
 8003bfa:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8003bfe:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	7809      	ldrb	r1, [r1, #0]
 8003c04:	f001 011f 	and.w	r1, r1, #31
 8003c08:	f04f 0001 	mov.w	r0, #1
 8003c0c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003c10:	f102 0220 	add.w	r2, r2, #32
 8003c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8003c18:	f107 0714 	add.w	r7, r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bc80      	pop	{r7}
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop

08003c24 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8003c2e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8003c32:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8003c3c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	609a      	str	r2, [r3, #8]
}
 8003c46:	f107 070c 	add.w	r7, r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bc80      	pop	{r7}
 8003c4e:	4770      	bx	lr

08003c50 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8003c58:	f04f 0300 	mov.w	r3, #0
 8003c5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8003c5e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003c62:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003c66:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	799b      	ldrb	r3, [r3, #6]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d078      	beq.n	8003d62 <EXTI_Init+0x112>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8003c70:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003c74:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003c78:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8003c7c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003c80:	6811      	ldr	r1, [r2, #0]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6812      	ldr	r2, [r2, #0]
 8003c86:	ea6f 0202 	mvn.w	r2, r2
 8003c8a:	400a      	ands	r2, r1
 8003c8c:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8003c8e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003c92:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003c96:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8003c9a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003c9e:	6851      	ldr	r1, [r2, #4]
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6812      	ldr	r2, [r2, #0]
 8003ca4:	ea6f 0202 	mvn.w	r2, r2
 8003ca8:	400a      	ands	r2, r1
 8003caa:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	791b      	ldrb	r3, [r3, #4]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	18d3      	adds	r3, r2, r3
 8003cb4:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	6811      	ldr	r1, [r2, #0]
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6812      	ldr	r2, [r2, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8003cc4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003cc8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003ccc:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8003cd0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003cd4:	6891      	ldr	r1, [r2, #8]
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6812      	ldr	r2, [r2, #0]
 8003cda:	ea6f 0202 	mvn.w	r2, r2
 8003cde:	400a      	ands	r2, r1
 8003ce0:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8003ce2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003ce6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003cea:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8003cee:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003cf2:	68d1      	ldr	r1, [r2, #12]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6812      	ldr	r2, [r2, #0]
 8003cf8:	ea6f 0202 	mvn.w	r2, r2
 8003cfc:	400a      	ands	r2, r1
 8003cfe:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	795b      	ldrb	r3, [r3, #5]
 8003d04:	2b10      	cmp	r3, #16
 8003d06:	d11a      	bne.n	8003d3e <EXTI_Init+0xee>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8003d08:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003d0c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003d10:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8003d14:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003d18:	6891      	ldr	r1, [r2, #8]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6812      	ldr	r2, [r2, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8003d22:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003d26:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003d2a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8003d2e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003d32:	68d1      	ldr	r1, [r2, #12]
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6812      	ldr	r2, [r2, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	60da      	str	r2, [r3, #12]
 8003d3c:	e01f      	b.n	8003d7e <EXTI_Init+0x12e>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8003d3e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003d42:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003d46:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	795b      	ldrb	r3, [r3, #5]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	18d3      	adds	r3, r2, r3
 8003d50:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	6811      	ldr	r1, [r2, #0]
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	e00d      	b.n	8003d7e <EXTI_Init+0x12e>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	791b      	ldrb	r3, [r3, #4]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	18d3      	adds	r3, r2, r3
 8003d6a:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	6811      	ldr	r1, [r2, #0]
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6812      	ldr	r2, [r2, #0]
 8003d76:	ea6f 0202 	mvn.w	r2, r2
 8003d7a:	400a      	ands	r2, r1
 8003d7c:	601a      	str	r2, [r3, #0]
  }
}
 8003d7e:	f107 0714 	add.w	r7, r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr

08003d88 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8003d92:	f04f 0300 	mov.w	r3, #0
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	f04f 0300 	mov.w	r3, #0
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003da4:	f04f 0300 	mov.w	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	e086      	b.n	8003eba <GPIO_Init+0x132>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f04f 0201 	mov.w	r2, #1
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d173      	bne.n	8003eb2 <GPIO_Init+0x12a>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003dd4:	f04f 0103 	mov.w	r1, #3
 8003dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ddc:	ea6f 0303 	mvn.w	r3, r3
 8003de0:	401a      	ands	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	791b      	ldrb	r3, [r3, #4]
 8003dee:	4619      	mov	r1, r3
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003df6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	791b      	ldrb	r3, [r3, #4]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d003      	beq.n	8003e10 <GPIO_Init+0x88>
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	791b      	ldrb	r3, [r3, #4]
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d134      	bne.n	8003e7a <GPIO_Init+0xf2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003e1a:	f04f 0103 	mov.w	r1, #3
 8003e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e22:	ea6f 0303 	mvn.w	r3, r3
 8003e26:	401a      	ands	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	795b      	ldrb	r3, [r3, #5]
 8003e34:	4619      	mov	r1, r3
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e40:	431a      	orrs	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	f04f 0101 	mov.w	r1, #1
 8003e52:	fa01 f303 	lsl.w	r3, r1, r3
 8003e56:	ea6f 0303 	mvn.w	r3, r3
 8003e5a:	401a      	ands	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	799b      	ldrb	r3, [r3, #6]
 8003e68:	4619      	mov	r1, r3
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	431a      	orrs	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003e86:	f04f 0103 	mov.w	r1, #3
 8003e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8e:	ea6f 0303 	mvn.w	r3, r3
 8003e92:	401a      	ands	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	79db      	ldrb	r3, [r3, #7]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8003eac:	431a      	orrs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f103 0301 	add.w	r3, r3, #1
 8003eb8:	617b      	str	r3, [r7, #20]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2b0f      	cmp	r3, #15
 8003ebe:	f67f af75 	bls.w	8003dac <GPIO_Init+0x24>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8003ec2:	f107 071c 	add.w	r7, r7, #28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc80      	pop	{r7}
 8003eca:	4770      	bx	lr

08003ecc <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	887a      	ldrh	r2, [r7, #2]
 8003edc:	831a      	strh	r2, [r3, #24]
}
 8003ede:	f107 070c 	add.w	r7, r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bc80      	pop	{r7}
 8003ee6:	4770      	bx	lr

08003ee8 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	887a      	ldrh	r2, [r7, #2]
 8003ef8:	835a      	strh	r2, [r3, #26]
}
 8003efa:	f107 070c 	add.w	r7, r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr

08003f04 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	460a      	mov	r2, r1
 8003f10:	807a      	strh	r2, [r7, #2]
 8003f12:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8003f1a:	f04f 0300 	mov.w	r3, #0
 8003f1e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003f20:	787a      	ldrb	r2, [r7, #1]
 8003f22:	887b      	ldrh	r3, [r7, #2]
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003f32:	887b      	ldrh	r3, [r7, #2]
 8003f34:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	887b      	ldrh	r3, [r7, #2]
 8003f3e:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	4619      	mov	r1, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f101 0108 	add.w	r1, r1, #8
 8003f4c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003f50:	887b      	ldrh	r3, [r7, #2]
 8003f52:	f003 0307 	and.w	r3, r3, #7
 8003f56:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003f5a:	f04f 000f 	mov.w	r0, #15
 8003f5e:	fa00 f303 	lsl.w	r3, r0, r3
 8003f62:	ea6f 0303 	mvn.w	r3, r3
 8003f66:	4019      	ands	r1, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f102 0208 	add.w	r2, r2, #8
 8003f6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8003f72:	887b      	ldrh	r3, [r7, #2]
 8003f74:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f102 0208 	add.w	r2, r2, #8
 8003f82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8003f8c:	887b      	ldrh	r3, [r7, #2]
 8003f8e:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	461a      	mov	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f102 0208 	add.w	r2, r2, #8
 8003f9c:	68b9      	ldr	r1, [r7, #8]
 8003f9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8003fa2:	f107 0714 	add.w	r7, r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bc80      	pop	{r7}
 8003faa:	4770      	bx	lr

08003fac <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b089      	sub	sp, #36	; 0x24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	61bb      	str	r3, [r7, #24]
 8003fba:	f04f 0300 	mov.w	r3, #0
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	61fb      	str	r3, [r7, #28]
 8003fc6:	f04f 0302 	mov.w	r3, #2
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	f04f 0302 	mov.w	r3, #2
 8003fd6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003fd8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003fdc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 030c 	and.w	r3, r3, #12
 8003fe6:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d00a      	beq.n	8004004 <RCC_GetClocksFreq+0x58>
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d00f      	beq.n	8004012 <RCC_GetClocksFreq+0x66>
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d160      	bne.n	80040b8 <RCC_GetClocksFreq+0x10c>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8003ffc:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8004000:	6013      	str	r3, [r2, #0]
      break;
 8004002:	e060      	b.n	80040c6 <RCC_GetClocksFreq+0x11a>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800400a:	f2c0 037a 	movt	r3, #122	; 0x7a
 800400e:	6013      	str	r3, [r2, #0]
      break;
 8004010:	e059      	b.n	80040c6 <RCC_GetClocksFreq+0x11a>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8004012:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004016:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004020:	ea4f 5393 	mov.w	r3, r3, lsr #22
 8004024:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004026:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800402a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004034:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d014      	beq.n	8004066 <RCC_GetClocksFreq+0xba>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800403c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8004040:	f2c0 037a 	movt	r3, #122	; 0x7a
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	fbb3 f2f2 	udiv	r2, r3, r2
 800404a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800404e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004052:	6859      	ldr	r1, [r3, #4]
 8004054:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004058:	400b      	ands	r3, r1
 800405a:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800405e:	fb03 f302 	mul.w	r3, r3, r2
 8004062:	61fb      	str	r3, [r7, #28]
 8004064:	e013      	b.n	800408e <RCC_GetClocksFreq+0xe2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8004066:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800406a:	f2c0 03f4 	movt	r3, #244	; 0xf4
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	fbb3 f2f2 	udiv	r2, r3, r2
 8004074:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004078:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800407c:	6859      	ldr	r1, [r3, #4]
 800407e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004082:	400b      	ands	r3, r1
 8004084:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8004088:	fb03 f302 	mul.w	r3, r3, r2
 800408c:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800408e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004092:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800409c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80040a0:	f103 0301 	add.w	r3, r3, #1
 80040a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80040a8:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80040aa:	69fa      	ldr	r2, [r7, #28]
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	601a      	str	r2, [r3, #0]
      break;
 80040b6:	e006      	b.n	80040c6 <RCC_GetClocksFreq+0x11a>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80040be:	f2c0 03f4 	movt	r3, #244	; 0xf4
 80040c2:	6013      	str	r3, [r2, #0]
      break;
 80040c4:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80040c6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80040ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040d4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80040dc:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80040de:	f240 534c 	movw	r3, #1356	; 0x54c
 80040e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	189b      	adds	r3, r3, r2
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	fa22 f203 	lsr.w	r2, r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80040fe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004102:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800410c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	ea4f 2393 	mov.w	r3, r3, lsr #10
 8004114:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8004116:	f240 534c 	movw	r3, #1356	; 0x54c
 800411a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	189b      	adds	r3, r3, r2
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	b2db      	uxtb	r3, r3
 8004126:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	fa22 f203 	lsr.w	r2, r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8004136:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800413a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004144:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	ea4f 3353 	mov.w	r3, r3, lsr #13
 800414c:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800414e:	f240 534c 	movw	r3, #1356	; 0x54c
 8004152:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	189b      	adds	r3, r3, r2
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	b2db      	uxtb	r3, r3
 800415e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	fa22 f203 	lsr.w	r2, r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	60da      	str	r2, [r3, #12]
}
 800416e:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8004172:	46bd      	mov	sp, r7
 8004174:	bc80      	pop	{r7}
 8004176:	4770      	bx	lr

08004178 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	460b      	mov	r3, r1
 8004182:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004184:	78fb      	ldrb	r3, [r7, #3]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00c      	beq.n	80041a4 <RCC_AHB1PeriphClockCmd+0x2c>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800418a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800418e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004192:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004196:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800419a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	430a      	orrs	r2, r1
 80041a0:	631a      	str	r2, [r3, #48]	; 0x30
 80041a2:	e00d      	b.n	80041c0 <RCC_AHB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80041a4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80041a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80041ac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80041b0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80041b4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	ea6f 0202 	mvn.w	r2, r2
 80041bc:	400a      	ands	r2, r1
 80041be:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 80041c0:	f107 070c 	add.w	r7, r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bc80      	pop	{r7}
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop

080041cc <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	460b      	mov	r3, r1
 80041d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80041d8:	78fb      	ldrb	r3, [r7, #3]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00c      	beq.n	80041f8 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80041de:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80041e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80041e6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80041ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80041ee:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	641a      	str	r2, [r3, #64]	; 0x40
 80041f6:	e00d      	b.n	8004214 <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80041f8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80041fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004200:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004204:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004208:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	ea6f 0202 	mvn.w	r2, r2
 8004210:	400a      	ands	r2, r1
 8004212:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8004214:	f107 070c 	add.w	r7, r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop

08004220 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	460b      	mov	r3, r1
 800422a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800422c:	78fb      	ldrb	r3, [r7, #3]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00c      	beq.n	800424c <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8004232:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004236:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800423a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800423e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004242:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	430a      	orrs	r2, r1
 8004248:	645a      	str	r2, [r3, #68]	; 0x44
 800424a:	e00d      	b.n	8004268 <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800424c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004250:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004254:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004258:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800425c:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	ea6f 0202 	mvn.w	r2, r2
 8004264:	400a      	ands	r2, r1
 8004266:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8004268:	f107 070c 	add.w	r7, r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	bc80      	pop	{r7}
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop

08004274 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	460b      	mov	r3, r1
 800427e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004280:	78fb      	ldrb	r3, [r7, #3]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00c      	beq.n	80042a0 <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8004286:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800428a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800428e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004292:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004296:	6a11      	ldr	r1, [r2, #32]
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	430a      	orrs	r2, r1
 800429c:	621a      	str	r2, [r3, #32]
 800429e:	e00d      	b.n	80042bc <RCC_APB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80042a0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80042a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80042a8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80042ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80042b0:	6a11      	ldr	r1, [r2, #32]
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	ea6f 0202 	mvn.w	r2, r2
 80042b8:	400a      	ands	r2, r1
 80042ba:	621a      	str	r2, [r3, #32]
  }
}
 80042bc:	f107 070c 	add.w	r7, r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc80      	pop	{r7}
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop

080042c8 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	460b      	mov	r3, r1
 80042d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80042d4:	78fb      	ldrb	r3, [r7, #3]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00c      	beq.n	80042f4 <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80042da:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80042de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80042e2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80042e6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80042ea:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	625a      	str	r2, [r3, #36]	; 0x24
 80042f2:	e00d      	b.n	8004310 <RCC_APB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80042f4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80042f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80042fc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004300:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004304:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	ea6f 0202 	mvn.w	r2, r2
 800430c:	400a      	ands	r2, r1
 800430e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004310:	f107 070c 	add.w	r7, r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	bc80      	pop	{r7}
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop

0800431c <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800432a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800432e:	429a      	cmp	r2, r3
 8004330:	d10c      	bne.n	800434c <SPI_I2S_DeInit+0x30>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8004332:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004336:	f04f 0101 	mov.w	r1, #1
 800433a:	f7ff ffc5 	bl	80042c8 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 800433e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004342:	f04f 0100 	mov.w	r1, #0
 8004346:	f7ff ffbf 	bl	80042c8 <RCC_APB2PeriphResetCmd>
 800434a:	e026      	b.n	800439a <SPI_I2S_DeInit+0x7e>
  }
  else if (SPIx == SPI2)
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004352:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004356:	429a      	cmp	r2, r3
 8004358:	d10c      	bne.n	8004374 <SPI_I2S_DeInit+0x58>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 800435a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800435e:	f04f 0101 	mov.w	r1, #1
 8004362:	f7ff ff87 	bl	8004274 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8004366:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800436a:	f04f 0100 	mov.w	r1, #0
 800436e:	f7ff ff81 	bl	8004274 <RCC_APB1PeriphResetCmd>
 8004372:	e012      	b.n	800439a <SPI_I2S_DeInit+0x7e>
    }
  else
  {
    if (SPIx == SPI3)
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800437a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800437e:	429a      	cmp	r2, r3
 8004380:	d10b      	bne.n	800439a <SPI_I2S_DeInit+0x7e>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8004382:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004386:	f04f 0101 	mov.w	r1, #1
 800438a:	f7ff ff73 	bl	8004274 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 800438e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004392:	f04f 0100 	mov.w	r1, #0
 8004396:	f7ff ff6d 	bl	8004274 <RCC_APB1PeriphResetCmd>
    }
  }
}
 800439a:	f107 0708 	add.w	r7, r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop

080043a4 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 80043ba:	89fb      	ldrh	r3, [r7, #14]
 80043bc:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80043c0:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	881a      	ldrh	r2, [r3, #0]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	885b      	ldrh	r3, [r3, #2]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80043d2:	4313      	orrs	r3, r2
 80043d4:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80043da:	4313      	orrs	r3, r2
 80043dc:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80043e2:	4313      	orrs	r3, r2
 80043e4:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80043ea:	4313      	orrs	r3, r2
 80043ec:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80043f2:	4313      	orrs	r3, r2
 80043f4:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80043fa:	4313      	orrs	r3, r2
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	89fb      	ldrh	r3, [r7, #14]
 8004400:	4313      	orrs	r3, r2
 8004402:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	89fa      	ldrh	r2, [r7, #14]
 8004408:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	8b9b      	ldrh	r3, [r3, #28]
 800440e:	b29b      	uxth	r3, r3
 8004410:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004414:	b29a      	uxth	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	8a1a      	ldrh	r2, [r3, #16]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	821a      	strh	r2, [r3, #16]
}
 8004422:	f107 0714 	add.w	r7, r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr

0800442c <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	460b      	mov	r3, r1
 8004436:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d008      	beq.n	8004450 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	b29b      	uxth	r3, r3
 8004444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004448:	b29a      	uxth	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	801a      	strh	r2, [r3, #0]
 800444e:	e007      	b.n	8004460 <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	b29b      	uxth	r3, r3
 8004456:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800445a:	b29a      	uxth	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	801a      	strh	r2, [r3, #0]
  }
}
 8004460:	f107 070c 	add.w	r7, r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	bc80      	pop	{r7}
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop

0800446c <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	899b      	ldrh	r3, [r3, #12]
 8004478:	b29b      	uxth	r3, r3
}
 800447a:	4618      	mov	r0, r3
 800447c:	f107 070c 	add.w	r7, r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	bc80      	pop	{r7}
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop

08004488 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	887a      	ldrh	r2, [r7, #2]
 8004498:	819a      	strh	r2, [r3, #12]
}
 800449a:	f107 070c 	add.w	r7, r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	bc80      	pop	{r7}
 80044a2:	4770      	bx	lr

080044a4 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	460b      	mov	r3, r1
 80044ae:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	891b      	ldrh	r3, [r3, #8]
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	887b      	ldrh	r3, [r7, #2]
 80044be:	4013      	ands	r3, r2
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <SPI_I2S_GetFlagStatus+0x2a>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80044c6:	f04f 0301 	mov.w	r3, #1
 80044ca:	73fb      	strb	r3, [r7, #15]
 80044cc:	e002      	b.n	80044d4 <SPI_I2S_GetFlagStatus+0x30>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80044ce:	f04f 0300 	mov.w	r3, #0
 80044d2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	f107 0714 	add.w	r7, r7, #20
 80044dc:	46bd      	mov	sp, r7
 80044de:	bc80      	pop	{r7}
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop

080044e4 <SYSCFG_EXTILineConfig>:
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 80044e4:	b490      	push	{r4, r7}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	4602      	mov	r2, r0
 80044ec:	460b      	mov	r3, r1
 80044ee:	71fa      	strb	r2, [r7, #7]
 80044f0:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80044f2:	f04f 0300 	mov.w	r3, #0
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80044f8:	79bb      	ldrb	r3, [r7, #6]
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004502:	f04f 020f 	mov.w	r2, #15
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 800450c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004510:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004514:	79ba      	ldrb	r2, [r7, #6]
 8004516:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	4610      	mov	r0, r2
 800451e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004522:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004526:	79b9      	ldrb	r1, [r7, #6]
 8004528:	ea4f 0191 	mov.w	r1, r1, lsr #2
 800452c:	b2c9      	uxtb	r1, r1
 800452e:	f101 0102 	add.w	r1, r1, #2
 8004532:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	ea6f 0202 	mvn.w	r2, r2
 800453c:	4011      	ands	r1, r2
 800453e:	f100 0202 	add.w	r2, r0, #2
 8004542:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8004546:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800454a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800454e:	79ba      	ldrb	r2, [r7, #6]
 8004550:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8004554:	b2d2      	uxtb	r2, r2
 8004556:	4610      	mov	r0, r2
 8004558:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800455c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004560:	79b9      	ldrb	r1, [r7, #6]
 8004562:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8004566:	b2c9      	uxtb	r1, r1
 8004568:	f101 0102 	add.w	r1, r1, #2
 800456c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8004570:	79fc      	ldrb	r4, [r7, #7]
 8004572:	79ba      	ldrb	r2, [r7, #6]
 8004574:	f002 0203 	and.w	r2, r2, #3
 8004578:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800457c:	fa04 f202 	lsl.w	r2, r4, r2
 8004580:	4311      	orrs	r1, r2
 8004582:	f100 0202 	add.w	r2, r0, #2
 8004586:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800458a:	f107 0710 	add.w	r7, r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bc90      	pop	{r4, r7}
 8004592:	4770      	bx	lr

08004594 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800459e:	f04f 0300 	mov.w	r3, #0
 80045a2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	881b      	ldrh	r3, [r3, #0]
 80045a8:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	f04f 0300 	mov.w	r3, #0
 80045b0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d01f      	beq.n	80045f8 <TIM_TimeBaseInit+0x64>
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045be:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d018      	beq.n	80045f8 <TIM_TimeBaseInit+0x64>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045cc:	d014      	beq.n	80045f8 <TIM_TimeBaseInit+0x64>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045d4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80045d8:	429a      	cmp	r2, r3
 80045da:	d00d      	beq.n	80045f8 <TIM_TimeBaseInit+0x64>
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045e2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d006      	beq.n	80045f8 <TIM_TimeBaseInit+0x64>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80045f0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d108      	bne.n	800460a <TIM_TimeBaseInit+0x76>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80045f8:	89fb      	ldrh	r3, [r7, #14]
 80045fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fe:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	885a      	ldrh	r2, [r3, #2]
 8004604:	89fb      	ldrh	r3, [r7, #14]
 8004606:	4313      	orrs	r3, r2
 8004608:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004610:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004614:	429a      	cmp	r2, r3
 8004616:	d00f      	beq.n	8004638 <TIM_TimeBaseInit+0xa4>
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800461e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004622:	429a      	cmp	r2, r3
 8004624:	d008      	beq.n	8004638 <TIM_TimeBaseInit+0xa4>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8004626:	89fb      	ldrh	r3, [r7, #14]
 8004628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800462c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	891a      	ldrh	r2, [r3, #8]
 8004632:	89fb      	ldrh	r3, [r7, #14]
 8004634:	4313      	orrs	r3, r2
 8004636:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	89fa      	ldrh	r2, [r7, #14]
 800463c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	881a      	ldrh	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004658:	429a      	cmp	r2, r3
 800465a:	d006      	beq.n	800466a <TIM_TimeBaseInit+0xd6>
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004662:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004666:	429a      	cmp	r2, r3
 8004668:	d104      	bne.n	8004674 <TIM_TimeBaseInit+0xe0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	7a9b      	ldrb	r3, [r3, #10]
 800466e:	461a      	mov	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f04f 0201 	mov.w	r2, #1
 800467a:	829a      	strh	r2, [r3, #20]
}
 800467c:	f107 0714 	add.w	r7, r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop

08004688 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004698:	f107 070c 	add.w	r7, r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	bc80      	pop	{r7}
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop

080046a4 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80046b0:	78fb      	ldrb	r3, [r7, #3]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d008      	beq.n	80046c8 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	881b      	ldrh	r3, [r3, #0]
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	801a      	strh	r2, [r3, #0]
 80046c6:	e007      	b.n	80046d8 <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	881b      	ldrh	r3, [r3, #0]
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	801a      	strh	r2, [r3, #0]
  }
}
 80046d8:	f107 070c 	add.w	r7, r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	bc80      	pop	{r7}
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop

080046e4 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	460b      	mov	r3, r1
 80046ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80046f0:	78fb      	ldrb	r3, [r7, #3]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d008      	beq.n	8004708 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	f043 0301 	orr.w	r3, r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	801a      	strh	r2, [r3, #0]
 8004706:	e007      	b.n	8004718 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	b29b      	uxth	r3, r3
 800470e:	f023 0301 	bic.w	r3, r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	801a      	strh	r2, [r3, #0]
  }
}
 8004718:	f107 070c 	add.w	r7, r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	bc80      	pop	{r7}
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop

08004724 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	817b      	strh	r3, [r7, #10]
 8004734:	f04f 0300 	mov.w	r3, #0
 8004738:	81fb      	strh	r3, [r7, #14]
 800473a:	f04f 0300 	mov.w	r3, #0
 800473e:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	8c1b      	ldrh	r3, [r3, #32]
 8004744:	b29b      	uxth	r3, r3
 8004746:	f023 0301 	bic.w	r3, r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	8c1b      	ldrh	r3, [r3, #32]
 8004754:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	889b      	ldrh	r3, [r3, #4]
 800475a:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	8b1b      	ldrh	r3, [r3, #24]
 8004760:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 8004762:	897b      	ldrh	r3, [r7, #10]
 8004764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004768:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 800476a:	897b      	ldrh	r3, [r7, #10]
 800476c:	f023 0303 	bic.w	r3, r3, #3
 8004770:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	881a      	ldrh	r2, [r3, #0]
 8004776:	897b      	ldrh	r3, [r7, #10]
 8004778:	4313      	orrs	r3, r2
 800477a:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 800477c:	89fb      	ldrh	r3, [r7, #14]
 800477e:	f023 0302 	bic.w	r3, r3, #2
 8004782:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	899a      	ldrh	r2, [r3, #12]
 8004788:	89fb      	ldrh	r3, [r7, #14]
 800478a:	4313      	orrs	r3, r2
 800478c:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	885a      	ldrh	r2, [r3, #2]
 8004792:	89fb      	ldrh	r3, [r7, #14]
 8004794:	4313      	orrs	r3, r2
 8004796:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	f04f 0300 	mov.w	r3, #0
 800479e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d006      	beq.n	80047b4 <TIM_OC1Init+0x90>
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047ac:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d123      	bne.n	80047fc <TIM_OC1Init+0xd8>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80047b4:	89fb      	ldrh	r3, [r7, #14]
 80047b6:	f023 0308 	bic.w	r3, r3, #8
 80047ba:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	89da      	ldrh	r2, [r3, #14]
 80047c0:	89fb      	ldrh	r3, [r7, #14]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 80047c6:	89fb      	ldrh	r3, [r7, #14]
 80047c8:	f023 0304 	bic.w	r3, r3, #4
 80047cc:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	889a      	ldrh	r2, [r3, #4]
 80047d2:	89fb      	ldrh	r3, [r7, #14]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 80047d8:	89bb      	ldrh	r3, [r7, #12]
 80047da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047de:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80047e0:	89bb      	ldrh	r3, [r7, #12]
 80047e2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047e6:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	8a1a      	ldrh	r2, [r3, #16]
 80047ec:	89bb      	ldrh	r3, [r7, #12]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	8a5a      	ldrh	r2, [r3, #18]
 80047f6:	89bb      	ldrh	r3, [r7, #12]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	89ba      	ldrh	r2, [r7, #12]
 8004800:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	897a      	ldrh	r2, [r7, #10]
 8004806:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	89fa      	ldrh	r2, [r7, #14]
 8004814:	841a      	strh	r2, [r3, #32]
}
 8004816:	f107 0714 	add.w	r7, r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	bc80      	pop	{r7}
 800481e:	4770      	bx	lr

08004820 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800482a:	f04f 0300 	mov.w	r3, #0
 800482e:	817b      	strh	r3, [r7, #10]
 8004830:	f04f 0300 	mov.w	r3, #0
 8004834:	81fb      	strh	r3, [r7, #14]
 8004836:	f04f 0300 	mov.w	r3, #0
 800483a:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	8c1b      	ldrh	r3, [r3, #32]
 8004840:	b29b      	uxth	r3, r3
 8004842:	f023 0310 	bic.w	r3, r3, #16
 8004846:	b29a      	uxth	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	8c1b      	ldrh	r3, [r3, #32]
 8004850:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	889b      	ldrh	r3, [r3, #4]
 8004856:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	8b1b      	ldrh	r3, [r3, #24]
 800485c:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 800485e:	897b      	ldrh	r3, [r7, #10]
 8004860:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004864:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8004866:	897b      	ldrh	r3, [r7, #10]
 8004868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800486c:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	881b      	ldrh	r3, [r3, #0]
 8004872:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8004876:	b29a      	uxth	r2, r3
 8004878:	897b      	ldrh	r3, [r7, #10]
 800487a:	4313      	orrs	r3, r2
 800487c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 800487e:	89fb      	ldrh	r3, [r7, #14]
 8004880:	f023 0320 	bic.w	r3, r3, #32
 8004884:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	899b      	ldrh	r3, [r3, #12]
 800488a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800488e:	b29a      	uxth	r2, r3
 8004890:	89fb      	ldrh	r3, [r7, #14]
 8004892:	4313      	orrs	r3, r2
 8004894:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	885b      	ldrh	r3, [r3, #2]
 800489a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800489e:	b29a      	uxth	r2, r3
 80048a0:	89fb      	ldrh	r3, [r7, #14]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	f04f 0300 	mov.w	r3, #0
 80048ac:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d006      	beq.n	80048c2 <TIM_OC2Init+0xa2>
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048ba:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80048be:	429a      	cmp	r2, r3
 80048c0:	d12f      	bne.n	8004922 <TIM_OC2Init+0x102>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80048c2:	89fb      	ldrh	r3, [r7, #14]
 80048c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048c8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	89db      	ldrh	r3, [r3, #14]
 80048ce:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	89fb      	ldrh	r3, [r7, #14]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 80048da:	89fb      	ldrh	r3, [r7, #14]
 80048dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048e0:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	889b      	ldrh	r3, [r3, #4]
 80048e6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	89fb      	ldrh	r3, [r7, #14]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 80048f2:	89bb      	ldrh	r3, [r7, #12]
 80048f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048f8:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 80048fa:	89bb      	ldrh	r3, [r7, #12]
 80048fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004900:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	8a1b      	ldrh	r3, [r3, #16]
 8004906:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800490a:	b29a      	uxth	r2, r3
 800490c:	89bb      	ldrh	r3, [r7, #12]
 800490e:	4313      	orrs	r3, r2
 8004910:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	8a5b      	ldrh	r3, [r3, #18]
 8004916:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800491a:	b29a      	uxth	r2, r3
 800491c:	89bb      	ldrh	r3, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	89ba      	ldrh	r2, [r7, #12]
 8004926:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	897a      	ldrh	r2, [r7, #10]
 800492c:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	89fa      	ldrh	r2, [r7, #14]
 800493a:	841a      	strh	r2, [r3, #32]
}
 800493c:	f107 0714 	add.w	r7, r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	bc80      	pop	{r7}
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop

08004948 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8004952:	f04f 0300 	mov.w	r3, #0
 8004956:	817b      	strh	r3, [r7, #10]
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	81fb      	strh	r3, [r7, #14]
 800495e:	f04f 0300 	mov.w	r3, #0
 8004962:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	8c1b      	ldrh	r3, [r3, #32]
 8004968:	b29b      	uxth	r3, r3
 800496a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800496e:	b29a      	uxth	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	8c1b      	ldrh	r3, [r3, #32]
 8004978:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	889b      	ldrh	r3, [r3, #4]
 800497e:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	8b9b      	ldrh	r3, [r3, #28]
 8004984:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8004986:	897b      	ldrh	r3, [r7, #10]
 8004988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498c:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 800498e:	897b      	ldrh	r3, [r7, #10]
 8004990:	f023 0303 	bic.w	r3, r3, #3
 8004994:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	881a      	ldrh	r2, [r3, #0]
 800499a:	897b      	ldrh	r3, [r7, #10]
 800499c:	4313      	orrs	r3, r2
 800499e:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80049a0:	89fb      	ldrh	r3, [r7, #14]
 80049a2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049a6:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	899b      	ldrh	r3, [r3, #12]
 80049ac:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	89fb      	ldrh	r3, [r7, #14]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	885b      	ldrh	r3, [r3, #2]
 80049bc:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	89fb      	ldrh	r3, [r7, #14]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	f04f 0300 	mov.w	r3, #0
 80049ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d006      	beq.n	80049e4 <TIM_OC3Init+0x9c>
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d12f      	bne.n	8004a44 <TIM_OC3Init+0xfc>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80049e4:	89fb      	ldrh	r3, [r7, #14]
 80049e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049ea:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	89db      	ldrh	r3, [r3, #14]
 80049f0:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	89fb      	ldrh	r3, [r7, #14]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 80049fc:	89fb      	ldrh	r3, [r7, #14]
 80049fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a02:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	889b      	ldrh	r3, [r3, #4]
 8004a08:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	89fb      	ldrh	r3, [r7, #14]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 8004a14:	89bb      	ldrh	r3, [r7, #12]
 8004a16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a1a:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8004a1c:	89bb      	ldrh	r3, [r7, #12]
 8004a1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a22:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	8a1b      	ldrh	r3, [r3, #16]
 8004a28:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	89bb      	ldrh	r3, [r7, #12]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	8a5b      	ldrh	r3, [r3, #18]
 8004a38:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	89bb      	ldrh	r3, [r7, #12]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	89ba      	ldrh	r2, [r7, #12]
 8004a48:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	897a      	ldrh	r2, [r7, #10]
 8004a4e:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	89fa      	ldrh	r2, [r7, #14]
 8004a5c:	841a      	strh	r2, [r3, #32]
}
 8004a5e:	f107 0714 	add.w	r7, r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bc80      	pop	{r7}
 8004a66:	4770      	bx	lr

08004a68 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8004a72:	f04f 0300 	mov.w	r3, #0
 8004a76:	81bb      	strh	r3, [r7, #12]
 8004a78:	f04f 0300 	mov.w	r3, #0
 8004a7c:	817b      	strh	r3, [r7, #10]
 8004a7e:	f04f 0300 	mov.w	r3, #0
 8004a82:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	8c1b      	ldrh	r3, [r3, #32]
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	8c1b      	ldrh	r3, [r3, #32]
 8004a98:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	889b      	ldrh	r3, [r3, #4]
 8004a9e:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	8b9b      	ldrh	r3, [r3, #28]
 8004aa4:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 8004aa6:	89bb      	ldrh	r3, [r7, #12]
 8004aa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aac:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8004aae:	89bb      	ldrh	r3, [r7, #12]
 8004ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ab4:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	881b      	ldrh	r3, [r3, #0]
 8004aba:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	89bb      	ldrh	r3, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8004ac6:	897b      	ldrh	r3, [r7, #10]
 8004ac8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004acc:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	899b      	ldrh	r3, [r3, #12]
 8004ad2:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	897b      	ldrh	r3, [r7, #10]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	885b      	ldrh	r3, [r3, #2]
 8004ae2:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	897b      	ldrh	r3, [r7, #10]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d006      	beq.n	8004b0a <TIM_OC4Init+0xa2>
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b02:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d10b      	bne.n	8004b22 <TIM_OC4Init+0xba>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8004b0a:	89fb      	ldrh	r3, [r7, #14]
 8004b0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b10:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	8a1b      	ldrh	r3, [r3, #16]
 8004b16:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	89fb      	ldrh	r3, [r7, #14]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	89fa      	ldrh	r2, [r7, #14]
 8004b26:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	89ba      	ldrh	r2, [r7, #12]
 8004b2c:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	897a      	ldrh	r2, [r7, #10]
 8004b3a:	841a      	strh	r2, [r3, #32]
}
 8004b3c:	f107 0714 	add.w	r7, r7, #20
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bc80      	pop	{r7}
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop

08004b48 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004b58:	f107 070c 	add.w	r7, r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bc80      	pop	{r7}
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop

08004b64 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004b74:	f107 070c 	add.w	r7, r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bc80      	pop	{r7}
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop

08004b80 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004b90:	f107 070c 	add.w	r7, r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bc80      	pop	{r7}
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop

08004b9c <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004bac:	f107 070c 	add.w	r7, r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bc80      	pop	{r7}
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop

08004bb8 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8004bc4:	f04f 0300 	mov.w	r3, #0
 8004bc8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	8b1b      	ldrh	r3, [r3, #24]
 8004bce:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8004bd0:	89fb      	ldrh	r3, [r7, #14]
 8004bd2:	f023 0308 	bic.w	r3, r3, #8
 8004bd6:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8004bd8:	89fa      	ldrh	r2, [r7, #14]
 8004bda:	887b      	ldrh	r3, [r7, #2]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	89fa      	ldrh	r2, [r7, #14]
 8004be4:	831a      	strh	r2, [r3, #24]
}
 8004be6:	f107 0714 	add.w	r7, r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bc80      	pop	{r7}
 8004bee:	4770      	bx	lr

08004bf0 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8004bfc:	f04f 0300 	mov.w	r3, #0
 8004c00:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	8b1b      	ldrh	r3, [r3, #24]
 8004c06:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8004c08:	89fb      	ldrh	r3, [r7, #14]
 8004c0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c0e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8004c10:	887b      	ldrh	r3, [r7, #2]
 8004c12:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	89fb      	ldrh	r3, [r7, #14]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	89fa      	ldrh	r2, [r7, #14]
 8004c22:	831a      	strh	r2, [r3, #24]
}
 8004c24:	f107 0714 	add.w	r7, r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bc80      	pop	{r7}
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop

08004c30 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8004c3c:	f04f 0300 	mov.w	r3, #0
 8004c40:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	8b9b      	ldrh	r3, [r3, #28]
 8004c46:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8004c48:	89fb      	ldrh	r3, [r7, #14]
 8004c4a:	f023 0308 	bic.w	r3, r3, #8
 8004c4e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8004c50:	89fa      	ldrh	r2, [r7, #14]
 8004c52:	887b      	ldrh	r3, [r7, #2]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	89fa      	ldrh	r2, [r7, #14]
 8004c5c:	839a      	strh	r2, [r3, #28]
}
 8004c5e:	f107 0714 	add.w	r7, r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bc80      	pop	{r7}
 8004c66:	4770      	bx	lr

08004c68 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	460b      	mov	r3, r1
 8004c72:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8004c74:	f04f 0300 	mov.w	r3, #0
 8004c78:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	8b9b      	ldrh	r3, [r3, #28]
 8004c7e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8004c80:	89fb      	ldrh	r3, [r7, #14]
 8004c82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c86:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8004c88:	887b      	ldrh	r3, [r7, #2]
 8004c8a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	89fb      	ldrh	r3, [r7, #14]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	89fa      	ldrh	r2, [r7, #14]
 8004c9a:	839a      	strh	r2, [r3, #28]
}
 8004c9c:	f107 0714 	add.w	r7, r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bc80      	pop	{r7}
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop

08004ca8 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	460a      	mov	r2, r1
 8004cb4:	807a      	strh	r2, [r7, #2]
 8004cb6:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8004cbe:	887b      	ldrh	r3, [r7, #2]
 8004cc0:	f04f 0201 	mov.w	r2, #1
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	8c1b      	ldrh	r3, [r3, #32]
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	89fb      	ldrh	r3, [r7, #14]
 8004cd2:	ea6f 0303 	mvn.w	r3, r3
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	4013      	ands	r3, r2
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	8c1b      	ldrh	r3, [r3, #32]
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	8839      	ldrh	r1, [r7, #0]
 8004ce8:	887b      	ldrh	r3, [r7, #2]
 8004cea:	fa01 f303 	lsl.w	r3, r1, r3
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	841a      	strh	r2, [r3, #32]
}
 8004cf8:	f107 0714 	add.w	r7, r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bc80      	pop	{r7}
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop

08004d04 <register_fini>:
 8004d04:	f240 0300 	movw	r3, #0
 8004d08:	f2c0 0300 	movt	r3, #0
 8004d0c:	b12b      	cbz	r3, 8004d1a <register_fini+0x16>
 8004d0e:	f640 10dd 	movw	r0, #2525	; 0x9dd
 8004d12:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004d16:	f7fb be5b 	b.w	80009d0 <atexit>
 8004d1a:	4770      	bx	lr
 8004d1c:	54495753 	.word	0x54495753
 8004d20:	00004843 	.word	0x00004843
 8004d24:	534d454d 	.word	0x534d454d
 8004d28:	00000000 	.word	0x00000000
 8004d2c:	414c4142 	.word	0x414c4142
 8004d30:	0045434e 	.word	0x0045434e
 8004d34:	454c4449 	.word	0x454c4449
 8004d38:	00000000 	.word	0x00000000
 8004d3c:	00000a0d 	.word	0x00000a0d
 8004d40:	20207525 	.word	0x20207525
 8004d44:	20206325 	.word	0x20206325
 8004d48:	36312d25 	.word	0x36312d25
 8004d4c:	20202073 	.word	0x20202073
 8004d50:	20202020 	.word	0x20202020
 8004d54:	30202020 	.word	0x30202020
 8004d58:	30202020 	.word	0x30202020
 8004d5c:	20202525 	.word	0x20202525
 8004d60:	0d753525 	.word	0x0d753525
 8004d64:	0000000a 	.word	0x0000000a
 8004d68:	20207525 	.word	0x20207525
 8004d6c:	20206325 	.word	0x20206325
 8004d70:	36312d25 	.word	0x36312d25
 8004d74:	31252073 	.word	0x31252073
 8004d78:	25207530 	.word	0x25207530
 8004d7c:	25257533 	.word	0x25257533
 8004d80:	35252020 	.word	0x35252020
 8004d84:	000a0d75 	.word	0x000a0d75
 8004d88:	20207525 	.word	0x20207525
 8004d8c:	20206325 	.word	0x20206325
 8004d90:	36312d25 	.word	0x36312d25
 8004d94:	31252073 	.word	0x31252073
 8004d98:	20207530 	.word	0x20207530
 8004d9c:	2525313c 	.word	0x2525313c
 8004da0:	35252020 	.word	0x35252020
 8004da4:	000a0d75 	.word	0x000a0d75

08004da8 <_global_impure_ptr>:
 8004da8:	20000004                                ... 

08004dac <__sf_fake_stderr>:
 8004dac:	00000000 00000000 00000000 00000000     ................
 8004dbc:	00000000 00000000 00000000 00000000     ................

08004dcc <__sf_fake_stdout>:
 8004dcc:	00000000 00000000 00000000 00000000     ................
 8004ddc:	00000000 00000000 00000000 00000000     ................

08004dec <__sf_fake_stdin>:
 8004dec:	00000000 00000000 00000000 00000000     ................
 8004dfc:	00000000 00000000 00000000 00000000     ................

08004e0c <GPIO_PIN>:
 8004e0c:	20001000 80004000                       ... .@..

08004e14 <BUTTON_PIN>:
 8004e14:	00000001                                ....

08004e18 <BUTTON_CLK>:
 8004e18:	00000001                                ....

08004e1c <BUTTON_EXTI_LINE>:
 8004e1c:	00000001                                ....

08004e20 <BUTTON_PORT_SOURCE>:
 8004e20:	00000000                                ....

08004e24 <BUTTON_PIN_SOURCE>:
 8004e24:	00000000                                ....

08004e28 <BUTTON_IRQn>:
 8004e28:	00000006 00000043                       ....C...

08004e30 <_init>:
 8004e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e32:	bf00      	nop
 8004e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e36:	bc08      	pop	{r3}
 8004e38:	469e      	mov	lr, r3
 8004e3a:	4770      	bx	lr

08004e3c <_fini>:
 8004e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3e:	bf00      	nop
 8004e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e42:	bc08      	pop	{r3}
 8004e44:	469e      	mov	lr, r3
 8004e46:	4770      	bx	lr
