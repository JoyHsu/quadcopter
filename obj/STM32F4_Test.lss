
obj/STM32F4_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bdc  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000008  08004d64  08004d64  0000cd64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08004d6c  08004d6c  0000cd6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000055c  20000000  08004d70  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000029c  20000560  080052d0  00010560  2**3
                  ALLOC
  6 ._user_heap_stack 00000400  200007fc  080052cc  000107fc  2**0
                  ALLOC
  7 .ARM.attributes 00000035  00000000  00000000  0001055c  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000b6eb  00000000  00000000  00010591  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001c26  00000000  00000000  0001bc7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000046f2  00000000  00000000  0001d8a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000c30  00000000  00000000  00021f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b18  00000000  00000000  00022bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003e2e  00000000  00000000  000236dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004034  00000000  00000000  0002750a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000030  00000000  00000000  0002b53e  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002a60  00000000  00000000  0002b570  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	f240 5460 	movw	r4, #1376	; 0x560
 800018e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000192:	7823      	ldrb	r3, [r4, #0]
 8000194:	b963      	cbnz	r3, 80001b0 <__do_global_dtors_aux+0x28>
 8000196:	f240 0000 	movw	r0, #0
 800019a:	f2c0 0000 	movt	r0, #0
 800019e:	b128      	cbz	r0, 80001ac <__do_global_dtors_aux+0x24>
 80001a0:	f644 504c 	movw	r0, #19788	; 0x4d4c
 80001a4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001a8:	f3af 8000 	nop.w
 80001ac:	2101      	movs	r1, #1
 80001ae:	7021      	strb	r1, [r4, #0]
 80001b0:	bd10      	pop	{r4, pc}
 80001b2:	bf00      	nop

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	f240 0300 	movw	r3, #0
 80001ba:	f2c0 0300 	movt	r3, #0
 80001be:	b14b      	cbz	r3, 80001d4 <frame_dummy+0x20>
 80001c0:	f644 504c 	movw	r0, #19788	; 0x4d4c
 80001c4:	f240 5164 	movw	r1, #1380	; 0x564
 80001c8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001cc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80001d0:	f3af 8000 	nop.w
 80001d4:	f240 505c 	movw	r0, #1372	; 0x55c
 80001d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80001dc:	6801      	ldr	r1, [r0, #0]
 80001de:	b129      	cbz	r1, 80001ec <frame_dummy+0x38>
 80001e0:	f240 0300 	movw	r3, #0
 80001e4:	f2c0 0300 	movt	r3, #0
 80001e8:	b103      	cbz	r3, 80001ec <frame_dummy+0x38>
 80001ea:	4798      	blx	r3
 80001ec:	bd08      	pop	{r3, pc}
 80001ee:	bf00      	nop

080001f0 <__libc_init_array>:
 80001f0:	b570      	push	{r4, r5, r6, lr}
 80001f2:	f644 5664 	movw	r6, #19812	; 0x4d64
 80001f6:	f644 5564 	movw	r5, #19812	; 0x4d64
 80001fa:	f6c0 0600 	movt	r6, #2048	; 0x800
 80001fe:	f6c0 0500 	movt	r5, #2048	; 0x800
 8000202:	1b76      	subs	r6, r6, r5
 8000204:	10b6      	asrs	r6, r6, #2
 8000206:	d006      	beq.n	8000216 <__libc_init_array+0x26>
 8000208:	2400      	movs	r4, #0
 800020a:	f855 3b04 	ldr.w	r3, [r5], #4
 800020e:	3401      	adds	r4, #1
 8000210:	4798      	blx	r3
 8000212:	42a6      	cmp	r6, r4
 8000214:	d1f9      	bne.n	800020a <__libc_init_array+0x1a>
 8000216:	f644 566c 	movw	r6, #19820	; 0x4d6c
 800021a:	f644 5564 	movw	r5, #19812	; 0x4d64
 800021e:	f6c0 0600 	movt	r6, #2048	; 0x800
 8000222:	f6c0 0500 	movt	r5, #2048	; 0x800
 8000226:	1b76      	subs	r6, r6, r5
 8000228:	f004 fd90 	bl	8004d4c <_init>
 800022c:	10b6      	asrs	r6, r6, #2
 800022e:	d006      	beq.n	800023e <__libc_init_array+0x4e>
 8000230:	2400      	movs	r4, #0
 8000232:	f855 3b04 	ldr.w	r3, [r5], #4
 8000236:	3401      	adds	r4, #1
 8000238:	4798      	blx	r3
 800023a:	42a6      	cmp	r6, r4
 800023c:	d1f9      	bne.n	8000232 <__libc_init_array+0x42>
 800023e:	bd70      	pop	{r4, r5, r6, pc}

08000240 <malloc>:
 8000240:	f240 0300 	movw	r3, #0
 8000244:	4601      	mov	r1, r0
 8000246:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800024a:	6818      	ldr	r0, [r3, #0]
 800024c:	f000 b808 	b.w	8000260 <_malloc_r>

08000250 <free>:
 8000250:	f240 0300 	movw	r3, #0
 8000254:	4601      	mov	r1, r0
 8000256:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800025a:	6818      	ldr	r0, [r3, #0]
 800025c:	f000 bc28 	b.w	8000ab0 <_free_r>

08000260 <_malloc_r>:
 8000260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000264:	f101 040b 	add.w	r4, r1, #11
 8000268:	2c16      	cmp	r4, #22
 800026a:	b083      	sub	sp, #12
 800026c:	4606      	mov	r6, r0
 800026e:	d930      	bls.n	80002d2 <_malloc_r+0x72>
 8000270:	f024 0407 	bic.w	r4, r4, #7
 8000274:	0fe3      	lsrs	r3, r4, #31
 8000276:	428c      	cmp	r4, r1
 8000278:	bf2c      	ite	cs
 800027a:	4619      	movcs	r1, r3
 800027c:	f043 0101 	orrcc.w	r1, r3, #1
 8000280:	2900      	cmp	r1, #0
 8000282:	d12f      	bne.n	80002e4 <_malloc_r+0x84>
 8000284:	4630      	mov	r0, r6
 8000286:	f001 fb09 	bl	800189c <__malloc_lock>
 800028a:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800028e:	d22d      	bcs.n	80002ec <_malloc_r+0x8c>
 8000290:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8000294:	f240 05f4 	movw	r5, #244	; 0xf4
 8000298:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800029c:	eb05 02ce 	add.w	r2, r5, lr, lsl #3
 80002a0:	68d3      	ldr	r3, [r2, #12]
 80002a2:	4293      	cmp	r3, r2
 80002a4:	f000 8223 	beq.w	80006ee <_malloc_r+0x48e>
 80002a8:	685c      	ldr	r4, [r3, #4]
 80002aa:	f103 0708 	add.w	r7, r3, #8
 80002ae:	68da      	ldr	r2, [r3, #12]
 80002b0:	4630      	mov	r0, r6
 80002b2:	f024 0403 	bic.w	r4, r4, #3
 80002b6:	6899      	ldr	r1, [r3, #8]
 80002b8:	191b      	adds	r3, r3, r4
 80002ba:	685c      	ldr	r4, [r3, #4]
 80002bc:	60ca      	str	r2, [r1, #12]
 80002be:	f044 0401 	orr.w	r4, r4, #1
 80002c2:	6091      	str	r1, [r2, #8]
 80002c4:	605c      	str	r4, [r3, #4]
 80002c6:	f001 faf3 	bl	80018b0 <__malloc_unlock>
 80002ca:	4638      	mov	r0, r7
 80002cc:	b003      	add	sp, #12
 80002ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80002d2:	2300      	movs	r3, #0
 80002d4:	2410      	movs	r4, #16
 80002d6:	428c      	cmp	r4, r1
 80002d8:	bf2c      	ite	cs
 80002da:	4619      	movcs	r1, r3
 80002dc:	f043 0101 	orrcc.w	r1, r3, #1
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d0cf      	beq.n	8000284 <_malloc_r+0x24>
 80002e4:	230c      	movs	r3, #12
 80002e6:	2700      	movs	r7, #0
 80002e8:	6033      	str	r3, [r6, #0]
 80002ea:	e7ee      	b.n	80002ca <_malloc_r+0x6a>
 80002ec:	ea5f 2e54 	movs.w	lr, r4, lsr #9
 80002f0:	bf04      	itt	eq
 80002f2:	ea4f 0ed4 	moveq.w	lr, r4, lsr #3
 80002f6:	ea4f 01ce 	moveq.w	r1, lr, lsl #3
 80002fa:	f040 808c 	bne.w	8000416 <_malloc_r+0x1b6>
 80002fe:	f240 05f4 	movw	r5, #244	; 0xf4
 8000302:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8000306:	1869      	adds	r1, r5, r1
 8000308:	68cf      	ldr	r7, [r1, #12]
 800030a:	42b9      	cmp	r1, r7
 800030c:	d106      	bne.n	800031c <_malloc_r+0xbc>
 800030e:	e00d      	b.n	800032c <_malloc_r+0xcc>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f280 8181 	bge.w	8000618 <_malloc_r+0x3b8>
 8000316:	68ff      	ldr	r7, [r7, #12]
 8000318:	42b9      	cmp	r1, r7
 800031a:	d007      	beq.n	800032c <_malloc_r+0xcc>
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	f023 0303 	bic.w	r3, r3, #3
 8000322:	1b1a      	subs	r2, r3, r4
 8000324:	2a0f      	cmp	r2, #15
 8000326:	ddf3      	ble.n	8000310 <_malloc_r+0xb0>
 8000328:	f10e 3eff 	add.w	lr, lr, #4294967295
 800032c:	f10e 0e01 	add.w	lr, lr, #1
 8000330:	f240 00f4 	movw	r0, #244	; 0xf4
 8000334:	692f      	ldr	r7, [r5, #16]
 8000336:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800033a:	f100 0208 	add.w	r2, r0, #8
 800033e:	4297      	cmp	r7, r2
 8000340:	bf08      	it	eq
 8000342:	6843      	ldreq	r3, [r0, #4]
 8000344:	d026      	beq.n	8000394 <_malloc_r+0x134>
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	f023 0c03 	bic.w	ip, r3, #3
 800034c:	ebc4 030c 	rsb	r3, r4, ip
 8000350:	2b0f      	cmp	r3, #15
 8000352:	f300 819c 	bgt.w	800068e <_malloc_r+0x42e>
 8000356:	2b00      	cmp	r3, #0
 8000358:	6142      	str	r2, [r0, #20]
 800035a:	6102      	str	r2, [r0, #16]
 800035c:	f280 8095 	bge.w	800048a <_malloc_r+0x22a>
 8000360:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8000364:	f080 8173 	bcs.w	800064e <_malloc_r+0x3ee>
 8000368:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800036c:	f04f 0801 	mov.w	r8, #1
 8000370:	6843      	ldr	r3, [r0, #4]
 8000372:	eb00 01cc 	add.w	r1, r0, ip, lsl #3
 8000376:	ea4f 0cac 	mov.w	ip, ip, asr #2
 800037a:	fa08 f80c 	lsl.w	r8, r8, ip
 800037e:	60f9      	str	r1, [r7, #12]
 8000380:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8000384:	ea48 0303 	orr.w	r3, r8, r3
 8000388:	6043      	str	r3, [r0, #4]
 800038a:	f8c7 c008 	str.w	ip, [r7, #8]
 800038e:	f8cc 700c 	str.w	r7, [ip, #12]
 8000392:	608f      	str	r7, [r1, #8]
 8000394:	2701      	movs	r7, #1
 8000396:	ea4f 01ae 	mov.w	r1, lr, asr #2
 800039a:	fa07 f701 	lsl.w	r7, r7, r1
 800039e:	429f      	cmp	r7, r3
 80003a0:	d87e      	bhi.n	80004a0 <_malloc_r+0x240>
 80003a2:	423b      	tst	r3, r7
 80003a4:	d106      	bne.n	80003b4 <_malloc_r+0x154>
 80003a6:	f02e 0e03 	bic.w	lr, lr, #3
 80003aa:	007f      	lsls	r7, r7, #1
 80003ac:	f10e 0e04 	add.w	lr, lr, #4
 80003b0:	423b      	tst	r3, r7
 80003b2:	d0fa      	beq.n	80003aa <_malloc_r+0x14a>
 80003b4:	eb05 09ce 	add.w	r9, r5, lr, lsl #3
 80003b8:	46f0      	mov	r8, lr
 80003ba:	46cc      	mov	ip, r9
 80003bc:	f8dc 000c 	ldr.w	r0, [ip, #12]
 80003c0:	4584      	cmp	ip, r0
 80003c2:	d107      	bne.n	80003d4 <_malloc_r+0x174>
 80003c4:	e174      	b.n	80006b0 <_malloc_r+0x450>
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	f280 819b 	bge.w	8000702 <_malloc_r+0x4a2>
 80003cc:	68c0      	ldr	r0, [r0, #12]
 80003ce:	4584      	cmp	ip, r0
 80003d0:	f000 816e 	beq.w	80006b0 <_malloc_r+0x450>
 80003d4:	6841      	ldr	r1, [r0, #4]
 80003d6:	f021 0103 	bic.w	r1, r1, #3
 80003da:	1b0b      	subs	r3, r1, r4
 80003dc:	2b0f      	cmp	r3, #15
 80003de:	ddf2      	ble.n	80003c6 <_malloc_r+0x166>
 80003e0:	4607      	mov	r7, r0
 80003e2:	1901      	adds	r1, r0, r4
 80003e4:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80003e8:	f044 0801 	orr.w	r8, r4, #1
 80003ec:	f857 4f08 	ldr.w	r4, [r7, #8]!
 80003f0:	f043 0c01 	orr.w	ip, r3, #1
 80003f4:	f8c0 8004 	str.w	r8, [r0, #4]
 80003f8:	4630      	mov	r0, r6
 80003fa:	f8c1 c004 	str.w	ip, [r1, #4]
 80003fe:	f8c4 e00c 	str.w	lr, [r4, #12]
 8000402:	f8ce 4008 	str.w	r4, [lr, #8]
 8000406:	6169      	str	r1, [r5, #20]
 8000408:	6129      	str	r1, [r5, #16]
 800040a:	60ca      	str	r2, [r1, #12]
 800040c:	608a      	str	r2, [r1, #8]
 800040e:	50cb      	str	r3, [r1, r3]
 8000410:	f001 fa4e 	bl	80018b0 <__malloc_unlock>
 8000414:	e759      	b.n	80002ca <_malloc_r+0x6a>
 8000416:	f1be 0f04 	cmp.w	lr, #4
 800041a:	bf9e      	ittt	ls
 800041c:	ea4f 1e94 	movls.w	lr, r4, lsr #6
 8000420:	f10e 0e38 	addls.w	lr, lr, #56	; 0x38
 8000424:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8000428:	f67f af69 	bls.w	80002fe <_malloc_r+0x9e>
 800042c:	f1be 0f14 	cmp.w	lr, #20
 8000430:	bf9c      	itt	ls
 8000432:	f10e 0e5b 	addls.w	lr, lr, #91	; 0x5b
 8000436:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 800043a:	f67f af60 	bls.w	80002fe <_malloc_r+0x9e>
 800043e:	f1be 0f54 	cmp.w	lr, #84	; 0x54
 8000442:	bf9e      	ittt	ls
 8000444:	ea4f 3e14 	movls.w	lr, r4, lsr #12
 8000448:	f10e 0e6e 	addls.w	lr, lr, #110	; 0x6e
 800044c:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8000450:	f67f af55 	bls.w	80002fe <_malloc_r+0x9e>
 8000454:	f5be 7faa 	cmp.w	lr, #340	; 0x154
 8000458:	bf9e      	ittt	ls
 800045a:	ea4f 3ed4 	movls.w	lr, r4, lsr #15
 800045e:	f10e 0e77 	addls.w	lr, lr, #119	; 0x77
 8000462:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8000466:	f67f af4a 	bls.w	80002fe <_malloc_r+0x9e>
 800046a:	f240 5354 	movw	r3, #1364	; 0x554
 800046e:	459e      	cmp	lr, r3
 8000470:	bf95      	itete	ls
 8000472:	ea4f 4e94 	movls.w	lr, r4, lsr #18
 8000476:	f44f 717c 	movhi.w	r1, #1008	; 0x3f0
 800047a:	f10e 0e7c 	addls.w	lr, lr, #124	; 0x7c
 800047e:	f04f 0e7e 	movhi.w	lr, #126	; 0x7e
 8000482:	bf98      	it	ls
 8000484:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8000488:	e739      	b.n	80002fe <_malloc_r+0x9e>
 800048a:	eb07 030c 	add.w	r3, r7, ip
 800048e:	4630      	mov	r0, r6
 8000490:	3708      	adds	r7, #8
 8000492:	685a      	ldr	r2, [r3, #4]
 8000494:	f042 0201 	orr.w	r2, r2, #1
 8000498:	605a      	str	r2, [r3, #4]
 800049a:	f001 fa09 	bl	80018b0 <__malloc_unlock>
 800049e:	e714      	b.n	80002ca <_malloc_r+0x6a>
 80004a0:	68af      	ldr	r7, [r5, #8]
 80004a2:	f240 03f4 	movw	r3, #244	; 0xf4
 80004a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	f022 0803 	bic.w	r8, r2, #3
 80004b0:	4544      	cmp	r4, r8
 80004b2:	ebc4 0208 	rsb	r2, r4, r8
 80004b6:	bf94      	ite	ls
 80004b8:	2100      	movls	r1, #0
 80004ba:	2101      	movhi	r1, #1
 80004bc:	2a0f      	cmp	r2, #15
 80004be:	bfd8      	it	le
 80004c0:	f041 0101 	orrle.w	r1, r1, #1
 80004c4:	2900      	cmp	r1, #0
 80004c6:	f000 80b5 	beq.w	8000634 <_malloc_r+0x3d4>
 80004ca:	f240 5a7c 	movw	sl, #1404	; 0x57c
 80004ce:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80004d2:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 80004d6:	3201      	adds	r2, #1
 80004d8:	f8da 3000 	ldr.w	r3, [sl]
 80004dc:	4423      	add	r3, r4
 80004de:	bf08      	it	eq
 80004e0:	f103 0b10 	addeq.w	fp, r3, #16
 80004e4:	d006      	beq.n	80004f4 <_malloc_r+0x294>
 80004e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80004ea:	330f      	adds	r3, #15
 80004ec:	f423 637e 	bic.w	r3, r3, #4064	; 0xfe0
 80004f0:	f023 0b1f 	bic.w	fp, r3, #31
 80004f4:	4630      	mov	r0, r6
 80004f6:	4659      	mov	r1, fp
 80004f8:	f001 f988 	bl	800180c <_sbrk_r>
 80004fc:	1c42      	adds	r2, r0, #1
 80004fe:	4681      	mov	r9, r0
 8000500:	f000 8131 	beq.w	8000766 <_malloc_r+0x506>
 8000504:	eb07 0308 	add.w	r3, r7, r8
 8000508:	4283      	cmp	r3, r0
 800050a:	f200 8106 	bhi.w	800071a <_malloc_r+0x4ba>
 800050e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8000512:	454b      	cmp	r3, r9
 8000514:	445a      	add	r2, fp
 8000516:	f8ca 2004 	str.w	r2, [sl, #4]
 800051a:	f000 8131 	beq.w	8000780 <_malloc_r+0x520>
 800051e:	f8d5 0408 	ldr.w	r0, [r5, #1032]	; 0x408
 8000522:	f240 01f4 	movw	r1, #244	; 0xf4
 8000526:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800052a:	3001      	adds	r0, #1
 800052c:	4630      	mov	r0, r6
 800052e:	bf17      	itett	ne
 8000530:	ebc3 0309 	rsbne	r3, r3, r9
 8000534:	f8c1 9408 	streq.w	r9, [r1, #1032]	; 0x408
 8000538:	18d2      	addne	r2, r2, r3
 800053a:	f8ca 2004 	strne.w	r2, [sl, #4]
 800053e:	f019 0307 	ands.w	r3, r9, #7
 8000542:	bf1f      	itttt	ne
 8000544:	f1c3 0208 	rsbne	r2, r3, #8
 8000548:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 800054c:	4491      	addne	r9, r2
 800054e:	f103 0208 	addne.w	r2, r3, #8
 8000552:	eb09 030b 	add.w	r3, r9, fp
 8000556:	bf08      	it	eq
 8000558:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 800055c:	051b      	lsls	r3, r3, #20
 800055e:	0d1b      	lsrs	r3, r3, #20
 8000560:	ebc3 0b02 	rsb	fp, r3, r2
 8000564:	4659      	mov	r1, fp
 8000566:	f001 f951 	bl	800180c <_sbrk_r>
 800056a:	1c43      	adds	r3, r0, #1
 800056c:	f000 811d 	beq.w	80007aa <_malloc_r+0x54a>
 8000570:	ebc9 0100 	rsb	r1, r9, r0
 8000574:	4459      	add	r1, fp
 8000576:	f041 0101 	orr.w	r1, r1, #1
 800057a:	f8da 2004 	ldr.w	r2, [sl, #4]
 800057e:	42af      	cmp	r7, r5
 8000580:	f240 537c 	movw	r3, #1404	; 0x57c
 8000584:	f8c5 9008 	str.w	r9, [r5, #8]
 8000588:	445a      	add	r2, fp
 800058a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800058e:	f8c9 1004 	str.w	r1, [r9, #4]
 8000592:	f8ca 2004 	str.w	r2, [sl, #4]
 8000596:	d019      	beq.n	80005cc <_malloc_r+0x36c>
 8000598:	f1b8 0f0f 	cmp.w	r8, #15
 800059c:	f240 80dd 	bls.w	800075a <_malloc_r+0x4fa>
 80005a0:	f1a8 010c 	sub.w	r1, r8, #12
 80005a4:	f8d7 c004 	ldr.w	ip, [r7, #4]
 80005a8:	f021 0107 	bic.w	r1, r1, #7
 80005ac:	f04f 0e05 	mov.w	lr, #5
 80005b0:	1878      	adds	r0, r7, r1
 80005b2:	290f      	cmp	r1, #15
 80005b4:	f00c 0c01 	and.w	ip, ip, #1
 80005b8:	ea41 0c0c 	orr.w	ip, r1, ip
 80005bc:	f8c7 c004 	str.w	ip, [r7, #4]
 80005c0:	f8c0 e004 	str.w	lr, [r0, #4]
 80005c4:	f8c0 e008 	str.w	lr, [r0, #8]
 80005c8:	f200 80e6 	bhi.w	8000798 <_malloc_r+0x538>
 80005cc:	f240 537c 	movw	r3, #1404	; 0x57c
 80005d0:	f8da 102c 	ldr.w	r1, [sl, #44]	; 0x2c
 80005d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005d8:	68af      	ldr	r7, [r5, #8]
 80005da:	428a      	cmp	r2, r1
 80005dc:	f8da 1030 	ldr.w	r1, [sl, #48]	; 0x30
 80005e0:	bf88      	it	hi
 80005e2:	62da      	strhi	r2, [r3, #44]	; 0x2c
 80005e4:	f240 537c 	movw	r3, #1404	; 0x57c
 80005e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005ec:	428a      	cmp	r2, r1
 80005ee:	bf88      	it	hi
 80005f0:	631a      	strhi	r2, [r3, #48]	; 0x30
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f023 0303 	bic.w	r3, r3, #3
 80005f8:	429c      	cmp	r4, r3
 80005fa:	ebc4 0203 	rsb	r2, r4, r3
 80005fe:	bf94      	ite	ls
 8000600:	2300      	movls	r3, #0
 8000602:	2301      	movhi	r3, #1
 8000604:	2a0f      	cmp	r2, #15
 8000606:	bfd8      	it	le
 8000608:	f043 0301 	orrle.w	r3, r3, #1
 800060c:	b193      	cbz	r3, 8000634 <_malloc_r+0x3d4>
 800060e:	4630      	mov	r0, r6
 8000610:	2700      	movs	r7, #0
 8000612:	f001 f94d 	bl	80018b0 <__malloc_unlock>
 8000616:	e658      	b.n	80002ca <_malloc_r+0x6a>
 8000618:	18fb      	adds	r3, r7, r3
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	68b9      	ldr	r1, [r7, #8]
 800061e:	4630      	mov	r0, r6
 8000620:	685c      	ldr	r4, [r3, #4]
 8000622:	3708      	adds	r7, #8
 8000624:	60ca      	str	r2, [r1, #12]
 8000626:	f044 0401 	orr.w	r4, r4, #1
 800062a:	6091      	str	r1, [r2, #8]
 800062c:	605c      	str	r4, [r3, #4]
 800062e:	f001 f93f 	bl	80018b0 <__malloc_unlock>
 8000632:	e64a      	b.n	80002ca <_malloc_r+0x6a>
 8000634:	193b      	adds	r3, r7, r4
 8000636:	f042 0201 	orr.w	r2, r2, #1
 800063a:	f044 0401 	orr.w	r4, r4, #1
 800063e:	4630      	mov	r0, r6
 8000640:	607c      	str	r4, [r7, #4]
 8000642:	3708      	adds	r7, #8
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	60ab      	str	r3, [r5, #8]
 8000648:	f001 f932 	bl	80018b0 <__malloc_unlock>
 800064c:	e63d      	b.n	80002ca <_malloc_r+0x6a>
 800064e:	ea4f 235c 	mov.w	r3, ip, lsr #9
 8000652:	2b04      	cmp	r3, #4
 8000654:	d95c      	bls.n	8000710 <_malloc_r+0x4b0>
 8000656:	2b14      	cmp	r3, #20
 8000658:	d878      	bhi.n	800074c <_malloc_r+0x4ec>
 800065a:	335b      	adds	r3, #91	; 0x5b
 800065c:	00d8      	lsls	r0, r3, #3
 800065e:	1828      	adds	r0, r5, r0
 8000660:	f240 08f4 	movw	r8, #244	; 0xf4
 8000664:	f2c2 0800 	movt	r8, #8192	; 0x2000
 8000668:	6881      	ldr	r1, [r0, #8]
 800066a:	4281      	cmp	r1, r0
 800066c:	d103      	bne.n	8000676 <_malloc_r+0x416>
 800066e:	e060      	b.n	8000732 <_malloc_r+0x4d2>
 8000670:	6889      	ldr	r1, [r1, #8]
 8000672:	4288      	cmp	r0, r1
 8000674:	d004      	beq.n	8000680 <_malloc_r+0x420>
 8000676:	684b      	ldr	r3, [r1, #4]
 8000678:	f023 0303 	bic.w	r3, r3, #3
 800067c:	459c      	cmp	ip, r3
 800067e:	d3f7      	bcc.n	8000670 <_malloc_r+0x410>
 8000680:	68c8      	ldr	r0, [r1, #12]
 8000682:	686b      	ldr	r3, [r5, #4]
 8000684:	60f8      	str	r0, [r7, #12]
 8000686:	60b9      	str	r1, [r7, #8]
 8000688:	60cf      	str	r7, [r1, #12]
 800068a:	6087      	str	r7, [r0, #8]
 800068c:	e682      	b.n	8000394 <_malloc_r+0x134>
 800068e:	1939      	adds	r1, r7, r4
 8000690:	f043 0501 	orr.w	r5, r3, #1
 8000694:	6141      	str	r1, [r0, #20]
 8000696:	f044 0401 	orr.w	r4, r4, #1
 800069a:	6101      	str	r1, [r0, #16]
 800069c:	4630      	mov	r0, r6
 800069e:	607c      	str	r4, [r7, #4]
 80006a0:	3708      	adds	r7, #8
 80006a2:	60ca      	str	r2, [r1, #12]
 80006a4:	608a      	str	r2, [r1, #8]
 80006a6:	604d      	str	r5, [r1, #4]
 80006a8:	50cb      	str	r3, [r1, r3]
 80006aa:	f001 f901 	bl	80018b0 <__malloc_unlock>
 80006ae:	e60c      	b.n	80002ca <_malloc_r+0x6a>
 80006b0:	f108 0801 	add.w	r8, r8, #1
 80006b4:	f10c 0c08 	add.w	ip, ip, #8
 80006b8:	f018 0f03 	tst.w	r8, #3
 80006bc:	f47f ae7e 	bne.w	80003bc <_malloc_r+0x15c>
 80006c0:	464b      	mov	r3, r9
 80006c2:	f01e 0f03 	tst.w	lr, #3
 80006c6:	f1a3 0108 	sub.w	r1, r3, #8
 80006ca:	f10e 3eff 	add.w	lr, lr, #4294967295
 80006ce:	d079      	beq.n	80007c4 <_malloc_r+0x564>
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	428b      	cmp	r3, r1
 80006d4:	d0f5      	beq.n	80006c2 <_malloc_r+0x462>
 80006d6:	686b      	ldr	r3, [r5, #4]
 80006d8:	007f      	lsls	r7, r7, #1
 80006da:	429f      	cmp	r7, r3
 80006dc:	f63f aee0 	bhi.w	80004a0 <_malloc_r+0x240>
 80006e0:	2f00      	cmp	r7, #0
 80006e2:	f43f aedd 	beq.w	80004a0 <_malloc_r+0x240>
 80006e6:	421f      	tst	r7, r3
 80006e8:	d071      	beq.n	80007ce <_malloc_r+0x56e>
 80006ea:	46c6      	mov	lr, r8
 80006ec:	e662      	b.n	80003b4 <_malloc_r+0x154>
 80006ee:	f103 0208 	add.w	r2, r3, #8
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	bf08      	it	eq
 80006f8:	f10e 0e02 	addeq.w	lr, lr, #2
 80006fc:	f43f ae18 	beq.w	8000330 <_malloc_r+0xd0>
 8000700:	e5d2      	b.n	80002a8 <_malloc_r+0x48>
 8000702:	4607      	mov	r7, r0
 8000704:	1843      	adds	r3, r0, r1
 8000706:	68c2      	ldr	r2, [r0, #12]
 8000708:	4630      	mov	r0, r6
 800070a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800070e:	e5d4      	b.n	80002ba <_malloc_r+0x5a>
 8000710:	ea4f 139c 	mov.w	r3, ip, lsr #6
 8000714:	3338      	adds	r3, #56	; 0x38
 8000716:	00d8      	lsls	r0, r3, #3
 8000718:	e7a1      	b.n	800065e <_malloc_r+0x3fe>
 800071a:	42af      	cmp	r7, r5
 800071c:	f240 02f4 	movw	r2, #244	; 0xf4
 8000720:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000724:	f43f aef3 	beq.w	800050e <_malloc_r+0x2ae>
 8000728:	6897      	ldr	r7, [r2, #8]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	f023 0303 	bic.w	r3, r3, #3
 8000730:	e762      	b.n	80005f8 <_malloc_r+0x398>
 8000732:	f04f 0901 	mov.w	r9, #1
 8000736:	f8d8 c004 	ldr.w	ip, [r8, #4]
 800073a:	109b      	asrs	r3, r3, #2
 800073c:	4608      	mov	r0, r1
 800073e:	fa09 f303 	lsl.w	r3, r9, r3
 8000742:	ea43 030c 	orr.w	r3, r3, ip
 8000746:	f8c8 3004 	str.w	r3, [r8, #4]
 800074a:	e79b      	b.n	8000684 <_malloc_r+0x424>
 800074c:	2b54      	cmp	r3, #84	; 0x54
 800074e:	d80f      	bhi.n	8000770 <_malloc_r+0x510>
 8000750:	ea4f 331c 	mov.w	r3, ip, lsr #12
 8000754:	336e      	adds	r3, #110	; 0x6e
 8000756:	00d8      	lsls	r0, r3, #3
 8000758:	e781      	b.n	800065e <_malloc_r+0x3fe>
 800075a:	2301      	movs	r3, #1
 800075c:	464f      	mov	r7, r9
 800075e:	f8c9 3004 	str.w	r3, [r9, #4]
 8000762:	2300      	movs	r3, #0
 8000764:	e748      	b.n	80005f8 <_malloc_r+0x398>
 8000766:	68af      	ldr	r7, [r5, #8]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f023 0303 	bic.w	r3, r3, #3
 800076e:	e743      	b.n	80005f8 <_malloc_r+0x398>
 8000770:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8000774:	d81d      	bhi.n	80007b2 <_malloc_r+0x552>
 8000776:	ea4f 33dc 	mov.w	r3, ip, lsr #15
 800077a:	3377      	adds	r3, #119	; 0x77
 800077c:	00d8      	lsls	r0, r3, #3
 800077e:	e76e      	b.n	800065e <_malloc_r+0x3fe>
 8000780:	0519      	lsls	r1, r3, #20
 8000782:	0d09      	lsrs	r1, r1, #20
 8000784:	2900      	cmp	r1, #0
 8000786:	f47f aeca 	bne.w	800051e <_malloc_r+0x2be>
 800078a:	68ab      	ldr	r3, [r5, #8]
 800078c:	eb0b 0108 	add.w	r1, fp, r8
 8000790:	f041 0101 	orr.w	r1, r1, #1
 8000794:	6059      	str	r1, [r3, #4]
 8000796:	e719      	b.n	80005cc <_malloc_r+0x36c>
 8000798:	4630      	mov	r0, r6
 800079a:	f107 0108 	add.w	r1, r7, #8
 800079e:	9301      	str	r3, [sp, #4]
 80007a0:	f000 f986 	bl	8000ab0 <_free_r>
 80007a4:	9b01      	ldr	r3, [sp, #4]
 80007a6:	685a      	ldr	r2, [r3, #4]
 80007a8:	e710      	b.n	80005cc <_malloc_r+0x36c>
 80007aa:	2101      	movs	r1, #1
 80007ac:	f04f 0b00 	mov.w	fp, #0
 80007b0:	e6e3      	b.n	800057a <_malloc_r+0x31a>
 80007b2:	f240 5154 	movw	r1, #1364	; 0x554
 80007b6:	428b      	cmp	r3, r1
 80007b8:	d80d      	bhi.n	80007d6 <_malloc_r+0x576>
 80007ba:	ea4f 439c 	mov.w	r3, ip, lsr #18
 80007be:	337c      	adds	r3, #124	; 0x7c
 80007c0:	00d8      	lsls	r0, r3, #3
 80007c2:	e74c      	b.n	800065e <_malloc_r+0x3fe>
 80007c4:	686b      	ldr	r3, [r5, #4]
 80007c6:	ea23 0307 	bic.w	r3, r3, r7
 80007ca:	606b      	str	r3, [r5, #4]
 80007cc:	e784      	b.n	80006d8 <_malloc_r+0x478>
 80007ce:	007f      	lsls	r7, r7, #1
 80007d0:	f108 0804 	add.w	r8, r8, #4
 80007d4:	e787      	b.n	80006e6 <_malloc_r+0x486>
 80007d6:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 80007da:	237e      	movs	r3, #126	; 0x7e
 80007dc:	e73f      	b.n	800065e <_malloc_r+0x3fe>
 80007de:	bf00      	nop

080007e0 <memcpy>:
 80007e0:	2a03      	cmp	r2, #3
 80007e2:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 80007e6:	d809      	bhi.n	80007fc <memcpy+0x1c>
 80007e8:	b12a      	cbz	r2, 80007f6 <memcpy+0x16>
 80007ea:	2300      	movs	r3, #0
 80007ec:	5ccc      	ldrb	r4, [r1, r3]
 80007ee:	54c4      	strb	r4, [r0, r3]
 80007f0:	3301      	adds	r3, #1
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d1fa      	bne.n	80007ec <memcpy+0xc>
 80007f6:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80007fa:	4770      	bx	lr
 80007fc:	0785      	lsls	r5, r0, #30
 80007fe:	4402      	add	r2, r0
 8000800:	4603      	mov	r3, r0
 8000802:	d005      	beq.n	8000810 <memcpy+0x30>
 8000804:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000808:	f803 4b01 	strb.w	r4, [r3], #1
 800080c:	079c      	lsls	r4, r3, #30
 800080e:	d1f9      	bne.n	8000804 <memcpy+0x24>
 8000810:	f011 0503 	ands.w	r5, r1, #3
 8000814:	d042      	beq.n	800089c <memcpy+0xbc>
 8000816:	1ad4      	subs	r4, r2, r3
 8000818:	426e      	negs	r6, r5
 800081a:	2c03      	cmp	r4, #3
 800081c:	598f      	ldr	r7, [r1, r6]
 800081e:	dd12      	ble.n	8000846 <memcpy+0x66>
 8000820:	f1c5 0c04 	rsb	ip, r5, #4
 8000824:	00ed      	lsls	r5, r5, #3
 8000826:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800082a:	3104      	adds	r1, #4
 800082c:	fa27 f805 	lsr.w	r8, r7, r5
 8000830:	598c      	ldr	r4, [r1, r6]
 8000832:	4627      	mov	r7, r4
 8000834:	fa04 f40c 	lsl.w	r4, r4, ip
 8000838:	ea44 0408 	orr.w	r4, r4, r8
 800083c:	f843 4b04 	str.w	r4, [r3], #4
 8000840:	1ad4      	subs	r4, r2, r3
 8000842:	2c03      	cmp	r4, #3
 8000844:	dcf1      	bgt.n	800082a <memcpy+0x4a>
 8000846:	429a      	cmp	r2, r3
 8000848:	d9d5      	bls.n	80007f6 <memcpy+0x16>
 800084a:	2200      	movs	r2, #0
 800084c:	5c8d      	ldrb	r5, [r1, r2]
 800084e:	549d      	strb	r5, [r3, r2]
 8000850:	3201      	adds	r2, #1
 8000852:	42a2      	cmp	r2, r4
 8000854:	d1fa      	bne.n	800084c <memcpy+0x6c>
 8000856:	e7ce      	b.n	80007f6 <memcpy+0x16>
 8000858:	680c      	ldr	r4, [r1, #0]
 800085a:	601c      	str	r4, [r3, #0]
 800085c:	684c      	ldr	r4, [r1, #4]
 800085e:	605c      	str	r4, [r3, #4]
 8000860:	688c      	ldr	r4, [r1, #8]
 8000862:	609c      	str	r4, [r3, #8]
 8000864:	68cc      	ldr	r4, [r1, #12]
 8000866:	60dc      	str	r4, [r3, #12]
 8000868:	690c      	ldr	r4, [r1, #16]
 800086a:	611c      	str	r4, [r3, #16]
 800086c:	694c      	ldr	r4, [r1, #20]
 800086e:	615c      	str	r4, [r3, #20]
 8000870:	698c      	ldr	r4, [r1, #24]
 8000872:	619c      	str	r4, [r3, #24]
 8000874:	69cc      	ldr	r4, [r1, #28]
 8000876:	61dc      	str	r4, [r3, #28]
 8000878:	6a0c      	ldr	r4, [r1, #32]
 800087a:	621c      	str	r4, [r3, #32]
 800087c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800087e:	625c      	str	r4, [r3, #36]	; 0x24
 8000880:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8000882:	629c      	str	r4, [r3, #40]	; 0x28
 8000884:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8000886:	62dc      	str	r4, [r3, #44]	; 0x2c
 8000888:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 800088a:	631c      	str	r4, [r3, #48]	; 0x30
 800088c:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800088e:	635c      	str	r4, [r3, #52]	; 0x34
 8000890:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8000892:	639c      	str	r4, [r3, #56]	; 0x38
 8000894:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8000896:	3140      	adds	r1, #64	; 0x40
 8000898:	63dc      	str	r4, [r3, #60]	; 0x3c
 800089a:	3340      	adds	r3, #64	; 0x40
 800089c:	1ad4      	subs	r4, r2, r3
 800089e:	2c3f      	cmp	r4, #63	; 0x3f
 80008a0:	dcda      	bgt.n	8000858 <memcpy+0x78>
 80008a2:	e00a      	b.n	80008ba <memcpy+0xda>
 80008a4:	680c      	ldr	r4, [r1, #0]
 80008a6:	601c      	str	r4, [r3, #0]
 80008a8:	684c      	ldr	r4, [r1, #4]
 80008aa:	605c      	str	r4, [r3, #4]
 80008ac:	688c      	ldr	r4, [r1, #8]
 80008ae:	609c      	str	r4, [r3, #8]
 80008b0:	68cc      	ldr	r4, [r1, #12]
 80008b2:	3110      	adds	r1, #16
 80008b4:	60dc      	str	r4, [r3, #12]
 80008b6:	3310      	adds	r3, #16
 80008b8:	1ad4      	subs	r4, r2, r3
 80008ba:	2c0f      	cmp	r4, #15
 80008bc:	dcf2      	bgt.n	80008a4 <memcpy+0xc4>
 80008be:	e004      	b.n	80008ca <memcpy+0xea>
 80008c0:	f851 4b04 	ldr.w	r4, [r1], #4
 80008c4:	f843 4b04 	str.w	r4, [r3], #4
 80008c8:	1ad4      	subs	r4, r2, r3
 80008ca:	2c03      	cmp	r4, #3
 80008cc:	dcf8      	bgt.n	80008c0 <memcpy+0xe0>
 80008ce:	e7ba      	b.n	8000846 <memcpy+0x66>

080008d0 <memset>:
 80008d0:	2a03      	cmp	r2, #3
 80008d2:	b2c9      	uxtb	r1, r1
 80008d4:	b470      	push	{r4, r5, r6}
 80008d6:	d807      	bhi.n	80008e8 <memset+0x18>
 80008d8:	b122      	cbz	r2, 80008e4 <memset+0x14>
 80008da:	2300      	movs	r3, #0
 80008dc:	54c1      	strb	r1, [r0, r3]
 80008de:	3301      	adds	r3, #1
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d1fb      	bne.n	80008dc <memset+0xc>
 80008e4:	bc70      	pop	{r4, r5, r6}
 80008e6:	4770      	bx	lr
 80008e8:	0785      	lsls	r5, r0, #30
 80008ea:	4402      	add	r2, r0
 80008ec:	4603      	mov	r3, r0
 80008ee:	d003      	beq.n	80008f8 <memset+0x28>
 80008f0:	f803 1b01 	strb.w	r1, [r3], #1
 80008f4:	079c      	lsls	r4, r3, #30
 80008f6:	d1fb      	bne.n	80008f0 <memset+0x20>
 80008f8:	020c      	lsls	r4, r1, #8
 80008fa:	1ad5      	subs	r5, r2, r3
 80008fc:	1864      	adds	r4, r4, r1
 80008fe:	0426      	lsls	r6, r4, #16
 8000900:	2d3f      	cmp	r5, #63	; 0x3f
 8000902:	4434      	add	r4, r6
 8000904:	dd1a      	ble.n	800093c <memset+0x6c>
 8000906:	601c      	str	r4, [r3, #0]
 8000908:	605c      	str	r4, [r3, #4]
 800090a:	609c      	str	r4, [r3, #8]
 800090c:	60dc      	str	r4, [r3, #12]
 800090e:	611c      	str	r4, [r3, #16]
 8000910:	615c      	str	r4, [r3, #20]
 8000912:	619c      	str	r4, [r3, #24]
 8000914:	61dc      	str	r4, [r3, #28]
 8000916:	621c      	str	r4, [r3, #32]
 8000918:	625c      	str	r4, [r3, #36]	; 0x24
 800091a:	629c      	str	r4, [r3, #40]	; 0x28
 800091c:	62dc      	str	r4, [r3, #44]	; 0x2c
 800091e:	631c      	str	r4, [r3, #48]	; 0x30
 8000920:	635c      	str	r4, [r3, #52]	; 0x34
 8000922:	639c      	str	r4, [r3, #56]	; 0x38
 8000924:	63dc      	str	r4, [r3, #60]	; 0x3c
 8000926:	3340      	adds	r3, #64	; 0x40
 8000928:	1ad5      	subs	r5, r2, r3
 800092a:	2d3f      	cmp	r5, #63	; 0x3f
 800092c:	dceb      	bgt.n	8000906 <memset+0x36>
 800092e:	e005      	b.n	800093c <memset+0x6c>
 8000930:	601c      	str	r4, [r3, #0]
 8000932:	605c      	str	r4, [r3, #4]
 8000934:	609c      	str	r4, [r3, #8]
 8000936:	60dc      	str	r4, [r3, #12]
 8000938:	3310      	adds	r3, #16
 800093a:	1ad5      	subs	r5, r2, r3
 800093c:	2d0f      	cmp	r5, #15
 800093e:	dcf7      	bgt.n	8000930 <memset+0x60>
 8000940:	e002      	b.n	8000948 <memset+0x78>
 8000942:	f843 4b04 	str.w	r4, [r3], #4
 8000946:	1ad5      	subs	r5, r2, r3
 8000948:	2d03      	cmp	r5, #3
 800094a:	dcfa      	bgt.n	8000942 <memset+0x72>
 800094c:	4293      	cmp	r3, r2
 800094e:	d2c9      	bcs.n	80008e4 <memset+0x14>
 8000950:	f803 1b01 	strb.w	r1, [r3], #1
 8000954:	4293      	cmp	r3, r2
 8000956:	d1fb      	bne.n	8000950 <memset+0x80>
 8000958:	e7c4      	b.n	80008e4 <memset+0x14>
 800095a:	bf00      	nop

0800095c <strncpy>:
 800095c:	ea41 0300 	orr.w	r3, r1, r0
 8000960:	f013 0f03 	tst.w	r3, #3
 8000964:	4603      	mov	r3, r0
 8000966:	b470      	push	{r4, r5, r6}
 8000968:	bf14      	ite	ne
 800096a:	2400      	movne	r4, #0
 800096c:	2401      	moveq	r4, #1
 800096e:	2a03      	cmp	r2, #3
 8000970:	bf94      	ite	ls
 8000972:	2400      	movls	r4, #0
 8000974:	f004 0401 	andhi.w	r4, r4, #1
 8000978:	460d      	mov	r5, r1
 800097a:	b9c4      	cbnz	r4, 80009ae <strncpy+0x52>
 800097c:	b1aa      	cbz	r2, 80009aa <strncpy+0x4e>
 800097e:	780c      	ldrb	r4, [r1, #0]
 8000980:	3a01      	subs	r2, #1
 8000982:	f803 4b01 	strb.w	r4, [r3], #1
 8000986:	b14c      	cbz	r4, 800099c <strncpy+0x40>
 8000988:	461c      	mov	r4, r3
 800098a:	b172      	cbz	r2, 80009aa <strncpy+0x4e>
 800098c:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 8000990:	3a01      	subs	r2, #1
 8000992:	f804 6b01 	strb.w	r6, [r4], #1
 8000996:	4623      	mov	r3, r4
 8000998:	2e00      	cmp	r6, #0
 800099a:	d1f6      	bne.n	800098a <strncpy+0x2e>
 800099c:	b12a      	cbz	r2, 80009aa <strncpy+0x4e>
 800099e:	189a      	adds	r2, r3, r2
 80009a0:	2100      	movs	r1, #0
 80009a2:	f803 1b01 	strb.w	r1, [r3], #1
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d1fb      	bne.n	80009a2 <strncpy+0x46>
 80009aa:	bc70      	pop	{r4, r5, r6}
 80009ac:	4770      	bx	lr
 80009ae:	4629      	mov	r1, r5
 80009b0:	f855 4b04 	ldr.w	r4, [r5], #4
 80009b4:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
 80009b8:	ea26 0604 	bic.w	r6, r6, r4
 80009bc:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 80009c0:	d1dc      	bne.n	800097c <strncpy+0x20>
 80009c2:	3a04      	subs	r2, #4
 80009c4:	f843 4b04 	str.w	r4, [r3], #4
 80009c8:	2a03      	cmp	r2, #3
 80009ca:	d8f0      	bhi.n	80009ae <strncpy+0x52>
 80009cc:	4629      	mov	r1, r5
 80009ce:	e7d5      	b.n	800097c <strncpy+0x20>

080009d0 <atexit>:
 80009d0:	4601      	mov	r1, r0
 80009d2:	2000      	movs	r0, #0
 80009d4:	4602      	mov	r2, r0
 80009d6:	4603      	mov	r3, r0
 80009d8:	f000 b932 	b.w	8000c40 <__register_exitproc>

080009dc <__libc_fini_array>:
 80009dc:	b538      	push	{r3, r4, r5, lr}
 80009de:	f644 5470 	movw	r4, #19824	; 0x4d70
 80009e2:	f644 556c 	movw	r5, #19820	; 0x4d6c
 80009e6:	f6c0 0400 	movt	r4, #2048	; 0x800
 80009ea:	f6c0 0500 	movt	r5, #2048	; 0x800
 80009ee:	1b64      	subs	r4, r4, r5
 80009f0:	10a4      	asrs	r4, r4, #2
 80009f2:	d006      	beq.n	8000a02 <__libc_fini_array+0x26>
 80009f4:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 80009f8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80009fc:	4798      	blx	r3
 80009fe:	3c01      	subs	r4, #1
 8000a00:	d1fa      	bne.n	80009f8 <__libc_fini_array+0x1c>
 8000a02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a06:	f004 b9a7 	b.w	8004d58 <_fini>
 8000a0a:	bf00      	nop

08000a0c <_malloc_trim_r>:
 8000a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a0e:	f240 04f4 	movw	r4, #244	; 0xf4
 8000a12:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000a16:	460f      	mov	r7, r1
 8000a18:	4605      	mov	r5, r0
 8000a1a:	f000 ff3f 	bl	800189c <__malloc_lock>
 8000a1e:	68a3      	ldr	r3, [r4, #8]
 8000a20:	4628      	mov	r0, r5
 8000a22:	685e      	ldr	r6, [r3, #4]
 8000a24:	f026 0603 	bic.w	r6, r6, #3
 8000a28:	f506 637e 	add.w	r3, r6, #4064	; 0xfe0
 8000a2c:	330f      	adds	r3, #15
 8000a2e:	1bdf      	subs	r7, r3, r7
 8000a30:	0b3f      	lsrs	r7, r7, #12
 8000a32:	3f01      	subs	r7, #1
 8000a34:	033f      	lsls	r7, r7, #12
 8000a36:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8000a3a:	db07      	blt.n	8000a4c <_malloc_trim_r+0x40>
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	f000 fee5 	bl	800180c <_sbrk_r>
 8000a42:	68a3      	ldr	r3, [r4, #8]
 8000a44:	199b      	adds	r3, r3, r6
 8000a46:	4298      	cmp	r0, r3
 8000a48:	4628      	mov	r0, r5
 8000a4a:	d003      	beq.n	8000a54 <_malloc_trim_r+0x48>
 8000a4c:	f000 ff30 	bl	80018b0 <__malloc_unlock>
 8000a50:	2000      	movs	r0, #0
 8000a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a54:	4279      	negs	r1, r7
 8000a56:	f000 fed9 	bl	800180c <_sbrk_r>
 8000a5a:	3001      	adds	r0, #1
 8000a5c:	d010      	beq.n	8000a80 <_malloc_trim_r+0x74>
 8000a5e:	f240 5380 	movw	r3, #1408	; 0x580
 8000a62:	68a1      	ldr	r1, [r4, #8]
 8000a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a68:	1bf6      	subs	r6, r6, r7
 8000a6a:	4628      	mov	r0, r5
 8000a6c:	f046 0601 	orr.w	r6, r6, #1
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	604e      	str	r6, [r1, #4]
 8000a74:	1bd7      	subs	r7, r2, r7
 8000a76:	601f      	str	r7, [r3, #0]
 8000a78:	f000 ff1a 	bl	80018b0 <__malloc_unlock>
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a80:	2100      	movs	r1, #0
 8000a82:	4628      	mov	r0, r5
 8000a84:	f000 fec2 	bl	800180c <_sbrk_r>
 8000a88:	68a3      	ldr	r3, [r4, #8]
 8000a8a:	1ac2      	subs	r2, r0, r3
 8000a8c:	2a0f      	cmp	r2, #15
 8000a8e:	dd0d      	ble.n	8000aac <_malloc_trim_r+0xa0>
 8000a90:	f240 44fc 	movw	r4, #1276	; 0x4fc
 8000a94:	f240 5180 	movw	r1, #1408	; 0x580
 8000a98:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000a9c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000aa0:	f042 0201 	orr.w	r2, r2, #1
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	6823      	ldr	r3, [r4, #0]
 8000aa8:	1ac0      	subs	r0, r0, r3
 8000aaa:	6008      	str	r0, [r1, #0]
 8000aac:	4628      	mov	r0, r5
 8000aae:	e7cd      	b.n	8000a4c <_malloc_trim_r+0x40>

08000ab0 <_free_r>:
 8000ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ab2:	460d      	mov	r5, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	2900      	cmp	r1, #0
 8000ab8:	d075      	beq.n	8000ba6 <_free_r+0xf6>
 8000aba:	f000 feef 	bl	800189c <__malloc_lock>
 8000abe:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8000ac2:	f240 00f4 	movw	r0, #244	; 0xf4
 8000ac6:	f1a5 0108 	sub.w	r1, r5, #8
 8000aca:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000ace:	f026 0301 	bic.w	r3, r6, #1
 8000ad2:	18ca      	adds	r2, r1, r3
 8000ad4:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8000ad8:	6857      	ldr	r7, [r2, #4]
 8000ada:	4594      	cmp	ip, r2
 8000adc:	f027 0703 	bic.w	r7, r7, #3
 8000ae0:	d07e      	beq.n	8000be0 <_free_r+0x130>
 8000ae2:	f016 0601 	ands.w	r6, r6, #1
 8000ae6:	6057      	str	r7, [r2, #4]
 8000ae8:	d04d      	beq.n	8000b86 <_free_r+0xd6>
 8000aea:	2600      	movs	r6, #0
 8000aec:	19d5      	adds	r5, r2, r7
 8000aee:	686d      	ldr	r5, [r5, #4]
 8000af0:	f015 0f01 	tst.w	r5, #1
 8000af4:	d106      	bne.n	8000b04 <_free_r+0x54>
 8000af6:	19db      	adds	r3, r3, r7
 8000af8:	6895      	ldr	r5, [r2, #8]
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	d064      	beq.n	8000bc8 <_free_r+0x118>
 8000afe:	68d2      	ldr	r2, [r2, #12]
 8000b00:	60ea      	str	r2, [r5, #12]
 8000b02:	6095      	str	r5, [r2, #8]
 8000b04:	f043 0201 	orr.w	r2, r3, #1
 8000b08:	50cb      	str	r3, [r1, r3]
 8000b0a:	604a      	str	r2, [r1, #4]
 8000b0c:	2e00      	cmp	r6, #0
 8000b0e:	d135      	bne.n	8000b7c <_free_r+0xcc>
 8000b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b14:	d348      	bcc.n	8000ba8 <_free_r+0xf8>
 8000b16:	099e      	lsrs	r6, r3, #6
 8000b18:	0a5a      	lsrs	r2, r3, #9
 8000b1a:	3638      	adds	r6, #56	; 0x38
 8000b1c:	00f5      	lsls	r5, r6, #3
 8000b1e:	2a04      	cmp	r2, #4
 8000b20:	d916      	bls.n	8000b50 <_free_r+0xa0>
 8000b22:	f102 065b 	add.w	r6, r2, #91	; 0x5b
 8000b26:	00f5      	lsls	r5, r6, #3
 8000b28:	2a14      	cmp	r2, #20
 8000b2a:	d911      	bls.n	8000b50 <_free_r+0xa0>
 8000b2c:	0b1e      	lsrs	r6, r3, #12
 8000b2e:	366e      	adds	r6, #110	; 0x6e
 8000b30:	00f5      	lsls	r5, r6, #3
 8000b32:	2a54      	cmp	r2, #84	; 0x54
 8000b34:	d90c      	bls.n	8000b50 <_free_r+0xa0>
 8000b36:	0bde      	lsrs	r6, r3, #15
 8000b38:	3677      	adds	r6, #119	; 0x77
 8000b3a:	00f5      	lsls	r5, r6, #3
 8000b3c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8000b40:	d906      	bls.n	8000b50 <_free_r+0xa0>
 8000b42:	f240 5554 	movw	r5, #1364	; 0x554
 8000b46:	42aa      	cmp	r2, r5
 8000b48:	d874      	bhi.n	8000c34 <_free_r+0x184>
 8000b4a:	0c9e      	lsrs	r6, r3, #18
 8000b4c:	367c      	adds	r6, #124	; 0x7c
 8000b4e:	00f5      	lsls	r5, r6, #3
 8000b50:	1940      	adds	r0, r0, r5
 8000b52:	f240 05f4 	movw	r5, #244	; 0xf4
 8000b56:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8000b5a:	6882      	ldr	r2, [r0, #8]
 8000b5c:	4282      	cmp	r2, r0
 8000b5e:	d103      	bne.n	8000b68 <_free_r+0xb8>
 8000b60:	e05f      	b.n	8000c22 <_free_r+0x172>
 8000b62:	6892      	ldr	r2, [r2, #8]
 8000b64:	4290      	cmp	r0, r2
 8000b66:	d004      	beq.n	8000b72 <_free_r+0xc2>
 8000b68:	6855      	ldr	r5, [r2, #4]
 8000b6a:	f025 0503 	bic.w	r5, r5, #3
 8000b6e:	42ab      	cmp	r3, r5
 8000b70:	d3f7      	bcc.n	8000b62 <_free_r+0xb2>
 8000b72:	68d3      	ldr	r3, [r2, #12]
 8000b74:	60cb      	str	r3, [r1, #12]
 8000b76:	608a      	str	r2, [r1, #8]
 8000b78:	60d1      	str	r1, [r2, #12]
 8000b7a:	6099      	str	r1, [r3, #8]
 8000b7c:	4620      	mov	r0, r4
 8000b7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8000b82:	f000 be95 	b.w	80018b0 <__malloc_unlock>
 8000b86:	f855 5c08 	ldr.w	r5, [r5, #-8]
 8000b8a:	f100 0c08 	add.w	ip, r0, #8
 8000b8e:	1b49      	subs	r1, r1, r5
 8000b90:	195b      	adds	r3, r3, r5
 8000b92:	688d      	ldr	r5, [r1, #8]
 8000b94:	4565      	cmp	r5, ip
 8000b96:	d042      	beq.n	8000c1e <_free_r+0x16e>
 8000b98:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8000b9c:	f8c5 c00c 	str.w	ip, [r5, #12]
 8000ba0:	f8cc 5008 	str.w	r5, [ip, #8]
 8000ba4:	e7a2      	b.n	8000aec <_free_r+0x3c>
 8000ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ba8:	08db      	lsrs	r3, r3, #3
 8000baa:	2501      	movs	r5, #1
 8000bac:	6846      	ldr	r6, [r0, #4]
 8000bae:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8000bb2:	109b      	asrs	r3, r3, #2
 8000bb4:	fa05 f303 	lsl.w	r3, r5, r3
 8000bb8:	60ca      	str	r2, [r1, #12]
 8000bba:	6895      	ldr	r5, [r2, #8]
 8000bbc:	4333      	orrs	r3, r6
 8000bbe:	6043      	str	r3, [r0, #4]
 8000bc0:	608d      	str	r5, [r1, #8]
 8000bc2:	60e9      	str	r1, [r5, #12]
 8000bc4:	6091      	str	r1, [r2, #8]
 8000bc6:	e7d9      	b.n	8000b7c <_free_r+0xcc>
 8000bc8:	4f1c      	ldr	r7, [pc, #112]	; (8000c3c <_free_r+0x18c>)
 8000bca:	42bd      	cmp	r5, r7
 8000bcc:	d197      	bne.n	8000afe <_free_r+0x4e>
 8000bce:	6141      	str	r1, [r0, #20]
 8000bd0:	f043 0201 	orr.w	r2, r3, #1
 8000bd4:	6101      	str	r1, [r0, #16]
 8000bd6:	60cd      	str	r5, [r1, #12]
 8000bd8:	608d      	str	r5, [r1, #8]
 8000bda:	604a      	str	r2, [r1, #4]
 8000bdc:	50cb      	str	r3, [r1, r3]
 8000bde:	e7cd      	b.n	8000b7c <_free_r+0xcc>
 8000be0:	07f2      	lsls	r2, r6, #31
 8000be2:	443b      	add	r3, r7
 8000be4:	d407      	bmi.n	8000bf6 <_free_r+0x146>
 8000be6:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8000bea:	1a89      	subs	r1, r1, r2
 8000bec:	189b      	adds	r3, r3, r2
 8000bee:	688d      	ldr	r5, [r1, #8]
 8000bf0:	68ca      	ldr	r2, [r1, #12]
 8000bf2:	60ea      	str	r2, [r5, #12]
 8000bf4:	6095      	str	r5, [r2, #8]
 8000bf6:	f240 5200 	movw	r2, #1280	; 0x500
 8000bfa:	f043 0501 	orr.w	r5, r3, #1
 8000bfe:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000c02:	604d      	str	r5, [r1, #4]
 8000c04:	6081      	str	r1, [r0, #8]
 8000c06:	6812      	ldr	r2, [r2, #0]
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d3b7      	bcc.n	8000b7c <_free_r+0xcc>
 8000c0c:	f240 537c 	movw	r3, #1404	; 0x57c
 8000c10:	4620      	mov	r0, r4
 8000c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c16:	6819      	ldr	r1, [r3, #0]
 8000c18:	f7ff fef8 	bl	8000a0c <_malloc_trim_r>
 8000c1c:	e7ae      	b.n	8000b7c <_free_r+0xcc>
 8000c1e:	2601      	movs	r6, #1
 8000c20:	e764      	b.n	8000aec <_free_r+0x3c>
 8000c22:	2701      	movs	r7, #1
 8000c24:	6868      	ldr	r0, [r5, #4]
 8000c26:	10b6      	asrs	r6, r6, #2
 8000c28:	4613      	mov	r3, r2
 8000c2a:	fa07 f606 	lsl.w	r6, r7, r6
 8000c2e:	4330      	orrs	r0, r6
 8000c30:	6068      	str	r0, [r5, #4]
 8000c32:	e79f      	b.n	8000b74 <_free_r+0xc4>
 8000c34:	f44f 757c 	mov.w	r5, #1008	; 0x3f0
 8000c38:	267e      	movs	r6, #126	; 0x7e
 8000c3a:	e789      	b.n	8000b50 <_free_r+0xa0>
 8000c3c:	200000fc 	.word	0x200000fc

08000c40 <__register_exitproc>:
 8000c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c44:	f644 44c4 	movw	r4, #19652	; 0x4cc4
 8000c48:	f6c0 0400 	movt	r4, #2048	; 0x800
 8000c4c:	b084      	sub	sp, #16
 8000c4e:	4605      	mov	r5, r0
 8000c50:	6826      	ldr	r6, [r4, #0]
 8000c52:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8000c54:	2c00      	cmp	r4, #0
 8000c56:	d042      	beq.n	8000cde <__register_exitproc+0x9e>
 8000c58:	6860      	ldr	r0, [r4, #4]
 8000c5a:	281f      	cmp	r0, #31
 8000c5c:	dd1a      	ble.n	8000c94 <__register_exitproc+0x54>
 8000c5e:	f240 2041 	movw	r0, #577	; 0x241
 8000c62:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000c66:	b920      	cbnz	r0, 8000c72 <__register_exitproc+0x32>
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	b004      	add	sp, #16
 8000c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c72:	208c      	movs	r0, #140	; 0x8c
 8000c74:	9103      	str	r1, [sp, #12]
 8000c76:	9202      	str	r2, [sp, #8]
 8000c78:	9301      	str	r3, [sp, #4]
 8000c7a:	f7ff fae1 	bl	8000240 <malloc>
 8000c7e:	9903      	ldr	r1, [sp, #12]
 8000c80:	9a02      	ldr	r2, [sp, #8]
 8000c82:	9b01      	ldr	r3, [sp, #4]
 8000c84:	4604      	mov	r4, r0
 8000c86:	2800      	cmp	r0, #0
 8000c88:	d0ee      	beq.n	8000c68 <__register_exitproc+0x28>
 8000c8a:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	e884 0081 	stmia.w	r4, {r0, r7}
 8000c92:	64b4      	str	r4, [r6, #72]	; 0x48
 8000c94:	b1dd      	cbz	r5, 8000cce <__register_exitproc+0x8e>
 8000c96:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8000c9a:	b320      	cbz	r0, 8000ce6 <__register_exitproc+0xa6>
 8000c9c:	f8d0 8100 	ldr.w	r8, [r0, #256]	; 0x100
 8000ca0:	6866      	ldr	r6, [r4, #4]
 8000ca2:	2701      	movs	r7, #1
 8000ca4:	2d02      	cmp	r5, #2
 8000ca6:	f106 0c20 	add.w	ip, r6, #32
 8000caa:	fa07 f706 	lsl.w	r7, r7, r6
 8000cae:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
 8000cb2:	ea48 0207 	orr.w	r2, r8, r7
 8000cb6:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
 8000cba:	bf08      	it	eq
 8000cbc:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8000cc0:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 8000cc4:	bf04      	itt	eq
 8000cc6:	431f      	orreq	r7, r3
 8000cc8:	f8c0 7104 	streq.w	r7, [r0, #260]	; 0x104
 8000ccc:	e000      	b.n	8000cd0 <__register_exitproc+0x90>
 8000cce:	6866      	ldr	r6, [r4, #4]
 8000cd0:	1cb3      	adds	r3, r6, #2
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	3601      	adds	r6, #1
 8000cd6:	6066      	str	r6, [r4, #4]
 8000cd8:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8000cdc:	e7c6      	b.n	8000c6c <__register_exitproc+0x2c>
 8000cde:	f106 044c 	add.w	r4, r6, #76	; 0x4c
 8000ce2:	64b4      	str	r4, [r6, #72]	; 0x48
 8000ce4:	e7b8      	b.n	8000c58 <__register_exitproc+0x18>
 8000ce6:	f240 2041 	movw	r0, #577	; 0x241
 8000cea:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000cee:	2800      	cmp	r0, #0
 8000cf0:	d0ba      	beq.n	8000c68 <__register_exitproc+0x28>
 8000cf2:	f44f 7084 	mov.w	r0, #264	; 0x108
 8000cf6:	9103      	str	r1, [sp, #12]
 8000cf8:	9202      	str	r2, [sp, #8]
 8000cfa:	9301      	str	r3, [sp, #4]
 8000cfc:	f7ff faa0 	bl	8000240 <malloc>
 8000d00:	9903      	ldr	r1, [sp, #12]
 8000d02:	9a02      	ldr	r2, [sp, #8]
 8000d04:	9b01      	ldr	r3, [sp, #4]
 8000d06:	2800      	cmp	r0, #0
 8000d08:	d0ae      	beq.n	8000c68 <__register_exitproc+0x28>
 8000d0a:	2600      	movs	r6, #0
 8000d0c:	f8c0 6100 	str.w	r6, [r0, #256]	; 0x100
 8000d10:	f8c0 6104 	str.w	r6, [r0, #260]	; 0x104
 8000d14:	46b0      	mov	r8, r6
 8000d16:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8000d1a:	e7c1      	b.n	8000ca0 <__register_exitproc+0x60>

08000d1c <rb_getc>:
 * \param   rb    pointer to ringbuffer struct
 * \param   data  pointer to data byte
 * \return  number of bytes read (0 if buffer was empty)
 */
static inline int rb_getc(struct ringbuf *rb, char *data)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
    if (!rb->len)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d102      	bne.n	8000d34 <rb_getc+0x18>
        return 0;
 8000d2e:	f04f 0300 	mov.w	r3, #0
 8000d32:	e025      	b.n	8000d80 <rb_getc+0x64>

    vPortEnterCritical();
 8000d34:	f002 fdde 	bl	80038f4 <vPortEnterCritical>

    *data = rb->buf[rb->pos++];
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6819      	ldr	r1, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	461a      	mov	r2, r3
 8000d42:	188a      	adds	r2, r1, r2
 8000d44:	7811      	ldrb	r1, [r2, #0]
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	7011      	strb	r1, [r2, #0]
 8000d4a:	f103 0201 	add.w	r2, r3, #1
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	609a      	str	r2, [r3, #8]
	if (rb->pos >= rb->bufsize)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	db06      	blt.n	8000d6c <rb_getc+0x50>
		rb->pos -= rb->bufsize;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	689a      	ldr	r2, [r3, #8]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	1ad2      	subs	r2, r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
	rb->len--;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	f103 32ff 	add.w	r2, r3, #4294967295
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	60da      	str	r2, [r3, #12]

    vPortExitCritical();
 8000d78:	f002 fdd2 	bl	8003920 <vPortExitCritical>
    return 1;
 8000d7c:	f04f 0301 	mov.w	r3, #1
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	f107 0708 	add.w	r7, r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop

08000d8c <rb_putc>:
 * \param   rb    pointer to ringbuffer struct
 * \param   data  pointer to data byte
 * \return  number of bytes written (0 if buffer was full)
 */
static inline int rb_putc(struct ringbuf *rb, const char data)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	70fb      	strb	r3, [r7, #3]
    if (rb->len >= rb->bufsize)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	68da      	ldr	r2, [r3, #12]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	db02      	blt.n	8000daa <rb_putc+0x1e>
        return 0;
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	e021      	b.n	8000dee <rb_putc+0x62>

    vPortEnterCritical();
 8000daa:	f002 fda3 	bl	80038f4 <vPortEnterCritical>

	int i = rb->pos + rb->len;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	18d3      	adds	r3, r2, r3
 8000db8:	60fb      	str	r3, [r7, #12]
	if (i >= rb->bufsize)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	dc04      	bgt.n	8000dce <rb_putc+0x42>
		i -= rb->bufsize;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	68fa      	ldr	r2, [r7, #12]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	60fb      	str	r3, [r7, #12]

	rb->buf[i] = data;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	18d3      	adds	r3, r2, r3
 8000dd6:	78fa      	ldrb	r2, [r7, #3]
 8000dd8:	701a      	strb	r2, [r3, #0]
	rb->len++;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	f103 0201 	add.w	r2, r3, #1
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	60da      	str	r2, [r3, #12]

    vPortExitCritical();
 8000de6:	f002 fd9b 	bl	8003920 <vPortExitCritical>
    return 1;
 8000dea:	f04f 0301 	mov.w	r3, #1
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	f107 0710 	add.w	r7, r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <USART1_IRQHandler>:
    uint32_t    tx_bytes;
} uart_stats;


void USART1_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
    if (USART1->SR & USART_SR_RXNE) {
 8000dfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e02:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	f003 0320 	and.w	r3, r3, #32
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d029      	beq.n	8000e66 <USART1_IRQHandler+0x6e>
        if (!rb_putc(&rx_buf, USART1->DR))
 8000e12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e16:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000e1a:	889b      	ldrh	r3, [r3, #4]
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	f240 5004 	movw	r0, #1284	; 0x504
 8000e24:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f7ff ffaf 	bl	8000d8c <rb_putc>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d10c      	bne.n	8000e4e <USART1_IRQHandler+0x56>
            uart_stats.rx_overrun++;
 8000e34:	f240 63b0 	movw	r3, #1712	; 0x6b0
 8000e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f103 0201 	add.w	r2, r3, #1
 8000e42:	f240 63b0 	movw	r3, #1712	; 0x6b0
 8000e46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	e00b      	b.n	8000e66 <USART1_IRQHandler+0x6e>
        else
            uart_stats.rx_bytes++;
 8000e4e:	f240 63b0 	movw	r3, #1712	; 0x6b0
 8000e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f103 0201 	add.w	r2, r3, #1
 8000e5c:	f240 63b0 	movw	r3, #1712	; 0x6b0
 8000e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e64:	605a      	str	r2, [r3, #4]
    }

    if (USART1->SR & USART_SR_TXE) {
 8000e66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e6a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d02c      	beq.n	8000ed4 <USART1_IRQHandler+0xdc>
        char c;
        if (rb_getc(&tx_buf, &c)) {
 8000e7a:	f240 5014 	movw	r0, #1300	; 0x514
 8000e7e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000e82:	f107 0307 	add.w	r3, r7, #7
 8000e86:	4619      	mov	r1, r3
 8000e88:	f7ff ff48 	bl	8000d1c <rb_getc>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d006      	beq.n	8000ea0 <USART1_IRQHandler+0xa8>
            // send a queued byte
            //
            USART1->DR = c;
 8000e92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e96:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000e9a:	79fa      	ldrb	r2, [r7, #7]
 8000e9c:	809a      	strh	r2, [r3, #4]
 8000e9e:	e00d      	b.n	8000ebc <USART1_IRQHandler+0xc4>
        }
        else {
            // nothing to send, disable interrupt
            //
            USART1->CR1 &= ~USART_CR1_TXEIE;
 8000ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000ea8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eac:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000eb0:	8992      	ldrh	r2, [r2, #12]
 8000eb2:	b292      	uxth	r2, r2
 8000eb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000eb8:	b292      	uxth	r2, r2
 8000eba:	819a      	strh	r2, [r3, #12]
        }
        uart_stats.tx_bytes++;
 8000ebc:	f240 63b0 	movw	r3, #1712	; 0x6b0
 8000ec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	f103 0201 	add.w	r2, r3, #1
 8000eca:	f240 63b0 	movw	r3, #1712	; 0x6b0
 8000ece:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ed2:	609a      	str	r2, [r3, #8]
    }
}
 8000ed4:	f107 0708 	add.w	r7, r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <get_us_time>:
 *   this function must be called at least
 *   once every 65ms to work correctly.
 *
 */
uint64_t get_us_time()
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
    static uint16_t t0;
    static uint64_t tickcount;

    vPortEnterCritical();
 8000ee2:	f002 fd07 	bl	80038f4 <vPortEnterCritical>

    int t = TIM7->CNT;
 8000ee6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000eea:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef0:	607b      	str	r3, [r7, #4]
    if (t < t0)
 8000ef2:	f240 63bc 	movw	r3, #1724	; 0x6bc
 8000ef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	dd03      	ble.n	8000f0c <get_us_time+0x30>
        t += 0x10000;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000f0a:	607b      	str	r3, [r7, #4]

    tickcount += t - t0;
 8000f0c:	f240 63bc 	movw	r3, #1724	; 0x6bc
 8000f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	1ad1      	subs	r1, r2, r3
 8000f1a:	460a      	mov	r2, r1
 8000f1c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000f20:	f240 61c0 	movw	r1, #1728	; 0x6c0
 8000f24:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000f28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f2c:	1880      	adds	r0, r0, r2
 8000f2e:	eb41 0103 	adc.w	r1, r1, r3
 8000f32:	f240 63c0 	movw	r3, #1728	; 0x6c0
 8000f36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f3a:	e9c3 0100 	strd	r0, r1, [r3]
    t0 = t;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	f240 63bc 	movw	r3, #1724	; 0x6bc
 8000f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f4a:	801a      	strh	r2, [r3, #0]

    vPortExitCritical();
 8000f4c:	f002 fce8 	bl	8003920 <vPortExitCritical>

    return tickcount;
 8000f50:	f240 63c0 	movw	r3, #1728	; 0x6c0
 8000f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f58:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f107 0708 	add.w	r7, r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <init_us_timer>:
/**
 * Set up TIM7 as a 16bit, microsecond-timer.
 *
 */
void init_us_timer()
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;
    RCC_GetClocksFreq(&RCC_Clocks);
 8000f6e:	463b      	mov	r3, r7
 8000f70:	4618      	mov	r0, r3
 8000f72:	f002 ffa9 	bl	8003ec8 <RCC_GetClocksFreq>

    RCC->APB1ENR |= RCC_APB1Periph_TIM7;
 8000f76:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000f7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f7e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000f82:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f86:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000f88:	f042 0220 	orr.w	r2, r2, #32
 8000f8c:	641a      	str	r2, [r3, #64]	; 0x40
    TIM7->PSC = (RCC_Clocks.PCLK2_Frequency / 1000000) - 1;
 8000f8e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f92:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000f96:	68f9      	ldr	r1, [r7, #12]
 8000f98:	f64d 6283 	movw	r2, #56963	; 0xde83
 8000f9c:	f2c4 321b 	movt	r2, #17179	; 0x431b
 8000fa0:	fba2 0201 	umull	r0, r2, r2, r1
 8000fa4:	ea4f 4292 	mov.w	r2, r2, lsr #18
 8000fa8:	b292      	uxth	r2, r2
 8000faa:	f102 32ff 	add.w	r2, r2, #4294967295
 8000fae:	b292      	uxth	r2, r2
 8000fb0:	851a      	strh	r2, [r3, #40]	; 0x28
    TIM7->ARR = 0xFFFF;
 8000fb2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fb6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000fba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fbe:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM7->CR1 = TIM_CR1_CEN;
 8000fc0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fc4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000fc8:	f04f 0201 	mov.w	r2, #1
 8000fcc:	801a      	strh	r2, [r3, #0]
}
 8000fce:	f107 0710 	add.w	r7, r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop

08000fd8 <main>:
  * @brief  Main program.
  * @param  None
  * @retval None
  */
int main(void)
{ 
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af04      	add	r7, sp, #16
	/* create a pipe for MEMS->TIM4 data exchange */
	xQueue=xQueueCreate(1,queueSIZE*sizeof(uint8_t));
 8000fde:	f04f 0001 	mov.w	r0, #1
 8000fe2:	f04f 0106 	mov.w	r1, #6
 8000fe6:	f002 f871 	bl	80030cc <xQueueCreate>
 8000fea:	4602      	mov	r2, r0
 8000fec:	f240 73ec 	movw	r3, #2028	; 0x7ec
 8000ff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ff4:	601a      	str	r2, [r3, #0]

	/* create semaphores... */
	vSemaphoreCreateBinary( xSemaphoreSW );
 8000ff6:	f04f 0001 	mov.w	r0, #1
 8000ffa:	f04f 0100 	mov.w	r1, #0
 8000ffe:	f002 f865 	bl	80030cc <xQueueCreate>
 8001002:	4602      	mov	r2, r0
 8001004:	f240 63c8 	movw	r3, #1736	; 0x6c8
 8001008:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	f240 63c8 	movw	r3, #1736	; 0x6c8
 8001012:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d00d      	beq.n	8001038 <main+0x60>
 800101c:	f240 63c8 	movw	r3, #1736	; 0x6c8
 8001020:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f04f 0100 	mov.w	r1, #0
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	f04f 0300 	mov.w	r3, #0
 8001034:	f002 f8b2 	bl	800319c <xQueueGenericSend>

	/* ...and clean them up */
	if(xSemaphoreTake(xSemaphoreSW, ( portTickType ) 0) == pdTRUE);
 8001038:	f240 63c8 	movw	r3, #1736	; 0x6c8
 800103c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f04f 0100 	mov.w	r1, #0
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	f002 f934 	bl	80032bc <xQueueGenericReceive>

	/* initialize hardware... */
	prvSetupHardware();
 8001054:	f000 ff02 	bl	8001e5c <prvSetupHardware>
	/* Start the tasks defined within this file/specific to this demo. */
	//xTaskCreate( vLEDTask, ( signed portCHAR * ) "LED3", configMINIMAL_STACK_SIZE, (void *)LEDS[0],tskIDLE_PRIORITY, &xLED_Tasks[0] );
	//xTaskCreate( vLEDTask, ( signed portCHAR * ) "LED4", configMINIMAL_STACK_SIZE, (void *)LEDS[1],tskIDLE_PRIORITY, &xLED_Tasks[1] );
	//xTaskCreate( vLEDTask, ( signed portCHAR * ) "LED5", configMINIMAL_STACK_SIZE, (void *)LEDS[2],tskIDLE_PRIORITY, &xLED_Tasks[2] );
	//xTaskCreate( vLEDTask, ( signed portCHAR * ) "LED6", configMINIMAL_STACK_SIZE, (void *)LEDS[3],tskIDLE_PRIORITY, &xLED_Tasks[3] );
	xTaskCreate( vSWITCHTask, ( signed portCHAR * ) "SWITCH", configMINIMAL_STACK_SIZE, NULL,tskIDLE_PRIORITY, NULL );
 8001058:	f04f 0300 	mov.w	r3, #0
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	f04f 0300 	mov.w	r3, #0
 8001062:	9301      	str	r3, [sp, #4]
 8001064:	f04f 0300 	mov.w	r3, #0
 8001068:	9302      	str	r3, [sp, #8]
 800106a:	f04f 0300 	mov.w	r3, #0
 800106e:	9303      	str	r3, [sp, #12]
 8001070:	f241 30e9 	movw	r0, #5097	; 0x13e9
 8001074:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001078:	f644 4138 	movw	r1, #19512	; 0x4c38
 800107c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001080:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001084:	f04f 0300 	mov.w	r3, #0
 8001088:	f001 f8b2 	bl	80021f0 <xTaskGenericCreate>
	xTaskCreate( vMEMSTask, ( signed portCHAR * ) "MEMS", configMINIMAL_STACK_SIZE, NULL,tskIDLE_PRIORITY, &xMEMS_Task );
 800108c:	f04f 0300 	mov.w	r3, #0
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	f240 73d8 	movw	r3, #2008	; 0x7d8
 8001096:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	f04f 0300 	mov.w	r3, #0
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	9303      	str	r3, [sp, #12]
 80010a8:	f241 100d 	movw	r0, #4365	; 0x110d
 80010ac:	f6c0 0000 	movt	r0, #2048	; 0x800
 80010b0:	f644 4140 	movw	r1, #19520	; 0x4c40
 80010b4:	f6c0 0100 	movt	r1, #2048	; 0x800
 80010b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010bc:	f04f 0300 	mov.w	r3, #0
 80010c0:	f001 f896 	bl	80021f0 <xTaskGenericCreate>
	xTaskCreate( vBALANCETask, ( signed portCHAR * ) "BALANCE", configMINIMAL_STACK_SIZE, NULL,tskIDLE_PRIORITY, &xBALANCE_Task );
 80010c4:	f04f 0300 	mov.w	r3, #0
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	f240 73f4 	movw	r3, #2036	; 0x7f4
 80010ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010d2:	9301      	str	r3, [sp, #4]
 80010d4:	f04f 0300 	mov.w	r3, #0
 80010d8:	9302      	str	r3, [sp, #8]
 80010da:	f04f 0300 	mov.w	r3, #0
 80010de:	9303      	str	r3, [sp, #12]
 80010e0:	f241 2029 	movw	r0, #4649	; 0x1229
 80010e4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80010e8:	f644 4148 	movw	r1, #19528	; 0x4c48
 80010ec:	f6c0 0100 	movt	r1, #2048	; 0x800
 80010f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010f4:	f04f 0300 	mov.w	r3, #0
 80010f8:	f001 f87a 	bl	80021f0 <xTaskGenericCreate>

	/* Start the scheduler. */
	vTaskStartScheduler();
 80010fc:	f001 fa2c 	bl	8002558 <vTaskStartScheduler>

	/* Will only get here if there was not enough heap space to create the idle task. */
	return 0;  
 8001100:	f04f 0300 	mov.w	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop

0800110c <vMEMSTask>:

/*-----------------------------------------------------------*/

void vMEMSTask(void *pvParameters)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08a      	sub	sp, #40	; 0x28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	/* queue for MEMS data length */
    volatile int *LED;
    LED = (int *) pvParameters;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	623b      	str	r3, [r7, #32]


	uint8_t Buffer_x[2];
	uint8_t Buffer_y[2];
	uint8_t counter  = 0;
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	__IO uint32_t TimingDelay = 0;
 8001120:	f04f 0300 	mov.w	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
	__IO int8_t XOffset;
	__IO int8_t YOffset;

  	uint8_t TempAcceleration = 0;               
 8001126:	f04f 0300 	mov.w	r3, #0
 800112a:	77fb      	strb	r3, [r7, #31]
  	XOffset = Buffer_x[0];
 800112c:	7e3b      	ldrb	r3, [r7, #24]
 800112e:	b2db      	uxtb	r3, r3
 8001130:	73fb      	strb	r3, [r7, #15]
  	YOffset = Buffer_y[0];
 8001132:	7d3b      	ldrb	r3, [r7, #20]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	73bb      	strb	r3, [r7, #14]

	uint8_t temp1, temp2 = 0;
 8001138:	f04f 0300 	mov.w	r3, #0
 800113c:	77bb      	strb	r3, [r7, #30]
 800113e:	e000      	b.n	8001142 <vMEMSTask+0x36>
		}
		counter = 0x00;

    }
  }
}
 8001140:	bf00      	nop

	uint8_t temp1, temp2 = 0;

for( ;; )
{
	counter++;
 8001142:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001146:	f103 0301 	add.w	r3, r3, #1
 800114a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (counter == 10)
 800114e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001152:	2b0a      	cmp	r3, #10
 8001154:	d1f4      	bne.n	8001140 <vMEMSTask+0x34>
	{

  	Buffer_x[2] = 0;
 8001156:	f04f 0300 	mov.w	r3, #0
 800115a:	76bb      	strb	r3, [r7, #26]
  	Buffer_y[2] = 0;
 800115c:	f04f 0300 	mov.w	r3, #0
 8001160:	75bb      	strb	r3, [r7, #22]
	STM_EVAL_LEDOff(LED3); //up
	STM_EVAL_LEDOff(LED5); //right
	STM_EVAL_LEDOff(LED6); //down
#endif 

  	LIS302DL_Read(Buffer_x, LIS302DL_OUT_X_ADDR, 4);
 8001162:	f107 0318 	add.w	r3, r7, #24
 8001166:	4618      	mov	r0, r3
 8001168:	f04f 0129 	mov.w	r1, #41	; 0x29
 800116c:	f04f 0204 	mov.w	r2, #4
 8001170:	f000 fcdc 	bl	8001b2c <LIS302DL_Read>
	LIS302DL_Read(Buffer_y, LIS302DL_OUT_Y_ADDR, 4);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4618      	mov	r0, r3
 800117a:	f04f 012b 	mov.w	r1, #43	; 0x2b
 800117e:	f04f 0204 	mov.w	r2, #4
 8001182:	f000 fcd3 	bl	8001b2c <LIS302DL_Read>

      /* Remove the offsets values from data */
      Buffer_x[0] -= XOffset;
 8001186:	7e3a      	ldrb	r2, [r7, #24]
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	b2db      	uxtb	r3, r3
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	b2db      	uxtb	r3, r3
 8001192:	763b      	strb	r3, [r7, #24]
      Buffer_y[0] -= YOffset;
 8001194:	7d3a      	ldrb	r2, [r7, #20]
 8001196:	7bbb      	ldrb	r3, [r7, #14]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	b2db      	uxtb	r3, r3
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	753b      	strb	r3, [r7, #20]

      /* Update autoreload and capture compare registers value*/
      temp1 = ABS((int8_t)(Buffer_x[0]));
 80011a2:	7e3b      	ldrb	r3, [r7, #24]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	b25b      	sxtb	r3, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	bfb8      	it	lt
 80011ac:	425b      	neglt	r3, r3
 80011ae:	777b      	strb	r3, [r7, #29]
      temp2 = ABS((int8_t)(Buffer_y[0]));
 80011b0:	7d3b      	ldrb	r3, [r7, #20]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	b25b      	sxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	bfb8      	it	lt
 80011ba:	425b      	neglt	r3, r3
 80011bc:	77bb      	strb	r3, [r7, #30]
      TempAcceleration = MAX(temp1, temp2);
 80011be:	7f7a      	ldrb	r2, [r7, #29]
 80011c0:	7fbb      	ldrb	r3, [r7, #30]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	bf28      	it	cs
 80011c6:	4613      	movcs	r3, r2
 80011c8:	77fb      	strb	r3, [r7, #31]
   /************************************************
	* buffer value error can work right

   *****************************************************/

	if(TempAcceleration != 0)
 80011ca:	7ffb      	ldrb	r3, [r7, #31]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0b7      	beq.n	8001140 <vMEMSTask+0x34>
      {
		//STM_EVAL_LEDOn(LED6);

	
        if ((int8_t)Buffer_x[0] < -2)
 80011d0:	7e3b      	ldrb	r3, [r7, #24]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	f113 0f02 	cmn.w	r3, #2
 80011da:	da03      	bge.n	80011e4 <vMEMSTask+0xd8>
        {
//				STM_EVAL_LEDOn(LED6);
				//STM_EVAL_LEDOff(LED6);
				STM_EVAL_LEDOn(LED3);
 80011dc:	f04f 0001 	mov.w	r0, #1
 80011e0:	f000 fb70 	bl	80018c4 <STM_EVAL_LEDOn>
                {
                    //    STM_EVAL_LEDOff(LED5);
                }

        }
        if ((int8_t)Buffer_x[0] > 2)
 80011e4:	7e3b      	ldrb	r3, [r7, #24]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	b25b      	sxtb	r3, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	dd03      	ble.n	80011f6 <vMEMSTask+0xea>
        {
				//STM_EVAL_LEDOn(LED3);
				STM_EVAL_LEDOff(LED3);
 80011ee:	f04f 0001 	mov.w	r0, #1
 80011f2:	f000 fb81 	bl	80018f8 <STM_EVAL_LEDOff>
                                {
		                //        STM_EVAL_LEDOff(LED6);
                                }

        }
        if ((int8_t)Buffer_y[0] > 2)
 80011f6:	7d3b      	ldrb	r3, [r7, #20]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	b25b      	sxtb	r3, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	dd03      	ble.n	8001208 <vMEMSTask+0xfc>
        {

				//STM_EVAL_LEDOn(LED5);
				STM_EVAL_LEDOff(LED5);
 8001200:	f04f 0002 	mov.w	r0, #2
 8001204:	f000 fb78 	bl	80018f8 <STM_EVAL_LEDOff>
                                {
                       //                 STM_EVAL_LEDOff(LED6);
                                }

        }
        if ((int8_t)Buffer_y[0] < -2)
 8001208:	7d3b      	ldrb	r3, [r7, #20]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	b25b      	sxtb	r3, r3
 800120e:	f113 0f02 	cmn.w	r3, #2
 8001212:	da03      	bge.n	800121c <vMEMSTask+0x110>
        {

			//STM_EVAL_LEDOn(LED4);
			STM_EVAL_LEDOff(LED4);
 8001214:	f04f 0000 	mov.w	r0, #0
 8001218:	f000 fb6e 	bl	80018f8 <STM_EVAL_LEDOff>
	STM_EVAL_LEDOn(LED3);
	STM_EVAL_LEDOn(LED5);
	STM_EVAL_LEDOn(LED6);
*/
		}
		counter = 0x00;
 800121c:	f04f 0300 	mov.w	r3, #0
 8001220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    }
  }
}
 8001224:	e78c      	b.n	8001140 <vMEMSTask+0x34>
 8001226:	bf00      	nop

08001228 <vBALANCETask>:
}

/*-----------------------------------------------------------*/

void vBALANCETask(void *pvParameters)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	uint8_t temp1, temp2 = 0;
 8001230:	f04f 0300 	mov.w	r3, #0
 8001234:	75fb      	strb	r3, [r7, #23]
	__IO uint8_t TempAcceleration = 0;
 8001236:	f04f 0300 	mov.w	r3, #0
 800123a:	757b      	strb	r3, [r7, #21]
	uint8_t xBuffer_receive[queueSIZE];
	for( ;; )
	{
	 if(xQueueReceive(xQueue,xBuffer_receive,0)==pdPASS)
 800123c:	f240 73ec 	movw	r3, #2028	; 0x7ec
 8001240:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	4619      	mov	r1, r3
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	f04f 0300 	mov.w	r3, #0
 8001256:	f002 f831 	bl	80032bc <xQueueGenericReceive>
 800125a:	4603      	mov	r3, r0
 800125c:	2b01      	cmp	r3, #1
 800125e:	f040 80c0 	bne.w	80013e2 <vBALANCETask+0x1ba>
		{
		/* Disable All TIM4 Capture Compare Channels */
		TIM_CCxCmd(TIM4, TIM_Channel_1, DISABLE);
 8001262:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001266:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800126a:	f04f 0100 	mov.w	r1, #0
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	f003 fca7 	bl	8004bc4 <TIM_CCxCmd>
		TIM_CCxCmd(TIM4, TIM_Channel_2, DISABLE);
 8001276:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800127a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800127e:	f04f 0104 	mov.w	r1, #4
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	f003 fc9d 	bl	8004bc4 <TIM_CCxCmd>
		TIM_CCxCmd(TIM4, TIM_Channel_3, DISABLE);
 800128a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800128e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001292:	f04f 0108 	mov.w	r1, #8
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	f003 fc93 	bl	8004bc4 <TIM_CCxCmd>
		TIM_CCxCmd(TIM4, TIM_Channel_4, DISABLE);
 800129e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80012a2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80012a6:	f04f 010c 	mov.w	r1, #12
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	f003 fc89 	bl	8004bc4 <TIM_CCxCmd>

		/* Update autoreload and capture compare registers value*/
		temp1=((int8_t)(xBuffer_receive[0])<0)?(int8_t)(xBuffer_receive[0])*(-1):(int8_t)(xBuffer_receive[0]); //ABS
 80012b2:	7b3b      	ldrb	r3, [r7, #12]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	b25b      	sxtb	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	bfb8      	it	lt
 80012bc:	425b      	neglt	r3, r3
 80012be:	75bb      	strb	r3, [r7, #22]
		temp2=((int8_t)(xBuffer_receive[2])<0)?(int8_t)(xBuffer_receive[2])*(-1):(int8_t)(xBuffer_receive[2]); //ABS
 80012c0:	7bbb      	ldrb	r3, [r7, #14]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	b25b      	sxtb	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	bfb8      	it	lt
 80012ca:	425b      	neglt	r3, r3
 80012cc:	75fb      	strb	r3, [r7, #23]
		TempAcceleration = (temp1<temp2)?temp2:temp1; //MAX(temp1,temp2)
 80012ce:	7dba      	ldrb	r2, [r7, #22]
 80012d0:	7dfb      	ldrb	r3, [r7, #23]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	bf28      	it	cs
 80012d6:	4613      	movcs	r3, r2
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	757b      	strb	r3, [r7, #21]

		if(TempAcceleration != 0)
 80012dc:	7d7b      	ldrb	r3, [r7, #21]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d07e      	beq.n	80013e2 <vBALANCETask+0x1ba>
		{
			if ((int8_t)xBuffer_receive[0] < -2)
 80012e4:	7b3b      	ldrb	r3, [r7, #12]
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	b25b      	sxtb	r3, r3
 80012ea:	f113 0f02 	cmn.w	r3, #2
 80012ee:	da16      	bge.n	800131e <vBALANCETask+0xf6>
			{
				/* Enable TIM4 Capture Compare Channel 4 */
				TIM_CCxCmd(TIM4, TIM_Channel_4, ENABLE);
 80012f0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80012f4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80012f8:	f04f 010c 	mov.w	r1, #12
 80012fc:	f04f 0201 	mov.w	r2, #1
 8001300:	f003 fc60 	bl	8004bc4 <TIM_CCxCmd>
				/* Sets the TIM4 Capture Compare4 Register value */
				TIM_SetCompare4(TIM4, TIM_CCR/TempAcceleration);
 8001304:	7d7b      	ldrb	r3, [r7, #21]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800130c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001310:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001314:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001318:	4619      	mov	r1, r3
 800131a:	f003 fbcd 	bl	8004ab8 <TIM_SetCompare4>
			}
			if ((int8_t)xBuffer_receive[0] > 2)
 800131e:	7b3b      	ldrb	r3, [r7, #12]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	b25b      	sxtb	r3, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	dd16      	ble.n	8001356 <vBALANCETask+0x12e>
			{
				/* Enable TIM4 Capture Compare Channel 2 */
				TIM_CCxCmd(TIM4, TIM_Channel_2, ENABLE);
 8001328:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800132c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001330:	f04f 0104 	mov.w	r1, #4
 8001334:	f04f 0201 	mov.w	r2, #1
 8001338:	f003 fc44 	bl	8004bc4 <TIM_CCxCmd>
				/* Sets the TIM4 Capture Compare2 Register value */
				TIM_SetCompare2(TIM4, TIM_CCR/TempAcceleration);
 800133c:	7d7b      	ldrb	r3, [r7, #21]
 800133e:	b2db      	uxtb	r3, r3
 8001340:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001344:	fb92 f3f3 	sdiv	r3, r2, r3
 8001348:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800134c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001350:	4619      	mov	r1, r3
 8001352:	f003 fb95 	bl	8004a80 <TIM_SetCompare2>
			}
			if ((int8_t)xBuffer_receive[2] > 2)
 8001356:	7bbb      	ldrb	r3, [r7, #14]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	b25b      	sxtb	r3, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	dd16      	ble.n	800138e <vBALANCETask+0x166>
			{
				/* Enable TIM4 Capture Compare Channel 1 */
				TIM_CCxCmd(TIM4, TIM_Channel_1, ENABLE);
 8001360:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001364:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001368:	f04f 0100 	mov.w	r1, #0
 800136c:	f04f 0201 	mov.w	r2, #1
 8001370:	f003 fc28 	bl	8004bc4 <TIM_CCxCmd>
				/* Sets the TIM4 Capture Compare1 Register value */
				TIM_SetCompare1(TIM4, TIM_CCR/TempAcceleration);
 8001374:	7d7b      	ldrb	r3, [r7, #21]
 8001376:	b2db      	uxtb	r3, r3
 8001378:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800137c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001380:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001384:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001388:	4619      	mov	r1, r3
 800138a:	f003 fb6b 	bl	8004a64 <TIM_SetCompare1>
			}
			if ((int8_t)xBuffer_receive[2] < -2)
 800138e:	7bbb      	ldrb	r3, [r7, #14]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	b25b      	sxtb	r3, r3
 8001394:	f113 0f02 	cmn.w	r3, #2
 8001398:	da16      	bge.n	80013c8 <vBALANCETask+0x1a0>
			{
				/* Enable TIM4 Capture Compare Channel 3 */
				TIM_CCxCmd(TIM4, TIM_Channel_3, ENABLE);
 800139a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800139e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80013a2:	f04f 0108 	mov.w	r1, #8
 80013a6:	f04f 0201 	mov.w	r2, #1
 80013aa:	f003 fc0b 	bl	8004bc4 <TIM_CCxCmd>
				/* Sets the TIM4 Capture Compare3 Register value */
				TIM_SetCompare3(TIM4, TIM_CCR/TempAcceleration);
 80013ae:	7d7b      	ldrb	r3, [r7, #21]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80013ba:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80013be:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80013c2:	4619      	mov	r1, r3
 80013c4:	f003 fb6a 	bl	8004a9c <TIM_SetCompare3>
			}

			/* Time base configuration */
			TIM_SetAutoreload(TIM4,  TIM_ARR/TempAcceleration);
 80013c8:	7d7b      	ldrb	r3, [r7, #21]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	f240 726c 	movw	r2, #1900	; 0x76c
 80013d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80013d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80013d8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80013dc:	4619      	mov	r1, r3
 80013de:	f003 f8e1 	bl	80045a4 <TIM_SetAutoreload>
		}
	 }
	taskYIELD(); 	//task is going to ready state to allow next one to run
 80013e2:	f002 fa7b 	bl	80038dc <vPortYieldFromISR>
	}
 80013e6:	e729      	b.n	800123c <vBALANCETask+0x14>

080013e8 <vSWITCHTask>:
}

/*-----------------------------------------------------------*/

void vSWITCHTask( void *pvParameters )
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	static int i=0;
	for( ;; )
	{
		if(xSemaphoreTake(xSemaphoreSW,( portTickType ) 0) == pdTRUE)
 80013f0:	f240 63c8 	movw	r3, #1736	; 0x6c8
 80013f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f04f 0100 	mov.w	r1, #0
 8001400:	f04f 0200 	mov.w	r2, #0
 8001404:	f04f 0300 	mov.w	r3, #0
 8001408:	f001 ff58 	bl	80032bc <xQueueGenericReceive>
 800140c:	4603      	mov	r3, r0
 800140e:	2b01      	cmp	r3, #1
 8001410:	f040 808c 	bne.w	800152c <vSWITCHTask+0x144>
		{
			i^=1;		//just switch the state if semaphore was given
 8001414:	f240 63cc 	movw	r3, #1740	; 0x6cc
 8001418:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f083 0201 	eor.w	r2, r3, #1
 8001422:	f240 63cc 	movw	r3, #1740	; 0x6cc
 8001426:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800142a:	601a      	str	r2, [r3, #0]

			if(i==0)	//LED3..LD6 tasks ready, BALANCE, MEMS suspended
 800142c:	f240 63cc 	movw	r3, #1740	; 0x6cc
 8001430:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d13c      	bne.n	80014b4 <vSWITCHTask+0xcc>
			{
				vTaskSuspend(xBALANCE_Task);
 800143a:	f240 73f4 	movw	r3, #2036	; 0x7f4
 800143e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f000 ffa9 	bl	800239c <vTaskSuspend>
				TIM_Cmd(TIM4, DISABLE);
 800144a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800144e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001452:	f04f 0100 	mov.w	r1, #0
 8001456:	f003 f8d3 	bl	8004600 <TIM_Cmd>
				vTaskSuspend(xMEMS_Task);
 800145a:	f240 73d8 	movw	r3, #2008	; 0x7d8
 800145e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f000 ff99 	bl	800239c <vTaskSuspend>
				prvLED_Config(GPIO);
 800146a:	f04f 0000 	mov.w	r0, #0
 800146e:	f000 fd11 	bl	8001e94 <prvLED_Config>
				vTaskResume(xLED_Tasks[0]);
 8001472:	f240 73dc 	movw	r3, #2012	; 0x7dc
 8001476:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f001 f815 	bl	80024ac <vTaskResume>
				vTaskResume(xLED_Tasks[1]);
 8001482:	f240 73dc 	movw	r3, #2012	; 0x7dc
 8001486:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	4618      	mov	r0, r3
 800148e:	f001 f80d 	bl	80024ac <vTaskResume>
				vTaskResume(xLED_Tasks[2]);
 8001492:	f240 73dc 	movw	r3, #2012	; 0x7dc
 8001496:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	4618      	mov	r0, r3
 800149e:	f001 f805 	bl	80024ac <vTaskResume>
				vTaskResume(xLED_Tasks[3]);
 80014a2:	f240 73dc 	movw	r3, #2012	; 0x7dc
 80014a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 fffd 	bl	80024ac <vTaskResume>
 80014b2:	e03b      	b.n	800152c <vSWITCHTask+0x144>
			}
			else		//MEMS and BALANCE ready, LED tasks suspended
			{
				vTaskSuspend(xLED_Tasks[0]);
 80014b4:	f240 73dc 	movw	r3, #2012	; 0x7dc
 80014b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 ff6c 	bl	800239c <vTaskSuspend>
				vTaskSuspend(xLED_Tasks[1]);
 80014c4:	f240 73dc 	movw	r3, #2012	; 0x7dc
 80014c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 ff64 	bl	800239c <vTaskSuspend>
				vTaskSuspend(xLED_Tasks[2]);
 80014d4:	f240 73dc 	movw	r3, #2012	; 0x7dc
 80014d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 ff5c 	bl	800239c <vTaskSuspend>
				vTaskSuspend(xLED_Tasks[3]);
 80014e4:	f240 73dc 	movw	r3, #2012	; 0x7dc
 80014e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 ff54 	bl	800239c <vTaskSuspend>
				prvLED_Config(TIMER);
 80014f4:	f04f 0001 	mov.w	r0, #1
 80014f8:	f000 fccc 	bl	8001e94 <prvLED_Config>
				TIM_Cmd(TIM4, ENABLE);
 80014fc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001500:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001504:	f04f 0101 	mov.w	r1, #1
 8001508:	f003 f87a 	bl	8004600 <TIM_Cmd>
				vTaskResume(xBALANCE_Task);
 800150c:	f240 73f4 	movw	r3, #2036	; 0x7f4
 8001510:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f000 ffc8 	bl	80024ac <vTaskResume>
				vTaskResume(xMEMS_Task);
 800151c:	f240 73d8 	movw	r3, #2008	; 0x7d8
 8001520:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f000 ffc0 	bl	80024ac <vTaskResume>
			}
		}
		taskYIELD(); 	//task is going to ready state to allow next one to run
 800152c:	f002 f9d6 	bl	80038dc <vPortYieldFromISR>
	}
 8001530:	e75e      	b.n	80013f0 <vSWITCHTask+0x8>
 8001532:	bf00      	nop

08001534 <Reset_Handler>:
 8001534:	2100      	movs	r1, #0
 8001536:	f000 b804 	b.w	8001542 <LoopCopyDataInit>

0800153a <CopyDataInit>:
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <LoopFillZerobss+0x22>)
 800153c:	585b      	ldr	r3, [r3, r1]
 800153e:	5043      	str	r3, [r0, r1]
 8001540:	3104      	adds	r1, #4

08001542 <LoopCopyDataInit>:
 8001542:	480f      	ldr	r0, [pc, #60]	; (8001580 <LoopFillZerobss+0x26>)
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <LoopFillZerobss+0x2a>)
 8001546:	1842      	adds	r2, r0, r1
 8001548:	429a      	cmp	r2, r3
 800154a:	f4ff aff6 	bcc.w	800153a <CopyDataInit>
 800154e:	4a0e      	ldr	r2, [pc, #56]	; (8001588 <LoopFillZerobss+0x2e>)
 8001550:	f000 b803 	b.w	800155a <LoopFillZerobss>

08001554 <FillZerobss>:
 8001554:	2300      	movs	r3, #0
 8001556:	f842 3b04 	str.w	r3, [r2], #4

0800155a <LoopFillZerobss>:
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <LoopFillZerobss+0x32>)
 800155c:	429a      	cmp	r2, r3
 800155e:	f4ff aff9 	bcc.w	8001554 <FillZerobss>
 8001562:	480b      	ldr	r0, [pc, #44]	; (8001590 <LoopFillZerobss+0x36>)
 8001564:	6801      	ldr	r1, [r0, #0]
 8001566:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800156a:	6001      	str	r1, [r0, #0]
 800156c:	f000 f814 	bl	8001598 <SystemInit>
 8001570:	f7fe fe3e 	bl	80001f0 <__libc_init_array>
 8001574:	f7ff fd30 	bl	8000fd8 <main>
 8001578:	4770      	bx	lr
 800157a:	0000      	.short	0x0000
 800157c:	08004d70 	.word	0x08004d70
 8001580:	20000000 	.word	0x20000000
 8001584:	2000055c 	.word	0x2000055c
 8001588:	20000560 	.word	0x20000560
 800158c:	200007fc 	.word	0x200007fc
 8001590:	e000ed88 	.word	0xe000ed88

08001594 <ADC_IRQHandler>:
 8001594:	f7ff bffe 	b.w	8001594 <ADC_IRQHandler>

08001598 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800159c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80015a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015a4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80015a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80015ac:	6812      	ldr	r2, [r2, #0]
 80015ae:	f042 0201 	orr.w	r2, r2, #1
 80015b2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015b4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80015b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80015c2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80015c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015ca:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80015ce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80015d8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80015dc:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80015de:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80015e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015e6:	f243 0210 	movw	r2, #12304	; 0x3010
 80015ea:	f2c2 4200 	movt	r2, #9216	; 0x2400
 80015ee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80015f0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80015f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015f8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80015fc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001600:	6812      	ldr	r2, [r2, #0]
 8001602:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001606:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001608:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800160c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001616:	f000 f809 	bl	800162c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800161a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800161e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001622:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001626:	609a      	str	r2, [r3, #8]
#endif
}
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop

0800162c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800163e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001642:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001646:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800164a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001654:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001656:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800165a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001664:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f103 0301 	add.w	r3, r3, #1
 800166c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d103      	bne.n	800167c <SetSysClock+0x50>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800167a:	d1ec      	bne.n	8001656 <SetSysClock+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800167c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001680:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <SetSysClock+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 800168e:	f04f 0301 	mov.w	r3, #1
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	e002      	b.n	800169c <SetSysClock+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001696:	f04f 0300 	mov.w	r3, #0
 800169a:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	f040 8082 	bne.w	80017a8 <SetSysClock+0x17c>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80016a4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80016a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016ac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80016b0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80016b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016ba:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80016bc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80016c0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80016c4:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80016c8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80016cc:	6812      	ldr	r2, [r2, #0]
 80016ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016d2:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80016d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80016d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016dc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80016e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80016e4:	6892      	ldr	r2, [r2, #8]
 80016e6:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80016e8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80016ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016f0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80016f4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80016f8:	6892      	ldr	r2, [r2, #8]
 80016fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016fe:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001700:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001704:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001708:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800170c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001710:	6892      	ldr	r2, [r2, #8]
 8001712:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8001716:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001718:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800171c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001720:	f245 4208 	movw	r2, #21512	; 0x5408
 8001724:	f2c0 7240 	movt	r2, #1856	; 0x740
 8001728:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800172a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800172e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001732:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001736:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001740:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001742:	bf00      	nop
 8001744:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001748:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f6      	beq.n	8001744 <SetSysClock+0x118>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001756:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800175a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800175e:	f240 6205 	movw	r2, #1541	; 0x605
 8001762:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001764:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001768:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800176c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001770:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001774:	6892      	ldr	r2, [r2, #8]
 8001776:	f022 0203 	bic.w	r2, r2, #3
 800177a:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800177c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001780:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001784:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001788:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800178c:	6892      	ldr	r2, [r2, #8]
 800178e:	f042 0202 	orr.w	r2, r2, #2
 8001792:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001794:	bf00      	nop
 8001796:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800179a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 030c 	and.w	r3, r3, #12
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	d1f6      	bne.n	8001796 <SetSysClock+0x16a>

/******************************************************************************/
/*                        I2S clock configuration                             */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 80017a8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80017ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017b0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80017b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017b8:	6892      	ldr	r2, [r2, #8]
 80017ba:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80017be:	609a      	str	r2, [r3, #8]

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 80017c0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80017c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017c8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80017cc:	f2c5 0200 	movt	r2, #20480	; 0x5000
 80017d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 80017d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80017d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017dc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80017e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017e4:	6812      	ldr	r2, [r2, #0]
 80017e6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80017ea:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 80017ec:	bf00      	nop
 80017ee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80017f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0f6      	beq.n	80017ee <SetSysClock+0x1c2>
  {
  }
}
 8001800:	f107 070c 	add.w	r7, r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop

0800180c <_sbrk_r>:
    return 1;
}


void *_sbrk_r(struct _reent *r, ptrdiff_t incr)
{
 800180c:	b490      	push	{r4, r7}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
    extern char end;   // provided by the linker script

    if (__brkval == 0)
 8001816:	f240 73f8 	movw	r3, #2040	; 0x7f8
 800181a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d108      	bne.n	8001836 <_sbrk_r+0x2a>
        __brkval = &end;
 8001824:	f240 73f8 	movw	r3, #2040	; 0x7f8
 8001828:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800182c:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8001830:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001834:	601a      	str	r2, [r3, #0]

    if (__brkval + incr > (char*)__get_MSP() - __malloc_margin) {
 8001836:	f240 73f8 	movw	r3, #2040	; 0x7f8
 800183a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	18d2      	adds	r2, r2, r3
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8001844:	f3ef 8408 	mrs	r4, MSP
  return(result);
 8001848:	4623      	mov	r3, r4
 800184a:	4619      	mov	r1, r3
 800184c:	f240 5328 	movw	r3, #1320	; 0x528
 8001850:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	1acb      	subs	r3, r1, r3
 8001858:	429a      	cmp	r2, r3
 800185a:	d906      	bls.n	800186a <_sbrk_r+0x5e>
        r->_errno = ENOMEM;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f04f 020c 	mov.w	r2, #12
 8001862:	601a      	str	r2, [r3, #0]
        return (void*)-1;
 8001864:	f04f 33ff 	mov.w	r3, #4294967295
 8001868:	e012      	b.n	8001890 <_sbrk_r+0x84>
    }

    void *ret = __brkval;
 800186a:	f240 73f8 	movw	r3, #2040	; 0x7f8
 800186e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	60fb      	str	r3, [r7, #12]
    __brkval += incr;
 8001876:	f240 73f8 	movw	r3, #2040	; 0x7f8
 800187a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	18d2      	adds	r2, r2, r3
 8001884:	f240 73f8 	movw	r3, #2040	; 0x7f8
 8001888:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800188c:	601a      	str	r2, [r3, #0]

    return ret;
 800188e:	68fb      	ldr	r3, [r7, #12]
}
 8001890:	4618      	mov	r0, r3
 8001892:	f107 0710 	add.w	r7, r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bc90      	pop	{r4, r7}
 800189a:	4770      	bx	lr

0800189c <__malloc_lock>:
    return -1;
}


void __malloc_lock(struct _reent *r)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
    vPortEnterCritical();
 80018a4:	f002 f826 	bl	80038f4 <vPortEnterCritical>
}
 80018a8:	f107 0708 	add.w	r7, r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <__malloc_unlock>:


void __malloc_unlock(struct _reent *r)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
    vPortExitCritical();
 80018b8:	f002 f832 	bl	8003920 <vPortExitCritical>
}
 80018bc:	f107 0708 	add.w	r7, r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 80018ce:	79fa      	ldrb	r2, [r7, #7]
 80018d0:	f240 532c 	movw	r3, #1324	; 0x52c
 80018d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80018d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80018dc:	79f9      	ldrb	r1, [r7, #7]
 80018de:	f644 5328 	movw	r3, #19752	; 0x4d28
 80018e2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80018e6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80018ea:	8313      	strh	r3, [r2, #24]
}
 80018ec:	f107 070c 	add.w	r7, r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop

080018f8 <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 8001902:	79fa      	ldrb	r2, [r7, #7]
 8001904:	f240 532c 	movw	r3, #1324	; 0x52c
 8001908:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800190c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001910:	79f9      	ldrb	r1, [r7, #7]
 8001912:	f644 5328 	movw	r3, #19752	; 0x4d28
 8001916:	f6c0 0300 	movt	r3, #2048	; 0x800
 800191a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800191e:	8353      	strh	r3, [r2, #26]
}
 8001920:	f107 070c 	add.w	r7, r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop

0800192c <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af00      	add	r7, sp, #0
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	71fa      	strb	r2, [r7, #7]
 8001938:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 800193a:	79fa      	ldrb	r2, [r7, #7]
 800193c:	f644 5334 	movw	r3, #19764	; 0x4d34
 8001940:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001948:	4618      	mov	r0, r3
 800194a:	f04f 0101 	mov.w	r1, #1
 800194e:	f002 fba1 	bl	8004094 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001952:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001956:	f04f 0101 	mov.w	r1, #1
 800195a:	f002 fbef 	bl	800413c <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001964:	f04f 0300 	mov.w	r3, #0
 8001968:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 800196a:	79fa      	ldrb	r2, [r7, #7]
 800196c:	f644 5330 	movw	r3, #19760	; 0x4d30
 8001970:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001974:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001978:	61bb      	str	r3, [r7, #24]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 800197a:	79fa      	ldrb	r2, [r7, #7]
 800197c:	f240 533c 	movw	r3, #1340	; 0x53c
 8001980:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001988:	4618      	mov	r0, r3
 800198a:	f107 0318 	add.w	r3, r7, #24
 800198e:	4619      	mov	r1, r3
 8001990:	f002 f988 	bl	8003ca4 <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 8001994:	79bb      	ldrb	r3, [r7, #6]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d13a      	bne.n	8001a10 <STM_EVAL_PBInit+0xe4>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 800199a:	79fa      	ldrb	r2, [r7, #7]
 800199c:	f644 533c 	movw	r3, #19772	; 0x4d3c
 80019a0:	f6c0 0300 	movt	r3, #2048	; 0x800
 80019a4:	5c9a      	ldrb	r2, [r3, r2]
 80019a6:	79f9      	ldrb	r1, [r7, #7]
 80019a8:	f644 5340 	movw	r3, #19776	; 0x4d40
 80019ac:	f6c0 0300 	movt	r3, #2048	; 0x800
 80019b0:	5c5b      	ldrb	r3, [r3, r1]
 80019b2:	4610      	mov	r0, r2
 80019b4:	4619      	mov	r1, r3
 80019b6:	f002 fd23 	bl	8004400 <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 80019ba:	79fa      	ldrb	r2, [r7, #7]
 80019bc:	f644 5338 	movw	r3, #19768	; 0x4d38
 80019c0:	f6c0 0300 	movt	r3, #2048	; 0x800
 80019c4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80019c8:	613b      	str	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	753b      	strb	r3, [r7, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 80019d0:	f04f 0308 	mov.w	r3, #8
 80019d4:	757b      	strb	r3, [r7, #21]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80019d6:	f04f 0301 	mov.w	r3, #1
 80019da:	75bb      	strb	r3, [r7, #22]
    EXTI_Init(&EXTI_InitStructure);
 80019dc:	f107 0310 	add.w	r3, r7, #16
 80019e0:	4618      	mov	r0, r3
 80019e2:	f002 f8c3 	bl	8003b6c <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 80019e6:	79fa      	ldrb	r2, [r7, #7]
 80019e8:	f644 5344 	movw	r3, #19780	; 0x4d44
 80019ec:	f6c0 0300 	movt	r3, #2048	; 0x800
 80019f0:	5c9b      	ldrb	r3, [r3, r2]
 80019f2:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 80019f4:	f04f 030f 	mov.w	r3, #15
 80019f8:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 80019fa:	f04f 030f 	mov.w	r3, #15
 80019fe:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001a00:	f04f 0301 	mov.w	r3, #1
 8001a04:	73fb      	strb	r3, [r7, #15]

    NVIC_Init(&NVIC_InitStructure); 
 8001a06:	f107 030c 	add.w	r3, r7, #12
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f002 f826 	bl	8003a5c <NVIC_Init>
  }
}
 8001a10:	f107 0720 	add.w	r7, r7, #32
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <LIS302DL_Init>:
  * @param  LIS302DL_Config_Struct: pointer to a LIS302DL_Config_TypeDef structure 
  *         that contains the configuration setting for the LIS302DL.
  * @retval None
  */
void LIS302DL_Init(LIS302DL_InitTypeDef *LIS302DL_InitStruct)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface ---------------------------------------*/
  LIS302DL_LowLevel_Init();
 8001a26:	f000 f8c1 	bl	8001bac <LIS302DL_LowLevel_Init>
  
  /* Configure MEMS: data rate, power mode, full scale, self test and axes */
  ctrl = (uint8_t) (LIS302DL_InitStruct->Output_DataRate | LIS302DL_InitStruct->Power_Mode | \
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	785a      	ldrb	r2, [r3, #1]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	b2da      	uxtb	r2, r3
                    LIS302DL_InitStruct->Full_Scale | LIS302DL_InitStruct->Self_Test | \
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	78db      	ldrb	r3, [r3, #3]
  
  /* Configure the low level interface ---------------------------------------*/
  LIS302DL_LowLevel_Init();
  
  /* Configure MEMS: data rate, power mode, full scale, self test and axes */
  ctrl = (uint8_t) (LIS302DL_InitStruct->Output_DataRate | LIS302DL_InitStruct->Power_Mode | \
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	b2da      	uxtb	r2, r3
                    LIS302DL_InitStruct->Full_Scale | LIS302DL_InitStruct->Self_Test | \
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	791b      	ldrb	r3, [r3, #4]
  
  /* Configure the low level interface ---------------------------------------*/
  LIS302DL_LowLevel_Init();
  
  /* Configure MEMS: data rate, power mode, full scale, self test and axes */
  ctrl = (uint8_t) (LIS302DL_InitStruct->Output_DataRate | LIS302DL_InitStruct->Power_Mode | \
 8001a42:	4313      	orrs	r3, r2
 8001a44:	b2da      	uxtb	r2, r3
                    LIS302DL_InitStruct->Full_Scale | LIS302DL_InitStruct->Self_Test | \
                    LIS302DL_InitStruct->Axes_Enable);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	789b      	ldrb	r3, [r3, #2]
  
  /* Configure the low level interface ---------------------------------------*/
  LIS302DL_LowLevel_Init();
  
  /* Configure MEMS: data rate, power mode, full scale, self test and axes */
  ctrl = (uint8_t) (LIS302DL_InitStruct->Output_DataRate | LIS302DL_InitStruct->Power_Mode | \
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	73fb      	strb	r3, [r7, #15]
                    LIS302DL_InitStruct->Full_Scale | LIS302DL_InitStruct->Self_Test | \
                    LIS302DL_InitStruct->Axes_Enable);
  
  /* Write value to MEMS CTRL_REG1 regsister */
  LIS302DL_Write(&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 8001a50:	f107 030f 	add.w	r3, r7, #15
 8001a54:	4618      	mov	r0, r3
 8001a56:	f04f 0120 	mov.w	r1, #32
 8001a5a:	f04f 0201 	mov.w	r2, #1
 8001a5e:	f000 f82d 	bl	8001abc <LIS302DL_Write>
}
 8001a62:	f107 0710 	add.w	r7, r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop

08001a6c <LIS302DL_InterruptConfig>:
  * @param  LIS302DL_InterruptConfig_TypeDef: pointer to a LIS302DL_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the LIS302DL Interrupt.
  * @retval None
  */
void LIS302DL_InterruptConfig(LIS302DL_InterruptConfigTypeDef *LIS302DL_IntConfigStruct)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFG register */
  LIS302DL_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 8001a7a:	f107 030f 	add.w	r3, r7, #15
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f04f 0138 	mov.w	r1, #56	; 0x38
 8001a84:	f04f 0201 	mov.w	r2, #1
 8001a88:	f000 f850 	bl	8001b2c <LIS302DL_Read>
  
  /* Configure latch Interrupt request, click interrupts and double click interrupts */                   
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	781a      	ldrb	r2, [r3, #0]
                   LIS302DL_IntConfigStruct->SingleClick_Axes | \
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	785b      	ldrb	r3, [r3, #1]
  
  /* Read CLICK_CFG register */
  LIS302DL_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
  
  /* Configure latch Interrupt request, click interrupts and double click interrupts */                   
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 8001a94:	4313      	orrs	r3, r2
 8001a96:	b2da      	uxtb	r2, r3
                   LIS302DL_IntConfigStruct->SingleClick_Axes | \
                   LIS302DL_IntConfigStruct->DoubleClick_Axes);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	789b      	ldrb	r3, [r3, #2]
  
  /* Read CLICK_CFG register */
  LIS302DL_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
  
  /* Configure latch Interrupt request, click interrupts and double click interrupts */                   
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	73fb      	strb	r3, [r7, #15]
                   LIS302DL_IntConfigStruct->SingleClick_Axes | \
                   LIS302DL_IntConfigStruct->DoubleClick_Axes);
  
  /* Write value to MEMS CLICK_CFG register */
  LIS302DL_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 8001aa2:	f107 030f 	add.w	r3, r7, #15
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f04f 0138 	mov.w	r1, #56	; 0x38
 8001aac:	f04f 0201 	mov.w	r2, #1
 8001ab0:	f000 f804 	bl	8001abc <LIS302DL_Write>
}
 8001ab4:	f107 0710 	add.w	r7, r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <LIS302DL_Write>:
  * @param  WriteAddr : LIS302DL's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void LIS302DL_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	460a      	mov	r2, r1
 8001ac8:	70fa      	strb	r2, [r7, #3]
 8001aca:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8001acc:	883b      	ldrh	r3, [r7, #0]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d903      	bls.n	8001ada <LIS302DL_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ad8:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  LIS302DL_CS_LOW();
 8001ada:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001ade:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001ae2:	f04f 0108 	mov.w	r1, #8
 8001ae6:	f002 f98d 	bl	8003e04 <GPIO_ResetBits>
  
  /* Send the Address of the indexed register */
  LIS302DL_SendByte(WriteAddr);
 8001aea:	78fb      	ldrb	r3, [r7, #3]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f000 f943 	bl	8001d78 <LIS302DL_SendByte>
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8001af2:	e00c      	b.n	8001b0e <LIS302DL_Write+0x52>
  {
    LIS302DL_SendByte(*pBuffer);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 f93d 	bl	8001d78 <LIS302DL_SendByte>
    NumByteToWrite--;
 8001afe:	883b      	ldrh	r3, [r7, #0]
 8001b00:	f103 33ff 	add.w	r3, r3, #4294967295
 8001b04:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f103 0301 	add.w	r3, r3, #1
 8001b0c:	607b      	str	r3, [r7, #4]
  LIS302DL_CS_LOW();
  
  /* Send the Address of the indexed register */
  LIS302DL_SendByte(WriteAddr);
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8001b0e:	883b      	ldrh	r3, [r7, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1ef      	bne.n	8001af4 <LIS302DL_Write+0x38>
    NumByteToWrite--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  LIS302DL_CS_HIGH();
 8001b14:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b18:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001b1c:	f04f 0108 	mov.w	r1, #8
 8001b20:	f002 f962 	bl	8003de8 <GPIO_SetBits>
}
 8001b24:	f107 0708 	add.w	r7, r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <LIS302DL_Read>:
  * @param  ReadAddr : LIS302DL's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the LIS302DL.
  * @retval None
  */
void LIS302DL_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	460a      	mov	r2, r1
 8001b38:	70fa      	strb	r2, [r7, #3]
 8001b3a:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8001b3c:	883b      	ldrh	r3, [r7, #0]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d904      	bls.n	8001b4c <LIS302DL_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001b48:	70fb      	strb	r3, [r7, #3]
 8001b4a:	e003      	b.n	8001b54 <LIS302DL_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b52:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  LIS302DL_CS_LOW();
 8001b54:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b58:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001b5c:	f04f 0108 	mov.w	r1, #8
 8001b60:	f002 f950 	bl	8003e04 <GPIO_ResetBits>
  
  /* Send the Address of the indexed register */
  LIS302DL_SendByte(ReadAddr);
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 f906 	bl	8001d78 <LIS302DL_SendByte>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8001b6c:	e00f      	b.n	8001b8e <LIS302DL_Read+0x62>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to LIS302DL (Slave device) */
    *pBuffer = LIS302DL_SendByte(DUMMY_BYTE);
 8001b6e:	f04f 0000 	mov.w	r0, #0
 8001b72:	f000 f901 	bl	8001d78 <LIS302DL_SendByte>
 8001b76:	4603      	mov	r3, r0
 8001b78:	461a      	mov	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8001b7e:	883b      	ldrh	r3, [r7, #0]
 8001b80:	f103 33ff 	add.w	r3, r3, #4294967295
 8001b84:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f103 0301 	add.w	r3, r3, #1
 8001b8c:	607b      	str	r3, [r7, #4]
  
  /* Send the Address of the indexed register */
  LIS302DL_SendByte(ReadAddr);
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8001b8e:	883b      	ldrh	r3, [r7, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1ec      	bne.n	8001b6e <LIS302DL_Read+0x42>
    NumByteToRead--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  LIS302DL_CS_HIGH();
 8001b94:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b98:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001b9c:	f04f 0108 	mov.w	r1, #8
 8001ba0:	f002 f922 	bl	8003de8 <GPIO_SetBits>
}
 8001ba4:	f107 0708 	add.w	r7, r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <LIS302DL_LowLevel_Init>:
  * @brief  Initializes the low level interface used to drive the LIS302DL
  * @param  None
  * @retval None
  */
static void LIS302DL_LowLevel_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  SPI_InitTypeDef  SPI_InitStructure;

  /* Enable the SPI periph */
  RCC_APB2PeriphClockCmd(LIS302DL_SPI_CLK, ENABLE);
 8001bb2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001bb6:	f04f 0101 	mov.w	r1, #1
 8001bba:	f002 fabf 	bl	800413c <RCC_APB2PeriphClockCmd>

  /* Enable SCK, MOSI and MISO GPIO clocks */
  RCC_AHB1PeriphClockCmd(LIS302DL_SPI_SCK_GPIO_CLK | LIS302DL_SPI_MISO_GPIO_CLK | LIS302DL_SPI_MOSI_GPIO_CLK, ENABLE);
 8001bbe:	f04f 0001 	mov.w	r0, #1
 8001bc2:	f04f 0101 	mov.w	r1, #1
 8001bc6:	f002 fa65 	bl	8004094 <RCC_AHB1PeriphClockCmd>

  /* Enable CS  GPIO clock */
  RCC_AHB1PeriphClockCmd(LIS302DL_SPI_CS_GPIO_CLK, ENABLE);
 8001bca:	f04f 0010 	mov.w	r0, #16
 8001bce:	f04f 0101 	mov.w	r1, #1
 8001bd2:	f002 fa5f 	bl	8004094 <RCC_AHB1PeriphClockCmd>
  
  /* Enable INT1 GPIO clock */
  RCC_AHB1PeriphClockCmd(LIS302DL_SPI_INT1_GPIO_CLK, ENABLE);
 8001bd6:	f04f 0010 	mov.w	r0, #16
 8001bda:	f04f 0101 	mov.w	r1, #1
 8001bde:	f002 fa59 	bl	8004094 <RCC_AHB1PeriphClockCmd>
  
  /* Enable INT2 GPIO clock */
  RCC_AHB1PeriphClockCmd(LIS302DL_SPI_INT2_GPIO_CLK, ENABLE);
 8001be2:	f04f 0010 	mov.w	r0, #16
 8001be6:	f04f 0101 	mov.w	r1, #1
 8001bea:	f002 fa53 	bl	8004094 <RCC_AHB1PeriphClockCmd>

  GPIO_PinAFConfig(LIS302DL_SPI_SCK_GPIO_PORT, LIS302DL_SPI_SCK_SOURCE, LIS302DL_SPI_SCK_AF);
 8001bee:	f04f 0000 	mov.w	r0, #0
 8001bf2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001bf6:	f04f 0105 	mov.w	r1, #5
 8001bfa:	f04f 0205 	mov.w	r2, #5
 8001bfe:	f002 f90f 	bl	8003e20 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(LIS302DL_SPI_MISO_GPIO_PORT, LIS302DL_SPI_MISO_SOURCE, LIS302DL_SPI_MISO_AF);
 8001c02:	f04f 0000 	mov.w	r0, #0
 8001c06:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001c0a:	f04f 0106 	mov.w	r1, #6
 8001c0e:	f04f 0205 	mov.w	r2, #5
 8001c12:	f002 f905 	bl	8003e20 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(LIS302DL_SPI_MOSI_GPIO_PORT, LIS302DL_SPI_MOSI_SOURCE, LIS302DL_SPI_MOSI_AF);
 8001c16:	f04f 0000 	mov.w	r0, #0
 8001c1a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001c1e:	f04f 0107 	mov.w	r1, #7
 8001c22:	f04f 0205 	mov.w	r2, #5
 8001c26:	f002 f8fb 	bl	8003e20 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001c2a:	f04f 0302 	mov.w	r3, #2
 8001c2e:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
 8001c36:	f04f 0302 	mov.w	r3, #2
 8001c3a:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001c3c:	f04f 0302 	mov.w	r3, #2
 8001c40:	777b      	strb	r3, [r7, #29]

  /* SPI SCK pin configuration */
  GPIO_InitStructure.GPIO_Pin = LIS302DL_SPI_SCK_PIN;
 8001c42:	f04f 0320 	mov.w	r3, #32
 8001c46:	61bb      	str	r3, [r7, #24]
  GPIO_Init(LIS302DL_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8001c48:	f04f 0000 	mov.w	r0, #0
 8001c4c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001c50:	f107 0318 	add.w	r3, r7, #24
 8001c54:	4619      	mov	r1, r3
 8001c56:	f002 f825 	bl	8003ca4 <GPIO_Init>

  /* SPI  MOSI pin configuration */
  GPIO_InitStructure.GPIO_Pin =  LIS302DL_SPI_MOSI_PIN;
 8001c5a:	f04f 0380 	mov.w	r3, #128	; 0x80
 8001c5e:	61bb      	str	r3, [r7, #24]
  GPIO_Init(LIS302DL_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 8001c60:	f04f 0000 	mov.w	r0, #0
 8001c64:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001c68:	f107 0318 	add.w	r3, r7, #24
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f002 f819 	bl	8003ca4 <GPIO_Init>

  /* SPI MISO pin configuration */
  GPIO_InitStructure.GPIO_Pin = LIS302DL_SPI_MISO_PIN;
 8001c72:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001c76:	61bb      	str	r3, [r7, #24]
  GPIO_Init(LIS302DL_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 8001c78:	f04f 0000 	mov.w	r0, #0
 8001c7c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001c80:	f107 0318 	add.w	r3, r7, #24
 8001c84:	4619      	mov	r1, r3
 8001c86:	f002 f80d 	bl	8003ca4 <GPIO_Init>

  /* SPI configuration -------------------------------------------------------*/
  SPI_I2S_DeInit(LIS302DL_SPI);
 8001c8a:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8001c8e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001c92:	f002 fad1 	bl	8004238 <SPI_I2S_DeInit>
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	80bb      	strh	r3, [r7, #4]
  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	813b      	strh	r3, [r7, #8]
  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	817b      	strh	r3, [r7, #10]
  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8001ca8:	f04f 0300 	mov.w	r3, #0
 8001cac:	81bb      	strh	r3, [r7, #12]
  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8001cae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cb2:	81fb      	strh	r3, [r7, #14]
  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
 8001cb4:	f04f 0308 	mov.w	r3, #8
 8001cb8:	823b      	strh	r3, [r7, #16]
  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	827b      	strh	r3, [r7, #18]
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 8001cc0:	f04f 0307 	mov.w	r3, #7
 8001cc4:	82bb      	strh	r3, [r7, #20]
  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8001cc6:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001cca:	80fb      	strh	r3, [r7, #6]
  SPI_Init(LIS302DL_SPI, &SPI_InitStructure);
 8001ccc:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8001cd0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001cd4:	f107 0304 	add.w	r3, r7, #4
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f002 faf1 	bl	80042c0 <SPI_Init>

  /* Enable SPI1  */
  SPI_Cmd(LIS302DL_SPI, ENABLE);
 8001cde:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8001ce2:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001ce6:	f04f 0101 	mov.w	r1, #1
 8001cea:	f002 fb2d 	bl	8004348 <SPI_Cmd>

  /* Configure GPIO PIN for Lis Chip select */
  GPIO_InitStructure.GPIO_Pin = LIS302DL_SPI_CS_PIN;
 8001cee:	f04f 0308 	mov.w	r3, #8
 8001cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001cf4:	f04f 0301 	mov.w	r3, #1
 8001cf8:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001cfa:	f04f 0300 	mov.w	r3, #0
 8001cfe:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001d00:	f04f 0302 	mov.w	r3, #2
 8001d04:	777b      	strb	r3, [r7, #29]
  GPIO_Init(LIS302DL_SPI_CS_GPIO_PORT, &GPIO_InitStructure);
 8001d06:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d0a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001d0e:	f107 0318 	add.w	r3, r7, #24
 8001d12:	4619      	mov	r1, r3
 8001d14:	f001 ffc6 	bl	8003ca4 <GPIO_Init>

  /* Deselect : Chip Select high */
  GPIO_SetBits(LIS302DL_SPI_CS_GPIO_PORT, LIS302DL_SPI_CS_PIN);
 8001d18:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d1c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001d20:	f04f 0108 	mov.w	r1, #8
 8001d24:	f002 f860 	bl	8003de8 <GPIO_SetBits>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.GPIO_Pin = LIS302DL_SPI_INT1_PIN;
 8001d28:	f04f 0301 	mov.w	r3, #1
 8001d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8001d2e:	f04f 0300 	mov.w	r3, #0
 8001d32:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001d3a:	f04f 0302 	mov.w	r3, #2
 8001d3e:	777b      	strb	r3, [r7, #29]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	77fb      	strb	r3, [r7, #31]
  GPIO_Init(LIS302DL_SPI_INT1_GPIO_PORT, &GPIO_InitStructure);
 8001d46:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d4a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001d4e:	f107 0318 	add.w	r3, r7, #24
 8001d52:	4619      	mov	r1, r3
 8001d54:	f001 ffa6 	bl	8003ca4 <GPIO_Init>
  
  GPIO_InitStructure.GPIO_Pin = LIS302DL_SPI_INT2_PIN;
 8001d58:	f04f 0302 	mov.w	r3, #2
 8001d5c:	61bb      	str	r3, [r7, #24]
  GPIO_Init(LIS302DL_SPI_INT2_GPIO_PORT, &GPIO_InitStructure);
 8001d5e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d62:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001d66:	f107 0318 	add.w	r3, r7, #24
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f001 ff9a 	bl	8003ca4 <GPIO_Init>
}
 8001d70:	f107 0720 	add.w	r7, r7, #32
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <LIS302DL_SendByte>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval The received byte value
  */
static uint8_t LIS302DL_SendByte(uint8_t byte)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71fb      	strb	r3, [r7, #7]
  /* Loop while DR register in not emplty */
  LIS302DLTimeout = LIS302DL_FLAG_TIMEOUT;
 8001d82:	f240 5340 	movw	r3, #1344	; 0x540
 8001d86:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d8e:	601a      	str	r2, [r3, #0]
  while (SPI_I2S_GetFlagStatus(LIS302DL_SPI, SPI_I2S_FLAG_TXE) == RESET)
 8001d90:	e017      	b.n	8001dc2 <LIS302DL_SendByte+0x4a>
  {
    if((LIS302DLTimeout--) == 0) return LIS302DL_TIMEOUT_UserCallback();
 8001d92:	f240 5340 	movw	r3, #1344	; 0x540
 8001d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	bf14      	ite	ne
 8001da0:	2200      	movne	r2, #0
 8001da2:	2201      	moveq	r2, #1
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	f103 31ff 	add.w	r1, r3, #4294967295
 8001daa:	f240 5340 	movw	r3, #1344	; 0x540
 8001dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001db2:	6019      	str	r1, [r3, #0]
 8001db4:	2a00      	cmp	r2, #0
 8001db6:	d004      	beq.n	8001dc2 <LIS302DL_SendByte+0x4a>
 8001db8:	f000 f960 	bl	800207c <LIS302DL_TIMEOUT_UserCallback>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	e046      	b.n	8001e50 <LIS302DL_SendByte+0xd8>
  */
static uint8_t LIS302DL_SendByte(uint8_t byte)
{
  /* Loop while DR register in not emplty */
  LIS302DLTimeout = LIS302DL_FLAG_TIMEOUT;
  while (SPI_I2S_GetFlagStatus(LIS302DL_SPI, SPI_I2S_FLAG_TXE) == RESET)
 8001dc2:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8001dc6:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001dca:	f04f 0102 	mov.w	r1, #2
 8001dce:	f002 faf7 	bl	80043c0 <SPI_I2S_GetFlagStatus>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0dc      	beq.n	8001d92 <LIS302DL_SendByte+0x1a>
  {
    if((LIS302DLTimeout--) == 0) return LIS302DL_TIMEOUT_UserCallback();
  }
  
  /* Send a Byte through the SPI peripheral */
  SPI_I2S_SendData(LIS302DL_SPI, byte);
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8001de0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001de4:	4619      	mov	r1, r3
 8001de6:	f002 fadd 	bl	80043a4 <SPI_I2S_SendData>
  
  /* Wait to receive a Byte */
  LIS302DLTimeout = LIS302DL_FLAG_TIMEOUT;
 8001dea:	f240 5340 	movw	r3, #1344	; 0x540
 8001dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001df2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001df6:	601a      	str	r2, [r3, #0]
  while (SPI_I2S_GetFlagStatus(LIS302DL_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 8001df8:	e017      	b.n	8001e2a <LIS302DL_SendByte+0xb2>
  {
    if((LIS302DLTimeout--) == 0) return LIS302DL_TIMEOUT_UserCallback();
 8001dfa:	f240 5340 	movw	r3, #1344	; 0x540
 8001dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	bf14      	ite	ne
 8001e08:	2200      	movne	r2, #0
 8001e0a:	2201      	moveq	r2, #1
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	f103 31ff 	add.w	r1, r3, #4294967295
 8001e12:	f240 5340 	movw	r3, #1344	; 0x540
 8001e16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e1a:	6019      	str	r1, [r3, #0]
 8001e1c:	2a00      	cmp	r2, #0
 8001e1e:	d004      	beq.n	8001e2a <LIS302DL_SendByte+0xb2>
 8001e20:	f000 f92c 	bl	800207c <LIS302DL_TIMEOUT_UserCallback>
 8001e24:	4603      	mov	r3, r0
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	e012      	b.n	8001e50 <LIS302DL_SendByte+0xd8>
  /* Send a Byte through the SPI peripheral */
  SPI_I2S_SendData(LIS302DL_SPI, byte);
  
  /* Wait to receive a Byte */
  LIS302DLTimeout = LIS302DL_FLAG_TIMEOUT;
  while (SPI_I2S_GetFlagStatus(LIS302DL_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 8001e2a:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8001e2e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001e32:	f04f 0101 	mov.w	r1, #1
 8001e36:	f002 fac3 	bl	80043c0 <SPI_I2S_GetFlagStatus>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0dc      	beq.n	8001dfa <LIS302DL_SendByte+0x82>
  {
    if((LIS302DLTimeout--) == 0) return LIS302DL_TIMEOUT_UserCallback();
  }
  
  /* Return the Byte read from the SPI bus */
  return (uint8_t)SPI_I2S_ReceiveData(LIS302DL_SPI);
 8001e40:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8001e44:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001e48:	f002 fa9e 	bl	8004388 <SPI_I2S_ReceiveData>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	b2db      	uxtb	r3, r3
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	f107 0708 	add.w	r7, r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop

08001e5c <prvSetupHardware>:
#include "hw_config.h"


/*-----------------------------------------------------------*/
void prvSetupHardware( void )
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
	/* Set the Vector Table base address at 0x08000000 */
	NVIC_SetVectorTable( NVIC_VectTab_FLASH, 0x0 );
 8001e60:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001e64:	f04f 0100 	mov.w	r1, #0
 8001e68:	f001 fe6a 	bl	8003b40 <NVIC_SetVectorTable>
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8001e6c:	f44f 7040 	mov.w	r0, #768	; 0x300
 8001e70:	f001 fde0 	bl	8003a34 <NVIC_PriorityGroupConfig>

	/* Configure LED IOs as output push-pull */
    /* Initialize LEDs on STM32F4_Discovery board */
	prvLED_Config(GPIO);
 8001e74:	f04f 0000 	mov.w	r0, #0
 8001e78:	f000 f80c 	bl	8001e94 <prvLED_Config>
	/* Configure User button pin (PA0) as external interrupt -> modes switching */
	STM_EVAL_PBInit(BUTTON_USER,BUTTON_MODE_EXTI);
 8001e7c:	f04f 0000 	mov.w	r0, #0
 8001e80:	f04f 0101 	mov.w	r1, #1
 8001e84:	f7ff fd52 	bl	800192c <STM_EVAL_PBInit>

	/* Configuration of Timer4 to control LEDs based on MEMS data */
	prvTIM4_Config();
 8001e88:	f000 f8fc 	bl	8002084 <prvTIM4_Config>

	/* Configure LIS302 in order to produce data used for TIM4 reconfiguration and LED control */
	prvMEMS_Config();
 8001e8c:	f000 f864 	bl	8001f58 <prvMEMS_Config>
}
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop

08001e94 <prvLED_Config>:

void prvLED_Config(char state)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  /* GPIOD Periph clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8001e9e:	f04f 0008 	mov.w	r0, #8
 8001ea2:	f04f 0101 	mov.w	r1, #1
 8001ea6:	f002 f8f5 	bl	8004094 <RCC_AHB1PeriphClockCmd>
  /* Configure PD12, PD13, PD14 and PD15 in output push-pull mode */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13| GPIO_Pin_14| GPIO_Pin_15;
 8001eaa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001eae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001eb0:	f04f 0300 	mov.w	r3, #0
 8001eb4:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001eb6:	f04f 0303 	mov.w	r3, #3
 8001eba:	737b      	strb	r3, [r7, #13]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	73fb      	strb	r3, [r7, #15]

  if(state==GPIO)
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10c      	bne.n	8001ee2 <prvLED_Config+0x4e>
  {
	  /* standard output pin */
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001ec8:	f04f 0301 	mov.w	r3, #1
 8001ecc:	733b      	strb	r3, [r7, #12]
	  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001ece:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001ed2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001ed6:	f107 0308 	add.w	r3, r7, #8
 8001eda:	4619      	mov	r1, r3
 8001edc:	f001 fee2 	bl	8003ca4 <GPIO_Init>
 8001ee0:	e036      	b.n	8001f50 <prvLED_Config+0xbc>
  }
  else
  {
	  /*-------------------------- GPIO Configuration ----------------------------*/
	  /* GPIOD Configuration: Pins 12, 13, 14 and 15 in output push-pull - alternative mode */
	  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 8001ee2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001ee6:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001ee8:	f04f 0302 	mov.w	r3, #2
 8001eec:	733b      	strb	r3, [r7, #12]
	  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001eee:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001ef2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001ef6:	f107 0308 	add.w	r3, r7, #8
 8001efa:	4619      	mov	r1, r3
 8001efc:	f001 fed2 	bl	8003ca4 <GPIO_Init>

	  /* Connect TIM4 pins to AF2 */
	  GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_TIM4);
 8001f00:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001f04:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001f08:	f04f 010c 	mov.w	r1, #12
 8001f0c:	f04f 0202 	mov.w	r2, #2
 8001f10:	f001 ff86 	bl	8003e20 <GPIO_PinAFConfig>
	  GPIO_PinAFConfig(GPIOD, GPIO_PinSource13, GPIO_AF_TIM4);
 8001f14:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001f18:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001f1c:	f04f 010d 	mov.w	r1, #13
 8001f20:	f04f 0202 	mov.w	r2, #2
 8001f24:	f001 ff7c 	bl	8003e20 <GPIO_PinAFConfig>
	  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_TIM4);
 8001f28:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001f2c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001f30:	f04f 010e 	mov.w	r1, #14
 8001f34:	f04f 0202 	mov.w	r2, #2
 8001f38:	f001 ff72 	bl	8003e20 <GPIO_PinAFConfig>
	  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_TIM4);
 8001f3c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001f40:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001f44:	f04f 010f 	mov.w	r1, #15
 8001f48:	f04f 0202 	mov.w	r2, #2
 8001f4c:	f001 ff68 	bl	8003e20 <GPIO_PinAFConfig>
  }
}
 8001f50:	f107 0710 	add.w	r7, r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <prvMEMS_Config>:


void prvMEMS_Config(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
	uint8_t ctrl = 0;
 8001f5e:	f04f 0300 	mov.w	r3, #0
 8001f62:	72fb      	strb	r3, [r7, #11]
	uint32_t i=0;		//simple index for software delay
 8001f64:	f04f 0300 	mov.w	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]

	LIS302DL_InitTypeDef  LIS302DL_InitStruct;
	LIS302DL_InterruptConfigTypeDef LIS302DL_InterruptStruct;

	/* Set configuration of LIS302DL*/
	LIS302DL_InitStruct.Power_Mode = LIS302DL_LOWPOWERMODE_ACTIVE;
 8001f6a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001f6e:	713b      	strb	r3, [r7, #4]
	LIS302DL_InitStruct.Output_DataRate = LIS302DL_DATARATE_100;
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	717b      	strb	r3, [r7, #5]
	LIS302DL_InitStruct.Axes_Enable = LIS302DL_X_ENABLE | LIS302DL_Y_ENABLE | LIS302DL_Z_ENABLE;
 8001f76:	f04f 0307 	mov.w	r3, #7
 8001f7a:	71bb      	strb	r3, [r7, #6]
	LIS302DL_InitStruct.Full_Scale = LIS302DL_FULLSCALE_2_3;
 8001f7c:	f04f 0300 	mov.w	r3, #0
 8001f80:	71fb      	strb	r3, [r7, #7]
	LIS302DL_InitStruct.Self_Test = LIS302DL_SELFTEST_NORMAL;
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	723b      	strb	r3, [r7, #8]
	LIS302DL_Init(&LIS302DL_InitStruct);
 8001f88:	f107 0304 	add.w	r3, r7, #4
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fd43 	bl	8001a18 <LIS302DL_Init>

	/* Set configuration of Internal High Pass Filter of LIS302DL*/
	LIS302DL_InterruptStruct.Latch_Request = LIS302DL_INTERRUPTREQUEST_LATCHED;
 8001f92:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001f96:	703b      	strb	r3, [r7, #0]
	LIS302DL_InterruptStruct.SingleClick_Axes = LIS302DL_CLICKINTERRUPT_Z_ENABLE;
 8001f98:	f04f 0310 	mov.w	r3, #16
 8001f9c:	707b      	strb	r3, [r7, #1]
	LIS302DL_InterruptStruct.DoubleClick_Axes = LIS302DL_DOUBLECLICKINTERRUPT_Z_ENABLE;
 8001f9e:	f04f 0320 	mov.w	r3, #32
 8001fa2:	70bb      	strb	r3, [r7, #2]
	LIS302DL_InterruptConfig(&LIS302DL_InterruptStruct);
 8001fa4:	463b      	mov	r3, r7
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff fd60 	bl	8001a6c <LIS302DL_InterruptConfig>

	/* Required delay for the MEMS Accelerometer: Turn-on time = 3/Output data Rate
	                                                            = 3/100 = 30ms */
	for(i=0;i<0x1FFFF;i++);
 8001fac:	f04f 0300 	mov.w	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	e003      	b.n	8001fbc <prvMEMS_Config+0x64>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f103 0301 	add.w	r3, r3, #1
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001fc2:	f2c0 0301 	movt	r3, #1
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d9f4      	bls.n	8001fb4 <prvMEMS_Config+0x5c>

	/* Configure Interrupt control register: enable Click interrupt1 */
	ctrl = 0x07;
 8001fca:	f04f 0307 	mov.w	r3, #7
 8001fce:	72fb      	strb	r3, [r7, #11]
	LIS302DL_Write(&ctrl, LIS302DL_CTRL_REG3_ADDR, 1);
 8001fd0:	f107 030b 	add.w	r3, r7, #11
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f04f 0122 	mov.w	r1, #34	; 0x22
 8001fda:	f04f 0201 	mov.w	r2, #1
 8001fde:	f7ff fd6d 	bl	8001abc <LIS302DL_Write>

	/* Enable Interrupt generation on click/double click on Z axis */
	ctrl = 0x70;
 8001fe2:	f04f 0370 	mov.w	r3, #112	; 0x70
 8001fe6:	72fb      	strb	r3, [r7, #11]
	LIS302DL_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 8001fe8:	f107 030b 	add.w	r3, r7, #11
 8001fec:	4618      	mov	r0, r3
 8001fee:	f04f 0138 	mov.w	r1, #56	; 0x38
 8001ff2:	f04f 0201 	mov.w	r2, #1
 8001ff6:	f7ff fd61 	bl	8001abc <LIS302DL_Write>

	/* Configure Click Threshold on X/Y axis (10 x 0.5g) */
	ctrl = 0xAA;
 8001ffa:	f04f 03aa 	mov.w	r3, #170	; 0xaa
 8001ffe:	72fb      	strb	r3, [r7, #11]
	LIS302DL_Write(&ctrl, LIS302DL_CLICK_THSY_X_REG_ADDR, 1);
 8002000:	f107 030b 	add.w	r3, r7, #11
 8002004:	4618      	mov	r0, r3
 8002006:	f04f 013b 	mov.w	r1, #59	; 0x3b
 800200a:	f04f 0201 	mov.w	r2, #1
 800200e:	f7ff fd55 	bl	8001abc <LIS302DL_Write>

	/* Configure Click Threshold on Z axis (10 x 0.5g) */
	ctrl = 0x0A;
 8002012:	f04f 030a 	mov.w	r3, #10
 8002016:	72fb      	strb	r3, [r7, #11]
	LIS302DL_Write(&ctrl, LIS302DL_CLICK_THSZ_REG_ADDR, 1);
 8002018:	f107 030b 	add.w	r3, r7, #11
 800201c:	4618      	mov	r0, r3
 800201e:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8002022:	f04f 0201 	mov.w	r2, #1
 8002026:	f7ff fd49 	bl	8001abc <LIS302DL_Write>

	/* Configure Time Limit */
	ctrl = 0x03;
 800202a:	f04f 0303 	mov.w	r3, #3
 800202e:	72fb      	strb	r3, [r7, #11]
	LIS302DL_Write(&ctrl, LIS302DL_CLICK_TIMELIMIT_REG_ADDR, 1);
 8002030:	f107 030b 	add.w	r3, r7, #11
 8002034:	4618      	mov	r0, r3
 8002036:	f04f 013d 	mov.w	r1, #61	; 0x3d
 800203a:	f04f 0201 	mov.w	r2, #1
 800203e:	f7ff fd3d 	bl	8001abc <LIS302DL_Write>

	/* Configure Latency */
	ctrl = 0x7F;
 8002042:	f04f 037f 	mov.w	r3, #127	; 0x7f
 8002046:	72fb      	strb	r3, [r7, #11]
	LIS302DL_Write(&ctrl, LIS302DL_CLICK_LATENCY_REG_ADDR, 1);
 8002048:	f107 030b 	add.w	r3, r7, #11
 800204c:	4618      	mov	r0, r3
 800204e:	f04f 013e 	mov.w	r1, #62	; 0x3e
 8002052:	f04f 0201 	mov.w	r2, #1
 8002056:	f7ff fd31 	bl	8001abc <LIS302DL_Write>

	/* Configure Click Window */
	ctrl = 0x7F;
 800205a:	f04f 037f 	mov.w	r3, #127	; 0x7f
 800205e:	72fb      	strb	r3, [r7, #11]
	LIS302DL_Write(&ctrl, LIS302DL_CLICK_WINDOW_REG_ADDR, 1);
 8002060:	f107 030b 	add.w	r3, r7, #11
 8002064:	4618      	mov	r0, r3
 8002066:	f04f 013f 	mov.w	r1, #63	; 0x3f
 800206a:	f04f 0201 	mov.w	r2, #1
 800206e:	f7ff fd25 	bl	8001abc <LIS302DL_Write>
}
 8002072:	f107 0710 	add.w	r7, r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop

0800207c <LIS302DL_TIMEOUT_UserCallback>:
  * @brief  MEMS accelerometer management of the timeout situation.
  * @param  None.
  * @retval None.
  */
uint32_t LIS302DL_TIMEOUT_UserCallback(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* MEMS Accelerometer Timeout error has occured */
  while (1)
  {
  }
 8002080:	e7fe      	b.n	8002080 <LIS302DL_TIMEOUT_UserCallback+0x4>
 8002082:	bf00      	nop

08002084 <prvTIM4_Config>:
}

void prvTIM4_Config(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08a      	sub	sp, #40	; 0x28
 8002088:	af00      	add	r7, sp, #0
  uint16_t PrescalerValue = 0;
 800208a:	f04f 0300 	mov.w	r3, #0
 800208e:	84fb      	strh	r3, [r7, #38]	; 0x26
  TIM_OCInitTypeDef  TIM_OCInitStructure;
  TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;

  /* --------------------------- System Clocks Configuration -----------------*/
  /* TIM4 clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8002090:	f04f 0004 	mov.w	r0, #4
 8002094:	f04f 0101 	mov.w	r1, #1
 8002098:	f002 f826 	bl	80040e8 <RCC_APB1PeriphClockCmd>
     function to update SystemCoreClock variable value. Otherwise, any configuration
     based on this variable will be incorrect.
  ----------------------------------------------------------------------- */

  /* Compute the prescaler value */
  PrescalerValue = (uint16_t) ((SystemCoreClock /2) / 2000) - 1;
 800209c:	f240 5324 	movw	r3, #1316	; 0x524
 80020a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 80020aa:	f2c1 0362 	movt	r3, #4194	; 0x1062
 80020ae:	fba3 1302 	umull	r1, r3, r3, r2
 80020b2:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	f103 33ff 	add.w	r3, r3, #4294967295
 80020bc:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Time base configuration */
  TIM_TimeBaseStructure.TIM_Period = TIM_ARR;
 80020be:	f240 736c 	movw	r3, #1900	; 0x76c
 80020c2:	60bb      	str	r3, [r7, #8]
  TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 80020c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80020c6:	80bb      	strh	r3, [r7, #4]
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	81bb      	strh	r3, [r7, #12]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80020ce:	f04f 0300 	mov.w	r3, #0
 80020d2:	80fb      	strh	r3, [r7, #6]
  TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 80020d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80020d8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80020dc:	f107 0304 	add.w	r3, r7, #4
 80020e0:	4619      	mov	r1, r3
 80020e2:	f002 f9e5 	bl	80044b0 <TIM_TimeBaseInit>

  /* Enable TIM4 Preload register on ARR */
  TIM_ARRPreloadConfig(TIM4, ENABLE);
 80020e6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80020ea:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80020ee:	f04f 0101 	mov.w	r1, #1
 80020f2:	f002 fa65 	bl	80045c0 <TIM_ARRPreloadConfig>

  /* TIM PWM1 Mode configuration: Channel */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80020f6:	f04f 0360 	mov.w	r3, #96	; 0x60
 80020fa:	823b      	strh	r3, [r7, #16]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80020fc:	f04f 0301 	mov.w	r3, #1
 8002100:	827b      	strh	r3, [r7, #18]
  TIM_OCInitStructure.TIM_Pulse = TIM_CCR;
 8002102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002106:	61bb      	str	r3, [r7, #24]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8002108:	f04f 0300 	mov.w	r3, #0
 800210c:	83bb      	strh	r3, [r7, #28]

  /* Output Compare PWM1 Mode configuration: Channel1 */
  TIM_OC1Init(TIM4, &TIM_OCInitStructure);
 800210e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002112:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002116:	f107 0310 	add.w	r3, r7, #16
 800211a:	4619      	mov	r1, r3
 800211c:	f002 fa90 	bl	8004640 <TIM_OC1Init>
  TIM_CCxCmd(TIM4, TIM_Channel_1, DISABLE);
 8002120:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002124:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002128:	f04f 0100 	mov.w	r1, #0
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	f002 fd48 	bl	8004bc4 <TIM_CCxCmd>

  TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
 8002134:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002138:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800213c:	f04f 0108 	mov.w	r1, #8
 8002140:	f002 fcc8 	bl	8004ad4 <TIM_OC1PreloadConfig>

  /* Output Compare PWM1 Mode configuration: Channel2 */
  TIM_OC2Init(TIM4, &TIM_OCInitStructure);
 8002144:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002148:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800214c:	f107 0310 	add.w	r3, r7, #16
 8002150:	4619      	mov	r1, r3
 8002152:	f002 faf3 	bl	800473c <TIM_OC2Init>
  TIM_CCxCmd(TIM4, TIM_Channel_2, DISABLE);
 8002156:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800215a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800215e:	f04f 0104 	mov.w	r1, #4
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	f002 fd2d 	bl	8004bc4 <TIM_CCxCmd>

  TIM_OC2PreloadConfig(TIM4, TIM_OCPreload_Enable);
 800216a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800216e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002172:	f04f 0108 	mov.w	r1, #8
 8002176:	f002 fcc9 	bl	8004b0c <TIM_OC2PreloadConfig>

  /* Output Compare PWM1 Mode configuration: Channel3 */
  TIM_OC3Init(TIM4, &TIM_OCInitStructure);
 800217a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800217e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002182:	f107 0310 	add.w	r3, r7, #16
 8002186:	4619      	mov	r1, r3
 8002188:	f002 fb6c 	bl	8004864 <TIM_OC3Init>
  TIM_CCxCmd(TIM4, TIM_Channel_3, DISABLE);
 800218c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002190:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002194:	f04f 0108 	mov.w	r1, #8
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	f002 fd12 	bl	8004bc4 <TIM_CCxCmd>

  TIM_OC3PreloadConfig(TIM4, TIM_OCPreload_Enable);
 80021a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80021a4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80021a8:	f04f 0108 	mov.w	r1, #8
 80021ac:	f002 fcce 	bl	8004b4c <TIM_OC3PreloadConfig>

  /* Output Compare PWM1 Mode configuration: Channel4 */
  TIM_OC4Init(TIM4, &TIM_OCInitStructure);
 80021b0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80021b4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80021b8:	f107 0310 	add.w	r3, r7, #16
 80021bc:	4619      	mov	r1, r3
 80021be:	f002 fbe1 	bl	8004984 <TIM_OC4Init>
  TIM_CCxCmd(TIM4, TIM_Channel_4, DISABLE);
 80021c2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80021c6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80021ca:	f04f 010c 	mov.w	r1, #12
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	f002 fcf7 	bl	8004bc4 <TIM_CCxCmd>

  TIM_OC4PreloadConfig(TIM4, TIM_OCPreload_Enable);
 80021d6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80021da:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80021de:	f04f 0108 	mov.w	r1, #8
 80021e2:	f002 fccf 	bl	8004b84 <TIM_OC4PreloadConfig>
}
 80021e6:	f107 0728 	add.w	r7, r7, #40	; 0x28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop

080021f0 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	; 0x28
 80021f4:	af02      	add	r7, sp, #8
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	4613      	mov	r3, r2
 80021fe:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8002200:	88fb      	ldrh	r3, [r7, #6]
 8002202:	4618      	mov	r0, r3
 8002204:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002206:	f000 fe53 	bl	8002eb0 <prvAllocateTCBAndStack>
 800220a:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 80a5 	beq.w	800235e <xTaskGenericCreate+0x16e>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002218:	88fb      	ldrh	r3, [r7, #6]
 800221a:	f103 33ff 	add.w	r3, r3, #4294967295
 800221e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002222:	18d3      	adds	r3, r2, r3
 8002224:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f023 0307 	bic.w	r3, r3, #7
 800222c:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 800222e:	88fb      	ldrh	r3, [r7, #6]
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	69b8      	ldr	r0, [r7, #24]
 8002234:	68b9      	ldr	r1, [r7, #8]
 8002236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800223a:	f000 fd11 	bl	8002c60 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800223e:	6978      	ldr	r0, [r7, #20]
 8002240:	68f9      	ldr	r1, [r7, #12]
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	f001 fac2 	bl	80037cc <pxPortInitialiseStack>
 8002248:	4602      	mov	r2, r0
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
 800224e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002250:	2b00      	cmp	r3, #0
 8002252:	d002      	beq.n	800225a <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 8002254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
 800225a:	f001 fb4b 	bl	80038f4 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 800225e:	f240 73ac 	movw	r3, #1964	; 0x7ac
 8002262:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f103 0201 	add.w	r2, r3, #1
 800226c:	f240 73ac 	movw	r3, #1964	; 0x7ac
 8002270:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002274:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 8002276:	f240 63d0 	movw	r3, #1744	; 0x6d0
 800227a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10f      	bne.n	80022a4 <xTaskGenericCreate+0xb4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8002284:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8002288:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 8002290:	f240 73ac 	movw	r3, #1964	; 0x7ac
 8002294:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d118      	bne.n	80022d0 <xTaskGenericCreate+0xe0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 800229e:	f000 fd23 	bl	8002ce8 <prvInitialiseTaskLists>
 80022a2:	e015      	b.n	80022d0 <xTaskGenericCreate+0xe0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 80022a4:	f240 73bc 	movw	r3, #1980	; 0x7bc
 80022a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10e      	bne.n	80022d0 <xTaskGenericCreate+0xe0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 80022b2:	f240 63d0 	movw	r3, #1744	; 0x6d0
 80022b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d805      	bhi.n	80022d0 <xTaskGenericCreate+0xe0>
					{
						pxCurrentTCB = pxNewTCB;
 80022c4:	f240 63d0 	movw	r3, #1744	; 0x6d0
 80022c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022d4:	f240 73b4 	movw	r3, #1972	; 0x7b4
 80022d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d906      	bls.n	80022f0 <xTaskGenericCreate+0x100>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022e6:	f240 73b4 	movw	r3, #1972	; 0x7b4
 80022ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022ee:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
 80022f0:	f240 73d0 	movw	r3, #2000	; 0x7d0
 80022f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f103 0201 	add.w	r2, r3, #1
 80022fe:	f240 73d0 	movw	r3, #2000	; 0x7d0
 8002302:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002306:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800230c:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8002310:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d906      	bls.n	8002328 <xTaskGenericCreate+0x138>
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800231e:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8002322:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800232c:	4613      	mov	r3, r2
 800232e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002332:	189b      	adds	r3, r3, r2
 8002334:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002338:	461a      	mov	r2, r3
 800233a:	f240 63d4 	movw	r3, #1748	; 0x6d4
 800233e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002342:	18d2      	adds	r2, r2, r3
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	f103 0304 	add.w	r3, r3, #4
 800234a:	4610      	mov	r0, r2
 800234c:	4619      	mov	r1, r3
 800234e:	f001 f9b1 	bl	80036b4 <vListInsertEnd>

			xReturn = pdPASS;
 8002352:	f04f 0301 	mov.w	r3, #1
 8002356:	61fb      	str	r3, [r7, #28]
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8002358:	f001 fae2 	bl	8003920 <vPortExitCritical>
 800235c:	e002      	b.n	8002364 <xTaskGenericCreate+0x174>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800235e:	f04f 33ff 	mov.w	r3, #4294967295
 8002362:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d111      	bne.n	800238e <xTaskGenericCreate+0x19e>
	{
		if( xSchedulerRunning != pdFALSE )
 800236a:	f240 73bc 	movw	r3, #1980	; 0x7bc
 800236e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00a      	beq.n	800238e <xTaskGenericCreate+0x19e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8002378:	f240 63d0 	movw	r3, #1744	; 0x6d0
 800237c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002386:	429a      	cmp	r2, r3
 8002388:	d201      	bcs.n	800238e <xTaskGenericCreate+0x19e>
			{
				portYIELD_WITHIN_API();
 800238a:	f001 faa7 	bl	80038dc <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
 800238e:	69fb      	ldr	r3, [r7, #28]
}
 8002390:	4618      	mov	r0, r3
 8002392:	f107 0720 	add.w	r7, r7, #32
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop

0800239c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
 80023a4:	f001 faa6 	bl	80038f4 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
 80023a8:	f240 63d0 	movw	r3, #1744	; 0x6d0
 80023ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d102      	bne.n	80023be <vTaskSuspend+0x22>
			{
				pxTaskToSuspend = NULL;
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d105      	bne.n	80023d0 <vTaskSuspend+0x34>
 80023c4:	f240 63d0 	movw	r3, #1744	; 0x6d0
 80023c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	e000      	b.n	80023d2 <vTaskSuspend+0x36>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f103 0304 	add.w	r3, r3, #4
 80023da:	4618      	mov	r0, r3
 80023dc:	f001 f9cc 	bl	8003778 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <vTaskSuspend+0x58>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f103 0318 	add.w	r3, r3, #24
 80023ee:	4618      	mov	r0, r3
 80023f0:	f001 f9c2 	bl	8003778 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f103 0304 	add.w	r3, r3, #4
 80023fa:	f240 7094 	movw	r0, #1940	; 0x794
 80023fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002402:	4619      	mov	r1, r3
 8002404:	f001 f956 	bl	80036b4 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 8002408:	f001 fa8a 	bl	8003920 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d11f      	bne.n	8002452 <vTaskSuspend+0xb6>
		{
			if( xSchedulerRunning != pdFALSE )
 8002412:	f240 73bc 	movw	r3, #1980	; 0x7bc
 8002416:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d002      	beq.n	8002426 <vTaskSuspend+0x8a>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
 8002420:	f001 fa5c 	bl	80038dc <vPortYieldFromISR>
 8002424:	e015      	b.n	8002452 <vTaskSuspend+0xb6>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8002426:	f240 7394 	movw	r3, #1940	; 0x794
 800242a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	f240 73ac 	movw	r3, #1964	; 0x7ac
 8002434:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d107      	bne.n	800244e <vTaskSuspend+0xb2>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 800243e:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8002442:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	e001      	b.n	8002452 <vTaskSuspend+0xb6>
				}
				else
				{
					vTaskSwitchContext();
 800244e:	f000 fa59 	bl	8002904 <vTaskSwitchContext>
				}
			}
		}
	}
 8002452:	f107 0710 	add.w	r7, r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop

0800245c <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
 8002464:	f04f 0300 	mov.w	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	695a      	ldr	r2, [r3, #20]
 8002472:	f240 7394 	movw	r3, #1940	; 0x794
 8002476:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800247a:	429a      	cmp	r2, r3
 800247c:	d10e      	bne.n	800249c <xTaskIsTaskSuspended+0x40>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002482:	f240 7368 	movw	r3, #1896	; 0x768
 8002486:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800248a:	429a      	cmp	r2, r3
 800248c:	d006      	beq.n	800249c <xTaskIsTaskSuspended+0x40>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002492:	2b00      	cmp	r3, #0
 8002494:	d102      	bne.n	800249c <xTaskIsTaskSuspended+0x40>
				{
					xReturn = pdTRUE;
 8002496:	f04f 0301 	mov.w	r3, #1
 800249a:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
 800249c:	68fb      	ldr	r3, [r7, #12]
	}
 800249e:	4618      	mov	r0, r3
 80024a0:	f107 0714 	add.w	r7, r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop

080024ac <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d048      	beq.n	8002550 <vTaskResume+0xa4>
 80024be:	f240 63d0 	movw	r3, #1744	; 0x6d0
 80024c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d040      	beq.n	8002550 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 80024ce:	f001 fa11 	bl	80038f4 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f7ff ffc2 	bl	800245c <xTaskIsTaskSuspended>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d136      	bne.n	800254c <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f103 0304 	add.w	r3, r3, #4
 80024e4:	4618      	mov	r0, r3
 80024e6:	f001 f947 	bl	8003778 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ee:	f240 73b8 	movw	r3, #1976	; 0x7b8
 80024f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d906      	bls.n	800250a <vTaskResume+0x5e>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002500:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8002504:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800250e:	4613      	mov	r3, r2
 8002510:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002514:	189b      	adds	r3, r3, r2
 8002516:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800251a:	461a      	mov	r2, r3
 800251c:	f240 63d4 	movw	r3, #1748	; 0x6d4
 8002520:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002524:	18d2      	adds	r2, r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f103 0304 	add.w	r3, r3, #4
 800252c:	4610      	mov	r0, r2
 800252e:	4619      	mov	r1, r3
 8002530:	f001 f8c0 	bl	80036b4 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002538:	f240 63d0 	movw	r3, #1744	; 0x6d0
 800253c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	429a      	cmp	r2, r3
 8002546:	d301      	bcc.n	800254c <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
 8002548:	f001 f9c8 	bl	80038dc <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
 800254c:	f001 f9e8 	bl	8003920 <vPortExitCritical>
		}
	}
 8002550:	f107 0710 	add.w	r7, r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af04      	add	r7, sp, #16
	/* Add the idle task at the lowest priority. */
	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
	{
		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
		be returned by the xTaskGetIdleTaskHandle() function. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	f240 73a8 	movw	r3, #1960	; 0x7a8
 8002568:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800256c:	9301      	str	r3, [sp, #4]
 800256e:	f04f 0300 	mov.w	r3, #0
 8002572:	9302      	str	r3, [sp, #8]
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	9303      	str	r3, [sp, #12]
 800257a:	f642 403d 	movw	r0, #11325	; 0x2c3d
 800257e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002582:	f644 4150 	movw	r1, #19536	; 0x4c50
 8002586:	f6c0 0100 	movt	r1, #2048	; 0x800
 800258a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	f7ff fe2d 	bl	80021f0 <xTaskGenericCreate>
 8002596:	6078      	str	r0, [r7, #4]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d115      	bne.n	80025ca <vTaskStartScheduler+0x72>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
 800259e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80025a2:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
 80025a6:	f240 73bc 	movw	r3, #1980	; 0x7bc
 80025aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025ae:	f04f 0201 	mov.w	r2, #1
 80025b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 80025b4:	f240 73b0 	movw	r3, #1968	; 0x7b0
 80025b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80025c2:	f7fe fcd1 	bl	8000f68 <init_us_timer>
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80025c6:	f001 f951 	bl	800386c <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
 80025ca:	f107 0708 	add.w	r7, r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop

080025d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 80025d8:	f240 73c0 	movw	r3, #1984	; 0x7c0
 80025dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f103 0201 	add.w	r2, r3, #1
 80025e6:	f240 73c0 	movw	r3, #1984	; 0x7c0
 80025ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025ee:	601a      	str	r2, [r3, #0]
}
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop

080025f8 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 80025fe:	f04f 0300 	mov.w	r3, #0
 8002602:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002604:	f001 f976 	bl	80038f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002608:	f240 73c0 	movw	r3, #1984	; 0x7c0
 800260c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f103 32ff 	add.w	r2, r3, #4294967295
 8002616:	f240 73c0 	movw	r3, #1984	; 0x7c0
 800261a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800261e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8002620:	f240 73c0 	movw	r3, #1984	; 0x7c0
 8002624:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	f040 8085 	bne.w	800273a <xTaskResumeAll+0x142>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 8002630:	f240 73ac 	movw	r3, #1964	; 0x7ac
 8002634:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d07d      	beq.n	800273a <xTaskResumeAll+0x142>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8002644:	e03c      	b.n	80026c0 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 8002646:	f240 7368 	movw	r3, #1896	; 0x768
 800264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
 8002652:	f104 0318 	add.w	r3, r4, #24
 8002656:	4618      	mov	r0, r3
 8002658:	f001 f88e 	bl	8003778 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
 800265c:	f104 0304 	add.w	r3, r4, #4
 8002660:	4618      	mov	r0, r3
 8002662:	f001 f889 	bl	8003778 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 8002666:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002668:	f240 73b8 	movw	r3, #1976	; 0x7b8
 800266c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d905      	bls.n	8002682 <xTaskResumeAll+0x8a>
 8002676:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002678:	f240 73b8 	movw	r3, #1976	; 0x7b8
 800267c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002684:	4613      	mov	r3, r2
 8002686:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800268a:	189b      	adds	r3, r3, r2
 800268c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002690:	461a      	mov	r2, r3
 8002692:	f240 63d4 	movw	r3, #1748	; 0x6d4
 8002696:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800269a:	18d2      	adds	r2, r2, r3
 800269c:	f104 0304 	add.w	r3, r4, #4
 80026a0:	4610      	mov	r0, r2
 80026a2:	4619      	mov	r1, r3
 80026a4:	f001 f806 	bl	80036b4 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80026aa:	f240 63d0 	movw	r3, #1744	; 0x6d0
 80026ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d302      	bcc.n	80026c0 <xTaskResumeAll+0xc8>
					{
						xYieldRequired = pdTRUE;
 80026ba:	f04f 0301 	mov.w	r3, #1
 80026be:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 80026c0:	f240 7368 	movw	r3, #1896	; 0x768
 80026c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1bb      	bne.n	8002646 <xTaskResumeAll+0x4e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 80026ce:	f240 73c4 	movw	r3, #1988	; 0x7c4
 80026d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d018      	beq.n	800270e <xTaskResumeAll+0x116>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 80026dc:	e00d      	b.n	80026fa <xTaskResumeAll+0x102>
					{
						vTaskIncrementTick();
 80026de:	f000 f835 	bl	800274c <vTaskIncrementTick>
						--uxMissedTicks;
 80026e2:	f240 73c4 	movw	r3, #1988	; 0x7c4
 80026e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f103 32ff 	add.w	r2, r3, #4294967295
 80026f0:	f240 73c4 	movw	r3, #1988	; 0x7c4
 80026f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026f8:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 80026fa:	f240 73c4 	movw	r3, #1988	; 0x7c4
 80026fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1ea      	bne.n	80026de <xTaskResumeAll+0xe6>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
 8002708:	f04f 0301 	mov.w	r3, #1
 800270c:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d006      	beq.n	8002722 <xTaskResumeAll+0x12a>
 8002714:	f240 73c8 	movw	r3, #1992	; 0x7c8
 8002718:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d10b      	bne.n	800273a <xTaskResumeAll+0x142>
				{
					xAlreadyYielded = pdTRUE;
 8002722:	f04f 0301 	mov.w	r3, #1
 8002726:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
 8002728:	f240 73c8 	movw	r3, #1992	; 0x7c8
 800272c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
 8002736:	f001 f8d1 	bl	80038dc <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 800273a:	f001 f8f1 	bl	8003920 <vPortExitCritical>

	return xAlreadyYielded;
 800273e:	687b      	ldr	r3, [r7, #4]
}
 8002740:	4618      	mov	r0, r3
 8002742:	f107 070c 	add.w	r7, r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	bd90      	pop	{r4, r7, pc}
 800274a:	bf00      	nop

0800274c <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8002752:	f240 73c0 	movw	r3, #1984	; 0x7c0
 8002756:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	f040 80c0 	bne.w	80028e2 <vTaskIncrementTick+0x196>
	{
		++xTickCount;
 8002762:	f240 73b0 	movw	r3, #1968	; 0x7b0
 8002766:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f103 0201 	add.w	r2, r3, #1
 8002770:	f240 73b0 	movw	r3, #1968	; 0x7b0
 8002774:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002778:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
 800277a:	f240 73b0 	movw	r3, #1968	; 0x7b0
 800277e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d140      	bne.n	800280a <vTaskIncrementTick+0xbe>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
 8002788:	f240 7360 	movw	r3, #1888	; 0x760
 800278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 8002794:	f240 7364 	movw	r3, #1892	; 0x764
 8002798:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	f240 7360 	movw	r3, #1888	; 0x760
 80027a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027a6:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
 80027a8:	f240 7364 	movw	r3, #1892	; 0x764
 80027ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
 80027b4:	f240 73cc 	movw	r3, #1996	; 0x7cc
 80027b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f103 0201 	add.w	r2, r3, #1
 80027c2:	f240 73cc 	movw	r3, #1996	; 0x7cc
 80027c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027ca:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027cc:	f240 7360 	movw	r3, #1888	; 0x760
 80027d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d107      	bne.n	80027ec <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
 80027dc:	f240 5344 	movw	r3, #1348	; 0x544
 80027e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027e4:	f04f 32ff 	mov.w	r2, #4294967295
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	e00e      	b.n	800280a <vTaskIncrementTick+0xbe>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80027ec:	f240 7360 	movw	r3, #1888	; 0x760
 80027f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	f240 5344 	movw	r3, #1348	; 0x544
 8002804:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002808:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
 800280a:	f240 73b0 	movw	r3, #1968	; 0x7b0
 800280e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	f240 5344 	movw	r3, #1348	; 0x544
 8002818:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d36b      	bcc.n	80028fa <vTaskIncrementTick+0x1ae>
 8002822:	f240 7360 	movw	r3, #1888	; 0x760
 8002826:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d107      	bne.n	8002842 <vTaskIncrementTick+0xf6>
 8002832:	f240 5344 	movw	r3, #1348	; 0x544
 8002836:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800283a:	f04f 32ff 	mov.w	r2, #4294967295
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	e05b      	b.n	80028fa <vTaskIncrementTick+0x1ae>
 8002842:	f240 7360 	movw	r3, #1888	; 0x760
 8002846:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	607b      	str	r3, [r7, #4]
 8002858:	f240 73b0 	movw	r3, #1968	; 0x7b0
 800285c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	429a      	cmp	r2, r3
 8002866:	d206      	bcs.n	8002876 <vTaskIncrementTick+0x12a>
 8002868:	f240 5344 	movw	r3, #1348	; 0x544
 800286c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	e041      	b.n	80028fa <vTaskIncrementTick+0x1ae>
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	f103 0304 	add.w	r3, r3, #4
 800287c:	4618      	mov	r0, r3
 800287e:	f000 ff7b 	bl	8003778 <vListRemove>
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002886:	2b00      	cmp	r3, #0
 8002888:	d005      	beq.n	8002896 <vTaskIncrementTick+0x14a>
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	f103 0318 	add.w	r3, r3, #24
 8002890:	4618      	mov	r0, r3
 8002892:	f000 ff71 	bl	8003778 <vListRemove>
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800289a:	f240 73b8 	movw	r3, #1976	; 0x7b8
 800289e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d906      	bls.n	80028b6 <vTaskIncrementTick+0x16a>
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ac:	f240 73b8 	movw	r3, #1976	; 0x7b8
 80028b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ba:	4613      	mov	r3, r2
 80028bc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80028c0:	189b      	adds	r3, r3, r2
 80028c2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80028c6:	461a      	mov	r2, r3
 80028c8:	f240 63d4 	movw	r3, #1748	; 0x6d4
 80028cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028d0:	18d2      	adds	r2, r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	f103 0304 	add.w	r3, r3, #4
 80028d8:	4610      	mov	r0, r2
 80028da:	4619      	mov	r1, r3
 80028dc:	f000 feea 	bl	80036b4 <vListInsertEnd>
 80028e0:	e79f      	b.n	8002822 <vTaskIncrementTick+0xd6>
	}
	else
	{
		++uxMissedTicks;
 80028e2:	f240 73c4 	movw	r3, #1988	; 0x7c4
 80028e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f103 0201 	add.w	r2, r3, #1
 80028f0:	f240 73c4 	movw	r3, #1988	; 0x7c4
 80028f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028f8:	601a      	str	r2, [r3, #0]
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
 80028fa:	f107 0710 	add.w	r7, r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop

08002904 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 800290a:	f240 73c0 	movw	r3, #1984	; 0x7c0
 800290e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d007      	beq.n	8002928 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 8002918:	f240 73c8 	movw	r3, #1992	; 0x7c8
 800291c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002920:	f04f 0201 	mov.w	r2, #1
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	e071      	b.n	8002a0c <vTaskSwitchContext+0x108>
			unsigned long ulTempCounter;
			
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTempCounter );
				#else
					ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();
 8002928:	f7fe fad8 	bl	8000edc <get_us_time>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4613      	mov	r3, r2
 8002932:	607b      	str	r3, [r7, #4]
				/* Add the amount of time the task has been running to the accumulated
				time so far.  The time the task started running was stored in
				ulTaskSwitchedInTime.  Note that there is no overflow protection here
				so count values are only valid until the timer overflows.  Generally
				this will be about 1 hour assuming a 1uS timer increment. */
				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
 8002934:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8002938:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8002940:	f240 73d4 	movw	r3, #2004	; 0x7d4
 8002944:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	1ac3      	subs	r3, r0, r3
 800294e:	18cb      	adds	r3, r1, r3
 8002950:	64d3      	str	r3, [r2, #76]	; 0x4c
				ulTaskSwitchedInTime = ulTempCounter;
 8002952:	f240 73d4 	movw	r3, #2004	; 0x7d4
 8002956:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 800295e:	e00b      	b.n	8002978 <vTaskSwitchContext+0x74>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 8002960:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8002964:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f103 32ff 	add.w	r2, r3, #4294967295
 800296e:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8002972:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002976:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 8002978:	f240 73b8 	movw	r3, #1976	; 0x7b8
 800297c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	4613      	mov	r3, r2
 8002984:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002988:	189b      	adds	r3, r3, r2
 800298a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800298e:	461a      	mov	r2, r3
 8002990:	f240 63d4 	movw	r3, #1748	; 0x6d4
 8002994:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002998:	18d3      	adds	r3, r2, r3
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0df      	beq.n	8002960 <vTaskSwitchContext+0x5c>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 80029a0:	f240 73b8 	movw	r3, #1976	; 0x7b8
 80029a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	4613      	mov	r3, r2
 80029ac:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80029b0:	189b      	adds	r3, r3, r2
 80029b2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80029b6:	461a      	mov	r2, r3
 80029b8:	f240 63d4 	movw	r3, #1748	; 0x6d4
 80029bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029c0:	18d3      	adds	r3, r2, r3
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	f103 0308 	add.w	r3, r3, #8
 80029d8:	429a      	cmp	r2, r3
 80029da:	d104      	bne.n	80029e6 <vTaskSwitchContext+0xe2>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	f240 63d0 	movw	r3, #1744	; 0x6d0
 80029f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029f4:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
 80029f6:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80029fa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80029fe:	f240 62d0 	movw	r2, #1744	; 0x6d0
 8002a02:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002a06:	6812      	ldr	r2, [r2, #0]
 8002a08:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a0a:	60da      	str	r2, [r3, #12]
		vWriteTraceToBuffer();
	}
}
 8002a0c:	f107 0708 	add.w	r7, r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 8002a1e:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8002a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f103 0318 	add.w	r3, r3, #24
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	4619      	mov	r1, r3
 8002a30:	f000 fe68 	bl	8003704 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8002a34:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8002a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f103 0304 	add.w	r3, r3, #4
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 fe98 	bl	8003778 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4e:	d10e      	bne.n	8002a6e <vTaskPlaceOnEventList+0x5a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8002a50:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8002a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f103 0304 	add.w	r3, r3, #4
 8002a5e:	f240 7094 	movw	r0, #1940	; 0x794
 8002a62:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002a66:	4619      	mov	r1, r3
 8002a68:	f000 fe24 	bl	80036b4 <vListInsertEnd>
 8002a6c:	e00a      	b.n	8002a84 <vTaskPlaceOnEventList+0x70>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 8002a6e:	f240 73b0 	movw	r3, #1968	; 0x7b0
 8002a72:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	18d3      	adds	r3, r2, r3
 8002a7c:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 f9d0 	bl	8002e24 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
 8002a84:	f107 0710 	add.w	r7, r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f103 0318 	add.w	r3, r3, #24
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 fe68 	bl	8003778 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8002aa8:	f240 73c0 	movw	r3, #1984	; 0x7c0
 8002aac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d12b      	bne.n	8002b0e <xTaskRemoveFromEventList+0x82>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f103 0304 	add.w	r3, r3, #4
 8002abc:	4618      	mov	r0, r3
 8002abe:	f000 fe5b 	bl	8003778 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac6:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8002aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d906      	bls.n	8002ae2 <xTaskRemoveFromEventList+0x56>
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad8:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8002adc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002aec:	189b      	adds	r3, r3, r2
 8002aee:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002af2:	461a      	mov	r2, r3
 8002af4:	f240 63d4 	movw	r3, #1748	; 0x6d4
 8002af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002afc:	18d2      	adds	r2, r2, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f103 0304 	add.w	r3, r3, #4
 8002b04:	4610      	mov	r0, r2
 8002b06:	4619      	mov	r1, r3
 8002b08:	f000 fdd4 	bl	80036b4 <vListInsertEnd>
 8002b0c:	e009      	b.n	8002b22 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f103 0318 	add.w	r3, r3, #24
 8002b14:	f240 7068 	movw	r0, #1896	; 0x768
 8002b18:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	f000 fdc9 	bl	80036b4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b26:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8002b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d303      	bcc.n	8002b3e <xTaskRemoveFromEventList+0xb2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8002b36:	f04f 0301 	mov.w	r3, #1
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	e002      	b.n	8002b44 <xTaskRemoveFromEventList+0xb8>
	}
	else
	{
		xReturn = pdFALSE;
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8002b44:	68fb      	ldr	r3, [r7, #12]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	f107 0710 	add.w	r7, r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002b58:	f240 73cc 	movw	r3, #1996	; 0x7cc
 8002b5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002b66:	f240 73b0 	movw	r3, #1968	; 0x7b0
 8002b6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	605a      	str	r2, [r3, #4]
}
 8002b74:	f107 070c 	add.w	r7, r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop

08002b80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8002b8a:	f000 feb3 	bl	80038f4 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b96:	d103      	bne.n	8002ba0 <xTaskCheckForTimeOut+0x20>
			{
				xReturn = pdFALSE;
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	e038      	b.n	8002c12 <xTaskCheckForTimeOut+0x92>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	f240 73cc 	movw	r3, #1996	; 0x7cc
 8002ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d00c      	beq.n	8002bcc <xTaskCheckForTimeOut+0x4c>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	f240 73b0 	movw	r3, #1968	; 0x7b0
 8002bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d803      	bhi.n	8002bcc <xTaskCheckForTimeOut+0x4c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8002bc4:	f04f 0301 	mov.w	r3, #1
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	e022      	b.n	8002c12 <xTaskCheckForTimeOut+0x92>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
 8002bcc:	f240 73b0 	movw	r3, #1968	; 0x7b0
 8002bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	1ad2      	subs	r2, r2, r3
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d213      	bcs.n	8002c0c <xTaskCheckForTimeOut+0x8c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6859      	ldr	r1, [r3, #4]
 8002bec:	f240 73b0 	movw	r3, #1968	; 0x7b0
 8002bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	1acb      	subs	r3, r1, r3
 8002bf8:	18d2      	adds	r2, r2, r3
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7ff ffa6 	bl	8002b50 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	e002      	b.n	8002c12 <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
 8002c0c:	f04f 0301 	mov.w	r3, #1
 8002c10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c12:	f000 fe85 	bl	8003920 <vPortExitCritical>

	return xReturn;
 8002c16:	68fb      	ldr	r3, [r7, #12]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f107 0710 	add.w	r7, r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop

08002c24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
 8002c28:	f240 73c8 	movw	r3, #1992	; 0x7c8
 8002c2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c30:	f04f 0201 	mov.w	r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
}
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	e000      	b.n	8002c48 <prvIdleTask+0xc>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
 8002c46:	bf00      	nop
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8002c48:	f000 f8a0 	bl	8002d8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8002c4c:	f240 63d4 	movw	r3, #1748	; 0x6d4
 8002c50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d9f5      	bls.n	8002c46 <prvIdleTask+0xa>
			{
				taskYIELD();
 8002c5a:	f000 fe3f 	bl	80038dc <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
 8002c5e:	e7f2      	b.n	8002c46 <prvIdleTask+0xa>

08002c60 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8002c74:	4618      	mov	r0, r3
 8002c76:	68b9      	ldr	r1, [r7, #8]
 8002c78:	f04f 0210 	mov.w	r2, #16
 8002c7c:	f7fd fe6e 	bl	800095c <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d902      	bls.n	8002c96 <prvInitialiseTCBVariables+0x36>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 8002c90:	f04f 0304 	mov.w	r3, #4
 8002c94:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f103 0304 	add.w	r3, r3, #4
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 fcf5 	bl	8003698 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f103 0318 	add.w	r3, r3, #24
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 fcef 	bl	8003698 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f1c3 0205 	rsb	r2, r3, #5
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxTCB->pxTaskTag = NULL;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxTCB->ulRunTimeCounter = 0UL;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	64da      	str	r2, [r3, #76]	; 0x4c
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
 8002ce0:	f107 0710 	add.w	r7, r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 8002cee:	f04f 0300 	mov.w	r3, #0
 8002cf2:	607b      	str	r3, [r7, #4]
 8002cf4:	e013      	b.n	8002d1e <prvInitialiseTaskLists+0x36>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002cfe:	189b      	adds	r3, r3, r2
 8002d00:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002d04:	461a      	mov	r2, r3
 8002d06:	f240 63d4 	movw	r3, #1748	; 0x6d4
 8002d0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d0e:	18d3      	adds	r3, r2, r3
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 fca1 	bl	8003658 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f103 0301 	add.w	r3, r3, #1
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d9e8      	bls.n	8002cf6 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 8002d24:	f240 7038 	movw	r0, #1848	; 0x738
 8002d28:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002d2c:	f000 fc94 	bl	8003658 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 8002d30:	f240 704c 	movw	r0, #1868	; 0x74c
 8002d34:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002d38:	f000 fc8e 	bl	8003658 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
 8002d3c:	f240 7068 	movw	r0, #1896	; 0x768
 8002d40:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002d44:	f000 fc88 	bl	8003658 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 8002d48:	f240 707c 	movw	r0, #1916	; 0x77c
 8002d4c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002d50:	f000 fc82 	bl	8003658 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
 8002d54:	f240 7094 	movw	r0, #1940	; 0x794
 8002d58:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002d5c:	f000 fc7c 	bl	8003658 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002d60:	f240 7360 	movw	r3, #1888	; 0x760
 8002d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d68:	f240 7238 	movw	r2, #1848	; 0x738
 8002d6c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002d70:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002d72:	f240 7364 	movw	r3, #1892	; 0x764
 8002d76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d7a:	f240 724c 	movw	r2, #1868	; 0x74c
 8002d7e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002d82:	601a      	str	r2, [r3, #0]
}
 8002d84:	f107 0708 	add.w	r7, r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8002d92:	f240 7390 	movw	r3, #1936	; 0x790
 8002d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d03c      	beq.n	8002e1a <prvCheckTasksWaitingTermination+0x8e>
		{
			vTaskSuspendAll();
 8002da0:	f7ff fc18 	bl	80025d4 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002da4:	f240 737c 	movw	r3, #1916	; 0x77c
 8002da8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	bf14      	ite	ne
 8002db2:	2300      	movne	r3, #0
 8002db4:	2301      	moveq	r3, #1
 8002db6:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
 8002db8:	f7ff fc1e 	bl	80025f8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d12b      	bne.n	8002e1a <prvCheckTasksWaitingTermination+0x8e>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 8002dc2:	f000 fd97 	bl	80038f4 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 8002dc6:	f240 737c 	movw	r3, #1916	; 0x77c
 8002dca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	f103 0304 	add.w	r3, r3, #4
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 fccc 	bl	8003778 <vListRemove>
					--uxCurrentNumberOfTasks;
 8002de0:	f240 73ac 	movw	r3, #1964	; 0x7ac
 8002de4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f103 32ff 	add.w	r2, r3, #4294967295
 8002dee:	f240 73ac 	movw	r3, #1964	; 0x7ac
 8002df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002df6:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 8002df8:	f240 7390 	movw	r3, #1936	; 0x790
 8002dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f103 32ff 	add.w	r2, r3, #4294967295
 8002e06:	f240 7390 	movw	r3, #1936	; 0x790
 8002e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e0e:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 8002e10:	f000 fd86 	bl	8003920 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8002e14:	6838      	ldr	r0, [r7, #0]
 8002e16:	f000 f885 	bl	8002f24 <prvDeleteTCB>
			}
		}
	}
	#endif
}
 8002e1a:	f107 0708 	add.w	r7, r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop

08002e24 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8002e2c:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8002e30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8002e3a:	f240 73b0 	movw	r3, #1968	; 0x7b0
 8002e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d210      	bcs.n	8002e6c <prvAddCurrentTaskToDelayedList+0x48>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8002e4a:	f240 7364 	movw	r3, #1892	; 0x764
 8002e4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8002e58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f103 0304 	add.w	r3, r3, #4
 8002e62:	4610      	mov	r0, r2
 8002e64:	4619      	mov	r1, r3
 8002e66:	f000 fc4d 	bl	8003704 <vListInsert>
 8002e6a:	e01d      	b.n	8002ea8 <prvAddCurrentTaskToDelayedList+0x84>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8002e6c:	f240 7360 	movw	r3, #1888	; 0x760
 8002e70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8002e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f103 0304 	add.w	r3, r3, #4
 8002e84:	4610      	mov	r0, r2
 8002e86:	4619      	mov	r1, r3
 8002e88:	f000 fc3c 	bl	8003704 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8002e8c:	f240 5344 	movw	r3, #1348	; 0x544
 8002e90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d205      	bcs.n	8002ea8 <prvAddCurrentTaskToDelayedList+0x84>
		{
			xNextTaskUnblockTime = xTimeToWake;
 8002e9c:	f240 5344 	movw	r3, #1348	; 0x544
 8002ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002ea8:	f107 0708 	add.w	r7, r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	6039      	str	r1, [r7, #0]
 8002eba:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 8002ebc:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002ec0:	f7fd f9be 	bl	8000240 <malloc>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	60fb      	str	r3, [r7, #12]

	if( pxNewTCB != NULL )
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d023      	beq.n	8002f16 <prvAllocateTCBAndStack+0x66>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d107      	bne.n	8002ee4 <prvAllocateTCBAndStack+0x34>
 8002ed4:	88fb      	ldrh	r3, [r7, #6]
 8002ed6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fd f9b0 	bl	8000240 <malloc>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	e000      	b.n	8002ee6 <prvAllocateTCBAndStack+0x36>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d106      	bne.n	8002f00 <prvAllocateTCBAndStack+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f7fd f9ac 	bl	8000250 <free>
			pxNewTCB = NULL;
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	e00a      	b.n	8002f16 <prvAllocateTCBAndStack+0x66>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f04:	88fb      	ldrh	r3, [r7, #6]
 8002f06:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	f04f 01a5 	mov.w	r1, #165	; 0xa5
 8002f10:	461a      	mov	r2, r3
 8002f12:	f7fd fcdd 	bl	80008d0 <memset>
		}
	}

	return pxNewTCB;
 8002f16:	68fb      	ldr	r3, [r7, #12]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f107 0710 	add.w	r7, r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop

08002f24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fd f98d 	bl	8000250 <free>
		vPortFree( pxTCB );
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fd f98a 	bl	8000250 <free>
	}
 8002f3c:	f107 0708 	add.w	r7, r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8002f4a:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8002f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	607b      	str	r3, [r7, #4]

		return xReturn;
 8002f56:	687b      	ldr	r3, [r7, #4]
	}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f107 070c 	add.w	r7, r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr

08002f64 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f74:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8002f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d257      	bcs.n	8003034 <vTaskPriorityInherit+0xd0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
 8002f84:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8002f88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	f1c3 0205 	rsb	r2, r3, #5
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6959      	ldr	r1, [r3, #20]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002fa6:	189b      	adds	r3, r3, r2
 8002fa8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002fac:	461a      	mov	r2, r3
 8002fae:	f240 63d4 	movw	r3, #1748	; 0x6d4
 8002fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fb6:	18d3      	adds	r3, r2, r3
 8002fb8:	4299      	cmp	r1, r3
 8002fba:	d133      	bne.n	8003024 <vTaskPriorityInherit+0xc0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f103 0304 	add.w	r3, r3, #4
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 fbd8 	bl	8003778 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002fc8:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8002fcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fdc:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8002fe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d906      	bls.n	8002ff8 <vTaskPriorityInherit+0x94>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fee:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8002ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003002:	189b      	adds	r3, r3, r2
 8003004:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003008:	461a      	mov	r2, r3
 800300a:	f240 63d4 	movw	r3, #1748	; 0x6d4
 800300e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003012:	18d2      	adds	r2, r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f103 0304 	add.w	r3, r3, #4
 800301a:	4610      	mov	r0, r2
 800301c:	4619      	mov	r1, r3
 800301e:	f000 fb49 	bl	80036b4 <vListInsertEnd>
 8003022:	e007      	b.n	8003034 <vTaskPriorityInherit+0xd0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003024:	f240 63d0 	movw	r3, #1744	; 0x6d0
 8003028:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}
 8003034:	f107 0710 	add.w	r7, r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d03a      	beq.n	80030c4 <vTaskPriorityDisinherit+0x88>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003056:	429a      	cmp	r2, r3
 8003058:	d034      	beq.n	80030c4 <vTaskPriorityDisinherit+0x88>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f103 0304 	add.w	r3, r3, #4
 8003060:	4618      	mov	r0, r3
 8003062:	f000 fb89 	bl	8003778 <vListRemove>

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003072:	f1c3 0205 	rsb	r2, r3, #5
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307e:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8003082:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d906      	bls.n	800309a <vTaskPriorityDisinherit+0x5e>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003090:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8003094:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800309e:	4613      	mov	r3, r2
 80030a0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80030a4:	189b      	adds	r3, r3, r2
 80030a6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80030aa:	461a      	mov	r2, r3
 80030ac:	f240 63d4 	movw	r3, #1748	; 0x6d4
 80030b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030b4:	18d2      	adds	r2, r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f103 0304 	add.w	r3, r3, #4
 80030bc:	4610      	mov	r0, r2
 80030be:	4619      	mov	r1, r3
 80030c0:	f000 faf8 	bl	80036b4 <vListInsertEnd>
			}
		}
	}
 80030c4:	f107 0710 	add.w	r7, r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	617b      	str	r3, [r7, #20]

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d056      	beq.n	8003190 <xQueueCreate+0xc4>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 80030e2:	f04f 004c 	mov.w	r0, #76	; 0x4c
 80030e6:	f7fd f8ab 	bl	8000240 <malloc>
 80030ea:	4603      	mov	r3, r0
 80030ec:	613b      	str	r3, [r7, #16]
		if( pxNewQueue != NULL )
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d04d      	beq.n	8003190 <xQueueCreate+0xc4>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	fb02 f303 	mul.w	r3, r2, r3
 80030fc:	f103 0301 	add.w	r3, r3, #1
 8003100:	60fb      	str	r3, [r7, #12]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f7fd f89c 	bl	8000240 <malloc>
 8003108:	4603      	mov	r3, r0
 800310a:	461a      	mov	r2, r3
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d038      	beq.n	800318a <xQueueCreate+0xbe>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6839      	ldr	r1, [r7, #0]
 8003120:	fb01 f303 	mul.w	r3, r1, r3
 8003124:	18d2      	adds	r2, r2, r3
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	605a      	str	r2, [r3, #4]
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	639a      	str	r2, [r3, #56]	; 0x38
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	609a      	str	r2, [r3, #8]
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f103 33ff 	add.w	r3, r3, #4294967295
 8003144:	6839      	ldr	r1, [r7, #0]
 8003146:	fb01 f303 	mul.w	r3, r1, r3
 800314a:	18d2      	adds	r2, r2, r3
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	60da      	str	r2, [r3, #12]
				pxNewQueue->uxLength = uxQueueLength;
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
				pxNewQueue->xRxLock = queueUNLOCKED;
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	f04f 32ff 	mov.w	r2, #4294967295
 8003162:	645a      	str	r2, [r3, #68]	; 0x44
				pxNewQueue->xTxLock = queueUNLOCKED;
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	f04f 32ff 	mov.w	r2, #4294967295
 800316a:	649a      	str	r2, [r3, #72]	; 0x48

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	f103 0310 	add.w	r3, r3, #16
 8003172:	4618      	mov	r0, r3
 8003174:	f000 fa70 	bl	8003658 <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800317e:	4618      	mov	r0, r3
 8003180:	f000 fa6a 	bl	8003658 <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	e002      	b.n	8003190 <xQueueCreate+0xc4>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
 800318a:	6938      	ldr	r0, [r7, #16]
 800318c:	f7fd f860 	bl	8000250 <free>
		}
	}

	configASSERT( xReturn );

	return xReturn;
 8003190:	697b      	ldr	r3, [r7, #20]
}
 8003192:	4618      	mov	r0, r3
 8003194:	f107 0718 	add.w	r7, r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
 80031a8:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	61fb      	str	r3, [r7, #28]
 80031b0:	e000      	b.n	80031b4 <xQueueGenericSend+0x18>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 80031b2:	bf00      	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031b4:	f000 fb9e 	bl	80038f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d218      	bcs.n	80031f6 <xQueueGenericSend+0x5a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	68b9      	ldr	r1, [r7, #8]
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	f000 f93b 	bl	8003444 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00a      	beq.n	80031ec <xQueueGenericSend+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fc55 	bl	8002a8c <xTaskRemoveFromEventList>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <xQueueGenericSend+0x50>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
 80031e8:	f000 fb78 	bl	80038dc <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
 80031ec:	f000 fb98 	bl	8003920 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 80031f0:	f04f 0301 	mov.w	r3, #1
 80031f4:	e05d      	b.n	80032b2 <xQueueGenericSend+0x116>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d104      	bne.n	8003206 <xQueueGenericSend+0x6a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80031fc:	f000 fb90 	bl	8003920 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003200:	f04f 0300 	mov.w	r3, #0
 8003204:	e055      	b.n	80032b2 <xQueueGenericSend+0x116>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d107      	bne.n	800321c <xQueueGenericSend+0x80>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800320c:	f107 0314 	add.w	r3, r7, #20
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff fc9d 	bl	8002b50 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003216:	f04f 0301 	mov.w	r3, #1
 800321a:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 800321c:	f000 fb80 	bl	8003920 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003220:	f7ff f9d8 	bl	80025d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003224:	f000 fb66 	bl	80038f4 <vPortEnterCritical>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003230:	d103      	bne.n	800323a <xQueueGenericSend+0x9e>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	645a      	str	r2, [r3, #68]	; 0x44
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800323e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003242:	d103      	bne.n	800324c <xQueueGenericSend+0xb0>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f04f 0200 	mov.w	r2, #0
 800324a:	649a      	str	r2, [r3, #72]	; 0x48
 800324c:	f000 fb68 	bl	8003920 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003250:	f107 0314 	add.w	r3, r7, #20
 8003254:	4618      	mov	r0, r3
 8003256:	f107 0304 	add.w	r3, r7, #4
 800325a:	4619      	mov	r1, r3
 800325c:	f7ff fc90 	bl	8002b80 <xTaskCheckForTimeOut>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d11e      	bne.n	80032a4 <xQueueGenericSend+0x108>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 f9de 	bl	8003628 <prvIsQueueFull>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d012      	beq.n	8003298 <xQueueGenericSend+0xfc>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f103 0210 	add.w	r2, r3, #16
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4610      	mov	r0, r2
 800327c:	4619      	mov	r1, r3
 800327e:	f7ff fbc9 	bl	8002a14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 f96a 	bl	800355c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003288:	f7ff f9b6 	bl	80025f8 <xTaskResumeAll>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d18f      	bne.n	80031b2 <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 8003292:	f000 fb23 	bl	80038dc <vPortYieldFromISR>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 8003296:	e78c      	b.n	80031b2 <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 f95f 	bl	800355c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800329e:	f7ff f9ab 	bl	80025f8 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 80032a2:	e786      	b.n	80031b2 <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 f959 	bl	800355c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032aa:	f7ff f9a5 	bl	80025f8 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80032ae:	f04f 0300 	mov.w	r3, #0
		}
	}
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	f107 0720 	add.w	r7, r7, #32
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
 80032c8:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 80032ca:	f04f 0300 	mov.w	r3, #0
 80032ce:	61fb      	str	r3, [r7, #28]
 80032d0:	e000      	b.n	80032d4 <xQueueGenericReceive+0x18>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 80032d2:	bf00      	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80032d4:	f000 fb0e 	bl	80038f4 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d03f      	beq.n	8003360 <xQueueGenericReceive+0xa4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	68b9      	ldr	r1, [r7, #8]
 80032ea:	f000 f90f 	bl	800350c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d11e      	bne.n	8003332 <xQueueGenericReceive+0x76>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f8:	f103 32ff 	add.w	r2, r3, #4294967295
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d104      	bne.n	8003312 <xQueueGenericReceive+0x56>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 8003308:	f7ff fe1c 	bl	8002f44 <xTaskGetCurrentTaskHandle>
 800330c:	4602      	mov	r2, r0
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d01d      	beq.n	8003356 <xQueueGenericReceive+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f103 0310 	add.w	r3, r3, #16
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fbb3 	bl	8002a8c <xTaskRemoveFromEventList>
 8003326:	4603      	mov	r3, r0
 8003328:	2b01      	cmp	r3, #1
 800332a:	d114      	bne.n	8003356 <xQueueGenericReceive+0x9a>
						{
							portYIELD_WITHIN_API();
 800332c:	f000 fad6 	bl	80038dc <vPortYieldFromISR>
 8003330:	e011      	b.n	8003356 <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <xQueueGenericReceive+0x9a>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff fba0 	bl	8002a8c <xTaskRemoveFromEventList>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <xQueueGenericReceive+0x9a>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 8003352:	f000 fac3 	bl	80038dc <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
 8003356:	f000 fae3 	bl	8003920 <vPortExitCritical>
				return pdPASS;
 800335a:	f04f 0301 	mov.w	r3, #1
 800335e:	e06b      	b.n	8003438 <xQueueGenericReceive+0x17c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d104      	bne.n	8003370 <xQueueGenericReceive+0xb4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003366:	f000 fadb 	bl	8003920 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	e063      	b.n	8003438 <xQueueGenericReceive+0x17c>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d107      	bne.n	8003386 <xQueueGenericReceive+0xca>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8003376:	f107 0310 	add.w	r3, r7, #16
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff fbe8 	bl	8002b50 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003380:	f04f 0301 	mov.w	r3, #1
 8003384:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 8003386:	f000 facb 	bl	8003920 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800338a:	f7ff f923 	bl	80025d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800338e:	f000 fab1 	bl	80038f4 <vPortEnterCritical>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339a:	d103      	bne.n	80033a4 <xQueueGenericReceive+0xe8>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	645a      	str	r2, [r3, #68]	; 0x44
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ac:	d103      	bne.n	80033b6 <xQueueGenericReceive+0xfa>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	649a      	str	r2, [r3, #72]	; 0x48
 80033b6:	f000 fab3 	bl	8003920 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033ba:	f107 0310 	add.w	r3, r7, #16
 80033be:	4618      	mov	r0, r3
 80033c0:	f107 0304 	add.w	r3, r7, #4
 80033c4:	4619      	mov	r1, r3
 80033c6:	f7ff fbdb 	bl	8002b80 <xTaskCheckForTimeOut>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d12c      	bne.n	800342a <xQueueGenericReceive+0x16e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 f913 	bl	80035fc <prvIsQueueEmpty>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d020      	beq.n	800341e <xQueueGenericReceive+0x162>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d108      	bne.n	80033f6 <xQueueGenericReceive+0x13a>
					{
						portENTER_CRITICAL();
 80033e4:	f000 fa86 	bl	80038f4 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff fdb9 	bl	8002f64 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 80033f2:	f000 fa95 	bl	8003920 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4610      	mov	r0, r2
 8003400:	4619      	mov	r1, r3
 8003402:	f7ff fb07 	bl	8002a14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 f8a8 	bl	800355c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800340c:	f7ff f8f4 	bl	80025f8 <xTaskResumeAll>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	f47f af5d 	bne.w	80032d2 <xQueueGenericReceive+0x16>
				{
					portYIELD_WITHIN_API();
 8003418:	f000 fa60 	bl	80038dc <vPortYieldFromISR>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 800341c:	e759      	b.n	80032d2 <xQueueGenericReceive+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 f89c 	bl	800355c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003424:	f7ff f8e8 	bl	80025f8 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8003428:	e753      	b.n	80032d2 <xQueueGenericReceive+0x16>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f000 f896 	bl	800355c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003430:	f7ff f8e2 	bl	80025f8 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8003434:	f04f 0300 	mov.w	r3, #0
		}
	}
}
 8003438:	4618      	mov	r0, r3
 800343a:	f107 0720 	add.w	r7, r7, #32
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop

08003444 <prvCopyDataToQueue>:
	vPortFree( pxQueue );
}
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10d      	bne.n	8003474 <prvCopyDataToQueue+0x30>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d14a      	bne.n	80034f6 <prvCopyDataToQueue+0xb2>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff fde9 	bl	800303c <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	605a      	str	r2, [r3, #4]
 8003472:	e040      	b.n	80034f6 <prvCopyDataToQueue+0xb2>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d11b      	bne.n	80034b2 <prvCopyDataToQueue+0x6e>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6899      	ldr	r1, [r3, #8]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	4608      	mov	r0, r1
 8003486:	4611      	mov	r1, r2
 8003488:	461a      	mov	r2, r3
 800348a:	f7fd f9a9 	bl	80007e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	18d2      	adds	r2, r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d326      	bcc.n	80034f6 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	609a      	str	r2, [r3, #8]
 80034b0:	e021      	b.n	80034f6 <prvCopyDataToQueue+0xb2>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	68d9      	ldr	r1, [r3, #12]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	4608      	mov	r0, r1
 80034be:	4611      	mov	r1, r2
 80034c0:	461a      	mov	r2, r3
 80034c2:	f7fd f98d 	bl	80007e0 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f1c3 0300 	rsb	r3, r3, #0
 80034d2:	18d2      	adds	r2, r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d208      	bcs.n	80034f6 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	f1c3 0300 	rsb	r3, r3, #0
 80034f0:	18d2      	adds	r2, r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fa:	f103 0201 	add.w	r2, r3, #1
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003502:	f107 0710 	add.w	r7, r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop

0800350c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d01a      	beq.n	8003554 <prvCopyDataFromQueue+0x48>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	18d2      	adds	r2, r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	429a      	cmp	r2, r3
 8003536:	d303      	bcc.n	8003540 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	6839      	ldr	r1, [r7, #0]
 800354a:	4608      	mov	r0, r1
 800354c:	4611      	mov	r1, r2
 800354e:	461a      	mov	r2, r3
 8003550:	f7fd f946 	bl	80007e0 <memcpy>
	}
}
 8003554:	f107 0708 	add.w	r7, r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003564:	f000 f9c6 	bl	80038f4 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8003568:	e014      	b.n	8003594 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	2b00      	cmp	r3, #0
 8003570:	d015      	beq.n	800359e <prvUnlockQueue+0x42>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff fa87 	bl	8002a8c <xTaskRemoveFromEventList>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <prvUnlockQueue+0x2c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
 8003584:	f7ff fb4e 	bl	8002c24 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800358c:	f103 32ff 	add.w	r2, r3, #4294967295
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003598:	2b00      	cmp	r3, #0
 800359a:	dce6      	bgt.n	800356a <prvUnlockQueue+0xe>
 800359c:	e000      	b.n	80035a0 <prvUnlockQueue+0x44>

				--( pxQueue->xTxLock );
			}
			else
			{
				break;
 800359e:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f04f 32ff 	mov.w	r2, #4294967295
 80035a6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 80035a8:	f000 f9ba 	bl	8003920 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80035ac:	f000 f9a2 	bl	80038f4 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80035b0:	e014      	b.n	80035dc <prvUnlockQueue+0x80>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d015      	beq.n	80035e6 <prvUnlockQueue+0x8a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f103 0310 	add.w	r3, r3, #16
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff fa63 	bl	8002a8c <xTaskRemoveFromEventList>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <prvUnlockQueue+0x74>
				{
					vTaskMissedYield();
 80035cc:	f7ff fb2a 	bl	8002c24 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d4:	f103 32ff 	add.w	r2, r3, #4294967295
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	645a      	str	r2, [r3, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	dce6      	bgt.n	80035b2 <prvUnlockQueue+0x56>
 80035e4:	e000      	b.n	80035e8 <prvUnlockQueue+0x8c>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
 80035e6:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f04f 32ff 	mov.w	r2, #4294967295
 80035ee:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80035f0:	f000 f996 	bl	8003920 <vPortExitCritical>
}
 80035f4:	f107 0708 	add.w	r7, r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8003604:	f000 f976 	bl	80038f4 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360c:	2b00      	cmp	r3, #0
 800360e:	bf14      	ite	ne
 8003610:	2300      	movne	r3, #0
 8003612:	2301      	moveq	r3, #1
 8003614:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 8003616:	f000 f983 	bl	8003920 <vPortExitCritical>

	return xReturn;
 800361a:	68fb      	ldr	r3, [r7, #12]
}
 800361c:	4618      	mov	r0, r3
 800361e:	f107 0710 	add.w	r7, r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop

08003628 <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8003630:	f000 f960 	bl	80038f4 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363c:	429a      	cmp	r2, r3
 800363e:	bf14      	ite	ne
 8003640:	2300      	movne	r3, #0
 8003642:	2301      	moveq	r3, #1
 8003644:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 8003646:	f000 f96b 	bl	8003920 <vPortExitCritical>

	return xReturn;
 800364a:	68fb      	ldr	r3, [r7, #12]
}
 800364c:	4618      	mov	r0, r3
 800364e:	f107 0710 	add.w	r7, r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop

08003658 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f103 0208 	add.w	r2, r3, #8
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f04f 32ff 	mov.w	r2, #4294967295
 8003670:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f103 0208 	add.w	r2, r3, #8
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f103 0208 	add.w	r2, r3, #8
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
}
 800368e:	f107 070c 	add.w	r7, r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	bc80      	pop	{r7}
 8003696:	4770      	bx	lr

08003698 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f04f 0200 	mov.w	r2, #0
 80036a6:	611a      	str	r2, [r3, #16]
}
 80036a8:	f107 070c 	add.w	r7, r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop

080036b4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f103 0201 	add.w	r2, r3, #1
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	601a      	str	r2, [r3, #0]
}
 80036fa:	f107 0714 	add.w	r7, r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr

08003704 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371a:	d103      	bne.n	8003724 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	e00d      	b.n	8003740 <vListInsert+0x3c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f103 0308 	add.w	r3, r3, #8
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	e002      	b.n	8003734 <vListInsert+0x30>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	429a      	cmp	r2, r3
 800373e:	d9f6      	bls.n	800372e <vListInsert+0x2a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f103 0201 	add.w	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	601a      	str	r2, [r3, #0]
}
 800376e:	f107 0714 	add.w	r7, r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr

08003778 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6892      	ldr	r2, [r2, #8]
 8003788:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6852      	ldr	r2, [r2, #4]
 8003792:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d103      	bne.n	80037ac <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f103 32ff 	add.w	r2, r3, #4294967295
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	601a      	str	r2, [r3, #0]
}
 80037c0:	f107 0714 	add.w	r7, r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bc80      	pop	{r7}
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop

080037cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f1a3 0304 	sub.w	r3, r3, #4
 80037de:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037e6:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f1a3 0304 	sub.w	r3, r3, #4
 80037ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f1a3 0304 	sub.w	r3, r3, #4
 80037fc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f1a3 0314 	sub.w	r3, r3, #20
 800380c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f1a3 0304 	sub.w	r3, r3, #4
 800381a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f06f 0202 	mvn.w	r2, #2
 8003822:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f1a3 0320 	sub.w	r3, r3, #32
 800382a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800382c:	68fb      	ldr	r3, [r7, #12]
}
 800382e:	4618      	mov	r0, r3
 8003830:	f107 0714 	add.w	r7, r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop

0800383c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800383c:	4b05      	ldr	r3, [pc, #20]	; (8003854 <pxCurrentTCBConst2>)
 800383e:	6819      	ldr	r1, [r3, #0]
 8003840:	6808      	ldr	r0, [r1, #0]
 8003842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003846:	f380 8809 	msr	PSP, r0
 800384a:	f04f 0000 	mov.w	r0, #0
 800384e:	f380 8811 	msr	BASEPRI, r0
 8003852:	4770      	bx	lr

08003854 <pxCurrentTCBConst2>:
 8003854:	200006d0 	.word	0x200006d0

08003858 <vPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void vPortStartFirstTask( void )
{
	__asm volatile(
 8003858:	4803      	ldr	r0, [pc, #12]	; (8003868 <vPortStartFirstTask+0x10>)
 800385a:	6800      	ldr	r0, [r0, #0]
 800385c:	6800      	ldr	r0, [r0, #0]
 800385e:	f380 8808 	msr	MSP, r0
 8003862:	b662      	cpsie	i
 8003864:	df00      	svc	0
 8003866:	bf00      	nop
 8003868:	e000ed08 	.word	0xe000ed08

0800386c <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
	/* Make PendSV and SysTick the lowest priority interrupts. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8003870:	f64e 5320 	movw	r3, #60704	; 0xed20
 8003874:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003878:	f64e 5220 	movw	r2, #60704	; 0xed20
 800387c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8003880:	6812      	ldr	r2, [r2, #0]
 8003882:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
 8003886:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8003888:	f64e 5320 	movw	r3, #60704	; 0xed20
 800388c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003890:	f64e 5220 	movw	r2, #60704	; 0xed20
 8003894:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8003898:	6812      	ldr	r2, [r2, #0]
 800389a:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 800389e:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80038a0:	f000 f89e 	bl	80039e0 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80038a4:	f240 5348 	movw	r3, #1352	; 0x548
 80038a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80038b2:	f000 f8b5 	bl	8003a20 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80038b6:	f64e 7334 	movw	r3, #61236	; 0xef34
 80038ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80038be:	f64e 7234 	movw	r2, #61236	; 0xef34
 80038c2:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80038c6:	6812      	ldr	r2, [r2, #0]
 80038c8:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80038cc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80038ce:	f7ff ffc3 	bl	8003858 <vPortStartFirstTask>

	/* Should not get here! */
	return 0;
 80038d2:	f04f 0300 	mov.w	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop

080038dc <vPortYieldFromISR>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80038e0:	f64e 5304 	movw	r3, #60676	; 0xed04
 80038e4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80038e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ec:	601a      	str	r2, [r3, #0]
}
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr

080038f4 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80038f8:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80038fc:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
 8003900:	f240 5348 	movw	r3, #1352	; 0x548
 8003904:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f103 0201 	add.w	r2, r3, #1
 800390e:	f240 5348 	movw	r3, #1352	; 0x548
 8003912:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003916:	601a      	str	r2, [r3, #0]
}
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop

08003920 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 8003924:	f240 5348 	movw	r3, #1352	; 0x548
 8003928:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f103 32ff 	add.w	r2, r3, #4294967295
 8003932:	f240 5348 	movw	r3, #1352	; 0x548
 8003936:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800393a:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800393c:	f240 5348 	movw	r3, #1352	; 0x548
 8003940:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d103      	bne.n	8003952 <vPortExitCritical+0x32>
	{
		portENABLE_INTERRUPTS();
 800394a:	f04f 0000 	mov.w	r0, #0
 800394e:	f380 8811 	msr	BASEPRI, r0
	}
}
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr

08003958 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003958:	f3ef 8009 	mrs	r0, PSP
 800395c:	4b11      	ldr	r3, [pc, #68]	; (80039a4 <pxCurrentTCBConst>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	f01e 0f10 	tst.w	lr, #16
 8003964:	bf08      	it	eq
 8003966:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800396a:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800396e:	6010      	str	r0, [r2, #0]
 8003970:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003974:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8003978:	f380 8811 	msr	BASEPRI, r0
 800397c:	f7fe ffc2 	bl	8002904 <vTaskSwitchContext>
 8003980:	f04f 0000 	mov.w	r0, #0
 8003984:	f380 8811 	msr	BASEPRI, r0
 8003988:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800398c:	6819      	ldr	r1, [r3, #0]
 800398e:	6808      	ldr	r0, [r1, #0]
 8003990:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003994:	f01e 0f10 	tst.w	lr, #16
 8003998:	bf08      	it	eq
 800399a:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800399e:	f380 8809 	msr	PSP, r0
 80039a2:	4770      	bx	lr

080039a4 <pxCurrentTCBConst>:
 80039a4:	200006d0 	.word	0x200006d0

080039a8 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80039ae:	f64e 5304 	movw	r3, #60676	; 0xed04
 80039b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80039b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ba:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80039bc:	f04f 0300 	mov.w	r3, #0
 80039c0:	607b      	str	r3, [r7, #4]
 80039c2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80039c6:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
 80039ca:	f7fe febf 	bl	800274c <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 80039ce:	f04f 0000 	mov.w	r0, #0
 80039d2:	f380 8811 	msr	BASEPRI, r0
}
 80039d6:	f107 0708 	add.w	r7, r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop

080039e0 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80039e4:	f24e 0314 	movw	r3, #57364	; 0xe014
 80039e8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80039ec:	f240 5224 	movw	r2, #1316	; 0x524
 80039f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80039f4:	6811      	ldr	r1, [r2, #0]
 80039f6:	f644 52d3 	movw	r2, #19923	; 0x4dd3
 80039fa:	f2c1 0262 	movt	r2, #4194	; 0x1062
 80039fe:	fba2 0201 	umull	r0, r2, r2, r1
 8003a02:	ea4f 1292 	mov.w	r2, r2, lsr #6
 8003a06:	f102 32ff 	add.w	r2, r2, #4294967295
 8003a0a:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8003a0c:	f24e 0310 	movw	r3, #57360	; 0xe010
 8003a10:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003a14:	f04f 0207 	mov.w	r2, #7
 8003a18:	601a      	str	r2, [r3, #0]
}
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr

08003a20 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003a20:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003a30 <vPortEnableVFP+0x10>
 8003a24:	6801      	ldr	r1, [r0, #0]
 8003a26:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003a2a:	6001      	str	r1, [r0, #0]
 8003a2c:	4770      	bx	lr
 8003a2e:	0000      	.short	0x0000
 8003a30:	e000ed88 	.word	0xe000ed88

08003a34 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8003a3c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8003a40:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	f042 62be 	orr.w	r2, r2, #99614720	; 0x5f00000
 8003a4a:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8003a4e:	60da      	str	r2, [r3, #12]
}
 8003a50:	f107 070c 	add.w	r7, r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop

08003a5c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8003a64:	f04f 0300 	mov.w	r3, #0
 8003a68:	73fb      	strb	r3, [r7, #15]
 8003a6a:	f04f 0300 	mov.w	r3, #0
 8003a6e:	73bb      	strb	r3, [r7, #14]
 8003a70:	f04f 030f 	mov.w	r3, #15
 8003a74:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	78db      	ldrb	r3, [r3, #3]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d045      	beq.n	8003b0a <NVIC_Init+0xae>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8003a7e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8003a82:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	ea6f 0303 	mvn.w	r3, r3
 8003a8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a90:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8003a94:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
 8003a98:	f1c3 0304 	rsb	r3, r3, #4
 8003a9c:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8003a9e:	7b7a      	ldrb	r2, [r7, #13]
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	fa42 f303 	asr.w	r3, r2, r3
 8003aa6:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	785b      	ldrb	r3, [r3, #1]
 8003aac:	461a      	mov	r2, r3
 8003aae:	7bbb      	ldrb	r3, [r7, #14]
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	789a      	ldrb	r2, [r3, #2]
 8003aba:	7b7b      	ldrb	r3, [r7, #13]
 8003abc:	4013      	ands	r3, r2
 8003abe:	b2da      	uxtb	r2, r3
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
 8003ac8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003acc:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8003ace:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8003ad2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	7812      	ldrb	r2, [r2, #0]
 8003ada:	189b      	adds	r3, r3, r2
 8003adc:	7bfa      	ldrb	r2, [r7, #15]
 8003ade:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003ae2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8003ae6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	7812      	ldrb	r2, [r2, #0]
 8003aee:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8003af2:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	7809      	ldrb	r1, [r1, #0]
 8003af8:	f001 011f 	and.w	r1, r1, #31
 8003afc:	f04f 0001 	mov.w	r0, #1
 8003b00:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003b08:	e014      	b.n	8003b34 <NVIC_Init+0xd8>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003b0a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8003b0e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	7812      	ldrb	r2, [r2, #0]
 8003b16:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8003b1a:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	7809      	ldrb	r1, [r1, #0]
 8003b20:	f001 011f 	and.w	r1, r1, #31
 8003b24:	f04f 0001 	mov.w	r0, #1
 8003b28:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003b2c:	f102 0220 	add.w	r2, r2, #32
 8003b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8003b34:	f107 0714 	add.w	r7, r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop

08003b40 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8003b4a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8003b4e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8003b58:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	609a      	str	r2, [r3, #8]
}
 8003b62:	f107 070c 	add.w	r7, r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr

08003b6c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8003b74:	f04f 0300 	mov.w	r3, #0
 8003b78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8003b7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003b7e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003b82:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	799b      	ldrb	r3, [r3, #6]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d078      	beq.n	8003c7e <EXTI_Init+0x112>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8003b8c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003b90:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003b94:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8003b98:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003b9c:	6811      	ldr	r1, [r2, #0]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6812      	ldr	r2, [r2, #0]
 8003ba2:	ea6f 0202 	mvn.w	r2, r2
 8003ba6:	400a      	ands	r2, r1
 8003ba8:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8003baa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003bae:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003bb2:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8003bb6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003bba:	6851      	ldr	r1, [r2, #4]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6812      	ldr	r2, [r2, #0]
 8003bc0:	ea6f 0202 	mvn.w	r2, r2
 8003bc4:	400a      	ands	r2, r1
 8003bc6:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	791b      	ldrb	r3, [r3, #4]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	18d3      	adds	r3, r2, r3
 8003bd0:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	6811      	ldr	r1, [r2, #0]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6812      	ldr	r2, [r2, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8003be0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003be4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003be8:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8003bec:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003bf0:	6891      	ldr	r1, [r2, #8]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6812      	ldr	r2, [r2, #0]
 8003bf6:	ea6f 0202 	mvn.w	r2, r2
 8003bfa:	400a      	ands	r2, r1
 8003bfc:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8003bfe:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003c02:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003c06:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8003c0a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003c0e:	68d1      	ldr	r1, [r2, #12]
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6812      	ldr	r2, [r2, #0]
 8003c14:	ea6f 0202 	mvn.w	r2, r2
 8003c18:	400a      	ands	r2, r1
 8003c1a:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	795b      	ldrb	r3, [r3, #5]
 8003c20:	2b10      	cmp	r3, #16
 8003c22:	d11a      	bne.n	8003c5a <EXTI_Init+0xee>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8003c24:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003c28:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003c2c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8003c30:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003c34:	6891      	ldr	r1, [r2, #8]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6812      	ldr	r2, [r2, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8003c3e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003c42:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003c46:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8003c4a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003c4e:	68d1      	ldr	r1, [r2, #12]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6812      	ldr	r2, [r2, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	60da      	str	r2, [r3, #12]
 8003c58:	e01f      	b.n	8003c9a <EXTI_Init+0x12e>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8003c5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003c5e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003c62:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	795b      	ldrb	r3, [r3, #5]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	18d3      	adds	r3, r2, r3
 8003c6c:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	6811      	ldr	r1, [r2, #0]
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6812      	ldr	r2, [r2, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	e00d      	b.n	8003c9a <EXTI_Init+0x12e>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	791b      	ldrb	r3, [r3, #4]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	18d3      	adds	r3, r2, r3
 8003c86:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	6811      	ldr	r1, [r2, #0]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6812      	ldr	r2, [r2, #0]
 8003c92:	ea6f 0202 	mvn.w	r2, r2
 8003c96:	400a      	ands	r2, r1
 8003c98:	601a      	str	r2, [r3, #0]
  }
}
 8003c9a:	f107 0714 	add.w	r7, r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr

08003ca4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	f04f 0300 	mov.w	r3, #0
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	f04f 0300 	mov.w	r3, #0
 8003cbe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003cc0:	f04f 0300 	mov.w	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	e086      	b.n	8003dd6 <GPIO_Init+0x132>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f04f 0201 	mov.w	r2, #1
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d173      	bne.n	8003dce <GPIO_Init+0x12a>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003cf0:	f04f 0103 	mov.w	r1, #3
 8003cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf8:	ea6f 0303 	mvn.w	r3, r3
 8003cfc:	401a      	ands	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	791b      	ldrb	r3, [r3, #4]
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003d12:	fa01 f303 	lsl.w	r3, r1, r3
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	791b      	ldrb	r3, [r3, #4]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d003      	beq.n	8003d2c <GPIO_Init+0x88>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	791b      	ldrb	r3, [r3, #4]
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d134      	bne.n	8003d96 <GPIO_Init+0xf2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003d36:	f04f 0103 	mov.w	r1, #3
 8003d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d3e:	ea6f 0303 	mvn.w	r3, r3
 8003d42:	401a      	ands	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	795b      	ldrb	r3, [r3, #5]
 8003d50:	4619      	mov	r1, r3
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003d58:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	f04f 0101 	mov.w	r1, #1
 8003d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d72:	ea6f 0303 	mvn.w	r3, r3
 8003d76:	401a      	ands	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	799b      	ldrb	r3, [r3, #6]
 8003d84:	4619      	mov	r1, r3
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	431a      	orrs	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003da2:	f04f 0103 	mov.w	r1, #3
 8003da6:	fa01 f303 	lsl.w	r3, r1, r3
 8003daa:	ea6f 0303 	mvn.w	r3, r3
 8003dae:	401a      	ands	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	79db      	ldrb	r3, [r3, #7]
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f103 0301 	add.w	r3, r3, #1
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2b0f      	cmp	r3, #15
 8003dda:	f67f af75 	bls.w	8003cc8 <GPIO_Init+0x24>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8003dde:	f107 071c 	add.w	r7, r7, #28
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr

08003de8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	460b      	mov	r3, r1
 8003df2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	887a      	ldrh	r2, [r7, #2]
 8003df8:	831a      	strh	r2, [r3, #24]
}
 8003dfa:	f107 070c 	add.w	r7, r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr

08003e04 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	887a      	ldrh	r2, [r7, #2]
 8003e14:	835a      	strh	r2, [r3, #26]
}
 8003e16:	f107 070c 	add.w	r7, r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr

08003e20 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	460a      	mov	r2, r1
 8003e2c:	807a      	strh	r2, [r7, #2]
 8003e2e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8003e36:	f04f 0300 	mov.w	r3, #0
 8003e3a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003e3c:	787a      	ldrb	r2, [r7, #1]
 8003e3e:	887b      	ldrh	r3, [r7, #2]
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003e4e:	887b      	ldrh	r3, [r7, #2]
 8003e50:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	461a      	mov	r2, r3
 8003e58:	887b      	ldrh	r3, [r7, #2]
 8003e5a:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	4619      	mov	r1, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f101 0108 	add.w	r1, r1, #8
 8003e68:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003e6c:	887b      	ldrh	r3, [r7, #2]
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003e76:	f04f 000f 	mov.w	r0, #15
 8003e7a:	fa00 f303 	lsl.w	r3, r0, r3
 8003e7e:	ea6f 0303 	mvn.w	r3, r3
 8003e82:	4019      	ands	r1, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f102 0208 	add.w	r2, r2, #8
 8003e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8003e8e:	887b      	ldrh	r3, [r7, #2]
 8003e90:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f102 0208 	add.w	r2, r2, #8
 8003e9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8003ea8:	887b      	ldrh	r3, [r7, #2]
 8003eaa:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f102 0208 	add.w	r2, r2, #8
 8003eb8:	68b9      	ldr	r1, [r7, #8]
 8003eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8003ebe:	f107 0714 	add.w	r7, r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr

08003ec8 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b089      	sub	sp, #36	; 0x24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	61bb      	str	r3, [r7, #24]
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	61fb      	str	r3, [r7, #28]
 8003ee2:	f04f 0302 	mov.w	r3, #2
 8003ee6:	613b      	str	r3, [r7, #16]
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	f04f 0302 	mov.w	r3, #2
 8003ef2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003ef4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003ef8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 030c 	and.w	r3, r3, #12
 8003f02:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d00a      	beq.n	8003f20 <RCC_GetClocksFreq+0x58>
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d00f      	beq.n	8003f2e <RCC_GetClocksFreq+0x66>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d160      	bne.n	8003fd4 <RCC_GetClocksFreq+0x10c>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8003f18:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8003f1c:	6013      	str	r3, [r2, #0]
      break;
 8003f1e:	e060      	b.n	8003fe2 <RCC_GetClocksFreq+0x11a>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8003f26:	f2c0 037a 	movt	r3, #122	; 0x7a
 8003f2a:	6013      	str	r3, [r2, #0]
      break;
 8003f2c:	e059      	b.n	8003fe2 <RCC_GetClocksFreq+0x11a>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003f2e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003f32:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f3c:	ea4f 5393 	mov.w	r3, r3, lsr #22
 8003f40:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f42:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003f46:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f50:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d014      	beq.n	8003f82 <RCC_GetClocksFreq+0xba>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003f58:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8003f5c:	f2c0 037a 	movt	r3, #122	; 0x7a
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f66:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003f6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003f6e:	6859      	ldr	r1, [r3, #4]
 8003f70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f74:	400b      	ands	r3, r1
 8003f76:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8003f7a:	fb03 f302 	mul.w	r3, r3, r2
 8003f7e:	61fb      	str	r3, [r7, #28]
 8003f80:	e013      	b.n	8003faa <RCC_GetClocksFreq+0xe2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003f82:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8003f86:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f90:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003f94:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003f98:	6859      	ldr	r1, [r3, #4]
 8003f9a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f9e:	400b      	ands	r3, r1
 8003fa0:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8003fa4:	fb03 f302 	mul.w	r3, r3, r2
 8003fa8:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003faa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003fae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fb8:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8003fbc:	f103 0301 	add.w	r3, r3, #1
 8003fc0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003fc4:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8003fc6:	69fa      	ldr	r2, [r7, #28]
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	601a      	str	r2, [r3, #0]
      break;
 8003fd2:	e006      	b.n	8003fe2 <RCC_GetClocksFreq+0x11a>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8003fda:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8003fde:	6013      	str	r3, [r2, #0]
      break;
 8003fe0:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8003fe2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003fe6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ff0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8003ff8:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8003ffa:	f240 534c 	movw	r3, #1356	; 0x54c
 8003ffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	189b      	adds	r3, r3, r2
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	b2db      	uxtb	r3, r3
 800400a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	fa22 f203 	lsr.w	r2, r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800401a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800401e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004028:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	ea4f 2393 	mov.w	r3, r3, lsr #10
 8004030:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8004032:	f240 534c 	movw	r3, #1356	; 0x54c
 8004036:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	189b      	adds	r3, r3, r2
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	b2db      	uxtb	r3, r3
 8004042:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	fa22 f203 	lsr.w	r2, r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8004052:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004056:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004060:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	ea4f 3353 	mov.w	r3, r3, lsr #13
 8004068:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800406a:	f240 534c 	movw	r3, #1356	; 0x54c
 800406e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	189b      	adds	r3, r3, r2
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	b2db      	uxtb	r3, r3
 800407a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	fa22 f203 	lsr.w	r2, r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	60da      	str	r2, [r3, #12]
}
 800408a:	f107 0724 	add.w	r7, r7, #36	; 0x24
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr

08004094 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80040a0:	78fb      	ldrb	r3, [r7, #3]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00c      	beq.n	80040c0 <RCC_AHB1PeriphClockCmd+0x2c>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80040a6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80040aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80040ae:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80040b2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80040b6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	631a      	str	r2, [r3, #48]	; 0x30
 80040be:	e00d      	b.n	80040dc <RCC_AHB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80040c0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80040c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80040c8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80040cc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80040d0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	ea6f 0202 	mvn.w	r2, r2
 80040d8:	400a      	ands	r2, r1
 80040da:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 80040dc:	f107 070c 	add.w	r7, r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bc80      	pop	{r7}
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop

080040e8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	460b      	mov	r3, r1
 80040f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80040f4:	78fb      	ldrb	r3, [r7, #3]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00c      	beq.n	8004114 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80040fa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80040fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004102:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004106:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800410a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	430a      	orrs	r2, r1
 8004110:	641a      	str	r2, [r3, #64]	; 0x40
 8004112:	e00d      	b.n	8004130 <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8004114:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004118:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800411c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004120:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004124:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	ea6f 0202 	mvn.w	r2, r2
 800412c:	400a      	ands	r2, r1
 800412e:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8004130:	f107 070c 	add.w	r7, r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	bc80      	pop	{r7}
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop

0800413c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004148:	78fb      	ldrb	r3, [r7, #3]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00c      	beq.n	8004168 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800414e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004152:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004156:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800415a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800415e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	430a      	orrs	r2, r1
 8004164:	645a      	str	r2, [r3, #68]	; 0x44
 8004166:	e00d      	b.n	8004184 <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8004168:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800416c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004170:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004174:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004178:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	ea6f 0202 	mvn.w	r2, r2
 8004180:	400a      	ands	r2, r1
 8004182:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8004184:	f107 070c 	add.w	r7, r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	bc80      	pop	{r7}
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop

08004190 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800419c:	78fb      	ldrb	r3, [r7, #3]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00c      	beq.n	80041bc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80041a2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80041a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80041aa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80041ae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80041b2:	6a11      	ldr	r1, [r2, #32]
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	621a      	str	r2, [r3, #32]
 80041ba:	e00d      	b.n	80041d8 <RCC_APB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80041bc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80041c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80041c4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80041c8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80041cc:	6a11      	ldr	r1, [r2, #32]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	ea6f 0202 	mvn.w	r2, r2
 80041d4:	400a      	ands	r2, r1
 80041d6:	621a      	str	r2, [r3, #32]
  }
}
 80041d8:	f107 070c 	add.w	r7, r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	bc80      	pop	{r7}
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop

080041e4 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80041f0:	78fb      	ldrb	r3, [r7, #3]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00c      	beq.n	8004210 <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80041f6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80041fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80041fe:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004202:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004206:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	430a      	orrs	r2, r1
 800420c:	625a      	str	r2, [r3, #36]	; 0x24
 800420e:	e00d      	b.n	800422c <RCC_APB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8004210:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004214:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004218:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800421c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004220:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	ea6f 0202 	mvn.w	r2, r2
 8004228:	400a      	ands	r2, r1
 800422a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800422c:	f107 070c 	add.w	r7, r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	bc80      	pop	{r7}
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop

08004238 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004246:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800424a:	429a      	cmp	r2, r3
 800424c:	d10c      	bne.n	8004268 <SPI_I2S_DeInit+0x30>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 800424e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004252:	f04f 0101 	mov.w	r1, #1
 8004256:	f7ff ffc5 	bl	80041e4 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 800425a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800425e:	f04f 0100 	mov.w	r1, #0
 8004262:	f7ff ffbf 	bl	80041e4 <RCC_APB2PeriphResetCmd>
 8004266:	e026      	b.n	80042b6 <SPI_I2S_DeInit+0x7e>
  }
  else if (SPIx == SPI2)
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800426e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004272:	429a      	cmp	r2, r3
 8004274:	d10c      	bne.n	8004290 <SPI_I2S_DeInit+0x58>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8004276:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800427a:	f04f 0101 	mov.w	r1, #1
 800427e:	f7ff ff87 	bl	8004190 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8004282:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004286:	f04f 0100 	mov.w	r1, #0
 800428a:	f7ff ff81 	bl	8004190 <RCC_APB1PeriphResetCmd>
 800428e:	e012      	b.n	80042b6 <SPI_I2S_DeInit+0x7e>
    }
  else
  {
    if (SPIx == SPI3)
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004296:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800429a:	429a      	cmp	r2, r3
 800429c:	d10b      	bne.n	80042b6 <SPI_I2S_DeInit+0x7e>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 800429e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80042a2:	f04f 0101 	mov.w	r1, #1
 80042a6:	f7ff ff73 	bl	8004190 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 80042aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80042ae:	f04f 0100 	mov.w	r1, #0
 80042b2:	f7ff ff6d 	bl	8004190 <RCC_APB1PeriphResetCmd>
    }
  }
}
 80042b6:	f107 0708 	add.w	r7, r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop

080042c0 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80042ca:	f04f 0300 	mov.w	r3, #0
 80042ce:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	881b      	ldrh	r3, [r3, #0]
 80042d4:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 80042d6:	89fb      	ldrh	r3, [r7, #14]
 80042d8:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80042dc:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	881a      	ldrh	r2, [r3, #0]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	885b      	ldrh	r3, [r3, #2]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80042ee:	4313      	orrs	r3, r2
 80042f0:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80042f6:	4313      	orrs	r3, r2
 80042f8:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80042fe:	4313      	orrs	r3, r2
 8004300:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004306:	4313      	orrs	r3, r2
 8004308:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800430e:	4313      	orrs	r3, r2
 8004310:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004316:	4313      	orrs	r3, r2
 8004318:	b29a      	uxth	r2, r3
 800431a:	89fb      	ldrh	r3, [r7, #14]
 800431c:	4313      	orrs	r3, r2
 800431e:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	89fa      	ldrh	r2, [r7, #14]
 8004324:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	8b9b      	ldrh	r3, [r3, #28]
 800432a:	b29b      	uxth	r3, r3
 800432c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004330:	b29a      	uxth	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	8a1a      	ldrh	r2, [r3, #16]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	821a      	strh	r2, [r3, #16]
}
 800433e:	f107 0714 	add.w	r7, r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	bc80      	pop	{r7}
 8004346:	4770      	bx	lr

08004348 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	460b      	mov	r3, r1
 8004352:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004354:	78fb      	ldrb	r3, [r7, #3]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d008      	beq.n	800436c <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	b29b      	uxth	r3, r3
 8004360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004364:	b29a      	uxth	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	801a      	strh	r2, [r3, #0]
 800436a:	e007      	b.n	800437c <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	b29b      	uxth	r3, r3
 8004372:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004376:	b29a      	uxth	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	801a      	strh	r2, [r3, #0]
  }
}
 800437c:	f107 070c 	add.w	r7, r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	bc80      	pop	{r7}
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop

08004388 <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	899b      	ldrh	r3, [r3, #12]
 8004394:	b29b      	uxth	r3, r3
}
 8004396:	4618      	mov	r0, r3
 8004398:	f107 070c 	add.w	r7, r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	bc80      	pop	{r7}
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop

080043a4 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	460b      	mov	r3, r1
 80043ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	887a      	ldrh	r2, [r7, #2]
 80043b4:	819a      	strh	r2, [r3, #12]
}
 80043b6:	f107 070c 	add.w	r7, r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr

080043c0 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	460b      	mov	r3, r1
 80043ca:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80043cc:	f04f 0300 	mov.w	r3, #0
 80043d0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	891b      	ldrh	r3, [r3, #8]
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	887b      	ldrh	r3, [r7, #2]
 80043da:	4013      	ands	r3, r2
 80043dc:	b29b      	uxth	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <SPI_I2S_GetFlagStatus+0x2a>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80043e2:	f04f 0301 	mov.w	r3, #1
 80043e6:	73fb      	strb	r3, [r7, #15]
 80043e8:	e002      	b.n	80043f0 <SPI_I2S_GetFlagStatus+0x30>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80043ea:	f04f 0300 	mov.w	r3, #0
 80043ee:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	f107 0714 	add.w	r7, r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bc80      	pop	{r7}
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop

08004400 <SYSCFG_EXTILineConfig>:
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8004400:	b490      	push	{r4, r7}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	71fa      	strb	r2, [r7, #7]
 800440c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800440e:	f04f 0300 	mov.w	r3, #0
 8004412:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8004414:	79bb      	ldrb	r3, [r7, #6]
 8004416:	f003 0303 	and.w	r3, r3, #3
 800441a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800441e:	f04f 020f 	mov.w	r2, #15
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8004428:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800442c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004430:	79ba      	ldrb	r2, [r7, #6]
 8004432:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	4610      	mov	r0, r2
 800443a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800443e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004442:	79b9      	ldrb	r1, [r7, #6]
 8004444:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8004448:	b2c9      	uxtb	r1, r1
 800444a:	f101 0102 	add.w	r1, r1, #2
 800444e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	ea6f 0202 	mvn.w	r2, r2
 8004458:	4011      	ands	r1, r2
 800445a:	f100 0202 	add.w	r2, r0, #2
 800445e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8004462:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004466:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800446a:	79ba      	ldrb	r2, [r7, #6]
 800446c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8004470:	b2d2      	uxtb	r2, r2
 8004472:	4610      	mov	r0, r2
 8004474:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004478:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800447c:	79b9      	ldrb	r1, [r7, #6]
 800447e:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8004482:	b2c9      	uxtb	r1, r1
 8004484:	f101 0102 	add.w	r1, r1, #2
 8004488:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800448c:	79fc      	ldrb	r4, [r7, #7]
 800448e:	79ba      	ldrb	r2, [r7, #6]
 8004490:	f002 0203 	and.w	r2, r2, #3
 8004494:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8004498:	fa04 f202 	lsl.w	r2, r4, r2
 800449c:	4311      	orrs	r1, r2
 800449e:	f100 0202 	add.w	r2, r0, #2
 80044a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80044a6:	f107 0710 	add.w	r7, r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc90      	pop	{r4, r7}
 80044ae:	4770      	bx	lr

080044b0 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80044ba:	f04f 0300 	mov.w	r3, #0
 80044be:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	881b      	ldrh	r3, [r3, #0]
 80044c4:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d01f      	beq.n	8004514 <TIM_TimeBaseInit+0x64>
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044da:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80044de:	429a      	cmp	r2, r3
 80044e0:	d018      	beq.n	8004514 <TIM_TimeBaseInit+0x64>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e8:	d014      	beq.n	8004514 <TIM_TimeBaseInit+0x64>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044f0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d00d      	beq.n	8004514 <TIM_TimeBaseInit+0x64>
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80044fe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004502:	429a      	cmp	r2, r3
 8004504:	d006      	beq.n	8004514 <TIM_TimeBaseInit+0x64>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800450c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004510:	429a      	cmp	r2, r3
 8004512:	d108      	bne.n	8004526 <TIM_TimeBaseInit+0x76>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8004514:	89fb      	ldrh	r3, [r7, #14]
 8004516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	885a      	ldrh	r2, [r3, #2]
 8004520:	89fb      	ldrh	r3, [r7, #14]
 8004522:	4313      	orrs	r3, r2
 8004524:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800452c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004530:	429a      	cmp	r2, r3
 8004532:	d00f      	beq.n	8004554 <TIM_TimeBaseInit+0xa4>
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800453a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800453e:	429a      	cmp	r2, r3
 8004540:	d008      	beq.n	8004554 <TIM_TimeBaseInit+0xa4>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8004542:	89fb      	ldrh	r3, [r7, #14]
 8004544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004548:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	891a      	ldrh	r2, [r3, #8]
 800454e:	89fb      	ldrh	r3, [r7, #14]
 8004550:	4313      	orrs	r3, r2
 8004552:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	89fa      	ldrh	r2, [r7, #14]
 8004558:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	881a      	ldrh	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004574:	429a      	cmp	r2, r3
 8004576:	d006      	beq.n	8004586 <TIM_TimeBaseInit+0xd6>
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800457e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004582:	429a      	cmp	r2, r3
 8004584:	d104      	bne.n	8004590 <TIM_TimeBaseInit+0xe0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	7a9b      	ldrb	r3, [r3, #10]
 800458a:	461a      	mov	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f04f 0201 	mov.w	r2, #1
 8004596:	829a      	strh	r2, [r3, #20]
}
 8004598:	f107 0714 	add.w	r7, r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	bc80      	pop	{r7}
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop

080045a4 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80045b4:	f107 070c 	add.w	r7, r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop

080045c0 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	460b      	mov	r3, r1
 80045ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80045cc:	78fb      	ldrb	r3, [r7, #3]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d008      	beq.n	80045e4 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045dc:	b29a      	uxth	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	801a      	strh	r2, [r3, #0]
 80045e2:	e007      	b.n	80045f4 <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	881b      	ldrh	r3, [r3, #0]
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	801a      	strh	r2, [r3, #0]
  }
}
 80045f4:	f107 070c 	add.w	r7, r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bc80      	pop	{r7}
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop

08004600 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	460b      	mov	r3, r1
 800460a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800460c:	78fb      	ldrb	r3, [r7, #3]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d008      	beq.n	8004624 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	881b      	ldrh	r3, [r3, #0]
 8004616:	b29b      	uxth	r3, r3
 8004618:	f043 0301 	orr.w	r3, r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	801a      	strh	r2, [r3, #0]
 8004622:	e007      	b.n	8004634 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	b29b      	uxth	r3, r3
 800462a:	f023 0301 	bic.w	r3, r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	801a      	strh	r2, [r3, #0]
  }
}
 8004634:	f107 070c 	add.w	r7, r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	bc80      	pop	{r7}
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop

08004640 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800464a:	f04f 0300 	mov.w	r3, #0
 800464e:	817b      	strh	r3, [r7, #10]
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	81fb      	strh	r3, [r7, #14]
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	8c1b      	ldrh	r3, [r3, #32]
 8004660:	b29b      	uxth	r3, r3
 8004662:	f023 0301 	bic.w	r3, r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	8c1b      	ldrh	r3, [r3, #32]
 8004670:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	889b      	ldrh	r3, [r3, #4]
 8004676:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	8b1b      	ldrh	r3, [r3, #24]
 800467c:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 800467e:	897b      	ldrh	r3, [r7, #10]
 8004680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004684:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8004686:	897b      	ldrh	r3, [r7, #10]
 8004688:	f023 0303 	bic.w	r3, r3, #3
 800468c:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	881a      	ldrh	r2, [r3, #0]
 8004692:	897b      	ldrh	r3, [r7, #10]
 8004694:	4313      	orrs	r3, r2
 8004696:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8004698:	89fb      	ldrh	r3, [r7, #14]
 800469a:	f023 0302 	bic.w	r3, r3, #2
 800469e:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	899a      	ldrh	r2, [r3, #12]
 80046a4:	89fb      	ldrh	r3, [r7, #14]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	885a      	ldrh	r2, [r3, #2]
 80046ae:	89fb      	ldrh	r3, [r7, #14]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	f04f 0300 	mov.w	r3, #0
 80046ba:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80046be:	429a      	cmp	r2, r3
 80046c0:	d006      	beq.n	80046d0 <TIM_OC1Init+0x90>
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046c8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d123      	bne.n	8004718 <TIM_OC1Init+0xd8>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80046d0:	89fb      	ldrh	r3, [r7, #14]
 80046d2:	f023 0308 	bic.w	r3, r3, #8
 80046d6:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	89da      	ldrh	r2, [r3, #14]
 80046dc:	89fb      	ldrh	r3, [r7, #14]
 80046de:	4313      	orrs	r3, r2
 80046e0:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 80046e2:	89fb      	ldrh	r3, [r7, #14]
 80046e4:	f023 0304 	bic.w	r3, r3, #4
 80046e8:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	889a      	ldrh	r2, [r3, #4]
 80046ee:	89fb      	ldrh	r3, [r7, #14]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 80046f4:	89bb      	ldrh	r3, [r7, #12]
 80046f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046fa:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80046fc:	89bb      	ldrh	r3, [r7, #12]
 80046fe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004702:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	8a1a      	ldrh	r2, [r3, #16]
 8004708:	89bb      	ldrh	r3, [r7, #12]
 800470a:	4313      	orrs	r3, r2
 800470c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	8a5a      	ldrh	r2, [r3, #18]
 8004712:	89bb      	ldrh	r3, [r7, #12]
 8004714:	4313      	orrs	r3, r2
 8004716:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	89ba      	ldrh	r2, [r7, #12]
 800471c:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	897a      	ldrh	r2, [r7, #10]
 8004722:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	89fa      	ldrh	r2, [r7, #14]
 8004730:	841a      	strh	r2, [r3, #32]
}
 8004732:	f107 0714 	add.w	r7, r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	bc80      	pop	{r7}
 800473a:	4770      	bx	lr

0800473c <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	817b      	strh	r3, [r7, #10]
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	81fb      	strh	r3, [r7, #14]
 8004752:	f04f 0300 	mov.w	r3, #0
 8004756:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	8c1b      	ldrh	r3, [r3, #32]
 800475c:	b29b      	uxth	r3, r3
 800475e:	f023 0310 	bic.w	r3, r3, #16
 8004762:	b29a      	uxth	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	8c1b      	ldrh	r3, [r3, #32]
 800476c:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	889b      	ldrh	r3, [r3, #4]
 8004772:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	8b1b      	ldrh	r3, [r3, #24]
 8004778:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 800477a:	897b      	ldrh	r3, [r7, #10]
 800477c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004780:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8004782:	897b      	ldrh	r3, [r7, #10]
 8004784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004788:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8004792:	b29a      	uxth	r2, r3
 8004794:	897b      	ldrh	r3, [r7, #10]
 8004796:	4313      	orrs	r3, r2
 8004798:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 800479a:	89fb      	ldrh	r3, [r7, #14]
 800479c:	f023 0320 	bic.w	r3, r3, #32
 80047a0:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	899b      	ldrh	r3, [r3, #12]
 80047a6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	89fb      	ldrh	r3, [r7, #14]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	885b      	ldrh	r3, [r3, #2]
 80047b6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	89fb      	ldrh	r3, [r7, #14]
 80047be:	4313      	orrs	r3, r2
 80047c0:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	f04f 0300 	mov.w	r3, #0
 80047c8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d006      	beq.n	80047de <TIM_OC2Init+0xa2>
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047d6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80047da:	429a      	cmp	r2, r3
 80047dc:	d12f      	bne.n	800483e <TIM_OC2Init+0x102>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80047de:	89fb      	ldrh	r3, [r7, #14]
 80047e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047e4:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	89db      	ldrh	r3, [r3, #14]
 80047ea:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	89fb      	ldrh	r3, [r7, #14]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 80047f6:	89fb      	ldrh	r3, [r7, #14]
 80047f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047fc:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	889b      	ldrh	r3, [r3, #4]
 8004802:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004806:	b29a      	uxth	r2, r3
 8004808:	89fb      	ldrh	r3, [r7, #14]
 800480a:	4313      	orrs	r3, r2
 800480c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 800480e:	89bb      	ldrh	r3, [r7, #12]
 8004810:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004814:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8004816:	89bb      	ldrh	r3, [r7, #12]
 8004818:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800481c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	8a1b      	ldrh	r3, [r3, #16]
 8004822:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004826:	b29a      	uxth	r2, r3
 8004828:	89bb      	ldrh	r3, [r7, #12]
 800482a:	4313      	orrs	r3, r2
 800482c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	8a5b      	ldrh	r3, [r3, #18]
 8004832:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004836:	b29a      	uxth	r2, r3
 8004838:	89bb      	ldrh	r3, [r7, #12]
 800483a:	4313      	orrs	r3, r2
 800483c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	89ba      	ldrh	r2, [r7, #12]
 8004842:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	897a      	ldrh	r2, [r7, #10]
 8004848:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	689a      	ldr	r2, [r3, #8]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	89fa      	ldrh	r2, [r7, #14]
 8004856:	841a      	strh	r2, [r3, #32]
}
 8004858:	f107 0714 	add.w	r7, r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	bc80      	pop	{r7}
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop

08004864 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800486e:	f04f 0300 	mov.w	r3, #0
 8004872:	817b      	strh	r3, [r7, #10]
 8004874:	f04f 0300 	mov.w	r3, #0
 8004878:	81fb      	strh	r3, [r7, #14]
 800487a:	f04f 0300 	mov.w	r3, #0
 800487e:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	8c1b      	ldrh	r3, [r3, #32]
 8004884:	b29b      	uxth	r3, r3
 8004886:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800488a:	b29a      	uxth	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	8c1b      	ldrh	r3, [r3, #32]
 8004894:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	889b      	ldrh	r3, [r3, #4]
 800489a:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	8b9b      	ldrh	r3, [r3, #28]
 80048a0:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 80048a2:	897b      	ldrh	r3, [r7, #10]
 80048a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a8:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80048aa:	897b      	ldrh	r3, [r7, #10]
 80048ac:	f023 0303 	bic.w	r3, r3, #3
 80048b0:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	881a      	ldrh	r2, [r3, #0]
 80048b6:	897b      	ldrh	r3, [r7, #10]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80048bc:	89fb      	ldrh	r3, [r7, #14]
 80048be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048c2:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	899b      	ldrh	r3, [r3, #12]
 80048c8:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	89fb      	ldrh	r3, [r7, #14]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	885b      	ldrh	r3, [r3, #2]
 80048d8:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80048dc:	b29a      	uxth	r2, r3
 80048de:	89fb      	ldrh	r3, [r7, #14]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	f04f 0300 	mov.w	r3, #0
 80048ea:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d006      	beq.n	8004900 <TIM_OC3Init+0x9c>
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048f8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d12f      	bne.n	8004960 <TIM_OC3Init+0xfc>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8004900:	89fb      	ldrh	r3, [r7, #14]
 8004902:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004906:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	89db      	ldrh	r3, [r3, #14]
 800490c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8004910:	b29a      	uxth	r2, r3
 8004912:	89fb      	ldrh	r3, [r7, #14]
 8004914:	4313      	orrs	r3, r2
 8004916:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8004918:	89fb      	ldrh	r3, [r7, #14]
 800491a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800491e:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	889b      	ldrh	r3, [r3, #4]
 8004924:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8004928:	b29a      	uxth	r2, r3
 800492a:	89fb      	ldrh	r3, [r7, #14]
 800492c:	4313      	orrs	r3, r2
 800492e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 8004930:	89bb      	ldrh	r3, [r7, #12]
 8004932:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004936:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8004938:	89bb      	ldrh	r3, [r7, #12]
 800493a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800493e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	8a1b      	ldrh	r3, [r3, #16]
 8004944:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004948:	b29a      	uxth	r2, r3
 800494a:	89bb      	ldrh	r3, [r7, #12]
 800494c:	4313      	orrs	r3, r2
 800494e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	8a5b      	ldrh	r3, [r3, #18]
 8004954:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004958:	b29a      	uxth	r2, r3
 800495a:	89bb      	ldrh	r3, [r7, #12]
 800495c:	4313      	orrs	r3, r2
 800495e:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	89ba      	ldrh	r2, [r7, #12]
 8004964:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	897a      	ldrh	r2, [r7, #10]
 800496a:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	89fa      	ldrh	r2, [r7, #14]
 8004978:	841a      	strh	r2, [r3, #32]
}
 800497a:	f107 0714 	add.w	r7, r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr

08004984 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	81bb      	strh	r3, [r7, #12]
 8004994:	f04f 0300 	mov.w	r3, #0
 8004998:	817b      	strh	r3, [r7, #10]
 800499a:	f04f 0300 	mov.w	r3, #0
 800499e:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	8c1b      	ldrh	r3, [r3, #32]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	8c1b      	ldrh	r3, [r3, #32]
 80049b4:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	889b      	ldrh	r3, [r3, #4]
 80049ba:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	8b9b      	ldrh	r3, [r3, #28]
 80049c0:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 80049c2:	89bb      	ldrh	r3, [r7, #12]
 80049c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c8:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 80049ca:	89bb      	ldrh	r3, [r7, #12]
 80049cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d0:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80049da:	b29a      	uxth	r2, r3
 80049dc:	89bb      	ldrh	r3, [r7, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80049e2:	897b      	ldrh	r3, [r7, #10]
 80049e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049e8:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	899b      	ldrh	r3, [r3, #12]
 80049ee:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	897b      	ldrh	r3, [r7, #10]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	885b      	ldrh	r3, [r3, #2]
 80049fe:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	897b      	ldrh	r3, [r7, #10]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	f04f 0300 	mov.w	r3, #0
 8004a10:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d006      	beq.n	8004a26 <TIM_OC4Init+0xa2>
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a1e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d10b      	bne.n	8004a3e <TIM_OC4Init+0xba>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8004a26:	89fb      	ldrh	r3, [r7, #14]
 8004a28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a2c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	8a1b      	ldrh	r3, [r3, #16]
 8004a32:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	89fb      	ldrh	r3, [r7, #14]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	89fa      	ldrh	r2, [r7, #14]
 8004a42:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	89ba      	ldrh	r2, [r7, #12]
 8004a48:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	689a      	ldr	r2, [r3, #8]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	897a      	ldrh	r2, [r7, #10]
 8004a56:	841a      	strh	r2, [r3, #32]
}
 8004a58:	f107 0714 	add.w	r7, r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop

08004a64 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004a74:	f107 070c 	add.w	r7, r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bc80      	pop	{r7}
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop

08004a80 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004a90:	f107 070c 	add.w	r7, r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bc80      	pop	{r7}
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop

08004a9c <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	683a      	ldr	r2, [r7, #0]
 8004aaa:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004aac:	f107 070c 	add.w	r7, r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bc80      	pop	{r7}
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop

08004ab8 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004ac8:	f107 070c 	add.w	r7, r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bc80      	pop	{r7}
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop

08004ad4 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	460b      	mov	r3, r1
 8004ade:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8004ae0:	f04f 0300 	mov.w	r3, #0
 8004ae4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	8b1b      	ldrh	r3, [r3, #24]
 8004aea:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8004aec:	89fb      	ldrh	r3, [r7, #14]
 8004aee:	f023 0308 	bic.w	r3, r3, #8
 8004af2:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8004af4:	89fa      	ldrh	r2, [r7, #14]
 8004af6:	887b      	ldrh	r3, [r7, #2]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	89fa      	ldrh	r2, [r7, #14]
 8004b00:	831a      	strh	r2, [r3, #24]
}
 8004b02:	f107 0714 	add.w	r7, r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bc80      	pop	{r7}
 8004b0a:	4770      	bx	lr

08004b0c <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	460b      	mov	r3, r1
 8004b16:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8004b18:	f04f 0300 	mov.w	r3, #0
 8004b1c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	8b1b      	ldrh	r3, [r3, #24]
 8004b22:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8004b24:	89fb      	ldrh	r3, [r7, #14]
 8004b26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b2a:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8004b2c:	887b      	ldrh	r3, [r7, #2]
 8004b2e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	89fb      	ldrh	r3, [r7, #14]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	89fa      	ldrh	r2, [r7, #14]
 8004b3e:	831a      	strh	r2, [r3, #24]
}
 8004b40:	f107 0714 	add.w	r7, r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bc80      	pop	{r7}
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop

08004b4c <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	460b      	mov	r3, r1
 8004b56:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	8b9b      	ldrh	r3, [r3, #28]
 8004b62:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8004b64:	89fb      	ldrh	r3, [r7, #14]
 8004b66:	f023 0308 	bic.w	r3, r3, #8
 8004b6a:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8004b6c:	89fa      	ldrh	r2, [r7, #14]
 8004b6e:	887b      	ldrh	r3, [r7, #2]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	89fa      	ldrh	r2, [r7, #14]
 8004b78:	839a      	strh	r2, [r3, #28]
}
 8004b7a:	f107 0714 	add.w	r7, r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bc80      	pop	{r7}
 8004b82:	4770      	bx	lr

08004b84 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	8b9b      	ldrh	r3, [r3, #28]
 8004b9a:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8004b9c:	89fb      	ldrh	r3, [r7, #14]
 8004b9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ba2:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8004ba4:	887b      	ldrh	r3, [r7, #2]
 8004ba6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	89fb      	ldrh	r3, [r7, #14]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	89fa      	ldrh	r2, [r7, #14]
 8004bb6:	839a      	strh	r2, [r3, #28]
}
 8004bb8:	f107 0714 	add.w	r7, r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bc80      	pop	{r7}
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop

08004bc4 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	460a      	mov	r2, r1
 8004bd0:	807a      	strh	r2, [r7, #2]
 8004bd2:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8004bd4:	f04f 0300 	mov.w	r3, #0
 8004bd8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8004bda:	887b      	ldrh	r3, [r7, #2]
 8004bdc:	f04f 0201 	mov.w	r2, #1
 8004be0:	fa02 f303 	lsl.w	r3, r2, r3
 8004be4:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	8c1b      	ldrh	r3, [r3, #32]
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	89fb      	ldrh	r3, [r7, #14]
 8004bee:	ea6f 0303 	mvn.w	r3, r3
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	8c1b      	ldrh	r3, [r3, #32]
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	8839      	ldrh	r1, [r7, #0]
 8004c04:	887b      	ldrh	r3, [r7, #2]
 8004c06:	fa01 f303 	lsl.w	r3, r1, r3
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	841a      	strh	r2, [r3, #32]
}
 8004c14:	f107 0714 	add.w	r7, r7, #20
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bc80      	pop	{r7}
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop

08004c20 <register_fini>:
 8004c20:	f240 0300 	movw	r3, #0
 8004c24:	f2c0 0300 	movt	r3, #0
 8004c28:	b12b      	cbz	r3, 8004c36 <register_fini+0x16>
 8004c2a:	f640 10dd 	movw	r0, #2525	; 0x9dd
 8004c2e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004c32:	f7fb becd 	b.w	80009d0 <atexit>
 8004c36:	4770      	bx	lr
 8004c38:	54495753 	.word	0x54495753
 8004c3c:	00004843 	.word	0x00004843
 8004c40:	534d454d 	.word	0x534d454d
 8004c44:	00000000 	.word	0x00000000
 8004c48:	414c4142 	.word	0x414c4142
 8004c4c:	0045434e 	.word	0x0045434e
 8004c50:	454c4449 	.word	0x454c4449
 8004c54:	00000000 	.word	0x00000000
 8004c58:	00000a0d 	.word	0x00000a0d
 8004c5c:	20207525 	.word	0x20207525
 8004c60:	20206325 	.word	0x20206325
 8004c64:	36312d25 	.word	0x36312d25
 8004c68:	20202073 	.word	0x20202073
 8004c6c:	20202020 	.word	0x20202020
 8004c70:	30202020 	.word	0x30202020
 8004c74:	30202020 	.word	0x30202020
 8004c78:	20202525 	.word	0x20202525
 8004c7c:	0d753525 	.word	0x0d753525
 8004c80:	0000000a 	.word	0x0000000a
 8004c84:	20207525 	.word	0x20207525
 8004c88:	20206325 	.word	0x20206325
 8004c8c:	36312d25 	.word	0x36312d25
 8004c90:	31252073 	.word	0x31252073
 8004c94:	25207530 	.word	0x25207530
 8004c98:	25257533 	.word	0x25257533
 8004c9c:	35252020 	.word	0x35252020
 8004ca0:	000a0d75 	.word	0x000a0d75
 8004ca4:	20207525 	.word	0x20207525
 8004ca8:	20206325 	.word	0x20206325
 8004cac:	36312d25 	.word	0x36312d25
 8004cb0:	31252073 	.word	0x31252073
 8004cb4:	20207530 	.word	0x20207530
 8004cb8:	2525313c 	.word	0x2525313c
 8004cbc:	35252020 	.word	0x35252020
 8004cc0:	000a0d75 	.word	0x000a0d75

08004cc4 <_global_impure_ptr>:
 8004cc4:	20000004                                ... 

08004cc8 <__sf_fake_stderr>:
 8004cc8:	00000000 00000000 00000000 00000000     ................
 8004cd8:	00000000 00000000 00000000 00000000     ................

08004ce8 <__sf_fake_stdout>:
 8004ce8:	00000000 00000000 00000000 00000000     ................
 8004cf8:	00000000 00000000 00000000 00000000     ................

08004d08 <__sf_fake_stdin>:
 8004d08:	00000000 00000000 00000000 00000000     ................
 8004d18:	00000000 00000000 00000000 00000000     ................

08004d28 <GPIO_PIN>:
 8004d28:	20001000 80004000                       ... .@..

08004d30 <BUTTON_PIN>:
 8004d30:	00000001                                ....

08004d34 <BUTTON_CLK>:
 8004d34:	00000001                                ....

08004d38 <BUTTON_EXTI_LINE>:
 8004d38:	00000001                                ....

08004d3c <BUTTON_PORT_SOURCE>:
 8004d3c:	00000000                                ....

08004d40 <BUTTON_PIN_SOURCE>:
 8004d40:	00000000                                ....

08004d44 <BUTTON_IRQn>:
 8004d44:	00000006 00000043                       ....C...

08004d4c <_init>:
 8004d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4e:	bf00      	nop
 8004d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d52:	bc08      	pop	{r3}
 8004d54:	469e      	mov	lr, r3
 8004d56:	4770      	bx	lr

08004d58 <_fini>:
 8004d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5a:	bf00      	nop
 8004d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d5e:	bc08      	pop	{r3}
 8004d60:	469e      	mov	lr, r3
 8004d62:	4770      	bx	lr
