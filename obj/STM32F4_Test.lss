
obj/STM32F4_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ef0  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000008  08003078  08003078  0000b078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08003080  08003080  0000b080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000558  20000000  08003084  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000294  20000558  080035e0  00010558  2**3
                  ALLOC
  6 ._user_heap_stack 00000400  200007ec  080035dc  000107ec  2**0
                  ALLOC
  7 .ARM.attributes 00000035  00000000  00000000  00010558  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000848c  00000000  00000000  0001058d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001520  00000000  00000000  00018a19  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002b06  00000000  00000000  00019f39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000007c0  00000000  00000000  0001ca3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006f8  00000000  00000000  0001d1ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002a02  00000000  00000000  0001d8f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003003  00000000  00000000  000202f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000030  00000000  00000000  000232fc  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001b90  00000000  00000000  0002332c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	f240 5458 	movw	r4, #1368	; 0x558
 800018e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000192:	7823      	ldrb	r3, [r4, #0]
 8000194:	b963      	cbnz	r3, 80001b0 <__do_global_dtors_aux+0x28>
 8000196:	f240 0000 	movw	r0, #0
 800019a:	f2c0 0000 	movt	r0, #0
 800019e:	b128      	cbz	r0, 80001ac <__do_global_dtors_aux+0x24>
 80001a0:	f243 0060 	movw	r0, #12384	; 0x3060
 80001a4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001a8:	f3af 8000 	nop.w
 80001ac:	2101      	movs	r1, #1
 80001ae:	7021      	strb	r1, [r4, #0]
 80001b0:	bd10      	pop	{r4, pc}
 80001b2:	bf00      	nop

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	f240 0300 	movw	r3, #0
 80001ba:	f2c0 0300 	movt	r3, #0
 80001be:	b14b      	cbz	r3, 80001d4 <frame_dummy+0x20>
 80001c0:	f243 0060 	movw	r0, #12384	; 0x3060
 80001c4:	f240 515c 	movw	r1, #1372	; 0x55c
 80001c8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001cc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80001d0:	f3af 8000 	nop.w
 80001d4:	f240 5058 	movw	r0, #1368	; 0x558
 80001d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80001dc:	6801      	ldr	r1, [r0, #0]
 80001de:	b129      	cbz	r1, 80001ec <frame_dummy+0x38>
 80001e0:	f240 0300 	movw	r3, #0
 80001e4:	f2c0 0300 	movt	r3, #0
 80001e8:	b103      	cbz	r3, 80001ec <frame_dummy+0x38>
 80001ea:	4798      	blx	r3
 80001ec:	bd08      	pop	{r3, pc}
 80001ee:	bf00      	nop

080001f0 <__libc_init_array>:
 80001f0:	b570      	push	{r4, r5, r6, lr}
 80001f2:	f243 0678 	movw	r6, #12408	; 0x3078
 80001f6:	f243 0578 	movw	r5, #12408	; 0x3078
 80001fa:	f6c0 0600 	movt	r6, #2048	; 0x800
 80001fe:	f6c0 0500 	movt	r5, #2048	; 0x800
 8000202:	1b76      	subs	r6, r6, r5
 8000204:	10b6      	asrs	r6, r6, #2
 8000206:	d006      	beq.n	8000216 <__libc_init_array+0x26>
 8000208:	2400      	movs	r4, #0
 800020a:	f855 3b04 	ldr.w	r3, [r5], #4
 800020e:	3401      	adds	r4, #1
 8000210:	4798      	blx	r3
 8000212:	42a6      	cmp	r6, r4
 8000214:	d1f9      	bne.n	800020a <__libc_init_array+0x1a>
 8000216:	f243 0680 	movw	r6, #12416	; 0x3080
 800021a:	f243 0578 	movw	r5, #12408	; 0x3078
 800021e:	f6c0 0600 	movt	r6, #2048	; 0x800
 8000222:	f6c0 0500 	movt	r5, #2048	; 0x800
 8000226:	1b76      	subs	r6, r6, r5
 8000228:	f002 ff1a 	bl	8003060 <_init>
 800022c:	10b6      	asrs	r6, r6, #2
 800022e:	d006      	beq.n	800023e <__libc_init_array+0x4e>
 8000230:	2400      	movs	r4, #0
 8000232:	f855 3b04 	ldr.w	r3, [r5], #4
 8000236:	3401      	adds	r4, #1
 8000238:	4798      	blx	r3
 800023a:	42a6      	cmp	r6, r4
 800023c:	d1f9      	bne.n	8000232 <__libc_init_array+0x42>
 800023e:	bd70      	pop	{r4, r5, r6, pc}

08000240 <malloc>:
 8000240:	f240 0300 	movw	r3, #0
 8000244:	4601      	mov	r1, r0
 8000246:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800024a:	6818      	ldr	r0, [r3, #0]
 800024c:	f000 b808 	b.w	8000260 <_malloc_r>

08000250 <free>:
 8000250:	f240 0300 	movw	r3, #0
 8000254:	4601      	mov	r1, r0
 8000256:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800025a:	6818      	ldr	r0, [r3, #0]
 800025c:	f000 bbb0 	b.w	80009c0 <_free_r>

08000260 <_malloc_r>:
 8000260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000264:	f101 040b 	add.w	r4, r1, #11
 8000268:	2c16      	cmp	r4, #22
 800026a:	b083      	sub	sp, #12
 800026c:	4606      	mov	r6, r0
 800026e:	d930      	bls.n	80002d2 <_malloc_r+0x72>
 8000270:	f024 0407 	bic.w	r4, r4, #7
 8000274:	0fe3      	lsrs	r3, r4, #31
 8000276:	428c      	cmp	r4, r1
 8000278:	bf2c      	ite	cs
 800027a:	4619      	movcs	r1, r3
 800027c:	f043 0101 	orrcc.w	r1, r3, #1
 8000280:	2900      	cmp	r1, #0
 8000282:	d12f      	bne.n	80002e4 <_malloc_r+0x84>
 8000284:	4630      	mov	r0, r6
 8000286:	f001 f8e9 	bl	800145c <__malloc_lock>
 800028a:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800028e:	d22d      	bcs.n	80002ec <_malloc_r+0x8c>
 8000290:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8000294:	f240 05f4 	movw	r5, #244	; 0xf4
 8000298:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800029c:	eb05 02ce 	add.w	r2, r5, lr, lsl #3
 80002a0:	68d3      	ldr	r3, [r2, #12]
 80002a2:	4293      	cmp	r3, r2
 80002a4:	f000 8223 	beq.w	80006ee <_malloc_r+0x48e>
 80002a8:	685c      	ldr	r4, [r3, #4]
 80002aa:	f103 0708 	add.w	r7, r3, #8
 80002ae:	68da      	ldr	r2, [r3, #12]
 80002b0:	4630      	mov	r0, r6
 80002b2:	f024 0403 	bic.w	r4, r4, #3
 80002b6:	6899      	ldr	r1, [r3, #8]
 80002b8:	191b      	adds	r3, r3, r4
 80002ba:	685c      	ldr	r4, [r3, #4]
 80002bc:	60ca      	str	r2, [r1, #12]
 80002be:	f044 0401 	orr.w	r4, r4, #1
 80002c2:	6091      	str	r1, [r2, #8]
 80002c4:	605c      	str	r4, [r3, #4]
 80002c6:	f001 f8d3 	bl	8001470 <__malloc_unlock>
 80002ca:	4638      	mov	r0, r7
 80002cc:	b003      	add	sp, #12
 80002ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80002d2:	2300      	movs	r3, #0
 80002d4:	2410      	movs	r4, #16
 80002d6:	428c      	cmp	r4, r1
 80002d8:	bf2c      	ite	cs
 80002da:	4619      	movcs	r1, r3
 80002dc:	f043 0101 	orrcc.w	r1, r3, #1
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d0cf      	beq.n	8000284 <_malloc_r+0x24>
 80002e4:	230c      	movs	r3, #12
 80002e6:	2700      	movs	r7, #0
 80002e8:	6033      	str	r3, [r6, #0]
 80002ea:	e7ee      	b.n	80002ca <_malloc_r+0x6a>
 80002ec:	ea5f 2e54 	movs.w	lr, r4, lsr #9
 80002f0:	bf04      	itt	eq
 80002f2:	ea4f 0ed4 	moveq.w	lr, r4, lsr #3
 80002f6:	ea4f 01ce 	moveq.w	r1, lr, lsl #3
 80002fa:	f040 808c 	bne.w	8000416 <_malloc_r+0x1b6>
 80002fe:	f240 05f4 	movw	r5, #244	; 0xf4
 8000302:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8000306:	1869      	adds	r1, r5, r1
 8000308:	68cf      	ldr	r7, [r1, #12]
 800030a:	42b9      	cmp	r1, r7
 800030c:	d106      	bne.n	800031c <_malloc_r+0xbc>
 800030e:	e00d      	b.n	800032c <_malloc_r+0xcc>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f280 8181 	bge.w	8000618 <_malloc_r+0x3b8>
 8000316:	68ff      	ldr	r7, [r7, #12]
 8000318:	42b9      	cmp	r1, r7
 800031a:	d007      	beq.n	800032c <_malloc_r+0xcc>
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	f023 0303 	bic.w	r3, r3, #3
 8000322:	1b1a      	subs	r2, r3, r4
 8000324:	2a0f      	cmp	r2, #15
 8000326:	ddf3      	ble.n	8000310 <_malloc_r+0xb0>
 8000328:	f10e 3eff 	add.w	lr, lr, #4294967295
 800032c:	f10e 0e01 	add.w	lr, lr, #1
 8000330:	f240 00f4 	movw	r0, #244	; 0xf4
 8000334:	692f      	ldr	r7, [r5, #16]
 8000336:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800033a:	f100 0208 	add.w	r2, r0, #8
 800033e:	4297      	cmp	r7, r2
 8000340:	bf08      	it	eq
 8000342:	6843      	ldreq	r3, [r0, #4]
 8000344:	d026      	beq.n	8000394 <_malloc_r+0x134>
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	f023 0c03 	bic.w	ip, r3, #3
 800034c:	ebc4 030c 	rsb	r3, r4, ip
 8000350:	2b0f      	cmp	r3, #15
 8000352:	f300 819c 	bgt.w	800068e <_malloc_r+0x42e>
 8000356:	2b00      	cmp	r3, #0
 8000358:	6142      	str	r2, [r0, #20]
 800035a:	6102      	str	r2, [r0, #16]
 800035c:	f280 8095 	bge.w	800048a <_malloc_r+0x22a>
 8000360:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8000364:	f080 8173 	bcs.w	800064e <_malloc_r+0x3ee>
 8000368:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800036c:	f04f 0801 	mov.w	r8, #1
 8000370:	6843      	ldr	r3, [r0, #4]
 8000372:	eb00 01cc 	add.w	r1, r0, ip, lsl #3
 8000376:	ea4f 0cac 	mov.w	ip, ip, asr #2
 800037a:	fa08 f80c 	lsl.w	r8, r8, ip
 800037e:	60f9      	str	r1, [r7, #12]
 8000380:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8000384:	ea48 0303 	orr.w	r3, r8, r3
 8000388:	6043      	str	r3, [r0, #4]
 800038a:	f8c7 c008 	str.w	ip, [r7, #8]
 800038e:	f8cc 700c 	str.w	r7, [ip, #12]
 8000392:	608f      	str	r7, [r1, #8]
 8000394:	2701      	movs	r7, #1
 8000396:	ea4f 01ae 	mov.w	r1, lr, asr #2
 800039a:	fa07 f701 	lsl.w	r7, r7, r1
 800039e:	429f      	cmp	r7, r3
 80003a0:	d87e      	bhi.n	80004a0 <_malloc_r+0x240>
 80003a2:	423b      	tst	r3, r7
 80003a4:	d106      	bne.n	80003b4 <_malloc_r+0x154>
 80003a6:	f02e 0e03 	bic.w	lr, lr, #3
 80003aa:	007f      	lsls	r7, r7, #1
 80003ac:	f10e 0e04 	add.w	lr, lr, #4
 80003b0:	423b      	tst	r3, r7
 80003b2:	d0fa      	beq.n	80003aa <_malloc_r+0x14a>
 80003b4:	eb05 09ce 	add.w	r9, r5, lr, lsl #3
 80003b8:	46f0      	mov	r8, lr
 80003ba:	46cc      	mov	ip, r9
 80003bc:	f8dc 000c 	ldr.w	r0, [ip, #12]
 80003c0:	4584      	cmp	ip, r0
 80003c2:	d107      	bne.n	80003d4 <_malloc_r+0x174>
 80003c4:	e174      	b.n	80006b0 <_malloc_r+0x450>
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	f280 819b 	bge.w	8000702 <_malloc_r+0x4a2>
 80003cc:	68c0      	ldr	r0, [r0, #12]
 80003ce:	4584      	cmp	ip, r0
 80003d0:	f000 816e 	beq.w	80006b0 <_malloc_r+0x450>
 80003d4:	6841      	ldr	r1, [r0, #4]
 80003d6:	f021 0103 	bic.w	r1, r1, #3
 80003da:	1b0b      	subs	r3, r1, r4
 80003dc:	2b0f      	cmp	r3, #15
 80003de:	ddf2      	ble.n	80003c6 <_malloc_r+0x166>
 80003e0:	4607      	mov	r7, r0
 80003e2:	1901      	adds	r1, r0, r4
 80003e4:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80003e8:	f044 0801 	orr.w	r8, r4, #1
 80003ec:	f857 4f08 	ldr.w	r4, [r7, #8]!
 80003f0:	f043 0c01 	orr.w	ip, r3, #1
 80003f4:	f8c0 8004 	str.w	r8, [r0, #4]
 80003f8:	4630      	mov	r0, r6
 80003fa:	f8c1 c004 	str.w	ip, [r1, #4]
 80003fe:	f8c4 e00c 	str.w	lr, [r4, #12]
 8000402:	f8ce 4008 	str.w	r4, [lr, #8]
 8000406:	6169      	str	r1, [r5, #20]
 8000408:	6129      	str	r1, [r5, #16]
 800040a:	60ca      	str	r2, [r1, #12]
 800040c:	608a      	str	r2, [r1, #8]
 800040e:	50cb      	str	r3, [r1, r3]
 8000410:	f001 f82e 	bl	8001470 <__malloc_unlock>
 8000414:	e759      	b.n	80002ca <_malloc_r+0x6a>
 8000416:	f1be 0f04 	cmp.w	lr, #4
 800041a:	bf9e      	ittt	ls
 800041c:	ea4f 1e94 	movls.w	lr, r4, lsr #6
 8000420:	f10e 0e38 	addls.w	lr, lr, #56	; 0x38
 8000424:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8000428:	f67f af69 	bls.w	80002fe <_malloc_r+0x9e>
 800042c:	f1be 0f14 	cmp.w	lr, #20
 8000430:	bf9c      	itt	ls
 8000432:	f10e 0e5b 	addls.w	lr, lr, #91	; 0x5b
 8000436:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 800043a:	f67f af60 	bls.w	80002fe <_malloc_r+0x9e>
 800043e:	f1be 0f54 	cmp.w	lr, #84	; 0x54
 8000442:	bf9e      	ittt	ls
 8000444:	ea4f 3e14 	movls.w	lr, r4, lsr #12
 8000448:	f10e 0e6e 	addls.w	lr, lr, #110	; 0x6e
 800044c:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8000450:	f67f af55 	bls.w	80002fe <_malloc_r+0x9e>
 8000454:	f5be 7faa 	cmp.w	lr, #340	; 0x154
 8000458:	bf9e      	ittt	ls
 800045a:	ea4f 3ed4 	movls.w	lr, r4, lsr #15
 800045e:	f10e 0e77 	addls.w	lr, lr, #119	; 0x77
 8000462:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8000466:	f67f af4a 	bls.w	80002fe <_malloc_r+0x9e>
 800046a:	f240 5354 	movw	r3, #1364	; 0x554
 800046e:	459e      	cmp	lr, r3
 8000470:	bf95      	itete	ls
 8000472:	ea4f 4e94 	movls.w	lr, r4, lsr #18
 8000476:	f44f 717c 	movhi.w	r1, #1008	; 0x3f0
 800047a:	f10e 0e7c 	addls.w	lr, lr, #124	; 0x7c
 800047e:	f04f 0e7e 	movhi.w	lr, #126	; 0x7e
 8000482:	bf98      	it	ls
 8000484:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8000488:	e739      	b.n	80002fe <_malloc_r+0x9e>
 800048a:	eb07 030c 	add.w	r3, r7, ip
 800048e:	4630      	mov	r0, r6
 8000490:	3708      	adds	r7, #8
 8000492:	685a      	ldr	r2, [r3, #4]
 8000494:	f042 0201 	orr.w	r2, r2, #1
 8000498:	605a      	str	r2, [r3, #4]
 800049a:	f000 ffe9 	bl	8001470 <__malloc_unlock>
 800049e:	e714      	b.n	80002ca <_malloc_r+0x6a>
 80004a0:	68af      	ldr	r7, [r5, #8]
 80004a2:	f240 03f4 	movw	r3, #244	; 0xf4
 80004a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	f022 0803 	bic.w	r8, r2, #3
 80004b0:	4544      	cmp	r4, r8
 80004b2:	ebc4 0208 	rsb	r2, r4, r8
 80004b6:	bf94      	ite	ls
 80004b8:	2100      	movls	r1, #0
 80004ba:	2101      	movhi	r1, #1
 80004bc:	2a0f      	cmp	r2, #15
 80004be:	bfd8      	it	le
 80004c0:	f041 0101 	orrle.w	r1, r1, #1
 80004c4:	2900      	cmp	r1, #0
 80004c6:	f000 80b5 	beq.w	8000634 <_malloc_r+0x3d4>
 80004ca:	f240 5a74 	movw	sl, #1396	; 0x574
 80004ce:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80004d2:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 80004d6:	3201      	adds	r2, #1
 80004d8:	f8da 3000 	ldr.w	r3, [sl]
 80004dc:	4423      	add	r3, r4
 80004de:	bf08      	it	eq
 80004e0:	f103 0b10 	addeq.w	fp, r3, #16
 80004e4:	d006      	beq.n	80004f4 <_malloc_r+0x294>
 80004e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80004ea:	330f      	adds	r3, #15
 80004ec:	f423 637e 	bic.w	r3, r3, #4064	; 0xfe0
 80004f0:	f023 0b1f 	bic.w	fp, r3, #31
 80004f4:	4630      	mov	r0, r6
 80004f6:	4659      	mov	r1, fp
 80004f8:	f000 ff68 	bl	80013cc <_sbrk_r>
 80004fc:	1c42      	adds	r2, r0, #1
 80004fe:	4681      	mov	r9, r0
 8000500:	f000 8131 	beq.w	8000766 <_malloc_r+0x506>
 8000504:	eb07 0308 	add.w	r3, r7, r8
 8000508:	4283      	cmp	r3, r0
 800050a:	f200 8106 	bhi.w	800071a <_malloc_r+0x4ba>
 800050e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8000512:	454b      	cmp	r3, r9
 8000514:	445a      	add	r2, fp
 8000516:	f8ca 2004 	str.w	r2, [sl, #4]
 800051a:	f000 8131 	beq.w	8000780 <_malloc_r+0x520>
 800051e:	f8d5 0408 	ldr.w	r0, [r5, #1032]	; 0x408
 8000522:	f240 01f4 	movw	r1, #244	; 0xf4
 8000526:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800052a:	3001      	adds	r0, #1
 800052c:	4630      	mov	r0, r6
 800052e:	bf17      	itett	ne
 8000530:	ebc3 0309 	rsbne	r3, r3, r9
 8000534:	f8c1 9408 	streq.w	r9, [r1, #1032]	; 0x408
 8000538:	18d2      	addne	r2, r2, r3
 800053a:	f8ca 2004 	strne.w	r2, [sl, #4]
 800053e:	f019 0307 	ands.w	r3, r9, #7
 8000542:	bf1f      	itttt	ne
 8000544:	f1c3 0208 	rsbne	r2, r3, #8
 8000548:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 800054c:	4491      	addne	r9, r2
 800054e:	f103 0208 	addne.w	r2, r3, #8
 8000552:	eb09 030b 	add.w	r3, r9, fp
 8000556:	bf08      	it	eq
 8000558:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 800055c:	051b      	lsls	r3, r3, #20
 800055e:	0d1b      	lsrs	r3, r3, #20
 8000560:	ebc3 0b02 	rsb	fp, r3, r2
 8000564:	4659      	mov	r1, fp
 8000566:	f000 ff31 	bl	80013cc <_sbrk_r>
 800056a:	1c43      	adds	r3, r0, #1
 800056c:	f000 811d 	beq.w	80007aa <_malloc_r+0x54a>
 8000570:	ebc9 0100 	rsb	r1, r9, r0
 8000574:	4459      	add	r1, fp
 8000576:	f041 0101 	orr.w	r1, r1, #1
 800057a:	f8da 2004 	ldr.w	r2, [sl, #4]
 800057e:	42af      	cmp	r7, r5
 8000580:	f240 5374 	movw	r3, #1396	; 0x574
 8000584:	f8c5 9008 	str.w	r9, [r5, #8]
 8000588:	445a      	add	r2, fp
 800058a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800058e:	f8c9 1004 	str.w	r1, [r9, #4]
 8000592:	f8ca 2004 	str.w	r2, [sl, #4]
 8000596:	d019      	beq.n	80005cc <_malloc_r+0x36c>
 8000598:	f1b8 0f0f 	cmp.w	r8, #15
 800059c:	f240 80dd 	bls.w	800075a <_malloc_r+0x4fa>
 80005a0:	f1a8 010c 	sub.w	r1, r8, #12
 80005a4:	f8d7 c004 	ldr.w	ip, [r7, #4]
 80005a8:	f021 0107 	bic.w	r1, r1, #7
 80005ac:	f04f 0e05 	mov.w	lr, #5
 80005b0:	1878      	adds	r0, r7, r1
 80005b2:	290f      	cmp	r1, #15
 80005b4:	f00c 0c01 	and.w	ip, ip, #1
 80005b8:	ea41 0c0c 	orr.w	ip, r1, ip
 80005bc:	f8c7 c004 	str.w	ip, [r7, #4]
 80005c0:	f8c0 e004 	str.w	lr, [r0, #4]
 80005c4:	f8c0 e008 	str.w	lr, [r0, #8]
 80005c8:	f200 80e6 	bhi.w	8000798 <_malloc_r+0x538>
 80005cc:	f240 5374 	movw	r3, #1396	; 0x574
 80005d0:	f8da 102c 	ldr.w	r1, [sl, #44]	; 0x2c
 80005d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005d8:	68af      	ldr	r7, [r5, #8]
 80005da:	428a      	cmp	r2, r1
 80005dc:	f8da 1030 	ldr.w	r1, [sl, #48]	; 0x30
 80005e0:	bf88      	it	hi
 80005e2:	62da      	strhi	r2, [r3, #44]	; 0x2c
 80005e4:	f240 5374 	movw	r3, #1396	; 0x574
 80005e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005ec:	428a      	cmp	r2, r1
 80005ee:	bf88      	it	hi
 80005f0:	631a      	strhi	r2, [r3, #48]	; 0x30
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f023 0303 	bic.w	r3, r3, #3
 80005f8:	429c      	cmp	r4, r3
 80005fa:	ebc4 0203 	rsb	r2, r4, r3
 80005fe:	bf94      	ite	ls
 8000600:	2300      	movls	r3, #0
 8000602:	2301      	movhi	r3, #1
 8000604:	2a0f      	cmp	r2, #15
 8000606:	bfd8      	it	le
 8000608:	f043 0301 	orrle.w	r3, r3, #1
 800060c:	b193      	cbz	r3, 8000634 <_malloc_r+0x3d4>
 800060e:	4630      	mov	r0, r6
 8000610:	2700      	movs	r7, #0
 8000612:	f000 ff2d 	bl	8001470 <__malloc_unlock>
 8000616:	e658      	b.n	80002ca <_malloc_r+0x6a>
 8000618:	18fb      	adds	r3, r7, r3
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	68b9      	ldr	r1, [r7, #8]
 800061e:	4630      	mov	r0, r6
 8000620:	685c      	ldr	r4, [r3, #4]
 8000622:	3708      	adds	r7, #8
 8000624:	60ca      	str	r2, [r1, #12]
 8000626:	f044 0401 	orr.w	r4, r4, #1
 800062a:	6091      	str	r1, [r2, #8]
 800062c:	605c      	str	r4, [r3, #4]
 800062e:	f000 ff1f 	bl	8001470 <__malloc_unlock>
 8000632:	e64a      	b.n	80002ca <_malloc_r+0x6a>
 8000634:	193b      	adds	r3, r7, r4
 8000636:	f042 0201 	orr.w	r2, r2, #1
 800063a:	f044 0401 	orr.w	r4, r4, #1
 800063e:	4630      	mov	r0, r6
 8000640:	607c      	str	r4, [r7, #4]
 8000642:	3708      	adds	r7, #8
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	60ab      	str	r3, [r5, #8]
 8000648:	f000 ff12 	bl	8001470 <__malloc_unlock>
 800064c:	e63d      	b.n	80002ca <_malloc_r+0x6a>
 800064e:	ea4f 235c 	mov.w	r3, ip, lsr #9
 8000652:	2b04      	cmp	r3, #4
 8000654:	d95c      	bls.n	8000710 <_malloc_r+0x4b0>
 8000656:	2b14      	cmp	r3, #20
 8000658:	d878      	bhi.n	800074c <_malloc_r+0x4ec>
 800065a:	335b      	adds	r3, #91	; 0x5b
 800065c:	00d8      	lsls	r0, r3, #3
 800065e:	1828      	adds	r0, r5, r0
 8000660:	f240 08f4 	movw	r8, #244	; 0xf4
 8000664:	f2c2 0800 	movt	r8, #8192	; 0x2000
 8000668:	6881      	ldr	r1, [r0, #8]
 800066a:	4281      	cmp	r1, r0
 800066c:	d103      	bne.n	8000676 <_malloc_r+0x416>
 800066e:	e060      	b.n	8000732 <_malloc_r+0x4d2>
 8000670:	6889      	ldr	r1, [r1, #8]
 8000672:	4288      	cmp	r0, r1
 8000674:	d004      	beq.n	8000680 <_malloc_r+0x420>
 8000676:	684b      	ldr	r3, [r1, #4]
 8000678:	f023 0303 	bic.w	r3, r3, #3
 800067c:	459c      	cmp	ip, r3
 800067e:	d3f7      	bcc.n	8000670 <_malloc_r+0x410>
 8000680:	68c8      	ldr	r0, [r1, #12]
 8000682:	686b      	ldr	r3, [r5, #4]
 8000684:	60f8      	str	r0, [r7, #12]
 8000686:	60b9      	str	r1, [r7, #8]
 8000688:	60cf      	str	r7, [r1, #12]
 800068a:	6087      	str	r7, [r0, #8]
 800068c:	e682      	b.n	8000394 <_malloc_r+0x134>
 800068e:	1939      	adds	r1, r7, r4
 8000690:	f043 0501 	orr.w	r5, r3, #1
 8000694:	6141      	str	r1, [r0, #20]
 8000696:	f044 0401 	orr.w	r4, r4, #1
 800069a:	6101      	str	r1, [r0, #16]
 800069c:	4630      	mov	r0, r6
 800069e:	607c      	str	r4, [r7, #4]
 80006a0:	3708      	adds	r7, #8
 80006a2:	60ca      	str	r2, [r1, #12]
 80006a4:	608a      	str	r2, [r1, #8]
 80006a6:	604d      	str	r5, [r1, #4]
 80006a8:	50cb      	str	r3, [r1, r3]
 80006aa:	f000 fee1 	bl	8001470 <__malloc_unlock>
 80006ae:	e60c      	b.n	80002ca <_malloc_r+0x6a>
 80006b0:	f108 0801 	add.w	r8, r8, #1
 80006b4:	f10c 0c08 	add.w	ip, ip, #8
 80006b8:	f018 0f03 	tst.w	r8, #3
 80006bc:	f47f ae7e 	bne.w	80003bc <_malloc_r+0x15c>
 80006c0:	464b      	mov	r3, r9
 80006c2:	f01e 0f03 	tst.w	lr, #3
 80006c6:	f1a3 0108 	sub.w	r1, r3, #8
 80006ca:	f10e 3eff 	add.w	lr, lr, #4294967295
 80006ce:	d079      	beq.n	80007c4 <_malloc_r+0x564>
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	428b      	cmp	r3, r1
 80006d4:	d0f5      	beq.n	80006c2 <_malloc_r+0x462>
 80006d6:	686b      	ldr	r3, [r5, #4]
 80006d8:	007f      	lsls	r7, r7, #1
 80006da:	429f      	cmp	r7, r3
 80006dc:	f63f aee0 	bhi.w	80004a0 <_malloc_r+0x240>
 80006e0:	2f00      	cmp	r7, #0
 80006e2:	f43f aedd 	beq.w	80004a0 <_malloc_r+0x240>
 80006e6:	421f      	tst	r7, r3
 80006e8:	d071      	beq.n	80007ce <_malloc_r+0x56e>
 80006ea:	46c6      	mov	lr, r8
 80006ec:	e662      	b.n	80003b4 <_malloc_r+0x154>
 80006ee:	f103 0208 	add.w	r2, r3, #8
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	bf08      	it	eq
 80006f8:	f10e 0e02 	addeq.w	lr, lr, #2
 80006fc:	f43f ae18 	beq.w	8000330 <_malloc_r+0xd0>
 8000700:	e5d2      	b.n	80002a8 <_malloc_r+0x48>
 8000702:	4607      	mov	r7, r0
 8000704:	1843      	adds	r3, r0, r1
 8000706:	68c2      	ldr	r2, [r0, #12]
 8000708:	4630      	mov	r0, r6
 800070a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800070e:	e5d4      	b.n	80002ba <_malloc_r+0x5a>
 8000710:	ea4f 139c 	mov.w	r3, ip, lsr #6
 8000714:	3338      	adds	r3, #56	; 0x38
 8000716:	00d8      	lsls	r0, r3, #3
 8000718:	e7a1      	b.n	800065e <_malloc_r+0x3fe>
 800071a:	42af      	cmp	r7, r5
 800071c:	f240 02f4 	movw	r2, #244	; 0xf4
 8000720:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000724:	f43f aef3 	beq.w	800050e <_malloc_r+0x2ae>
 8000728:	6897      	ldr	r7, [r2, #8]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	f023 0303 	bic.w	r3, r3, #3
 8000730:	e762      	b.n	80005f8 <_malloc_r+0x398>
 8000732:	f04f 0901 	mov.w	r9, #1
 8000736:	f8d8 c004 	ldr.w	ip, [r8, #4]
 800073a:	109b      	asrs	r3, r3, #2
 800073c:	4608      	mov	r0, r1
 800073e:	fa09 f303 	lsl.w	r3, r9, r3
 8000742:	ea43 030c 	orr.w	r3, r3, ip
 8000746:	f8c8 3004 	str.w	r3, [r8, #4]
 800074a:	e79b      	b.n	8000684 <_malloc_r+0x424>
 800074c:	2b54      	cmp	r3, #84	; 0x54
 800074e:	d80f      	bhi.n	8000770 <_malloc_r+0x510>
 8000750:	ea4f 331c 	mov.w	r3, ip, lsr #12
 8000754:	336e      	adds	r3, #110	; 0x6e
 8000756:	00d8      	lsls	r0, r3, #3
 8000758:	e781      	b.n	800065e <_malloc_r+0x3fe>
 800075a:	2301      	movs	r3, #1
 800075c:	464f      	mov	r7, r9
 800075e:	f8c9 3004 	str.w	r3, [r9, #4]
 8000762:	2300      	movs	r3, #0
 8000764:	e748      	b.n	80005f8 <_malloc_r+0x398>
 8000766:	68af      	ldr	r7, [r5, #8]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f023 0303 	bic.w	r3, r3, #3
 800076e:	e743      	b.n	80005f8 <_malloc_r+0x398>
 8000770:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8000774:	d81d      	bhi.n	80007b2 <_malloc_r+0x552>
 8000776:	ea4f 33dc 	mov.w	r3, ip, lsr #15
 800077a:	3377      	adds	r3, #119	; 0x77
 800077c:	00d8      	lsls	r0, r3, #3
 800077e:	e76e      	b.n	800065e <_malloc_r+0x3fe>
 8000780:	0519      	lsls	r1, r3, #20
 8000782:	0d09      	lsrs	r1, r1, #20
 8000784:	2900      	cmp	r1, #0
 8000786:	f47f aeca 	bne.w	800051e <_malloc_r+0x2be>
 800078a:	68ab      	ldr	r3, [r5, #8]
 800078c:	eb0b 0108 	add.w	r1, fp, r8
 8000790:	f041 0101 	orr.w	r1, r1, #1
 8000794:	6059      	str	r1, [r3, #4]
 8000796:	e719      	b.n	80005cc <_malloc_r+0x36c>
 8000798:	4630      	mov	r0, r6
 800079a:	f107 0108 	add.w	r1, r7, #8
 800079e:	9301      	str	r3, [sp, #4]
 80007a0:	f000 f90e 	bl	80009c0 <_free_r>
 80007a4:	9b01      	ldr	r3, [sp, #4]
 80007a6:	685a      	ldr	r2, [r3, #4]
 80007a8:	e710      	b.n	80005cc <_malloc_r+0x36c>
 80007aa:	2101      	movs	r1, #1
 80007ac:	f04f 0b00 	mov.w	fp, #0
 80007b0:	e6e3      	b.n	800057a <_malloc_r+0x31a>
 80007b2:	f240 5154 	movw	r1, #1364	; 0x554
 80007b6:	428b      	cmp	r3, r1
 80007b8:	d80d      	bhi.n	80007d6 <_malloc_r+0x576>
 80007ba:	ea4f 439c 	mov.w	r3, ip, lsr #18
 80007be:	337c      	adds	r3, #124	; 0x7c
 80007c0:	00d8      	lsls	r0, r3, #3
 80007c2:	e74c      	b.n	800065e <_malloc_r+0x3fe>
 80007c4:	686b      	ldr	r3, [r5, #4]
 80007c6:	ea23 0307 	bic.w	r3, r3, r7
 80007ca:	606b      	str	r3, [r5, #4]
 80007cc:	e784      	b.n	80006d8 <_malloc_r+0x478>
 80007ce:	007f      	lsls	r7, r7, #1
 80007d0:	f108 0804 	add.w	r8, r8, #4
 80007d4:	e787      	b.n	80006e6 <_malloc_r+0x486>
 80007d6:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 80007da:	237e      	movs	r3, #126	; 0x7e
 80007dc:	e73f      	b.n	800065e <_malloc_r+0x3fe>
 80007de:	bf00      	nop

080007e0 <memset>:
 80007e0:	2a03      	cmp	r2, #3
 80007e2:	b2c9      	uxtb	r1, r1
 80007e4:	b470      	push	{r4, r5, r6}
 80007e6:	d807      	bhi.n	80007f8 <memset+0x18>
 80007e8:	b122      	cbz	r2, 80007f4 <memset+0x14>
 80007ea:	2300      	movs	r3, #0
 80007ec:	54c1      	strb	r1, [r0, r3]
 80007ee:	3301      	adds	r3, #1
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d1fb      	bne.n	80007ec <memset+0xc>
 80007f4:	bc70      	pop	{r4, r5, r6}
 80007f6:	4770      	bx	lr
 80007f8:	0785      	lsls	r5, r0, #30
 80007fa:	4402      	add	r2, r0
 80007fc:	4603      	mov	r3, r0
 80007fe:	d003      	beq.n	8000808 <memset+0x28>
 8000800:	f803 1b01 	strb.w	r1, [r3], #1
 8000804:	079c      	lsls	r4, r3, #30
 8000806:	d1fb      	bne.n	8000800 <memset+0x20>
 8000808:	020c      	lsls	r4, r1, #8
 800080a:	1ad5      	subs	r5, r2, r3
 800080c:	1864      	adds	r4, r4, r1
 800080e:	0426      	lsls	r6, r4, #16
 8000810:	2d3f      	cmp	r5, #63	; 0x3f
 8000812:	4434      	add	r4, r6
 8000814:	dd1a      	ble.n	800084c <memset+0x6c>
 8000816:	601c      	str	r4, [r3, #0]
 8000818:	605c      	str	r4, [r3, #4]
 800081a:	609c      	str	r4, [r3, #8]
 800081c:	60dc      	str	r4, [r3, #12]
 800081e:	611c      	str	r4, [r3, #16]
 8000820:	615c      	str	r4, [r3, #20]
 8000822:	619c      	str	r4, [r3, #24]
 8000824:	61dc      	str	r4, [r3, #28]
 8000826:	621c      	str	r4, [r3, #32]
 8000828:	625c      	str	r4, [r3, #36]	; 0x24
 800082a:	629c      	str	r4, [r3, #40]	; 0x28
 800082c:	62dc      	str	r4, [r3, #44]	; 0x2c
 800082e:	631c      	str	r4, [r3, #48]	; 0x30
 8000830:	635c      	str	r4, [r3, #52]	; 0x34
 8000832:	639c      	str	r4, [r3, #56]	; 0x38
 8000834:	63dc      	str	r4, [r3, #60]	; 0x3c
 8000836:	3340      	adds	r3, #64	; 0x40
 8000838:	1ad5      	subs	r5, r2, r3
 800083a:	2d3f      	cmp	r5, #63	; 0x3f
 800083c:	dceb      	bgt.n	8000816 <memset+0x36>
 800083e:	e005      	b.n	800084c <memset+0x6c>
 8000840:	601c      	str	r4, [r3, #0]
 8000842:	605c      	str	r4, [r3, #4]
 8000844:	609c      	str	r4, [r3, #8]
 8000846:	60dc      	str	r4, [r3, #12]
 8000848:	3310      	adds	r3, #16
 800084a:	1ad5      	subs	r5, r2, r3
 800084c:	2d0f      	cmp	r5, #15
 800084e:	dcf7      	bgt.n	8000840 <memset+0x60>
 8000850:	e002      	b.n	8000858 <memset+0x78>
 8000852:	f843 4b04 	str.w	r4, [r3], #4
 8000856:	1ad5      	subs	r5, r2, r3
 8000858:	2d03      	cmp	r5, #3
 800085a:	dcfa      	bgt.n	8000852 <memset+0x72>
 800085c:	4293      	cmp	r3, r2
 800085e:	d2c9      	bcs.n	80007f4 <memset+0x14>
 8000860:	f803 1b01 	strb.w	r1, [r3], #1
 8000864:	4293      	cmp	r3, r2
 8000866:	d1fb      	bne.n	8000860 <memset+0x80>
 8000868:	e7c4      	b.n	80007f4 <memset+0x14>
 800086a:	bf00      	nop

0800086c <strncpy>:
 800086c:	ea41 0300 	orr.w	r3, r1, r0
 8000870:	f013 0f03 	tst.w	r3, #3
 8000874:	4603      	mov	r3, r0
 8000876:	b470      	push	{r4, r5, r6}
 8000878:	bf14      	ite	ne
 800087a:	2400      	movne	r4, #0
 800087c:	2401      	moveq	r4, #1
 800087e:	2a03      	cmp	r2, #3
 8000880:	bf94      	ite	ls
 8000882:	2400      	movls	r4, #0
 8000884:	f004 0401 	andhi.w	r4, r4, #1
 8000888:	460d      	mov	r5, r1
 800088a:	b9c4      	cbnz	r4, 80008be <strncpy+0x52>
 800088c:	b1aa      	cbz	r2, 80008ba <strncpy+0x4e>
 800088e:	780c      	ldrb	r4, [r1, #0]
 8000890:	3a01      	subs	r2, #1
 8000892:	f803 4b01 	strb.w	r4, [r3], #1
 8000896:	b14c      	cbz	r4, 80008ac <strncpy+0x40>
 8000898:	461c      	mov	r4, r3
 800089a:	b172      	cbz	r2, 80008ba <strncpy+0x4e>
 800089c:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 80008a0:	3a01      	subs	r2, #1
 80008a2:	f804 6b01 	strb.w	r6, [r4], #1
 80008a6:	4623      	mov	r3, r4
 80008a8:	2e00      	cmp	r6, #0
 80008aa:	d1f6      	bne.n	800089a <strncpy+0x2e>
 80008ac:	b12a      	cbz	r2, 80008ba <strncpy+0x4e>
 80008ae:	189a      	adds	r2, r3, r2
 80008b0:	2100      	movs	r1, #0
 80008b2:	f803 1b01 	strb.w	r1, [r3], #1
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d1fb      	bne.n	80008b2 <strncpy+0x46>
 80008ba:	bc70      	pop	{r4, r5, r6}
 80008bc:	4770      	bx	lr
 80008be:	4629      	mov	r1, r5
 80008c0:	f855 4b04 	ldr.w	r4, [r5], #4
 80008c4:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
 80008c8:	ea26 0604 	bic.w	r6, r6, r4
 80008cc:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 80008d0:	d1dc      	bne.n	800088c <strncpy+0x20>
 80008d2:	3a04      	subs	r2, #4
 80008d4:	f843 4b04 	str.w	r4, [r3], #4
 80008d8:	2a03      	cmp	r2, #3
 80008da:	d8f0      	bhi.n	80008be <strncpy+0x52>
 80008dc:	4629      	mov	r1, r5
 80008de:	e7d5      	b.n	800088c <strncpy+0x20>

080008e0 <atexit>:
 80008e0:	4601      	mov	r1, r0
 80008e2:	2000      	movs	r0, #0
 80008e4:	4602      	mov	r2, r0
 80008e6:	4603      	mov	r3, r0
 80008e8:	f000 b932 	b.w	8000b50 <__register_exitproc>

080008ec <__libc_fini_array>:
 80008ec:	b538      	push	{r3, r4, r5, lr}
 80008ee:	f243 0484 	movw	r4, #12420	; 0x3084
 80008f2:	f243 0580 	movw	r5, #12416	; 0x3080
 80008f6:	f6c0 0400 	movt	r4, #2048	; 0x800
 80008fa:	f6c0 0500 	movt	r5, #2048	; 0x800
 80008fe:	1b64      	subs	r4, r4, r5
 8000900:	10a4      	asrs	r4, r4, #2
 8000902:	d006      	beq.n	8000912 <__libc_fini_array+0x26>
 8000904:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8000908:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800090c:	4798      	blx	r3
 800090e:	3c01      	subs	r4, #1
 8000910:	d1fa      	bne.n	8000908 <__libc_fini_array+0x1c>
 8000912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000916:	f002 bba9 	b.w	800306c <_fini>
 800091a:	bf00      	nop

0800091c <_malloc_trim_r>:
 800091c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800091e:	f240 04f4 	movw	r4, #244	; 0xf4
 8000922:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000926:	460f      	mov	r7, r1
 8000928:	4605      	mov	r5, r0
 800092a:	f000 fd97 	bl	800145c <__malloc_lock>
 800092e:	68a3      	ldr	r3, [r4, #8]
 8000930:	4628      	mov	r0, r5
 8000932:	685e      	ldr	r6, [r3, #4]
 8000934:	f026 0603 	bic.w	r6, r6, #3
 8000938:	f506 637e 	add.w	r3, r6, #4064	; 0xfe0
 800093c:	330f      	adds	r3, #15
 800093e:	1bdf      	subs	r7, r3, r7
 8000940:	0b3f      	lsrs	r7, r7, #12
 8000942:	3f01      	subs	r7, #1
 8000944:	033f      	lsls	r7, r7, #12
 8000946:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 800094a:	db07      	blt.n	800095c <_malloc_trim_r+0x40>
 800094c:	2100      	movs	r1, #0
 800094e:	f000 fd3d 	bl	80013cc <_sbrk_r>
 8000952:	68a3      	ldr	r3, [r4, #8]
 8000954:	199b      	adds	r3, r3, r6
 8000956:	4298      	cmp	r0, r3
 8000958:	4628      	mov	r0, r5
 800095a:	d003      	beq.n	8000964 <_malloc_trim_r+0x48>
 800095c:	f000 fd88 	bl	8001470 <__malloc_unlock>
 8000960:	2000      	movs	r0, #0
 8000962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000964:	4279      	negs	r1, r7
 8000966:	f000 fd31 	bl	80013cc <_sbrk_r>
 800096a:	3001      	adds	r0, #1
 800096c:	d010      	beq.n	8000990 <_malloc_trim_r+0x74>
 800096e:	f240 5378 	movw	r3, #1400	; 0x578
 8000972:	68a1      	ldr	r1, [r4, #8]
 8000974:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000978:	1bf6      	subs	r6, r6, r7
 800097a:	4628      	mov	r0, r5
 800097c:	f046 0601 	orr.w	r6, r6, #1
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	604e      	str	r6, [r1, #4]
 8000984:	1bd7      	subs	r7, r2, r7
 8000986:	601f      	str	r7, [r3, #0]
 8000988:	f000 fd72 	bl	8001470 <__malloc_unlock>
 800098c:	2001      	movs	r0, #1
 800098e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000990:	2100      	movs	r1, #0
 8000992:	4628      	mov	r0, r5
 8000994:	f000 fd1a 	bl	80013cc <_sbrk_r>
 8000998:	68a3      	ldr	r3, [r4, #8]
 800099a:	1ac2      	subs	r2, r0, r3
 800099c:	2a0f      	cmp	r2, #15
 800099e:	dd0d      	ble.n	80009bc <_malloc_trim_r+0xa0>
 80009a0:	f240 44fc 	movw	r4, #1276	; 0x4fc
 80009a4:	f240 5178 	movw	r1, #1400	; 0x578
 80009a8:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80009ac:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80009b0:	f042 0201 	orr.w	r2, r2, #1
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	6823      	ldr	r3, [r4, #0]
 80009b8:	1ac0      	subs	r0, r0, r3
 80009ba:	6008      	str	r0, [r1, #0]
 80009bc:	4628      	mov	r0, r5
 80009be:	e7cd      	b.n	800095c <_malloc_trim_r+0x40>

080009c0 <_free_r>:
 80009c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009c2:	460d      	mov	r5, r1
 80009c4:	4604      	mov	r4, r0
 80009c6:	2900      	cmp	r1, #0
 80009c8:	d075      	beq.n	8000ab6 <_free_r+0xf6>
 80009ca:	f000 fd47 	bl	800145c <__malloc_lock>
 80009ce:	f855 6c04 	ldr.w	r6, [r5, #-4]
 80009d2:	f240 00f4 	movw	r0, #244	; 0xf4
 80009d6:	f1a5 0108 	sub.w	r1, r5, #8
 80009da:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80009de:	f026 0301 	bic.w	r3, r6, #1
 80009e2:	18ca      	adds	r2, r1, r3
 80009e4:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80009e8:	6857      	ldr	r7, [r2, #4]
 80009ea:	4594      	cmp	ip, r2
 80009ec:	f027 0703 	bic.w	r7, r7, #3
 80009f0:	d07e      	beq.n	8000af0 <_free_r+0x130>
 80009f2:	f016 0601 	ands.w	r6, r6, #1
 80009f6:	6057      	str	r7, [r2, #4]
 80009f8:	d04d      	beq.n	8000a96 <_free_r+0xd6>
 80009fa:	2600      	movs	r6, #0
 80009fc:	19d5      	adds	r5, r2, r7
 80009fe:	686d      	ldr	r5, [r5, #4]
 8000a00:	f015 0f01 	tst.w	r5, #1
 8000a04:	d106      	bne.n	8000a14 <_free_r+0x54>
 8000a06:	19db      	adds	r3, r3, r7
 8000a08:	6895      	ldr	r5, [r2, #8]
 8000a0a:	2e00      	cmp	r6, #0
 8000a0c:	d064      	beq.n	8000ad8 <_free_r+0x118>
 8000a0e:	68d2      	ldr	r2, [r2, #12]
 8000a10:	60ea      	str	r2, [r5, #12]
 8000a12:	6095      	str	r5, [r2, #8]
 8000a14:	f043 0201 	orr.w	r2, r3, #1
 8000a18:	50cb      	str	r3, [r1, r3]
 8000a1a:	604a      	str	r2, [r1, #4]
 8000a1c:	2e00      	cmp	r6, #0
 8000a1e:	d135      	bne.n	8000a8c <_free_r+0xcc>
 8000a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a24:	d348      	bcc.n	8000ab8 <_free_r+0xf8>
 8000a26:	099e      	lsrs	r6, r3, #6
 8000a28:	0a5a      	lsrs	r2, r3, #9
 8000a2a:	3638      	adds	r6, #56	; 0x38
 8000a2c:	00f5      	lsls	r5, r6, #3
 8000a2e:	2a04      	cmp	r2, #4
 8000a30:	d916      	bls.n	8000a60 <_free_r+0xa0>
 8000a32:	f102 065b 	add.w	r6, r2, #91	; 0x5b
 8000a36:	00f5      	lsls	r5, r6, #3
 8000a38:	2a14      	cmp	r2, #20
 8000a3a:	d911      	bls.n	8000a60 <_free_r+0xa0>
 8000a3c:	0b1e      	lsrs	r6, r3, #12
 8000a3e:	366e      	adds	r6, #110	; 0x6e
 8000a40:	00f5      	lsls	r5, r6, #3
 8000a42:	2a54      	cmp	r2, #84	; 0x54
 8000a44:	d90c      	bls.n	8000a60 <_free_r+0xa0>
 8000a46:	0bde      	lsrs	r6, r3, #15
 8000a48:	3677      	adds	r6, #119	; 0x77
 8000a4a:	00f5      	lsls	r5, r6, #3
 8000a4c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8000a50:	d906      	bls.n	8000a60 <_free_r+0xa0>
 8000a52:	f240 5554 	movw	r5, #1364	; 0x554
 8000a56:	42aa      	cmp	r2, r5
 8000a58:	d874      	bhi.n	8000b44 <_free_r+0x184>
 8000a5a:	0c9e      	lsrs	r6, r3, #18
 8000a5c:	367c      	adds	r6, #124	; 0x7c
 8000a5e:	00f5      	lsls	r5, r6, #3
 8000a60:	1940      	adds	r0, r0, r5
 8000a62:	f240 05f4 	movw	r5, #244	; 0xf4
 8000a66:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8000a6a:	6882      	ldr	r2, [r0, #8]
 8000a6c:	4282      	cmp	r2, r0
 8000a6e:	d103      	bne.n	8000a78 <_free_r+0xb8>
 8000a70:	e05f      	b.n	8000b32 <_free_r+0x172>
 8000a72:	6892      	ldr	r2, [r2, #8]
 8000a74:	4290      	cmp	r0, r2
 8000a76:	d004      	beq.n	8000a82 <_free_r+0xc2>
 8000a78:	6855      	ldr	r5, [r2, #4]
 8000a7a:	f025 0503 	bic.w	r5, r5, #3
 8000a7e:	42ab      	cmp	r3, r5
 8000a80:	d3f7      	bcc.n	8000a72 <_free_r+0xb2>
 8000a82:	68d3      	ldr	r3, [r2, #12]
 8000a84:	60cb      	str	r3, [r1, #12]
 8000a86:	608a      	str	r2, [r1, #8]
 8000a88:	60d1      	str	r1, [r2, #12]
 8000a8a:	6099      	str	r1, [r3, #8]
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8000a92:	f000 bced 	b.w	8001470 <__malloc_unlock>
 8000a96:	f855 5c08 	ldr.w	r5, [r5, #-8]
 8000a9a:	f100 0c08 	add.w	ip, r0, #8
 8000a9e:	1b49      	subs	r1, r1, r5
 8000aa0:	195b      	adds	r3, r3, r5
 8000aa2:	688d      	ldr	r5, [r1, #8]
 8000aa4:	4565      	cmp	r5, ip
 8000aa6:	d042      	beq.n	8000b2e <_free_r+0x16e>
 8000aa8:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8000aac:	f8c5 c00c 	str.w	ip, [r5, #12]
 8000ab0:	f8cc 5008 	str.w	r5, [ip, #8]
 8000ab4:	e7a2      	b.n	80009fc <_free_r+0x3c>
 8000ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ab8:	08db      	lsrs	r3, r3, #3
 8000aba:	2501      	movs	r5, #1
 8000abc:	6846      	ldr	r6, [r0, #4]
 8000abe:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8000ac2:	109b      	asrs	r3, r3, #2
 8000ac4:	fa05 f303 	lsl.w	r3, r5, r3
 8000ac8:	60ca      	str	r2, [r1, #12]
 8000aca:	6895      	ldr	r5, [r2, #8]
 8000acc:	4333      	orrs	r3, r6
 8000ace:	6043      	str	r3, [r0, #4]
 8000ad0:	608d      	str	r5, [r1, #8]
 8000ad2:	60e9      	str	r1, [r5, #12]
 8000ad4:	6091      	str	r1, [r2, #8]
 8000ad6:	e7d9      	b.n	8000a8c <_free_r+0xcc>
 8000ad8:	4f1c      	ldr	r7, [pc, #112]	; (8000b4c <_free_r+0x18c>)
 8000ada:	42bd      	cmp	r5, r7
 8000adc:	d197      	bne.n	8000a0e <_free_r+0x4e>
 8000ade:	6141      	str	r1, [r0, #20]
 8000ae0:	f043 0201 	orr.w	r2, r3, #1
 8000ae4:	6101      	str	r1, [r0, #16]
 8000ae6:	60cd      	str	r5, [r1, #12]
 8000ae8:	608d      	str	r5, [r1, #8]
 8000aea:	604a      	str	r2, [r1, #4]
 8000aec:	50cb      	str	r3, [r1, r3]
 8000aee:	e7cd      	b.n	8000a8c <_free_r+0xcc>
 8000af0:	07f2      	lsls	r2, r6, #31
 8000af2:	443b      	add	r3, r7
 8000af4:	d407      	bmi.n	8000b06 <_free_r+0x146>
 8000af6:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8000afa:	1a89      	subs	r1, r1, r2
 8000afc:	189b      	adds	r3, r3, r2
 8000afe:	688d      	ldr	r5, [r1, #8]
 8000b00:	68ca      	ldr	r2, [r1, #12]
 8000b02:	60ea      	str	r2, [r5, #12]
 8000b04:	6095      	str	r5, [r2, #8]
 8000b06:	f240 5200 	movw	r2, #1280	; 0x500
 8000b0a:	f043 0501 	orr.w	r5, r3, #1
 8000b0e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000b12:	604d      	str	r5, [r1, #4]
 8000b14:	6081      	str	r1, [r0, #8]
 8000b16:	6812      	ldr	r2, [r2, #0]
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d3b7      	bcc.n	8000a8c <_free_r+0xcc>
 8000b1c:	f240 5374 	movw	r3, #1396	; 0x574
 8000b20:	4620      	mov	r0, r4
 8000b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b26:	6819      	ldr	r1, [r3, #0]
 8000b28:	f7ff fef8 	bl	800091c <_malloc_trim_r>
 8000b2c:	e7ae      	b.n	8000a8c <_free_r+0xcc>
 8000b2e:	2601      	movs	r6, #1
 8000b30:	e764      	b.n	80009fc <_free_r+0x3c>
 8000b32:	2701      	movs	r7, #1
 8000b34:	6868      	ldr	r0, [r5, #4]
 8000b36:	10b6      	asrs	r6, r6, #2
 8000b38:	4613      	mov	r3, r2
 8000b3a:	fa07 f606 	lsl.w	r6, r7, r6
 8000b3e:	4330      	orrs	r0, r6
 8000b40:	6068      	str	r0, [r5, #4]
 8000b42:	e79f      	b.n	8000a84 <_free_r+0xc4>
 8000b44:	f44f 757c 	mov.w	r5, #1008	; 0x3f0
 8000b48:	267e      	movs	r6, #126	; 0x7e
 8000b4a:	e789      	b.n	8000a60 <_free_r+0xa0>
 8000b4c:	200000fc 	.word	0x200000fc

08000b50 <__register_exitproc>:
 8000b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b54:	f642 74f0 	movw	r4, #12272	; 0x2ff0
 8000b58:	f6c0 0400 	movt	r4, #2048	; 0x800
 8000b5c:	b084      	sub	sp, #16
 8000b5e:	4605      	mov	r5, r0
 8000b60:	6826      	ldr	r6, [r4, #0]
 8000b62:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8000b64:	2c00      	cmp	r4, #0
 8000b66:	d042      	beq.n	8000bee <__register_exitproc+0x9e>
 8000b68:	6860      	ldr	r0, [r4, #4]
 8000b6a:	281f      	cmp	r0, #31
 8000b6c:	dd1a      	ble.n	8000ba4 <__register_exitproc+0x54>
 8000b6e:	f240 2041 	movw	r0, #577	; 0x241
 8000b72:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000b76:	b920      	cbnz	r0, 8000b82 <__register_exitproc+0x32>
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7c:	b004      	add	sp, #16
 8000b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b82:	208c      	movs	r0, #140	; 0x8c
 8000b84:	9103      	str	r1, [sp, #12]
 8000b86:	9202      	str	r2, [sp, #8]
 8000b88:	9301      	str	r3, [sp, #4]
 8000b8a:	f7ff fb59 	bl	8000240 <malloc>
 8000b8e:	9903      	ldr	r1, [sp, #12]
 8000b90:	9a02      	ldr	r2, [sp, #8]
 8000b92:	9b01      	ldr	r3, [sp, #4]
 8000b94:	4604      	mov	r4, r0
 8000b96:	2800      	cmp	r0, #0
 8000b98:	d0ee      	beq.n	8000b78 <__register_exitproc+0x28>
 8000b9a:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 8000b9c:	2700      	movs	r7, #0
 8000b9e:	e884 0081 	stmia.w	r4, {r0, r7}
 8000ba2:	64b4      	str	r4, [r6, #72]	; 0x48
 8000ba4:	b1dd      	cbz	r5, 8000bde <__register_exitproc+0x8e>
 8000ba6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8000baa:	b320      	cbz	r0, 8000bf6 <__register_exitproc+0xa6>
 8000bac:	f8d0 8100 	ldr.w	r8, [r0, #256]	; 0x100
 8000bb0:	6866      	ldr	r6, [r4, #4]
 8000bb2:	2701      	movs	r7, #1
 8000bb4:	2d02      	cmp	r5, #2
 8000bb6:	f106 0c20 	add.w	ip, r6, #32
 8000bba:	fa07 f706 	lsl.w	r7, r7, r6
 8000bbe:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
 8000bc2:	ea48 0207 	orr.w	r2, r8, r7
 8000bc6:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
 8000bca:	bf08      	it	eq
 8000bcc:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8000bd0:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 8000bd4:	bf04      	itt	eq
 8000bd6:	431f      	orreq	r7, r3
 8000bd8:	f8c0 7104 	streq.w	r7, [r0, #260]	; 0x104
 8000bdc:	e000      	b.n	8000be0 <__register_exitproc+0x90>
 8000bde:	6866      	ldr	r6, [r4, #4]
 8000be0:	1cb3      	adds	r3, r6, #2
 8000be2:	2000      	movs	r0, #0
 8000be4:	3601      	adds	r6, #1
 8000be6:	6066      	str	r6, [r4, #4]
 8000be8:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8000bec:	e7c6      	b.n	8000b7c <__register_exitproc+0x2c>
 8000bee:	f106 044c 	add.w	r4, r6, #76	; 0x4c
 8000bf2:	64b4      	str	r4, [r6, #72]	; 0x48
 8000bf4:	e7b8      	b.n	8000b68 <__register_exitproc+0x18>
 8000bf6:	f240 2041 	movw	r0, #577	; 0x241
 8000bfa:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000bfe:	2800      	cmp	r0, #0
 8000c00:	d0ba      	beq.n	8000b78 <__register_exitproc+0x28>
 8000c02:	f44f 7084 	mov.w	r0, #264	; 0x108
 8000c06:	9103      	str	r1, [sp, #12]
 8000c08:	9202      	str	r2, [sp, #8]
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	f7ff fb18 	bl	8000240 <malloc>
 8000c10:	9903      	ldr	r1, [sp, #12]
 8000c12:	9a02      	ldr	r2, [sp, #8]
 8000c14:	9b01      	ldr	r3, [sp, #4]
 8000c16:	2800      	cmp	r0, #0
 8000c18:	d0ae      	beq.n	8000b78 <__register_exitproc+0x28>
 8000c1a:	2600      	movs	r6, #0
 8000c1c:	f8c0 6100 	str.w	r6, [r0, #256]	; 0x100
 8000c20:	f8c0 6104 	str.w	r6, [r0, #260]	; 0x104
 8000c24:	46b0      	mov	r8, r6
 8000c26:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8000c2a:	e7c1      	b.n	8000bb0 <__register_exitproc+0x60>

08000c2c <rb_getc>:
 * \param   rb    pointer to ringbuffer struct
 * \param   data  pointer to data byte
 * \return  number of bytes read (0 if buffer was empty)
 */
static inline int rb_getc(struct ringbuf *rb, char *data)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
    if (!rb->len)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d102      	bne.n	8000c44 <rb_getc+0x18>
        return 0;
 8000c3e:	f04f 0300 	mov.w	r3, #0
 8000c42:	e025      	b.n	8000c90 <rb_getc+0x64>

    vPortEnterCritical();
 8000c44:	f001 fbee 	bl	8002424 <vPortEnterCritical>

    *data = rb->buf[rb->pos++];
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6819      	ldr	r1, [r3, #0]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	461a      	mov	r2, r3
 8000c52:	188a      	adds	r2, r1, r2
 8000c54:	7811      	ldrb	r1, [r2, #0]
 8000c56:	683a      	ldr	r2, [r7, #0]
 8000c58:	7011      	strb	r1, [r2, #0]
 8000c5a:	f103 0201 	add.w	r2, r3, #1
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	609a      	str	r2, [r3, #8]
	if (rb->pos >= rb->bufsize)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	689a      	ldr	r2, [r3, #8]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	db06      	blt.n	8000c7c <rb_getc+0x50>
		rb->pos -= rb->bufsize;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	689a      	ldr	r2, [r3, #8]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	1ad2      	subs	r2, r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
	rb->len--;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	f103 32ff 	add.w	r2, r3, #4294967295
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	60da      	str	r2, [r3, #12]

    vPortExitCritical();
 8000c88:	f001 fbe2 	bl	8002450 <vPortExitCritical>
    return 1;
 8000c8c:	f04f 0301 	mov.w	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	f107 0708 	add.w	r7, r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop

08000c9c <rb_putc>:
 * \param   rb    pointer to ringbuffer struct
 * \param   data  pointer to data byte
 * \return  number of bytes written (0 if buffer was full)
 */
static inline int rb_putc(struct ringbuf *rb, const char data)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	70fb      	strb	r3, [r7, #3]
    if (rb->len >= rb->bufsize)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	68da      	ldr	r2, [r3, #12]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	db02      	blt.n	8000cba <rb_putc+0x1e>
        return 0;
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	e021      	b.n	8000cfe <rb_putc+0x62>

    vPortEnterCritical();
 8000cba:	f001 fbb3 	bl	8002424 <vPortEnterCritical>

	int i = rb->pos + rb->len;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	689a      	ldr	r2, [r3, #8]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	18d3      	adds	r3, r2, r3
 8000cc8:	60fb      	str	r3, [r7, #12]
	if (i >= rb->bufsize)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685a      	ldr	r2, [r3, #4]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	dc04      	bgt.n	8000cde <rb_putc+0x42>
		i -= rb->bufsize;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	68fa      	ldr	r2, [r7, #12]
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	60fb      	str	r3, [r7, #12]

	rb->buf[i] = data;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	18d3      	adds	r3, r2, r3
 8000ce6:	78fa      	ldrb	r2, [r7, #3]
 8000ce8:	701a      	strb	r2, [r3, #0]
	rb->len++;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	f103 0201 	add.w	r2, r3, #1
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	60da      	str	r2, [r3, #12]

    vPortExitCritical();
 8000cf6:	f001 fbab 	bl	8002450 <vPortExitCritical>
    return 1;
 8000cfa:	f04f 0301 	mov.w	r3, #1
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f107 0710 	add.w	r7, r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <USART1_IRQHandler>:
    uint32_t    tx_bytes;
} uart_stats;


void USART1_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
    if (USART1->SR & USART_SR_RXNE) {
 8000d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d12:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	f003 0320 	and.w	r3, r3, #32
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d029      	beq.n	8000d76 <USART1_IRQHandler+0x6e>
        if (!rb_putc(&rx_buf, USART1->DR))
 8000d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d26:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000d2a:	889b      	ldrh	r3, [r3, #4]
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	f240 5004 	movw	r0, #1284	; 0x504
 8000d34:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f7ff ffaf 	bl	8000c9c <rb_putc>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d10c      	bne.n	8000d5e <USART1_IRQHandler+0x56>
            uart_stats.rx_overrun++;
 8000d44:	f240 63a8 	movw	r3, #1704	; 0x6a8
 8000d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f103 0201 	add.w	r2, r3, #1
 8000d52:	f240 63a8 	movw	r3, #1704	; 0x6a8
 8000d56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	e00b      	b.n	8000d76 <USART1_IRQHandler+0x6e>
        else
            uart_stats.rx_bytes++;
 8000d5e:	f240 63a8 	movw	r3, #1704	; 0x6a8
 8000d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f103 0201 	add.w	r2, r3, #1
 8000d6c:	f240 63a8 	movw	r3, #1704	; 0x6a8
 8000d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d74:	605a      	str	r2, [r3, #4]
    }

    if (USART1->SR & USART_SR_TXE) {
 8000d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d02c      	beq.n	8000de4 <USART1_IRQHandler+0xdc>
        char c;
        if (rb_getc(&tx_buf, &c)) {
 8000d8a:	f240 5014 	movw	r0, #1300	; 0x514
 8000d8e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000d92:	f107 0307 	add.w	r3, r7, #7
 8000d96:	4619      	mov	r1, r3
 8000d98:	f7ff ff48 	bl	8000c2c <rb_getc>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d006      	beq.n	8000db0 <USART1_IRQHandler+0xa8>
            // send a queued byte
            //
            USART1->DR = c;
 8000da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000daa:	79fa      	ldrb	r2, [r7, #7]
 8000dac:	809a      	strh	r2, [r3, #4]
 8000dae:	e00d      	b.n	8000dcc <USART1_IRQHandler+0xc4>
        }
        else {
            // nothing to send, disable interrupt
            //
            USART1->CR1 &= ~USART_CR1_TXEIE;
 8000db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000db8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dbc:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000dc0:	8992      	ldrh	r2, [r2, #12]
 8000dc2:	b292      	uxth	r2, r2
 8000dc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000dc8:	b292      	uxth	r2, r2
 8000dca:	819a      	strh	r2, [r3, #12]
        }
        uart_stats.tx_bytes++;
 8000dcc:	f240 63a8 	movw	r3, #1704	; 0x6a8
 8000dd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	f103 0201 	add.w	r2, r3, #1
 8000dda:	f240 63a8 	movw	r3, #1704	; 0x6a8
 8000dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000de2:	609a      	str	r2, [r3, #8]
    }
}
 8000de4:	f107 0708 	add.w	r7, r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <get_us_time>:
 *   this function must be called at least
 *   once every 65ms to work correctly.
 *
 */
uint64_t get_us_time()
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
    static uint16_t t0;
    static uint64_t tickcount;

    vPortEnterCritical();
 8000df2:	f001 fb17 	bl	8002424 <vPortEnterCritical>

    int t = TIM7->CNT;
 8000df6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dfa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e00:	607b      	str	r3, [r7, #4]
    if (t < t0)
 8000e02:	f240 63b4 	movw	r3, #1716	; 0x6b4
 8000e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e0a:	881b      	ldrh	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	dd03      	ble.n	8000e1c <get_us_time+0x30>
        t += 0x10000;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000e1a:	607b      	str	r3, [r7, #4]

    tickcount += t - t0;
 8000e1c:	f240 63b4 	movw	r3, #1716	; 0x6b4
 8000e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	1ad1      	subs	r1, r2, r3
 8000e2a:	460a      	mov	r2, r1
 8000e2c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000e30:	f240 61b8 	movw	r1, #1720	; 0x6b8
 8000e34:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000e38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e3c:	1880      	adds	r0, r0, r2
 8000e3e:	eb41 0103 	adc.w	r1, r1, r3
 8000e42:	f240 63b8 	movw	r3, #1720	; 0x6b8
 8000e46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e4a:	e9c3 0100 	strd	r0, r1, [r3]
    t0 = t;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	f240 63b4 	movw	r3, #1716	; 0x6b4
 8000e56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e5a:	801a      	strh	r2, [r3, #0]

    vPortExitCritical();
 8000e5c:	f001 faf8 	bl	8002450 <vPortExitCritical>

    return tickcount;
 8000e60:	f240 63b8 	movw	r3, #1720	; 0x6b8
 8000e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e68:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f107 0708 	add.w	r7, r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <init_us_timer>:
/**
 * Set up TIM7 as a 16bit, microsecond-timer.
 *
 */
void init_us_timer()
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;
    RCC_GetClocksFreq(&RCC_Clocks);
 8000e7e:	463b      	mov	r3, r7
 8000e80:	4618      	mov	r0, r3
 8000e82:	f001 fdfb 	bl	8002a7c <RCC_GetClocksFreq>

    RCC->APB1ENR |= RCC_APB1Periph_TIM7;
 8000e86:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e8a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e8e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000e92:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e96:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000e98:	f042 0220 	orr.w	r2, r2, #32
 8000e9c:	641a      	str	r2, [r3, #64]	; 0x40
    TIM7->PSC = (RCC_Clocks.PCLK2_Frequency / 1000000) - 1;
 8000e9e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ea2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000ea6:	68f9      	ldr	r1, [r7, #12]
 8000ea8:	f64d 6283 	movw	r2, #56963	; 0xde83
 8000eac:	f2c4 321b 	movt	r2, #17179	; 0x431b
 8000eb0:	fba2 0201 	umull	r0, r2, r2, r1
 8000eb4:	ea4f 4292 	mov.w	r2, r2, lsr #18
 8000eb8:	b292      	uxth	r2, r2
 8000eba:	f102 32ff 	add.w	r2, r2, #4294967295
 8000ebe:	b292      	uxth	r2, r2
 8000ec0:	851a      	strh	r2, [r3, #40]	; 0x28
    TIM7->ARR = 0xFFFF;
 8000ec2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ec6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000eca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ece:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM7->CR1 = TIM_CR1_CEN;
 8000ed0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ed4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000ed8:	f04f 0201 	mov.w	r2, #1
 8000edc:	801a      	strh	r2, [r3, #0]
}
 8000ede:	f107 0710 	add.w	r7, r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop

08000ee8 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	da10      	bge.n	8000f1e <NVIC_SetPriority+0x36>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000efc:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000f00:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000f04:	79fa      	ldrb	r2, [r7, #7]
 8000f06:	f002 020f 	and.w	r2, r2, #15
 8000f0a:	f1a2 0104 	sub.w	r1, r2, #4
 8000f0e:	683a      	ldr	r2, [r7, #0]
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8000f16:	b2d2      	uxtb	r2, r2
 8000f18:	185b      	adds	r3, r3, r1
 8000f1a:	761a      	strb	r2, [r3, #24]
 8000f1c:	e00d      	b.n	8000f3a <NVIC_SetPriority+0x52>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000f1e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000f22:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000f26:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8000f2a:	683a      	ldr	r2, [r7, #0]
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	185b      	adds	r3, r3, r1
 8000f36:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f3a:	f107 070c 	add.w	r7, r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr

08000f44 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d902      	bls.n	8000f5c <SysTick_Config+0x18>
 8000f56:	f04f 0301 	mov.w	r3, #1
 8000f5a:	e01f      	b.n	8000f9c <SysTick_Config+0x58>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000f5c:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000f60:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000f6a:	f102 32ff 	add.w	r2, r2, #4294967295
 8000f6e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8000f70:	f04f 30ff 	mov.w	r0, #4294967295
 8000f74:	f04f 010f 	mov.w	r1, #15
 8000f78:	f7ff ffb6 	bl	8000ee8 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000f7c:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000f80:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8a:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000f8e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000f92:	f04f 0207 	mov.w	r2, #7
 8000f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000f98:	f04f 0300 	mov.w	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f107 0708 	add.w	r7, r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop

08000fa8 <Delay>:
  * @brief  Inserts a delay time.
  * @param  nTime: specifies the delay time length, in milliseconds.
  * @retval None
  */
void Delay(__IO uint32_t nTime)
{ 
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  TimingDelay = nTime;
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	f240 63c0 	movw	r3, #1728	; 0x6c0
 8000fb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fba:	601a      	str	r2, [r3, #0]

  while(TimingDelay != 0);
 8000fbc:	bf00      	nop
 8000fbe:	f240 63c0 	movw	r3, #1728	; 0x6c0
 8000fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1f8      	bne.n	8000fbe <Delay+0x16>
}
 8000fcc:	f107 070c 	add.w	r7, r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <TimingDelay_Decrement>:
  * @brief  Decrements the TimingDelay variable.
  * @param  None
  * @retval None
  */
void TimingDelay_Decrement(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  if (TimingDelay != 0x00)
 8000fdc:	f240 63c0 	movw	r3, #1728	; 0x6c0
 8000fe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d00b      	beq.n	8001002 <TimingDelay_Decrement+0x2a>
  { 
    TimingDelay--;
 8000fea:	f240 63c0 	movw	r3, #1728	; 0x6c0
 8000fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f103 32ff 	add.w	r2, r3, #4294967295
 8000ff8:	f240 63c0 	movw	r3, #1728	; 0x6c0
 8000ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001000:	601a      	str	r2, [r3, #0]
  }
}
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <LIS302DL_TIMEOUT_UserCallback>:
  * @brief  MEMS accelerometre management of the timeout situation.
  * @param  None.
  * @retval None.
  */
uint32_t LIS302DL_TIMEOUT_UserCallback(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* MEMS Accelerometer Timeout error occured */
  while (1)
  {   
  }
 800100c:	e7fe      	b.n	800100c <LIS302DL_TIMEOUT_UserCallback+0x4>
 800100e:	bf00      	nop

08001010 <test>:
  }
}
#endif

void test(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
  	STM_EVAL_LEDInit(LED5);
  	STM_EVAL_LEDInit(LED6);
*/  
  
  /* Set configuration of LIS302DL*/
  LIS302DL_InitStruct.Power_Mode = LIS302DL_LOWPOWERMODE_ACTIVE;
 8001016:	f04f 0340 	mov.w	r3, #64	; 0x40
 800101a:	703b      	strb	r3, [r7, #0]
  LIS302DL_InitStruct.Output_DataRate = LIS302DL_DATARATE_400;
 800101c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8001020:	707b      	strb	r3, [r7, #1]
  LIS302DL_InitStruct.Axes_Enable = LIS302DL_X_ENABLE | LIS302DL_Y_ENABLE | LIS302DL_Z_ENABLE;
 8001022:	f04f 0307 	mov.w	r3, #7
 8001026:	70bb      	strb	r3, [r7, #2]
  LIS302DL_InitStruct.Full_Scale = LIS302DL_FULLSCALE_2_3;
 8001028:	f04f 0300 	mov.w	r3, #0
 800102c:	70fb      	strb	r3, [r7, #3]
  LIS302DL_InitStruct.Self_Test = LIS302DL_SELFTEST_NORMAL;
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	713b      	strb	r3, [r7, #4]
  LIS302DL_Init(&LIS302DL_InitStruct);
 8001034:	463b      	mov	r3, r7
 8001036:	4618      	mov	r0, r3
 8001038:	f000 fa24 	bl	8001484 <LIS302DL_Init>
  /* SysTick end of count event each 100ms */
  SysTick_Config(SystemCoreClock/1000);
 800103c:	f240 5324 	movw	r3, #1316	; 0x524
 8001040:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 800104a:	f2c1 0362 	movt	r3, #4194	; 0x1062
 800104e:	fba3 1302 	umull	r1, r3, r3, r2
 8001052:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ff74 	bl	8000f44 <SysTick_Config>

  /* Required delay for the MEMS Accelerometre: Turn-on time = 3/Output data Rate 
                                                             = 3/100 = 30ms */
  Delay(30);
 800105c:	f04f 001e 	mov.w	r0, #30
 8001060:	f7ff ffa2 	bl	8000fa8 <Delay>
  

  LIS302DL_Read(Buffer, LIS302DL_OUT_X_ADDR, 6);
 8001064:	f240 70e0 	movw	r0, #2016	; 0x7e0
 8001068:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800106c:	f04f 0129 	mov.w	r1, #41	; 0x29
 8001070:	f04f 0206 	mov.w	r2, #6
 8001074:	f000 fa68 	bl	8001548 <LIS302DL_Read>
                  
  XOffset = Buffer[0];
 8001078:	f240 73e0 	movw	r3, #2016	; 0x7e0
 800107c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	f240 73dc 	movw	r3, #2012	; 0x7dc
 8001088:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800108c:	701a      	strb	r2, [r3, #0]
  YOffset = Buffer[2];
 800108e:	f240 73e0 	movw	r3, #2016	; 0x7e0
 8001092:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001096:	789b      	ldrb	r3, [r3, #2]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	f240 73e6 	movw	r3, #2022	; 0x7e6
 800109e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010a2:	701a      	strb	r2, [r3, #0]

  while(1)
  {

  }
 80010a4:	e7fe      	b.n	80010a4 <test+0x94>
 80010a6:	bf00      	nop

080010a8 <main>:
}

//Main Function
int main(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af04      	add	r7, sp, #16
 	//GPIO_Configuration();

	//Create Task For USART
	//xTaskCreate(pwm, (signed char*)"pwm", 128, NULL, tskIDLE_PRIORITY+1, NULL);

	xTaskCreate(test, (signed char*)"pwm", 128, NULL, tskIDLE_PRIORITY+1, NULL);
 80010ae:	f241 0311 	movw	r3, #4113	; 0x1011
 80010b2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80010b6:	f04f 0201 	mov.w	r2, #1
 80010ba:	9200      	str	r2, [sp, #0]
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	9201      	str	r2, [sp, #4]
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	9202      	str	r2, [sp, #8]
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	9203      	str	r2, [sp, #12]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f642 7178 	movw	r1, #12152	; 0x2f78
 80010d4:	f6c0 0100 	movt	r1, #2048	; 0x800
 80010d8:	f04f 0280 	mov.w	r2, #128	; 0x80
 80010dc:	f04f 0300 	mov.w	r3, #0
 80010e0:	f000 fc1a 	bl	8001918 <xTaskGenericCreate>
	//Call Scheduler
	vTaskStartScheduler();
 80010e4:	f000 fcee 	bl	8001ac4 <vTaskStartScheduler>
 80010e8:	f04f 0300 	mov.w	r3, #0

}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop

080010f4 <Reset_Handler>:
 80010f4:	2100      	movs	r1, #0
 80010f6:	f000 b804 	b.w	8001102 <LoopCopyDataInit>

080010fa <CopyDataInit>:
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <LoopFillZerobss+0x22>)
 80010fc:	585b      	ldr	r3, [r3, r1]
 80010fe:	5043      	str	r3, [r0, r1]
 8001100:	3104      	adds	r1, #4

08001102 <LoopCopyDataInit>:
 8001102:	480f      	ldr	r0, [pc, #60]	; (8001140 <LoopFillZerobss+0x26>)
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <LoopFillZerobss+0x2a>)
 8001106:	1842      	adds	r2, r0, r1
 8001108:	429a      	cmp	r2, r3
 800110a:	f4ff aff6 	bcc.w	80010fa <CopyDataInit>
 800110e:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <LoopFillZerobss+0x2e>)
 8001110:	f000 b803 	b.w	800111a <LoopFillZerobss>

08001114 <FillZerobss>:
 8001114:	2300      	movs	r3, #0
 8001116:	f842 3b04 	str.w	r3, [r2], #4

0800111a <LoopFillZerobss>:
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <LoopFillZerobss+0x32>)
 800111c:	429a      	cmp	r2, r3
 800111e:	f4ff aff9 	bcc.w	8001114 <FillZerobss>
 8001122:	480b      	ldr	r0, [pc, #44]	; (8001150 <LoopFillZerobss+0x36>)
 8001124:	6801      	ldr	r1, [r0, #0]
 8001126:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800112a:	6001      	str	r1, [r0, #0]
 800112c:	f000 f814 	bl	8001158 <SystemInit>
 8001130:	f7ff f85e 	bl	80001f0 <__libc_init_array>
 8001134:	f7ff ffb8 	bl	80010a8 <main>
 8001138:	4770      	bx	lr
 800113a:	0000      	.short	0x0000
 800113c:	08003084 	.word	0x08003084
 8001140:	20000000 	.word	0x20000000
 8001144:	20000558 	.word	0x20000558
 8001148:	20000558 	.word	0x20000558
 800114c:	200007ec 	.word	0x200007ec
 8001150:	e000ed88 	.word	0xe000ed88

08001154 <ADC_IRQHandler>:
 8001154:	f7ff bffe 	b.w	8001154 <ADC_IRQHandler>

08001158 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800115c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001160:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001164:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001168:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800116c:	6812      	ldr	r2, [r2, #0]
 800116e:	f042 0201 	orr.w	r2, r2, #1
 8001172:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001174:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001178:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001182:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001186:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800118a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800118e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001192:	6812      	ldr	r2, [r2, #0]
 8001194:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001198:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800119c:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800119e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80011a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011a6:	f243 0210 	movw	r2, #12304	; 0x3010
 80011aa:	f2c2 4200 	movt	r2, #9216	; 0x2400
 80011ae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80011b0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80011b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80011bc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011c0:	6812      	ldr	r2, [r2, #0]
 80011c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011c6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80011c8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80011cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80011d6:	f000 f809 	bl	80011ec <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011da:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80011de:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80011e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011e6:	609a      	str	r2, [r3, #8]
#endif
}
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop

080011ec <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80011f2:	f04f 0300 	mov.w	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	f04f 0300 	mov.w	r3, #0
 80011fc:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80011fe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001202:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001206:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800120a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800120e:	6812      	ldr	r2, [r2, #0]
 8001210:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001214:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001216:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800121a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001224:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f103 0301 	add.w	r3, r3, #1
 800122c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d103      	bne.n	800123c <SetSysClock+0x50>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800123a:	d1ec      	bne.n	8001216 <SetSysClock+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800123c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001240:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <SetSysClock+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 800124e:	f04f 0301 	mov.w	r3, #1
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	e002      	b.n	800125c <SetSysClock+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001256:	f04f 0300 	mov.w	r3, #0
 800125a:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	2b01      	cmp	r3, #1
 8001260:	f040 8082 	bne.w	8001368 <SetSysClock+0x17c>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001264:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001268:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800126c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001270:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001274:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001276:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800127a:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 800127c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001280:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001284:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8001288:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800128c:	6812      	ldr	r2, [r2, #0]
 800128e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001292:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001294:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001298:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800129c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80012a0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012a4:	6892      	ldr	r2, [r2, #8]
 80012a6:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80012a8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012b0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80012b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012b8:	6892      	ldr	r2, [r2, #8]
 80012ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012be:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80012c0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012c8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80012cc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012d0:	6892      	ldr	r2, [r2, #8]
 80012d2:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80012d6:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80012d8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012e0:	f245 4208 	movw	r2, #21512	; 0x5408
 80012e4:	f2c0 7240 	movt	r2, #1856	; 0x740
 80012e8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80012ea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012f2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80012f6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012fa:	6812      	ldr	r2, [r2, #0]
 80012fc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001300:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001302:	bf00      	nop
 8001304:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001308:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f6      	beq.n	8001304 <SetSysClock+0x118>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001316:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800131a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800131e:	f240 6205 	movw	r2, #1541	; 0x605
 8001322:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001324:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001328:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800132c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001330:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001334:	6892      	ldr	r2, [r2, #8]
 8001336:	f022 0203 	bic.w	r2, r2, #3
 800133a:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800133c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001340:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001344:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001348:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800134c:	6892      	ldr	r2, [r2, #8]
 800134e:	f042 0202 	orr.w	r2, r2, #2
 8001352:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001354:	bf00      	nop
 8001356:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800135a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f003 030c 	and.w	r3, r3, #12
 8001364:	2b08      	cmp	r3, #8
 8001366:	d1f6      	bne.n	8001356 <SetSysClock+0x16a>

/******************************************************************************/
/*                        I2S clock configuration                             */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 8001368:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800136c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001370:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001374:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001378:	6892      	ldr	r2, [r2, #8]
 800137a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800137e:	609a      	str	r2, [r3, #8]

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 8001380:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001384:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001388:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800138c:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8001390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 8001394:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001398:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800139c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80013a0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80013a4:	6812      	ldr	r2, [r2, #0]
 80013a6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80013aa:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 80013ac:	bf00      	nop
 80013ae:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80013b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0f6      	beq.n	80013ae <SetSysClock+0x1c2>
  {
  }
}
 80013c0:	f107 070c 	add.w	r7, r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop

080013cc <_sbrk_r>:
    return 1;
}


void *_sbrk_r(struct _reent *r, ptrdiff_t incr)
{
 80013cc:	b490      	push	{r4, r7}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
    extern char end;   // provided by the linker script

    if (__brkval == 0)
 80013d6:	f240 73e8 	movw	r3, #2024	; 0x7e8
 80013da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d108      	bne.n	80013f6 <_sbrk_r+0x2a>
        __brkval = &end;
 80013e4:	f240 73e8 	movw	r3, #2024	; 0x7e8
 80013e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013ec:	f240 72ec 	movw	r2, #2028	; 0x7ec
 80013f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80013f4:	601a      	str	r2, [r3, #0]

    if (__brkval + incr > (char*)__get_MSP() - __malloc_margin) {
 80013f6:	f240 73e8 	movw	r3, #2024	; 0x7e8
 80013fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	18d2      	adds	r2, r2, r3
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8001404:	f3ef 8408 	mrs	r4, MSP
  return(result);
 8001408:	4623      	mov	r3, r4
 800140a:	4619      	mov	r1, r3
 800140c:	f240 5328 	movw	r3, #1320	; 0x528
 8001410:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	1acb      	subs	r3, r1, r3
 8001418:	429a      	cmp	r2, r3
 800141a:	d906      	bls.n	800142a <_sbrk_r+0x5e>
        r->_errno = ENOMEM;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f04f 020c 	mov.w	r2, #12
 8001422:	601a      	str	r2, [r3, #0]
        return (void*)-1;
 8001424:	f04f 33ff 	mov.w	r3, #4294967295
 8001428:	e012      	b.n	8001450 <_sbrk_r+0x84>
    }

    void *ret = __brkval;
 800142a:	f240 73e8 	movw	r3, #2024	; 0x7e8
 800142e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	60fb      	str	r3, [r7, #12]
    __brkval += incr;
 8001436:	f240 73e8 	movw	r3, #2024	; 0x7e8
 800143a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	18d2      	adds	r2, r2, r3
 8001444:	f240 73e8 	movw	r3, #2024	; 0x7e8
 8001448:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800144c:	601a      	str	r2, [r3, #0]

    return ret;
 800144e:	68fb      	ldr	r3, [r7, #12]
}
 8001450:	4618      	mov	r0, r3
 8001452:	f107 0710 	add.w	r7, r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bc90      	pop	{r4, r7}
 800145a:	4770      	bx	lr

0800145c <__malloc_lock>:
    return -1;
}


void __malloc_lock(struct _reent *r)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
    vPortEnterCritical();
 8001464:	f000 ffde 	bl	8002424 <vPortEnterCritical>
}
 8001468:	f107 0708 	add.w	r7, r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <__malloc_unlock>:


void __malloc_unlock(struct _reent *r)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
    vPortExitCritical();
 8001478:	f000 ffea 	bl	8002450 <vPortExitCritical>
}
 800147c:	f107 0708 	add.w	r7, r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <LIS302DL_Init>:
  * @param  LIS302DL_Config_Struct: pointer to a LIS302DL_Config_TypeDef structure 
  *         that contains the configuration setting for the LIS302DL.
  * @retval None
  */
void LIS302DL_Init(LIS302DL_InitTypeDef *LIS302DL_InitStruct)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 800148c:	f04f 0300 	mov.w	r3, #0
 8001490:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface ---------------------------------------*/
  LIS302DL_LowLevel_Init();
 8001492:	f000 f899 	bl	80015c8 <LIS302DL_LowLevel_Init>
  
  /* Configure MEMS: data rate, power mode, full scale, self test and axes */
  ctrl = (uint8_t) (LIS302DL_InitStruct->Output_DataRate | LIS302DL_InitStruct->Power_Mode | \
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	785a      	ldrb	r2, [r3, #1]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	4313      	orrs	r3, r2
 80014a0:	b2da      	uxtb	r2, r3
                    LIS302DL_InitStruct->Full_Scale | LIS302DL_InitStruct->Self_Test | \
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	78db      	ldrb	r3, [r3, #3]
  
  /* Configure the low level interface ---------------------------------------*/
  LIS302DL_LowLevel_Init();
  
  /* Configure MEMS: data rate, power mode, full scale, self test and axes */
  ctrl = (uint8_t) (LIS302DL_InitStruct->Output_DataRate | LIS302DL_InitStruct->Power_Mode | \
 80014a6:	4313      	orrs	r3, r2
 80014a8:	b2da      	uxtb	r2, r3
                    LIS302DL_InitStruct->Full_Scale | LIS302DL_InitStruct->Self_Test | \
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	791b      	ldrb	r3, [r3, #4]
  
  /* Configure the low level interface ---------------------------------------*/
  LIS302DL_LowLevel_Init();
  
  /* Configure MEMS: data rate, power mode, full scale, self test and axes */
  ctrl = (uint8_t) (LIS302DL_InitStruct->Output_DataRate | LIS302DL_InitStruct->Power_Mode | \
 80014ae:	4313      	orrs	r3, r2
 80014b0:	b2da      	uxtb	r2, r3
                    LIS302DL_InitStruct->Full_Scale | LIS302DL_InitStruct->Self_Test | \
                    LIS302DL_InitStruct->Axes_Enable);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	789b      	ldrb	r3, [r3, #2]
  
  /* Configure the low level interface ---------------------------------------*/
  LIS302DL_LowLevel_Init();
  
  /* Configure MEMS: data rate, power mode, full scale, self test and axes */
  ctrl = (uint8_t) (LIS302DL_InitStruct->Output_DataRate | LIS302DL_InitStruct->Power_Mode | \
 80014b6:	4313      	orrs	r3, r2
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	73fb      	strb	r3, [r7, #15]
                    LIS302DL_InitStruct->Full_Scale | LIS302DL_InitStruct->Self_Test | \
                    LIS302DL_InitStruct->Axes_Enable);
  
  /* Write value to MEMS CTRL_REG1 regsister */
  LIS302DL_Write(&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 80014bc:	f107 030f 	add.w	r3, r7, #15
 80014c0:	4618      	mov	r0, r3
 80014c2:	f04f 0120 	mov.w	r1, #32
 80014c6:	f04f 0201 	mov.w	r2, #1
 80014ca:	f000 f805 	bl	80014d8 <LIS302DL_Write>
}
 80014ce:	f107 0710 	add.w	r7, r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop

080014d8 <LIS302DL_Write>:
  * @param  WriteAddr : LIS302DL's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void LIS302DL_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	460a      	mov	r2, r1
 80014e4:	70fa      	strb	r2, [r7, #3]
 80014e6:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 80014e8:	883b      	ldrh	r3, [r7, #0]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d903      	bls.n	80014f6 <LIS302DL_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 80014ee:	78fb      	ldrb	r3, [r7, #3]
 80014f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014f4:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  LIS302DL_CS_LOW();
 80014f6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80014fa:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80014fe:	f04f 0108 	mov.w	r1, #8
 8001502:	f001 fa59 	bl	80029b8 <GPIO_ResetBits>
  
  /* Send the Address of the indexed register */
  LIS302DL_SendByte(WriteAddr);
 8001506:	78fb      	ldrb	r3, [r7, #3]
 8001508:	4618      	mov	r0, r3
 800150a:	f000 f943 	bl	8001794 <LIS302DL_SendByte>
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 800150e:	e00c      	b.n	800152a <LIS302DL_Write+0x52>
  {
    LIS302DL_SendByte(*pBuffer);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f000 f93d 	bl	8001794 <LIS302DL_SendByte>
    NumByteToWrite--;
 800151a:	883b      	ldrh	r3, [r7, #0]
 800151c:	f103 33ff 	add.w	r3, r3, #4294967295
 8001520:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f103 0301 	add.w	r3, r3, #1
 8001528:	607b      	str	r3, [r7, #4]
  LIS302DL_CS_LOW();
  
  /* Send the Address of the indexed register */
  LIS302DL_SendByte(WriteAddr);
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 800152a:	883b      	ldrh	r3, [r7, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1ef      	bne.n	8001510 <LIS302DL_Write+0x38>
    NumByteToWrite--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  LIS302DL_CS_HIGH();
 8001530:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001534:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001538:	f04f 0108 	mov.w	r1, #8
 800153c:	f001 fa2e 	bl	800299c <GPIO_SetBits>
}
 8001540:	f107 0708 	add.w	r7, r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <LIS302DL_Read>:
  * @param  ReadAddr : LIS302DL's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the LIS302DL.
  * @retval None
  */
void LIS302DL_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	460a      	mov	r2, r1
 8001554:	70fa      	strb	r2, [r7, #3]
 8001556:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8001558:	883b      	ldrh	r3, [r7, #0]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d904      	bls.n	8001568 <LIS302DL_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800155e:	78fb      	ldrb	r3, [r7, #3]
 8001560:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001564:	70fb      	strb	r3, [r7, #3]
 8001566:	e003      	b.n	8001570 <LIS302DL_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8001568:	78fb      	ldrb	r3, [r7, #3]
 800156a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800156e:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  LIS302DL_CS_LOW();
 8001570:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001574:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001578:	f04f 0108 	mov.w	r1, #8
 800157c:	f001 fa1c 	bl	80029b8 <GPIO_ResetBits>
  
  /* Send the Address of the indexed register */
  LIS302DL_SendByte(ReadAddr);
 8001580:	78fb      	ldrb	r3, [r7, #3]
 8001582:	4618      	mov	r0, r3
 8001584:	f000 f906 	bl	8001794 <LIS302DL_SendByte>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8001588:	e00f      	b.n	80015aa <LIS302DL_Read+0x62>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to LIS302DL (Slave device) */
    *pBuffer = LIS302DL_SendByte(DUMMY_BYTE);
 800158a:	f04f 0000 	mov.w	r0, #0
 800158e:	f000 f901 	bl	8001794 <LIS302DL_SendByte>
 8001592:	4603      	mov	r3, r0
 8001594:	461a      	mov	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 800159a:	883b      	ldrh	r3, [r7, #0]
 800159c:	f103 33ff 	add.w	r3, r3, #4294967295
 80015a0:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f103 0301 	add.w	r3, r3, #1
 80015a8:	607b      	str	r3, [r7, #4]
  
  /* Send the Address of the indexed register */
  LIS302DL_SendByte(ReadAddr);
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80015aa:	883b      	ldrh	r3, [r7, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1ec      	bne.n	800158a <LIS302DL_Read+0x42>
    NumByteToRead--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  LIS302DL_CS_HIGH();
 80015b0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80015b4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80015b8:	f04f 0108 	mov.w	r1, #8
 80015bc:	f001 f9ee 	bl	800299c <GPIO_SetBits>
}
 80015c0:	f107 0708 	add.w	r7, r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <LIS302DL_LowLevel_Init>:
  * @brief  Initializes the low level interface used to drive the LIS302DL
  * @param  None
  * @retval None
  */
static void LIS302DL_LowLevel_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  SPI_InitTypeDef  SPI_InitStructure;

  /* Enable the SPI periph */
  RCC_APB2PeriphClockCmd(LIS302DL_SPI_CLK, ENABLE);
 80015ce:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80015d2:	f04f 0101 	mov.w	r1, #1
 80015d6:	f001 fb61 	bl	8002c9c <RCC_APB2PeriphClockCmd>

  /* Enable SCK, MOSI and MISO GPIO clocks */
  RCC_AHB1PeriphClockCmd(LIS302DL_SPI_SCK_GPIO_CLK | LIS302DL_SPI_MISO_GPIO_CLK | LIS302DL_SPI_MOSI_GPIO_CLK, ENABLE);
 80015da:	f04f 0001 	mov.w	r0, #1
 80015de:	f04f 0101 	mov.w	r1, #1
 80015e2:	f001 fb31 	bl	8002c48 <RCC_AHB1PeriphClockCmd>

  /* Enable CS  GPIO clock */
  RCC_AHB1PeriphClockCmd(LIS302DL_SPI_CS_GPIO_CLK, ENABLE);
 80015e6:	f04f 0010 	mov.w	r0, #16
 80015ea:	f04f 0101 	mov.w	r1, #1
 80015ee:	f001 fb2b 	bl	8002c48 <RCC_AHB1PeriphClockCmd>
  
  /* Enable INT1 GPIO clock */
  RCC_AHB1PeriphClockCmd(LIS302DL_SPI_INT1_GPIO_CLK, ENABLE);
 80015f2:	f04f 0010 	mov.w	r0, #16
 80015f6:	f04f 0101 	mov.w	r1, #1
 80015fa:	f001 fb25 	bl	8002c48 <RCC_AHB1PeriphClockCmd>
  
  /* Enable INT2 GPIO clock */
  RCC_AHB1PeriphClockCmd(LIS302DL_SPI_INT2_GPIO_CLK, ENABLE);
 80015fe:	f04f 0010 	mov.w	r0, #16
 8001602:	f04f 0101 	mov.w	r1, #1
 8001606:	f001 fb1f 	bl	8002c48 <RCC_AHB1PeriphClockCmd>

  GPIO_PinAFConfig(LIS302DL_SPI_SCK_GPIO_PORT, LIS302DL_SPI_SCK_SOURCE, LIS302DL_SPI_SCK_AF);
 800160a:	f04f 0000 	mov.w	r0, #0
 800160e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001612:	f04f 0105 	mov.w	r1, #5
 8001616:	f04f 0205 	mov.w	r2, #5
 800161a:	f001 f9db 	bl	80029d4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(LIS302DL_SPI_MISO_GPIO_PORT, LIS302DL_SPI_MISO_SOURCE, LIS302DL_SPI_MISO_AF);
 800161e:	f04f 0000 	mov.w	r0, #0
 8001622:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001626:	f04f 0106 	mov.w	r1, #6
 800162a:	f04f 0205 	mov.w	r2, #5
 800162e:	f001 f9d1 	bl	80029d4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(LIS302DL_SPI_MOSI_GPIO_PORT, LIS302DL_SPI_MOSI_SOURCE, LIS302DL_SPI_MOSI_AF);
 8001632:	f04f 0000 	mov.w	r0, #0
 8001636:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800163a:	f04f 0107 	mov.w	r1, #7
 800163e:	f04f 0205 	mov.w	r2, #5
 8001642:	f001 f9c7 	bl	80029d4 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001646:	f04f 0302 	mov.w	r3, #2
 800164a:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
 8001652:	f04f 0302 	mov.w	r3, #2
 8001656:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001658:	f04f 0302 	mov.w	r3, #2
 800165c:	777b      	strb	r3, [r7, #29]

  /* SPI SCK pin configuration */
  GPIO_InitStructure.GPIO_Pin = LIS302DL_SPI_SCK_PIN;
 800165e:	f04f 0320 	mov.w	r3, #32
 8001662:	61bb      	str	r3, [r7, #24]
  GPIO_Init(LIS302DL_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8001664:	f04f 0000 	mov.w	r0, #0
 8001668:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800166c:	f107 0318 	add.w	r3, r7, #24
 8001670:	4619      	mov	r1, r3
 8001672:	f001 f8f1 	bl	8002858 <GPIO_Init>

  /* SPI  MOSI pin configuration */
  GPIO_InitStructure.GPIO_Pin =  LIS302DL_SPI_MOSI_PIN;
 8001676:	f04f 0380 	mov.w	r3, #128	; 0x80
 800167a:	61bb      	str	r3, [r7, #24]
  GPIO_Init(LIS302DL_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 800167c:	f04f 0000 	mov.w	r0, #0
 8001680:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001684:	f107 0318 	add.w	r3, r7, #24
 8001688:	4619      	mov	r1, r3
 800168a:	f001 f8e5 	bl	8002858 <GPIO_Init>

  /* SPI MISO pin configuration */
  GPIO_InitStructure.GPIO_Pin = LIS302DL_SPI_MISO_PIN;
 800168e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001692:	61bb      	str	r3, [r7, #24]
  GPIO_Init(LIS302DL_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 8001694:	f04f 0000 	mov.w	r0, #0
 8001698:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800169c:	f107 0318 	add.w	r3, r7, #24
 80016a0:	4619      	mov	r1, r3
 80016a2:	f001 f8d9 	bl	8002858 <GPIO_Init>

  /* SPI configuration -------------------------------------------------------*/
  SPI_I2S_DeInit(LIS302DL_SPI);
 80016a6:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80016aa:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80016ae:	f001 fb73 	bl	8002d98 <SPI_I2S_DeInit>
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	80bb      	strh	r3, [r7, #4]
  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	813b      	strh	r3, [r7, #8]
  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 80016be:	f04f 0300 	mov.w	r3, #0
 80016c2:	817b      	strh	r3, [r7, #10]
  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 80016c4:	f04f 0300 	mov.w	r3, #0
 80016c8:	81bb      	strh	r3, [r7, #12]
  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 80016ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ce:	81fb      	strh	r3, [r7, #14]
  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
 80016d0:	f04f 0308 	mov.w	r3, #8
 80016d4:	823b      	strh	r3, [r7, #16]
  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 80016d6:	f04f 0300 	mov.w	r3, #0
 80016da:	827b      	strh	r3, [r7, #18]
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 80016dc:	f04f 0307 	mov.w	r3, #7
 80016e0:	82bb      	strh	r3, [r7, #20]
  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 80016e2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80016e6:	80fb      	strh	r3, [r7, #6]
  SPI_Init(LIS302DL_SPI, &SPI_InitStructure);
 80016e8:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80016ec:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80016f0:	f107 0304 	add.w	r3, r7, #4
 80016f4:	4619      	mov	r1, r3
 80016f6:	f001 fb93 	bl	8002e20 <SPI_Init>

  /* Enable SPI1  */
  SPI_Cmd(LIS302DL_SPI, ENABLE);
 80016fa:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80016fe:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001702:	f04f 0101 	mov.w	r1, #1
 8001706:	f001 fbcf 	bl	8002ea8 <SPI_Cmd>

  /* Configure GPIO PIN for Lis Chip select */
  GPIO_InitStructure.GPIO_Pin = LIS302DL_SPI_CS_PIN;
 800170a:	f04f 0308 	mov.w	r3, #8
 800170e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001710:	f04f 0301 	mov.w	r3, #1
 8001714:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800171c:	f04f 0302 	mov.w	r3, #2
 8001720:	777b      	strb	r3, [r7, #29]
  GPIO_Init(LIS302DL_SPI_CS_GPIO_PORT, &GPIO_InitStructure);
 8001722:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001726:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800172a:	f107 0318 	add.w	r3, r7, #24
 800172e:	4619      	mov	r1, r3
 8001730:	f001 f892 	bl	8002858 <GPIO_Init>

  /* Deselect : Chip Select high */
  GPIO_SetBits(LIS302DL_SPI_CS_GPIO_PORT, LIS302DL_SPI_CS_PIN);
 8001734:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001738:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800173c:	f04f 0108 	mov.w	r1, #8
 8001740:	f001 f92c 	bl	800299c <GPIO_SetBits>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.GPIO_Pin = LIS302DL_SPI_INT1_PIN;
 8001744:	f04f 0301 	mov.w	r3, #1
 8001748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001756:	f04f 0302 	mov.w	r3, #2
 800175a:	777b      	strb	r3, [r7, #29]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	77fb      	strb	r3, [r7, #31]
  GPIO_Init(LIS302DL_SPI_INT1_GPIO_PORT, &GPIO_InitStructure);
 8001762:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001766:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800176a:	f107 0318 	add.w	r3, r7, #24
 800176e:	4619      	mov	r1, r3
 8001770:	f001 f872 	bl	8002858 <GPIO_Init>
  
  GPIO_InitStructure.GPIO_Pin = LIS302DL_SPI_INT2_PIN;
 8001774:	f04f 0302 	mov.w	r3, #2
 8001778:	61bb      	str	r3, [r7, #24]
  GPIO_Init(LIS302DL_SPI_INT2_GPIO_PORT, &GPIO_InitStructure);
 800177a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800177e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001782:	f107 0318 	add.w	r3, r7, #24
 8001786:	4619      	mov	r1, r3
 8001788:	f001 f866 	bl	8002858 <GPIO_Init>
}
 800178c:	f107 0720 	add.w	r7, r7, #32
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <LIS302DL_SendByte>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval The received byte value
  */
static uint8_t LIS302DL_SendByte(uint8_t byte)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
  /* Loop while DR register in not emplty */
  LIS302DLTimeout = LIS302DL_FLAG_TIMEOUT;
 800179e:	f240 532c 	movw	r3, #1324	; 0x52c
 80017a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017aa:	601a      	str	r2, [r3, #0]
  while (SPI_I2S_GetFlagStatus(LIS302DL_SPI, SPI_I2S_FLAG_TXE) == RESET)
 80017ac:	e017      	b.n	80017de <LIS302DL_SendByte+0x4a>
  {
    if((LIS302DLTimeout--) == 0) return LIS302DL_TIMEOUT_UserCallback();
 80017ae:	f240 532c 	movw	r3, #1324	; 0x52c
 80017b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	bf14      	ite	ne
 80017bc:	2200      	movne	r2, #0
 80017be:	2201      	moveq	r2, #1
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	f103 31ff 	add.w	r1, r3, #4294967295
 80017c6:	f240 532c 	movw	r3, #1324	; 0x52c
 80017ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017ce:	6019      	str	r1, [r3, #0]
 80017d0:	2a00      	cmp	r2, #0
 80017d2:	d004      	beq.n	80017de <LIS302DL_SendByte+0x4a>
 80017d4:	f7ff fc18 	bl	8001008 <LIS302DL_TIMEOUT_UserCallback>
 80017d8:	4603      	mov	r3, r0
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	e046      	b.n	800186c <LIS302DL_SendByte+0xd8>
  */
static uint8_t LIS302DL_SendByte(uint8_t byte)
{
  /* Loop while DR register in not emplty */
  LIS302DLTimeout = LIS302DL_FLAG_TIMEOUT;
  while (SPI_I2S_GetFlagStatus(LIS302DL_SPI, SPI_I2S_FLAG_TXE) == RESET)
 80017de:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80017e2:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80017e6:	f04f 0102 	mov.w	r1, #2
 80017ea:	f001 fb99 	bl	8002f20 <SPI_I2S_GetFlagStatus>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0dc      	beq.n	80017ae <LIS302DL_SendByte+0x1a>
  {
    if((LIS302DLTimeout--) == 0) return LIS302DL_TIMEOUT_UserCallback();
  }
  
  /* Send a Byte through the SPI peripheral */
  SPI_I2S_SendData(LIS302DL_SPI, byte);
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80017fc:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001800:	4619      	mov	r1, r3
 8001802:	f001 fb7f 	bl	8002f04 <SPI_I2S_SendData>
  
  /* Wait to receive a Byte */
  LIS302DLTimeout = LIS302DL_FLAG_TIMEOUT;
 8001806:	f240 532c 	movw	r3, #1324	; 0x52c
 800180a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800180e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001812:	601a      	str	r2, [r3, #0]
  while (SPI_I2S_GetFlagStatus(LIS302DL_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 8001814:	e017      	b.n	8001846 <LIS302DL_SendByte+0xb2>
  {
    if((LIS302DLTimeout--) == 0) return LIS302DL_TIMEOUT_UserCallback();
 8001816:	f240 532c 	movw	r3, #1324	; 0x52c
 800181a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	bf14      	ite	ne
 8001824:	2200      	movne	r2, #0
 8001826:	2201      	moveq	r2, #1
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	f103 31ff 	add.w	r1, r3, #4294967295
 800182e:	f240 532c 	movw	r3, #1324	; 0x52c
 8001832:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001836:	6019      	str	r1, [r3, #0]
 8001838:	2a00      	cmp	r2, #0
 800183a:	d004      	beq.n	8001846 <LIS302DL_SendByte+0xb2>
 800183c:	f7ff fbe4 	bl	8001008 <LIS302DL_TIMEOUT_UserCallback>
 8001840:	4603      	mov	r3, r0
 8001842:	b2db      	uxtb	r3, r3
 8001844:	e012      	b.n	800186c <LIS302DL_SendByte+0xd8>
  /* Send a Byte through the SPI peripheral */
  SPI_I2S_SendData(LIS302DL_SPI, byte);
  
  /* Wait to receive a Byte */
  LIS302DLTimeout = LIS302DL_FLAG_TIMEOUT;
  while (SPI_I2S_GetFlagStatus(LIS302DL_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 8001846:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800184a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800184e:	f04f 0101 	mov.w	r1, #1
 8001852:	f001 fb65 	bl	8002f20 <SPI_I2S_GetFlagStatus>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0dc      	beq.n	8001816 <LIS302DL_SendByte+0x82>
  {
    if((LIS302DLTimeout--) == 0) return LIS302DL_TIMEOUT_UserCallback();
  }
  
  /* Return the Byte read from the SPI bus */
  return (uint8_t)SPI_I2S_ReceiveData(LIS302DL_SPI);
 800185c:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8001860:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001864:	f001 fb40 	bl	8002ee8 <SPI_I2S_ReceiveData>
 8001868:	4603      	mov	r3, r0
 800186a:	b2db      	uxtb	r3, r3
}
 800186c:	4618      	mov	r0, r3
 800186e:	f107 0708 	add.w	r7, r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop

08001878 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8001882:	79fa      	ldrb	r2, [r7, #7]
 8001884:	f240 5330 	movw	r3, #1328	; 0x530
 8001888:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800188c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001890:	79f9      	ldrb	r1, [r7, #7]
 8001892:	f243 0354 	movw	r3, #12372	; 0x3054
 8001896:	f6c0 0300 	movt	r3, #2048	; 0x800
 800189a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800189e:	8313      	strh	r3, [r2, #24]
}
 80018a0:	f107 070c 	add.w	r7, r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop

080018ac <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 80018b6:	79fa      	ldrb	r2, [r7, #7]
 80018b8:	f240 5330 	movw	r3, #1328	; 0x530
 80018bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80018c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80018c4:	79f9      	ldrb	r1, [r7, #7]
 80018c6:	f243 0354 	movw	r3, #12372	; 0x3054
 80018ca:	f6c0 0300 	movt	r3, #2048	; 0x800
 80018ce:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80018d2:	8353      	strh	r3, [r2, #26]
}
 80018d4:	f107 070c 	add.w	r7, r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop

080018e0 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
}
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop

080018ec <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80018f0:	e7fe      	b.n	80018f0 <HardFault_Handler+0x4>
 80018f2:	bf00      	nop

080018f4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80018f8:	e7fe      	b.n	80018f8 <MemManage_Handler+0x4>
 80018fa:	bf00      	nop

080018fc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8001900:	e7fe      	b.n	8001900 <BusFault_Handler+0x4>
 8001902:	bf00      	nop

08001904 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001908:	e7fe      	b.n	8001908 <UsageFault_Handler+0x4>
 800190a:	bf00      	nop

0800190c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
}
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop

08001918 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af02      	add	r7, sp, #8
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	4613      	mov	r3, r2
 8001926:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	4618      	mov	r0, r3
 800192c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800192e:	f000 fc1b 	bl	8002168 <prvAllocateTCBAndStack>
 8001932:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 80a5 	beq.w	8001a86 <xTaskGenericCreate+0x16e>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001940:	88fb      	ldrh	r3, [r7, #6]
 8001942:	f103 33ff 	add.w	r3, r3, #4294967295
 8001946:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800194a:	18d3      	adds	r3, r2, r3
 800194c:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f023 0307 	bic.w	r3, r3, #7
 8001954:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8001956:	88fb      	ldrh	r3, [r7, #6]
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	69b8      	ldr	r0, [r7, #24]
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001962:	f000 fb1f 	bl	8001fa4 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001966:	6978      	ldr	r0, [r7, #20]
 8001968:	68f9      	ldr	r1, [r7, #12]
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	f000 fcc6 	bl	80022fc <pxPortInitialiseStack>
 8001970:	4602      	mov	r2, r0
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
 8001976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001978:	2b00      	cmp	r3, #0
 800197a:	d002      	beq.n	8001982 <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 800197c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
 8001982:	f000 fd4f 	bl	8002424 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8001986:	f240 73a0 	movw	r3, #1952	; 0x7a0
 800198a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f103 0201 	add.w	r2, r3, #1
 8001994:	f240 73a0 	movw	r3, #1952	; 0x7a0
 8001998:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800199c:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 800199e:	f240 63c4 	movw	r3, #1732	; 0x6c4
 80019a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10f      	bne.n	80019cc <xTaskGenericCreate+0xb4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 80019ac:	f240 63c4 	movw	r3, #1732	; 0x6c4
 80019b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 80019b8:	f240 73a0 	movw	r3, #1952	; 0x7a0
 80019bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d118      	bne.n	80019f8 <xTaskGenericCreate+0xe0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 80019c6:	f000 fb31 	bl	800202c <prvInitialiseTaskLists>
 80019ca:	e015      	b.n	80019f8 <xTaskGenericCreate+0xe0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 80019cc:	f240 73b0 	movw	r3, #1968	; 0x7b0
 80019d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10e      	bne.n	80019f8 <xTaskGenericCreate+0xe0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 80019da:	f240 63c4 	movw	r3, #1732	; 0x6c4
 80019de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d805      	bhi.n	80019f8 <xTaskGenericCreate+0xe0>
					{
						pxCurrentTCB = pxNewTCB;
 80019ec:	f240 63c4 	movw	r3, #1732	; 0x6c4
 80019f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019fc:	f240 73a8 	movw	r3, #1960	; 0x7a8
 8001a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d906      	bls.n	8001a18 <xTaskGenericCreate+0x100>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a0e:	f240 73a8 	movw	r3, #1960	; 0x7a8
 8001a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a16:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
 8001a18:	f240 73c4 	movw	r3, #1988	; 0x7c4
 8001a1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f103 0201 	add.w	r2, r3, #1
 8001a26:	f240 73c4 	movw	r3, #1988	; 0x7c4
 8001a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a2e:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a34:	f240 73ac 	movw	r3, #1964	; 0x7ac
 8001a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d906      	bls.n	8001a50 <xTaskGenericCreate+0x138>
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a46:	f240 73ac 	movw	r3, #1964	; 0x7ac
 8001a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a54:	4613      	mov	r3, r2
 8001a56:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001a5a:	189b      	adds	r3, r3, r2
 8001a5c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001a60:	461a      	mov	r2, r3
 8001a62:	f240 63c8 	movw	r3, #1736	; 0x6c8
 8001a66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a6a:	18d2      	adds	r2, r2, r3
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	f103 0304 	add.w	r3, r3, #4
 8001a72:	4610      	mov	r0, r2
 8001a74:	4619      	mov	r1, r3
 8001a76:	f000 fbef 	bl	8002258 <vListInsertEnd>

			xReturn = pdPASS;
 8001a7a:	f04f 0301 	mov.w	r3, #1
 8001a7e:	61fb      	str	r3, [r7, #28]
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8001a80:	f000 fce6 	bl	8002450 <vPortExitCritical>
 8001a84:	e002      	b.n	8001a8c <xTaskGenericCreate+0x174>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8a:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d111      	bne.n	8001ab6 <xTaskGenericCreate+0x19e>
	{
		if( xSchedulerRunning != pdFALSE )
 8001a92:	f240 73b0 	movw	r3, #1968	; 0x7b0
 8001a96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00a      	beq.n	8001ab6 <xTaskGenericCreate+0x19e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8001aa0:	f240 63c4 	movw	r3, #1732	; 0x6c4
 8001aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d201      	bcs.n	8001ab6 <xTaskGenericCreate+0x19e>
			{
				portYIELD_WITHIN_API();
 8001ab2:	f000 fcab 	bl	800240c <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
 8001ab6:	69fb      	ldr	r3, [r7, #28]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f107 0720 	add.w	r7, r7, #32
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop

08001ac4 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af04      	add	r7, sp, #16
	/* Add the idle task at the lowest priority. */
	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
	{
		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
		be returned by the xTaskGetIdleTaskHandle() function. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	f240 739c 	movw	r3, #1948	; 0x79c
 8001ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ad8:	9301      	str	r3, [sp, #4]
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	9302      	str	r3, [sp, #8]
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	9303      	str	r3, [sp, #12]
 8001ae6:	f641 7081 	movw	r0, #8065	; 0x1f81
 8001aea:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001aee:	f642 717c 	movw	r1, #12156	; 0x2f7c
 8001af2:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001af6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	f7ff ff0b 	bl	8001918 <xTaskGenericCreate>
 8001b02:	6078      	str	r0, [r7, #4]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d115      	bne.n	8001b36 <vTaskStartScheduler+0x72>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
 8001b0a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8001b0e:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
 8001b12:	f240 73b0 	movw	r3, #1968	; 0x7b0
 8001b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b1a:	f04f 0201 	mov.w	r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 8001b20:	f240 73a4 	movw	r3, #1956	; 0x7a4
 8001b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8001b2e:	f7ff f9a3 	bl	8000e78 <init_us_timer>
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001b32:	f000 fc33 	bl	800239c <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
 8001b36:	f107 0708 	add.w	r7, r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop

08001b40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 8001b44:	f240 73b4 	movw	r3, #1972	; 0x7b4
 8001b48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f103 0201 	add.w	r2, r3, #1
 8001b52:	f240 73b4 	movw	r3, #1972	; 0x7b4
 8001b56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b5a:	601a      	str	r2, [r3, #0]
}
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop

08001b64 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 8001b64:	b590      	push	{r4, r7, lr}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8001b6a:	f04f 0300 	mov.w	r3, #0
 8001b6e:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001b70:	f000 fc58 	bl	8002424 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001b74:	f240 73b4 	movw	r3, #1972	; 0x7b4
 8001b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f103 32ff 	add.w	r2, r3, #4294967295
 8001b82:	f240 73b4 	movw	r3, #1972	; 0x7b4
 8001b86:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b8a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001b8c:	f240 73b4 	movw	r3, #1972	; 0x7b4
 8001b90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f040 8085 	bne.w	8001ca6 <xTaskResumeAll+0x142>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 8001b9c:	f240 73a0 	movw	r3, #1952	; 0x7a0
 8001ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d07d      	beq.n	8001ca6 <xTaskResumeAll+0x142>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8001bb0:	e03c      	b.n	8001c2c <xTaskResumeAll+0xc8>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 8001bb2:	f240 735c 	movw	r3, #1884	; 0x75c
 8001bb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
 8001bbe:	f104 0318 	add.w	r3, r4, #24
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 fb70 	bl	80022a8 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
 8001bc8:	f104 0304 	add.w	r3, r4, #4
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f000 fb6b 	bl	80022a8 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 8001bd2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001bd4:	f240 73ac 	movw	r3, #1964	; 0x7ac
 8001bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d905      	bls.n	8001bee <xTaskResumeAll+0x8a>
 8001be2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001be4:	f240 73ac 	movw	r3, #1964	; 0x7ac
 8001be8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001bf6:	189b      	adds	r3, r3, r2
 8001bf8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	f240 63c8 	movw	r3, #1736	; 0x6c8
 8001c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c06:	18d2      	adds	r2, r2, r3
 8001c08:	f104 0304 	add.w	r3, r4, #4
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f000 fb22 	bl	8002258 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c14:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c16:	f240 63c4 	movw	r3, #1732	; 0x6c4
 8001c1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d302      	bcc.n	8001c2c <xTaskResumeAll+0xc8>
					{
						xYieldRequired = pdTRUE;
 8001c26:	f04f 0301 	mov.w	r3, #1
 8001c2a:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8001c2c:	f240 735c 	movw	r3, #1884	; 0x75c
 8001c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1bb      	bne.n	8001bb2 <xTaskResumeAll+0x4e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8001c3a:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8001c3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d018      	beq.n	8001c7a <xTaskResumeAll+0x116>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8001c48:	e00d      	b.n	8001c66 <xTaskResumeAll+0x102>
					{
						vTaskIncrementTick();
 8001c4a:	f000 f835 	bl	8001cb8 <vTaskIncrementTick>
						--uxMissedTicks;
 8001c4e:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8001c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f103 32ff 	add.w	r2, r3, #4294967295
 8001c5c:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8001c60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c64:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8001c66:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8001c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1ea      	bne.n	8001c4a <xTaskResumeAll+0xe6>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
 8001c74:	f04f 0301 	mov.w	r3, #1
 8001c78:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d006      	beq.n	8001c8e <xTaskResumeAll+0x12a>
 8001c80:	f240 73bc 	movw	r3, #1980	; 0x7bc
 8001c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d10b      	bne.n	8001ca6 <xTaskResumeAll+0x142>
				{
					xAlreadyYielded = pdTRUE;
 8001c8e:	f04f 0301 	mov.w	r3, #1
 8001c92:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
 8001c94:	f240 73bc 	movw	r3, #1980	; 0x7bc
 8001c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
 8001ca2:	f000 fbb3 	bl	800240c <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 8001ca6:	f000 fbd3 	bl	8002450 <vPortExitCritical>

	return xAlreadyYielded;
 8001caa:	687b      	ldr	r3, [r7, #4]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	f107 070c 	add.w	r7, r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd90      	pop	{r4, r7, pc}
 8001cb6:	bf00      	nop

08001cb8 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001cbe:	f240 73b4 	movw	r3, #1972	; 0x7b4
 8001cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f040 80c0 	bne.w	8001e4e <vTaskIncrementTick+0x196>
	{
		++xTickCount;
 8001cce:	f240 73a4 	movw	r3, #1956	; 0x7a4
 8001cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f103 0201 	add.w	r2, r3, #1
 8001cdc:	f240 73a4 	movw	r3, #1956	; 0x7a4
 8001ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ce4:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
 8001ce6:	f240 73a4 	movw	r3, #1956	; 0x7a4
 8001cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d140      	bne.n	8001d76 <vTaskIncrementTick+0xbe>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
 8001cf4:	f240 7354 	movw	r3, #1876	; 0x754
 8001cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 8001d00:	f240 7358 	movw	r3, #1880	; 0x758
 8001d04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	f240 7354 	movw	r3, #1876	; 0x754
 8001d0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d12:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
 8001d14:	f240 7358 	movw	r3, #1880	; 0x758
 8001d18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
 8001d20:	f240 73c0 	movw	r3, #1984	; 0x7c0
 8001d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f103 0201 	add.w	r2, r3, #1
 8001d2e:	f240 73c0 	movw	r3, #1984	; 0x7c0
 8001d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d36:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d38:	f240 7354 	movw	r3, #1876	; 0x754
 8001d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d107      	bne.n	8001d58 <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
 8001d48:	f240 5340 	movw	r3, #1344	; 0x540
 8001d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d50:	f04f 32ff 	mov.w	r2, #4294967295
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	e00e      	b.n	8001d76 <vTaskIncrementTick+0xbe>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001d58:	f240 7354 	movw	r3, #1876	; 0x754
 8001d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	f240 5340 	movw	r3, #1344	; 0x540
 8001d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d74:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
 8001d76:	f240 73a4 	movw	r3, #1956	; 0x7a4
 8001d7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	f240 5340 	movw	r3, #1344	; 0x540
 8001d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d36b      	bcc.n	8001e66 <vTaskIncrementTick+0x1ae>
 8001d8e:	f240 7354 	movw	r3, #1876	; 0x754
 8001d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d107      	bne.n	8001dae <vTaskIncrementTick+0xf6>
 8001d9e:	f240 5340 	movw	r3, #1344	; 0x540
 8001da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001da6:	f04f 32ff 	mov.w	r2, #4294967295
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	e05b      	b.n	8001e66 <vTaskIncrementTick+0x1ae>
 8001dae:	f240 7354 	movw	r3, #1876	; 0x754
 8001db2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	f240 73a4 	movw	r3, #1956	; 0x7a4
 8001dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d206      	bcs.n	8001de2 <vTaskIncrementTick+0x12a>
 8001dd4:	f240 5340 	movw	r3, #1344	; 0x540
 8001dd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	e041      	b.n	8001e66 <vTaskIncrementTick+0x1ae>
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	f103 0304 	add.w	r3, r3, #4
 8001de8:	4618      	mov	r0, r3
 8001dea:	f000 fa5d 	bl	80022a8 <vListRemove>
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d005      	beq.n	8001e02 <vTaskIncrementTick+0x14a>
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	f103 0318 	add.w	r3, r3, #24
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f000 fa53 	bl	80022a8 <vListRemove>
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e06:	f240 73ac 	movw	r3, #1964	; 0x7ac
 8001e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d906      	bls.n	8001e22 <vTaskIncrementTick+0x16a>
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e18:	f240 73ac 	movw	r3, #1964	; 0x7ac
 8001e1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e26:	4613      	mov	r3, r2
 8001e28:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001e2c:	189b      	adds	r3, r3, r2
 8001e2e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001e32:	461a      	mov	r2, r3
 8001e34:	f240 63c8 	movw	r3, #1736	; 0x6c8
 8001e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e3c:	18d2      	adds	r2, r2, r3
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	f103 0304 	add.w	r3, r3, #4
 8001e44:	4610      	mov	r0, r2
 8001e46:	4619      	mov	r1, r3
 8001e48:	f000 fa06 	bl	8002258 <vListInsertEnd>
 8001e4c:	e79f      	b.n	8001d8e <vTaskIncrementTick+0xd6>
	}
	else
	{
		++uxMissedTicks;
 8001e4e:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8001e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f103 0201 	add.w	r2, r3, #1
 8001e5c:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8001e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e64:	601a      	str	r2, [r3, #0]
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
 8001e66:	f107 0710 	add.w	r7, r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop

08001e70 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 8001e76:	f240 73b4 	movw	r3, #1972	; 0x7b4
 8001e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d007      	beq.n	8001e94 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 8001e84:	f240 73bc 	movw	r3, #1980	; 0x7bc
 8001e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e8c:	f04f 0201 	mov.w	r2, #1
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	e071      	b.n	8001f78 <vTaskSwitchContext+0x108>
			unsigned long ulTempCounter;
			
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTempCounter );
				#else
					ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();
 8001e94:	f7fe ffaa 	bl	8000dec <get_us_time>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	607b      	str	r3, [r7, #4]
				/* Add the amount of time the task has been running to the accumulated
				time so far.  The time the task started running was stored in
				ulTaskSwitchedInTime.  Note that there is no overflow protection here
				so count values are only valid until the timer overflows.  Generally
				this will be about 1 hour assuming a 1uS timer increment. */
				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
 8001ea0:	f240 63c4 	movw	r3, #1732	; 0x6c4
 8001ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8001eac:	f240 73c8 	movw	r3, #1992	; 0x7c8
 8001eb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	1ac3      	subs	r3, r0, r3
 8001eba:	18cb      	adds	r3, r1, r3
 8001ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
				ulTaskSwitchedInTime = ulTempCounter;
 8001ebe:	f240 73c8 	movw	r3, #1992	; 0x7c8
 8001ec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 8001eca:	e00b      	b.n	8001ee4 <vTaskSwitchContext+0x74>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 8001ecc:	f240 73ac 	movw	r3, #1964	; 0x7ac
 8001ed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f103 32ff 	add.w	r2, r3, #4294967295
 8001eda:	f240 73ac 	movw	r3, #1964	; 0x7ac
 8001ede:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ee2:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 8001ee4:	f240 73ac 	movw	r3, #1964	; 0x7ac
 8001ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001ef4:	189b      	adds	r3, r3, r2
 8001ef6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001efa:	461a      	mov	r2, r3
 8001efc:	f240 63c8 	movw	r3, #1736	; 0x6c8
 8001f00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f04:	18d3      	adds	r3, r2, r3
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0df      	beq.n	8001ecc <vTaskSwitchContext+0x5c>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 8001f0c:	f240 73ac 	movw	r3, #1964	; 0x7ac
 8001f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	4613      	mov	r3, r2
 8001f18:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001f1c:	189b      	adds	r3, r3, r2
 8001f1e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001f22:	461a      	mov	r2, r3
 8001f24:	f240 63c8 	movw	r3, #1736	; 0x6c8
 8001f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f2c:	18d3      	adds	r3, r2, r3
 8001f2e:	603b      	str	r3, [r7, #0]
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	f103 0308 	add.w	r3, r3, #8
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d104      	bne.n	8001f52 <vTaskSwitchContext+0xe2>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	f240 63c4 	movw	r3, #1732	; 0x6c4
 8001f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f60:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
 8001f62:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8001f66:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001f6a:	f240 62c4 	movw	r2, #1732	; 0x6c4
 8001f6e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001f72:	6812      	ldr	r2, [r2, #0]
 8001f74:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f76:	60da      	str	r2, [r3, #12]
		vWriteTraceToBuffer();
	}
}
 8001f78:	f107 0708 	add.w	r7, r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	e000      	b.n	8001f8c <prvIdleTask+0xc>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
 8001f8a:	bf00      	nop
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8001f8c:	f000 f8a0 	bl	80020d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8001f90:	f240 63c8 	movw	r3, #1736	; 0x6c8
 8001f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d9f5      	bls.n	8001f8a <prvIdleTask+0xa>
			{
				taskYIELD();
 8001f9e:	f000 fa35 	bl	800240c <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
 8001fa2:	e7f2      	b.n	8001f8a <prvIdleTask+0xa>

08001fa4 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001fb8:	4618      	mov	r0, r3
 8001fba:	68b9      	ldr	r1, [r7, #8]
 8001fbc:	f04f 0210 	mov.w	r2, #16
 8001fc0:	f7fe fc54 	bl	800086c <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d902      	bls.n	8001fda <prvInitialiseTCBVariables+0x36>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 8001fd4:	f04f 0304 	mov.w	r3, #4
 8001fd8:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f103 0304 	add.w	r3, r3, #4
 8001fec:	4618      	mov	r0, r3
 8001fee:	f000 f925 	bl	800223c <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f103 0318 	add.w	r3, r3, #24
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 f91f 	bl	800223c <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f1c3 0205 	rsb	r2, r3, #5
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxTCB->pxTaskTag = NULL;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxTCB->ulRunTimeCounter = 0UL;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	64da      	str	r2, [r3, #76]	; 0x4c
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
 8002024:	f107 0710 	add.w	r7, r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 8002032:	f04f 0300 	mov.w	r3, #0
 8002036:	607b      	str	r3, [r7, #4]
 8002038:	e013      	b.n	8002062 <prvInitialiseTaskLists+0x36>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002042:	189b      	adds	r3, r3, r2
 8002044:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002048:	461a      	mov	r2, r3
 800204a:	f240 63c8 	movw	r3, #1736	; 0x6c8
 800204e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002052:	18d3      	adds	r3, r2, r3
 8002054:	4618      	mov	r0, r3
 8002056:	f000 f8d1 	bl	80021fc <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f103 0301 	add.w	r3, r3, #1
 8002060:	607b      	str	r3, [r7, #4]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b04      	cmp	r3, #4
 8002066:	d9e8      	bls.n	800203a <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 8002068:	f240 702c 	movw	r0, #1836	; 0x72c
 800206c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002070:	f000 f8c4 	bl	80021fc <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 8002074:	f240 7040 	movw	r0, #1856	; 0x740
 8002078:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800207c:	f000 f8be 	bl	80021fc <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
 8002080:	f240 705c 	movw	r0, #1884	; 0x75c
 8002084:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002088:	f000 f8b8 	bl	80021fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 800208c:	f240 7070 	movw	r0, #1904	; 0x770
 8002090:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002094:	f000 f8b2 	bl	80021fc <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
 8002098:	f240 7088 	movw	r0, #1928	; 0x788
 800209c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80020a0:	f000 f8ac 	bl	80021fc <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80020a4:	f240 7354 	movw	r3, #1876	; 0x754
 80020a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80020ac:	f240 722c 	movw	r2, #1836	; 0x72c
 80020b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80020b4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80020b6:	f240 7358 	movw	r3, #1880	; 0x758
 80020ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80020be:	f240 7240 	movw	r2, #1856	; 0x740
 80020c2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80020c6:	601a      	str	r2, [r3, #0]
}
 80020c8:	f107 0708 	add.w	r7, r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 80020d6:	f240 7384 	movw	r3, #1924	; 0x784
 80020da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d03c      	beq.n	800215e <prvCheckTasksWaitingTermination+0x8e>
		{
			vTaskSuspendAll();
 80020e4:	f7ff fd2c 	bl	8001b40 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80020e8:	f240 7370 	movw	r3, #1904	; 0x770
 80020ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	bf14      	ite	ne
 80020f6:	2300      	movne	r3, #0
 80020f8:	2301      	moveq	r3, #1
 80020fa:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
 80020fc:	f7ff fd32 	bl	8001b64 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d12b      	bne.n	800215e <prvCheckTasksWaitingTermination+0x8e>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 8002106:	f000 f98d 	bl	8002424 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 800210a:	f240 7370 	movw	r3, #1904	; 0x770
 800210e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	f103 0304 	add.w	r3, r3, #4
 800211e:	4618      	mov	r0, r3
 8002120:	f000 f8c2 	bl	80022a8 <vListRemove>
					--uxCurrentNumberOfTasks;
 8002124:	f240 73a0 	movw	r3, #1952	; 0x7a0
 8002128:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f103 32ff 	add.w	r2, r3, #4294967295
 8002132:	f240 73a0 	movw	r3, #1952	; 0x7a0
 8002136:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800213a:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 800213c:	f240 7384 	movw	r3, #1924	; 0x784
 8002140:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f103 32ff 	add.w	r2, r3, #4294967295
 800214a:	f240 7384 	movw	r3, #1924	; 0x784
 800214e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002152:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 8002154:	f000 f97c 	bl	8002450 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8002158:	6838      	ldr	r0, [r7, #0]
 800215a:	f000 f83f 	bl	80021dc <prvDeleteTCB>
			}
		}
	}
	#endif
}
 800215e:	f107 0708 	add.w	r7, r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop

08002168 <prvAllocateTCBAndStack>:
	}
}
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	6039      	str	r1, [r7, #0]
 8002172:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 8002174:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002178:	f7fe f862 	bl	8000240 <malloc>
 800217c:	4603      	mov	r3, r0
 800217e:	60fb      	str	r3, [r7, #12]

	if( pxNewTCB != NULL )
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d023      	beq.n	80021ce <prvAllocateTCBAndStack+0x66>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d107      	bne.n	800219c <prvAllocateTCBAndStack+0x34>
 800218c:	88fb      	ldrh	r3, [r7, #6]
 800218e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe f854 	bl	8000240 <malloc>
 8002198:	4603      	mov	r3, r0
 800219a:	e000      	b.n	800219e <prvAllocateTCBAndStack+0x36>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d106      	bne.n	80021b8 <prvAllocateTCBAndStack+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f7fe f850 	bl	8000250 <free>
			pxNewTCB = NULL;
 80021b0:	f04f 0300 	mov.w	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	e00a      	b.n	80021ce <prvAllocateTCBAndStack+0x66>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021bc:	88fb      	ldrh	r3, [r7, #6]
 80021be:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80021c2:	4610      	mov	r0, r2
 80021c4:	f04f 01a5 	mov.w	r1, #165	; 0xa5
 80021c8:	461a      	mov	r2, r3
 80021ca:	f7fe fb09 	bl	80007e0 <memset>
		}
	}

	return pxNewTCB;
 80021ce:	68fb      	ldr	r3, [r7, #12]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	f107 0710 	add.w	r7, r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop

080021dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe f831 	bl	8000250 <free>
		vPortFree( pxTCB );
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7fe f82e 	bl	8000250 <free>
	}
 80021f4:	f107 0708 	add.w	r7, r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f103 0208 	add.w	r2, r3, #8
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f04f 32ff 	mov.w	r2, #4294967295
 8002214:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f103 0208 	add.w	r2, r3, #8
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f103 0208 	add.w	r2, r3, #8
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
}
 8002232:	f107 070c 	add.w	r7, r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr

0800223c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	611a      	str	r2, [r3, #16]
}
 800224c:	f107 070c 	add.w	r7, r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop

08002258 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f103 0201 	add.w	r2, r3, #1
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	601a      	str	r2, [r3, #0]
}
 800229e:	f107 0714 	add.w	r7, r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <vListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6892      	ldr	r2, [r2, #8]
 80022b8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6852      	ldr	r2, [r2, #4]
 80022c2:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d103      	bne.n	80022dc <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f103 32ff 	add.w	r2, r3, #4294967295
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	601a      	str	r2, [r3, #0]
}
 80022f0:	f107 0714 	add.w	r7, r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop

080022fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f1a3 0304 	sub.w	r3, r3, #4
 800230e:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002316:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f1a3 0304 	sub.w	r3, r3, #4
 800231e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f1a3 0304 	sub.w	r3, r3, #4
 800232c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f1a3 0314 	sub.w	r3, r3, #20
 800233c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f1a3 0304 	sub.w	r3, r3, #4
 800234a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f06f 0202 	mvn.w	r2, #2
 8002352:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f1a3 0320 	sub.w	r3, r3, #32
 800235a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800235c:	68fb      	ldr	r3, [r7, #12]
}
 800235e:	4618      	mov	r0, r3
 8002360:	f107 0714 	add.w	r7, r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop

0800236c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800236c:	4b05      	ldr	r3, [pc, #20]	; (8002384 <pxCurrentTCBConst2>)
 800236e:	6819      	ldr	r1, [r3, #0]
 8002370:	6808      	ldr	r0, [r1, #0]
 8002372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002376:	f380 8809 	msr	PSP, r0
 800237a:	f04f 0000 	mov.w	r0, #0
 800237e:	f380 8811 	msr	BASEPRI, r0
 8002382:	4770      	bx	lr

08002384 <pxCurrentTCBConst2>:
 8002384:	200006c4 	.word	0x200006c4

08002388 <vPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void vPortStartFirstTask( void )
{
	__asm volatile(
 8002388:	4803      	ldr	r0, [pc, #12]	; (8002398 <vPortStartFirstTask+0x10>)
 800238a:	6800      	ldr	r0, [r0, #0]
 800238c:	6800      	ldr	r0, [r0, #0]
 800238e:	f380 8808 	msr	MSP, r0
 8002392:	b662      	cpsie	i
 8002394:	df00      	svc	0
 8002396:	bf00      	nop
 8002398:	e000ed08 	.word	0xe000ed08

0800239c <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
	/* Make PendSV and SysTick the lowest priority interrupts. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80023a0:	f64e 5320 	movw	r3, #60704	; 0xed20
 80023a4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80023a8:	f64e 5220 	movw	r2, #60704	; 0xed20
 80023ac:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
 80023b6:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80023b8:	f64e 5320 	movw	r3, #60704	; 0xed20
 80023bc:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80023c0:	f64e 5220 	movw	r2, #60704	; 0xed20
 80023c4:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80023c8:	6812      	ldr	r2, [r2, #0]
 80023ca:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 80023ce:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80023d0:	f000 fa18 	bl	8002804 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80023d4:	f240 5344 	movw	r3, #1348	; 0x544
 80023d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80023e2:	f000 fa2f 	bl	8002844 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80023e6:	f64e 7334 	movw	r3, #61236	; 0xef34
 80023ea:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80023ee:	f64e 7234 	movw	r2, #61236	; 0xef34
 80023f2:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80023fc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80023fe:	f7ff ffc3 	bl	8002388 <vPortStartFirstTask>

	/* Should not get here! */
	return 0;
 8002402:	f04f 0300 	mov.w	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop

0800240c <vPortYieldFromISR>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8002410:	f64e 5304 	movw	r3, #60676	; 0xed04
 8002414:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8002418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800241c:	601a      	str	r2, [r3, #0]
}
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr

08002424 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8002428:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800242c:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
 8002430:	f240 5344 	movw	r3, #1348	; 0x544
 8002434:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f103 0201 	add.w	r2, r3, #1
 800243e:	f240 5344 	movw	r3, #1348	; 0x544
 8002442:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002446:	601a      	str	r2, [r3, #0]
}
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop

08002450 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 8002454:	f240 5344 	movw	r3, #1348	; 0x544
 8002458:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f103 32ff 	add.w	r2, r3, #4294967295
 8002462:	f240 5344 	movw	r3, #1348	; 0x544
 8002466:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800246a:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800246c:	f240 5344 	movw	r3, #1348	; 0x544
 8002470:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d103      	bne.n	8002482 <vPortExitCritical+0x32>
	{
		portENABLE_INTERRUPTS();
 800247a:	f04f 0000 	mov.w	r0, #0
 800247e:	f380 8811 	msr	BASEPRI, r0
	}
}
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr

08002488 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002488:	f3ef 8009 	mrs	r0, PSP
 800248c:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <pxCurrentTCBConst>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	f01e 0f10 	tst.w	lr, #16
 8002494:	bf08      	it	eq
 8002496:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800249a:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800249e:	6010      	str	r0, [r2, #0]
 80024a0:	e92d 4008 	stmdb	sp!, {r3, lr}
 80024a4:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80024a8:	f380 8811 	msr	BASEPRI, r0
 80024ac:	f7ff fce0 	bl	8001e70 <vTaskSwitchContext>
 80024b0:	f04f 0000 	mov.w	r0, #0
 80024b4:	f380 8811 	msr	BASEPRI, r0
 80024b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80024bc:	6819      	ldr	r1, [r3, #0]
 80024be:	6808      	ldr	r0, [r1, #0]
 80024c0:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024c4:	f01e 0f10 	tst.w	lr, #16
 80024c8:	bf08      	it	eq
 80024ca:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80024ce:	f380 8809 	msr	PSP, r0
 80024d2:	4770      	bx	lr

080024d4 <pxCurrentTCBConst>:
 80024d4:	200006c4 	.word	0x200006c4

080024d8 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80024de:	f64e 5304 	movw	r3, #60676	; 0xed04
 80024e2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80024e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ea:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	607b      	str	r3, [r7, #4]
 80024f2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80024f6:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
 80024fa:	f7ff fbdd 	bl	8001cb8 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 80024fe:	f04f 0000 	mov.w	r0, #0
 8002502:	f380 8811 	msr	BASEPRI, r0
  uint8_t temp1, temp2 = 0;
 8002506:	f04f 0300 	mov.w	r3, #0
 800250a:	70fb      	strb	r3, [r7, #3]
  
  if (TimingDelay != 0x00)
 800250c:	f240 63c0 	movw	r3, #1728	; 0x6c0
 8002510:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d002      	beq.n	8002520 <SysTick_Handler+0x48>
  {
    TimingDelay_Decrement();
 800251a:	f7fe fd5d 	bl	8000fd8 <TimingDelay_Decrement>
 800251e:	e16c      	b.n	80027fa <SysTick_Handler+0x322>
  }
  else
  {
    Counter ++;
 8002520:	f240 73cc 	movw	r3, #1996	; 0x7cc
 8002524:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	f103 0301 	add.w	r3, r3, #1
 800252e:	b2da      	uxtb	r2, r3
 8002530:	f240 73cc 	movw	r3, #1996	; 0x7cc
 8002534:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002538:	701a      	strb	r2, [r3, #0]
    if (Counter == 10)
 800253a:	f240 73cc 	movw	r3, #1996	; 0x7cc
 800253e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b0a      	cmp	r3, #10
 8002546:	f040 8158 	bne.w	80027fa <SysTick_Handler+0x322>
    {
      Buffer[0] = 0;
 800254a:	f240 73e0 	movw	r3, #2016	; 0x7e0
 800254e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	701a      	strb	r2, [r3, #0]
      Buffer[2] = 0;
 8002558:	f240 73e0 	movw	r3, #2016	; 0x7e0
 800255c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	709a      	strb	r2, [r3, #2]

      LIS302DL_Read(Buffer, LIS302DL_OUT_X_ADDR, 6);
 8002566:	f240 70e0 	movw	r0, #2016	; 0x7e0
 800256a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800256e:	f04f 0129 	mov.w	r1, #41	; 0x29
 8002572:	f04f 0206 	mov.w	r2, #6
 8002576:	f7fe ffe7 	bl	8001548 <LIS302DL_Read>
      /* Remove the offsets values from data */
      Buffer[0] -= XOffset;
 800257a:	f240 73e0 	movw	r3, #2016	; 0x7e0
 800257e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002582:	781a      	ldrb	r2, [r3, #0]
 8002584:	f240 73dc 	movw	r3, #2012	; 0x7dc
 8002588:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	b2db      	uxtb	r3, r3
 8002590:	b2db      	uxtb	r3, r3
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	b2da      	uxtb	r2, r3
 8002596:	f240 73e0 	movw	r3, #2016	; 0x7e0
 800259a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800259e:	701a      	strb	r2, [r3, #0]
      Buffer[2] -= YOffset;
 80025a0:	f240 73e0 	movw	r3, #2016	; 0x7e0
 80025a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025a8:	789a      	ldrb	r2, [r3, #2]
 80025aa:	f240 73e6 	movw	r3, #2022	; 0x7e6
 80025ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	f240 73e0 	movw	r3, #2016	; 0x7e0
 80025c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025c4:	709a      	strb	r2, [r3, #2]

      /* Update autoreload and capture compare registers value*/
      temp1 = ABS((int8_t)(Buffer[0]));
 80025c6:	f240 73e0 	movw	r3, #2016	; 0x7e0
 80025ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	b25b      	sxtb	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	bfb8      	it	lt
 80025d8:	425b      	neglt	r3, r3
 80025da:	70bb      	strb	r3, [r7, #2]
      temp2 = ABS((int8_t)(Buffer[2]));
 80025dc:	f240 73e0 	movw	r3, #2016	; 0x7e0
 80025e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025e4:	789b      	ldrb	r3, [r3, #2]
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	b25b      	sxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	bfb8      	it	lt
 80025ee:	425b      	neglt	r3, r3
 80025f0:	70fb      	strb	r3, [r7, #3]
      TempAcceleration = MAX(temp1, temp2);
 80025f2:	78ba      	ldrb	r2, [r7, #2]
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	bf28      	it	cs
 80025fa:	4613      	movcs	r3, r2
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	f240 73cd 	movw	r3, #1997	; 0x7cd
 8002602:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002606:	701a      	strb	r2, [r3, #0]

      if(TempAcceleration != 0)
 8002608:	f240 73cd 	movw	r3, #1997	; 0x7cd
 800260c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 80d9 	beq.w	80027cc <SysTick_Handler+0x2f4>
      {
        if ((int8_t)Buffer[0] < -2)
 800261a:	f240 73e0 	movw	r3, #2016	; 0x7e0
 800261e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	b25b      	sxtb	r3, r3
 8002628:	f113 0f02 	cmn.w	r3, #2
 800262c:	da2b      	bge.n	8002686 <SysTick_Handler+0x1ae>
        {

        	STM_EVAL_LEDOn(LED6);
 800262e:	f04f 0003 	mov.w	r0, #3
 8002632:	f7ff f921 	bl	8001878 <STM_EVAL_LEDOn>


        	if ((int8_t)Buffer[0] <= 2)
 8002636:	f240 73e0 	movw	r3, #2016	; 0x7e0
 800263a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	b25b      	sxtb	r3, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	dc03      	bgt.n	8002650 <SysTick_Handler+0x178>
        	{
        		STM_EVAL_LEDOff(LED3);
 8002648:	f04f 0001 	mov.w	r0, #1
 800264c:	f7ff f92e 	bl	80018ac <STM_EVAL_LEDOff>
        	}

        	if ((int8_t)Buffer[2] <= 2)
 8002650:	f240 73e0 	movw	r3, #2016	; 0x7e0
 8002654:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002658:	789b      	ldrb	r3, [r3, #2]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	b25b      	sxtb	r3, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	dc03      	bgt.n	800266a <SysTick_Handler+0x192>
        	{
        		STM_EVAL_LEDOff(LED4);
 8002662:	f04f 0000 	mov.w	r0, #0
 8002666:	f7ff f921 	bl	80018ac <STM_EVAL_LEDOff>
        	}

        	if ((int8_t)Buffer[2] >= -2)
 800266a:	f240 73e0 	movw	r3, #2016	; 0x7e0
 800266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002672:	789b      	ldrb	r3, [r3, #2]
 8002674:	b2db      	uxtb	r3, r3
 8002676:	b25b      	sxtb	r3, r3
 8002678:	f113 0f02 	cmn.w	r3, #2
 800267c:	db03      	blt.n	8002686 <SysTick_Handler+0x1ae>
        	{
        		STM_EVAL_LEDOff(LED5);
 800267e:	f04f 0002 	mov.w	r0, #2
 8002682:	f7ff f913 	bl	80018ac <STM_EVAL_LEDOff>
        	}

        }
        if ((int8_t)Buffer[0] > 2)
 8002686:	f240 73e0 	movw	r3, #2016	; 0x7e0
 800268a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	b2db      	uxtb	r3, r3
 8002692:	b25b      	sxtb	r3, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	dd2c      	ble.n	80026f2 <SysTick_Handler+0x21a>
        {

        			STM_EVAL_LEDOn(LED3);
 8002698:	f04f 0001 	mov.w	r0, #1
 800269c:	f7ff f8ec 	bl	8001878 <STM_EVAL_LEDOn>

        			if ((int8_t)Buffer[2] <= 2)
 80026a0:	f240 73e0 	movw	r3, #2016	; 0x7e0
 80026a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026a8:	789b      	ldrb	r3, [r3, #2]
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	b25b      	sxtb	r3, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	dc03      	bgt.n	80026ba <SysTick_Handler+0x1e2>
        			{
        			STM_EVAL_LEDOff(LED4);
 80026b2:	f04f 0000 	mov.w	r0, #0
 80026b6:	f7ff f8f9 	bl	80018ac <STM_EVAL_LEDOff>
        			}

        			if ((int8_t)Buffer[2] >= -2)
 80026ba:	f240 73e0 	movw	r3, #2016	; 0x7e0
 80026be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026c2:	789b      	ldrb	r3, [r3, #2]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	f113 0f02 	cmn.w	r3, #2
 80026cc:	db03      	blt.n	80026d6 <SysTick_Handler+0x1fe>
        			{
                	STM_EVAL_LEDOff(LED5);
 80026ce:	f04f 0002 	mov.w	r0, #2
 80026d2:	f7ff f8eb 	bl	80018ac <STM_EVAL_LEDOff>
        			}

        			if ((int8_t)Buffer[0] >= -2)
 80026d6:	f240 73e0 	movw	r3, #2016	; 0x7e0
 80026da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	b25b      	sxtb	r3, r3
 80026e4:	f113 0f02 	cmn.w	r3, #2
 80026e8:	db03      	blt.n	80026f2 <SysTick_Handler+0x21a>
        			{
                	STM_EVAL_LEDOff(LED6);
 80026ea:	f04f 0003 	mov.w	r0, #3
 80026ee:	f7ff f8dd 	bl	80018ac <STM_EVAL_LEDOff>
        			}

        }
        if ((int8_t)Buffer[2] > 2)
 80026f2:	f240 73e0 	movw	r3, #2016	; 0x7e0
 80026f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026fa:	789b      	ldrb	r3, [r3, #2]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	b25b      	sxtb	r3, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	dd2c      	ble.n	800275e <SysTick_Handler+0x286>
        {

        			STM_EVAL_LEDOn(LED4);
 8002704:	f04f 0000 	mov.w	r0, #0
 8002708:	f7ff f8b6 	bl	8001878 <STM_EVAL_LEDOn>

        			if ((int8_t)Buffer[0] <= 2)
 800270c:	f240 73e0 	movw	r3, #2016	; 0x7e0
 8002710:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	b2db      	uxtb	r3, r3
 8002718:	b25b      	sxtb	r3, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	dc03      	bgt.n	8002726 <SysTick_Handler+0x24e>
        			{
        				STM_EVAL_LEDOff(LED3);
 800271e:	f04f 0001 	mov.w	r0, #1
 8002722:	f7ff f8c3 	bl	80018ac <STM_EVAL_LEDOff>
        			}

        			if ((int8_t)Buffer[2] >= -2)
 8002726:	f240 73e0 	movw	r3, #2016	; 0x7e0
 800272a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800272e:	789b      	ldrb	r3, [r3, #2]
 8002730:	b2db      	uxtb	r3, r3
 8002732:	b25b      	sxtb	r3, r3
 8002734:	f113 0f02 	cmn.w	r3, #2
 8002738:	db03      	blt.n	8002742 <SysTick_Handler+0x26a>
        			{
        				STM_EVAL_LEDOff(LED5);
 800273a:	f04f 0002 	mov.w	r0, #2
 800273e:	f7ff f8b5 	bl	80018ac <STM_EVAL_LEDOff>
        			}

        			if ((int8_t)Buffer[0] >= -2)
 8002742:	f240 73e0 	movw	r3, #2016	; 0x7e0
 8002746:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	b2db      	uxtb	r3, r3
 800274e:	b25b      	sxtb	r3, r3
 8002750:	f113 0f02 	cmn.w	r3, #2
 8002754:	db03      	blt.n	800275e <SysTick_Handler+0x286>
        			{
        				STM_EVAL_LEDOff(LED6);
 8002756:	f04f 0003 	mov.w	r0, #3
 800275a:	f7ff f8a7 	bl	80018ac <STM_EVAL_LEDOff>
        			}

        }
        if ((int8_t)Buffer[2] < -2)
 800275e:	f240 73e0 	movw	r3, #2016	; 0x7e0
 8002762:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002766:	789b      	ldrb	r3, [r3, #2]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	b25b      	sxtb	r3, r3
 800276c:	f113 0f02 	cmn.w	r3, #2
 8002770:	da3c      	bge.n	80027ec <SysTick_Handler+0x314>
        {

        			STM_EVAL_LEDOn(LED5);
 8002772:	f04f 0002 	mov.w	r0, #2
 8002776:	f7ff f87f 	bl	8001878 <STM_EVAL_LEDOn>

        			if ((int8_t)Buffer[0] <= 2)
 800277a:	f240 73e0 	movw	r3, #2016	; 0x7e0
 800277e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	b25b      	sxtb	r3, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	dc03      	bgt.n	8002794 <SysTick_Handler+0x2bc>
        			{
        				STM_EVAL_LEDOff(LED3);
 800278c:	f04f 0001 	mov.w	r0, #1
 8002790:	f7ff f88c 	bl	80018ac <STM_EVAL_LEDOff>
        			}

        			if ((int8_t)Buffer[2] <= 2)
 8002794:	f240 73e0 	movw	r3, #2016	; 0x7e0
 8002798:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800279c:	789b      	ldrb	r3, [r3, #2]
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	b25b      	sxtb	r3, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	dc03      	bgt.n	80027ae <SysTick_Handler+0x2d6>
        			{
        			STM_EVAL_LEDOff(LED4);
 80027a6:	f04f 0000 	mov.w	r0, #0
 80027aa:	f7ff f87f 	bl	80018ac <STM_EVAL_LEDOff>
        			}

        			if ((int8_t)Buffer[0] >= -2)
 80027ae:	f240 73e0 	movw	r3, #2016	; 0x7e0
 80027b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	b25b      	sxtb	r3, r3
 80027bc:	f113 0f02 	cmn.w	r3, #2
 80027c0:	db14      	blt.n	80027ec <SysTick_Handler+0x314>
        			{
        				STM_EVAL_LEDOff(LED6);
 80027c2:	f04f 0003 	mov.w	r0, #3
 80027c6:	f7ff f871 	bl	80018ac <STM_EVAL_LEDOff>
 80027ca:	e00f      	b.n	80027ec <SysTick_Handler+0x314>
        			}
        }
      }
      else
             {
             	STM_EVAL_LEDOff(LED3);
 80027cc:	f04f 0001 	mov.w	r0, #1
 80027d0:	f7ff f86c 	bl	80018ac <STM_EVAL_LEDOff>
             	STM_EVAL_LEDOff(LED4);
 80027d4:	f04f 0000 	mov.w	r0, #0
 80027d8:	f7ff f868 	bl	80018ac <STM_EVAL_LEDOff>
             	STM_EVAL_LEDOff(LED5);
 80027dc:	f04f 0002 	mov.w	r0, #2
 80027e0:	f7ff f864 	bl	80018ac <STM_EVAL_LEDOff>
             	STM_EVAL_LEDOff(LED6);
 80027e4:	f04f 0003 	mov.w	r0, #3
 80027e8:	f7ff f860 	bl	80018ac <STM_EVAL_LEDOff>

             }
      Counter = 0x00;
 80027ec:	f240 73cc 	movw	r3, #1996	; 0x7cc
 80027f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]
    }
  }
}
 80027fa:	f107 0708 	add.w	r7, r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop

08002804 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002808:	f24e 0314 	movw	r3, #57364	; 0xe014
 800280c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8002810:	f240 5224 	movw	r2, #1316	; 0x524
 8002814:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002818:	6811      	ldr	r1, [r2, #0]
 800281a:	f644 52d3 	movw	r2, #19923	; 0x4dd3
 800281e:	f2c1 0262 	movt	r2, #4194	; 0x1062
 8002822:	fba2 0201 	umull	r0, r2, r2, r1
 8002826:	ea4f 1292 	mov.w	r2, r2, lsr #6
 800282a:	f102 32ff 	add.w	r2, r2, #4294967295
 800282e:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8002830:	f24e 0310 	movw	r3, #57360	; 0xe010
 8002834:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8002838:	f04f 0207 	mov.w	r2, #7
 800283c:	601a      	str	r2, [r3, #0]
}
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr

08002844 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002844:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002854 <vPortEnableVFP+0x10>
 8002848:	6801      	ldr	r1, [r0, #0]
 800284a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800284e:	6001      	str	r1, [r0, #0]
 8002850:	4770      	bx	lr
 8002852:	0000      	.short	0x0000
 8002854:	e000ed88 	.word	0xe000ed88

08002858 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	e086      	b.n	800298a <GPIO_Init+0x132>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f04f 0201 	mov.w	r2, #1
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4013      	ands	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	429a      	cmp	r2, r3
 8002898:	d173      	bne.n	8002982 <GPIO_Init+0x12a>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80028a4:	f04f 0103 	mov.w	r1, #3
 80028a8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ac:	ea6f 0303 	mvn.w	r3, r3
 80028b0:	401a      	ands	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	791b      	ldrb	r3, [r3, #4]
 80028be:	4619      	mov	r1, r3
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80028c6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	791b      	ldrb	r3, [r3, #4]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d003      	beq.n	80028e0 <GPIO_Init+0x88>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	791b      	ldrb	r3, [r3, #4]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d134      	bne.n	800294a <GPIO_Init+0xf2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80028ea:	f04f 0103 	mov.w	r1, #3
 80028ee:	fa01 f303 	lsl.w	r3, r1, r3
 80028f2:	ea6f 0303 	mvn.w	r3, r3
 80028f6:	401a      	ands	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	795b      	ldrb	r3, [r3, #5]
 8002904:	4619      	mov	r1, r3
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800290c:	fa01 f303 	lsl.w	r3, r1, r3
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	b29b      	uxth	r3, r3
 800291e:	f04f 0101 	mov.w	r1, #1
 8002922:	fa01 f303 	lsl.w	r3, r1, r3
 8002926:	ea6f 0303 	mvn.w	r3, r3
 800292a:	401a      	ands	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	799b      	ldrb	r3, [r3, #6]
 8002938:	4619      	mov	r1, r3
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	b29b      	uxth	r3, r3
 800293e:	fa01 f303 	lsl.w	r3, r1, r3
 8002942:	b29b      	uxth	r3, r3
 8002944:	431a      	orrs	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	b29b      	uxth	r3, r3
 8002952:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002956:	f04f 0103 	mov.w	r1, #3
 800295a:	fa01 f303 	lsl.w	r3, r1, r3
 800295e:	ea6f 0303 	mvn.w	r3, r3
 8002962:	401a      	ands	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	79db      	ldrb	r3, [r3, #7]
 8002970:	4619      	mov	r1, r3
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002978:	fa01 f303 	lsl.w	r3, r1, r3
 800297c:	431a      	orrs	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f103 0301 	add.w	r3, r3, #1
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	2b0f      	cmp	r3, #15
 800298e:	f67f af75 	bls.w	800287c <GPIO_Init+0x24>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8002992:	f107 071c 	add.w	r7, r7, #28
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	887a      	ldrh	r2, [r7, #2]
 80029ac:	831a      	strh	r2, [r3, #24]
}
 80029ae:	f107 070c 	add.w	r7, r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr

080029b8 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	887a      	ldrh	r2, [r7, #2]
 80029c8:	835a      	strh	r2, [r3, #26]
}
 80029ca:	f107 070c 	add.w	r7, r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr

080029d4 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	460a      	mov	r2, r1
 80029e0:	807a      	strh	r2, [r7, #2]
 80029e2:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80029e4:	f04f 0300 	mov.w	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80029f0:	787a      	ldrb	r2, [r7, #1]
 80029f2:	887b      	ldrh	r3, [r7, #2]
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8002a02:	887b      	ldrh	r3, [r7, #2]
 8002a04:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	887b      	ldrh	r3, [r7, #2]
 8002a0e:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	4619      	mov	r1, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f101 0108 	add.w	r1, r1, #8
 8002a1c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002a20:	887b      	ldrh	r3, [r7, #2]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002a2a:	f04f 000f 	mov.w	r0, #15
 8002a2e:	fa00 f303 	lsl.w	r3, r0, r3
 8002a32:	ea6f 0303 	mvn.w	r3, r3
 8002a36:	4019      	ands	r1, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f102 0208 	add.w	r2, r2, #8
 8002a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8002a42:	887b      	ldrh	r3, [r7, #2]
 8002a44:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f102 0208 	add.w	r2, r2, #8
 8002a52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8002a5c:	887b      	ldrh	r3, [r7, #2]
 8002a5e:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	461a      	mov	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f102 0208 	add.w	r2, r2, #8
 8002a6c:	68b9      	ldr	r1, [r7, #8]
 8002a6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002a72:	f107 0714 	add.w	r7, r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr

08002a7c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b089      	sub	sp, #36	; 0x24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	61bb      	str	r3, [r7, #24]
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	f04f 0300 	mov.w	r3, #0
 8002a94:	61fb      	str	r3, [r7, #28]
 8002a96:	f04f 0302 	mov.w	r3, #2
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	f04f 0300 	mov.w	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	f04f 0302 	mov.w	r3, #2
 8002aa6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002aa8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002aac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d00a      	beq.n	8002ad4 <RCC_GetClocksFreq+0x58>
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d00f      	beq.n	8002ae2 <RCC_GetClocksFreq+0x66>
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d160      	bne.n	8002b88 <RCC_GetClocksFreq+0x10c>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8002acc:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8002ad0:	6013      	str	r3, [r2, #0]
      break;
 8002ad2:	e060      	b.n	8002b96 <RCC_GetClocksFreq+0x11a>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8002ada:	f2c0 037a 	movt	r3, #122	; 0x7a
 8002ade:	6013      	str	r3, [r2, #0]
      break;
 8002ae0:	e059      	b.n	8002b96 <RCC_GetClocksFreq+0x11a>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002ae2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002ae6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af0:	ea4f 5393 	mov.w	r3, r3, lsr #22
 8002af4:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002af6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002afa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b04:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d014      	beq.n	8002b36 <RCC_GetClocksFreq+0xba>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002b0c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8002b10:	f2c0 037a 	movt	r3, #122	; 0x7a
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	fbb3 f2f2 	udiv	r2, r3, r2
 8002b1a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002b1e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b22:	6859      	ldr	r1, [r3, #4]
 8002b24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b28:	400b      	ands	r3, r1
 8002b2a:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8002b2e:	fb03 f302 	mul.w	r3, r3, r2
 8002b32:	61fb      	str	r3, [r7, #28]
 8002b34:	e013      	b.n	8002b5e <RCC_GetClocksFreq+0xe2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8002b36:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8002b3a:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	fbb3 f2f2 	udiv	r2, r3, r2
 8002b44:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002b48:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b4c:	6859      	ldr	r1, [r3, #4]
 8002b4e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b52:	400b      	ands	r3, r1
 8002b54:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8002b58:	fb03 f302 	mul.w	r3, r3, r2
 8002b5c:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002b5e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002b62:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b6c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8002b70:	f103 0301 	add.w	r3, r3, #1
 8002b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002b78:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8002b7a:	69fa      	ldr	r2, [r7, #28]
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	601a      	str	r2, [r3, #0]
      break;
 8002b86:	e006      	b.n	8002b96 <RCC_GetClocksFreq+0x11a>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8002b8e:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8002b92:	6013      	str	r3, [r2, #0]
      break;
 8002b94:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8002b96:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002b9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ba4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8002bac:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8002bae:	f240 5348 	movw	r3, #1352	; 0x548
 8002bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	189b      	adds	r3, r3, r2
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	fa22 f203 	lsr.w	r2, r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8002bce:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002bd2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002bdc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	ea4f 2393 	mov.w	r3, r3, lsr #10
 8002be4:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8002be6:	f240 5348 	movw	r3, #1352	; 0x548
 8002bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	189b      	adds	r3, r3, r2
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	fa22 f203 	lsr.w	r2, r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8002c06:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002c14:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	ea4f 3353 	mov.w	r3, r3, lsr #13
 8002c1c:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8002c1e:	f240 5348 	movw	r3, #1352	; 0x548
 8002c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	189b      	adds	r3, r3, r2
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	fa22 f203 	lsr.w	r2, r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	60da      	str	r2, [r3, #12]
}
 8002c3e:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr

08002c48 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00c      	beq.n	8002c74 <RCC_AHB1PeriphClockCmd+0x2c>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8002c5a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002c5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c62:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002c66:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002c6a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	631a      	str	r2, [r3, #48]	; 0x30
 8002c72:	e00d      	b.n	8002c90 <RCC_AHB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8002c74:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002c78:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c7c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002c80:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002c84:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	ea6f 0202 	mvn.w	r2, r2
 8002c8c:	400a      	ands	r2, r1
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8002c90:	f107 070c 	add.w	r7, r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop

08002c9c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00c      	beq.n	8002cc8 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8002cae:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002cb2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002cb6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002cba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002cbe:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	645a      	str	r2, [r3, #68]	; 0x44
 8002cc6:	e00d      	b.n	8002ce4 <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8002cc8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002ccc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002cd0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002cd4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002cd8:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	ea6f 0202 	mvn.w	r2, r2
 8002ce0:	400a      	ands	r2, r1
 8002ce2:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8002ce4:	f107 070c 	add.w	r7, r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop

08002cf0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002cfc:	78fb      	ldrb	r3, [r7, #3]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00c      	beq.n	8002d1c <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8002d02:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002d06:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d0a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002d0e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002d12:	6a11      	ldr	r1, [r2, #32]
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	621a      	str	r2, [r3, #32]
 8002d1a:	e00d      	b.n	8002d38 <RCC_APB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8002d1c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002d20:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d24:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002d28:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002d2c:	6a11      	ldr	r1, [r2, #32]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	ea6f 0202 	mvn.w	r2, r2
 8002d34:	400a      	ands	r2, r1
 8002d36:	621a      	str	r2, [r3, #32]
  }
}
 8002d38:	f107 070c 	add.w	r7, r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop

08002d44 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002d50:	78fb      	ldrb	r3, [r7, #3]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00c      	beq.n	8002d70 <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8002d56:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002d5a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d5e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002d62:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002d66:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	625a      	str	r2, [r3, #36]	; 0x24
 8002d6e:	e00d      	b.n	8002d8c <RCC_APB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8002d70:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002d74:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d78:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002d7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002d80:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	ea6f 0202 	mvn.w	r2, r2
 8002d88:	400a      	ands	r2, r1
 8002d8a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8002d8c:	f107 070c 	add.w	r7, r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bc80      	pop	{r7}
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop

08002d98 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002da6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d10c      	bne.n	8002dc8 <SPI_I2S_DeInit+0x30>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8002dae:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002db2:	f04f 0101 	mov.w	r1, #1
 8002db6:	f7ff ffc5 	bl	8002d44 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8002dba:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002dbe:	f04f 0100 	mov.w	r1, #0
 8002dc2:	f7ff ffbf 	bl	8002d44 <RCC_APB2PeriphResetCmd>
 8002dc6:	e026      	b.n	8002e16 <SPI_I2S_DeInit+0x7e>
  }
  else if (SPIx == SPI2)
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002dce:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d10c      	bne.n	8002df0 <SPI_I2S_DeInit+0x58>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8002dd6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002dda:	f04f 0101 	mov.w	r1, #1
 8002dde:	f7ff ff87 	bl	8002cf0 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8002de2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002de6:	f04f 0100 	mov.w	r1, #0
 8002dea:	f7ff ff81 	bl	8002cf0 <RCC_APB1PeriphResetCmd>
 8002dee:	e012      	b.n	8002e16 <SPI_I2S_DeInit+0x7e>
    }
  else
  {
    if (SPIx == SPI3)
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002df6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d10b      	bne.n	8002e16 <SPI_I2S_DeInit+0x7e>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8002dfe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002e02:	f04f 0101 	mov.w	r1, #1
 8002e06:	f7ff ff73 	bl	8002cf0 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8002e0a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002e0e:	f04f 0100 	mov.w	r1, #0
 8002e12:	f7ff ff6d 	bl	8002cf0 <RCC_APB1PeriphResetCmd>
    }
  }
}
 8002e16:	f107 0708 	add.w	r7, r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop

08002e20 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002e2a:	f04f 0300 	mov.w	r3, #0
 8002e2e:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8002e36:	89fb      	ldrh	r3, [r7, #14]
 8002e38:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8002e3c:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	881a      	ldrh	r2, [r3, #0]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	885b      	ldrh	r3, [r3, #2]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002e56:	4313      	orrs	r3, r2
 8002e58:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002e66:	4313      	orrs	r3, r2
 8002e68:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002e76:	4313      	orrs	r3, r2
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	89fb      	ldrh	r3, [r7, #14]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	89fa      	ldrh	r2, [r7, #14]
 8002e84:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	8b9b      	ldrh	r3, [r3, #28]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	8a1a      	ldrh	r2, [r3, #16]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	821a      	strh	r2, [r3, #16]
}
 8002e9e:	f107 0714 	add.w	r7, r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002eb4:	78fb      	ldrb	r3, [r7, #3]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d008      	beq.n	8002ecc <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	801a      	strh	r2, [r3, #0]
 8002eca:	e007      	b.n	8002edc <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	801a      	strh	r2, [r3, #0]
  }
}
 8002edc:	f107 070c 	add.w	r7, r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc80      	pop	{r7}
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop

08002ee8 <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	899b      	ldrh	r3, [r3, #12]
 8002ef4:	b29b      	uxth	r3, r3
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f107 070c 	add.w	r7, r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop

08002f04 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	887a      	ldrh	r2, [r7, #2]
 8002f14:	819a      	strh	r2, [r3, #12]
}
 8002f16:	f107 070c 	add.w	r7, r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr

08002f20 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	891b      	ldrh	r3, [r3, #8]
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	887b      	ldrh	r3, [r7, #2]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <SPI_I2S_GetFlagStatus+0x2a>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8002f42:	f04f 0301 	mov.w	r3, #1
 8002f46:	73fb      	strb	r3, [r7, #15]
 8002f48:	e002      	b.n	8002f50 <SPI_I2S_GetFlagStatus+0x30>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	f107 0714 	add.w	r7, r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop

08002f60 <register_fini>:
 8002f60:	f240 0300 	movw	r3, #0
 8002f64:	f2c0 0300 	movt	r3, #0
 8002f68:	b12b      	cbz	r3, 8002f76 <register_fini+0x16>
 8002f6a:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8002f6e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002f72:	f7fd bcb5 	b.w	80008e0 <atexit>
 8002f76:	4770      	bx	lr
 8002f78:	006d7770 	.word	0x006d7770
 8002f7c:	454c4449 	.word	0x454c4449
 8002f80:	00000000 	.word	0x00000000
 8002f84:	00000a0d 	.word	0x00000a0d
 8002f88:	20207525 	.word	0x20207525
 8002f8c:	20206325 	.word	0x20206325
 8002f90:	36312d25 	.word	0x36312d25
 8002f94:	20202073 	.word	0x20202073
 8002f98:	20202020 	.word	0x20202020
 8002f9c:	30202020 	.word	0x30202020
 8002fa0:	30202020 	.word	0x30202020
 8002fa4:	20202525 	.word	0x20202525
 8002fa8:	0d753525 	.word	0x0d753525
 8002fac:	0000000a 	.word	0x0000000a
 8002fb0:	20207525 	.word	0x20207525
 8002fb4:	20206325 	.word	0x20206325
 8002fb8:	36312d25 	.word	0x36312d25
 8002fbc:	31252073 	.word	0x31252073
 8002fc0:	25207530 	.word	0x25207530
 8002fc4:	25257533 	.word	0x25257533
 8002fc8:	35252020 	.word	0x35252020
 8002fcc:	000a0d75 	.word	0x000a0d75
 8002fd0:	20207525 	.word	0x20207525
 8002fd4:	20206325 	.word	0x20206325
 8002fd8:	36312d25 	.word	0x36312d25
 8002fdc:	31252073 	.word	0x31252073
 8002fe0:	20207530 	.word	0x20207530
 8002fe4:	2525313c 	.word	0x2525313c
 8002fe8:	35252020 	.word	0x35252020
 8002fec:	000a0d75 	.word	0x000a0d75

08002ff0 <_global_impure_ptr>:
 8002ff0:	20000004                                ... 

08002ff4 <__sf_fake_stderr>:
 8002ff4:	00000000 00000000 00000000 00000000     ................
 8003004:	00000000 00000000 00000000 00000000     ................

08003014 <__sf_fake_stdout>:
 8003014:	00000000 00000000 00000000 00000000     ................
 8003024:	00000000 00000000 00000000 00000000     ................

08003034 <__sf_fake_stdin>:
 8003034:	00000000 00000000 00000000 00000000     ................
 8003044:	00000000 00000000 00000000 00000000     ................

08003054 <GPIO_PIN>:
 8003054:	20001000 80004000 00000043              ... .@..C...

08003060 <_init>:
 8003060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003062:	bf00      	nop
 8003064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003066:	bc08      	pop	{r3}
 8003068:	469e      	mov	lr, r3
 800306a:	4770      	bx	lr

0800306c <_fini>:
 800306c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306e:	bf00      	nop
 8003070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003072:	bc08      	pop	{r3}
 8003074:	469e      	mov	lr, r3
 8003076:	4770      	bx	lr
