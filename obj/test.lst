   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"test.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata.crcHi,"a",%progbits
  20              		.align	2
  23              	crcHi:
  24 0000 00000000 		.word	0
  25 0004 C1000000 		.word	193
  26 0008 81000000 		.word	129
  27 000c 40000000 		.word	64
  28 0010 01000000 		.word	1
  29 0014 C0000000 		.word	192
  30 0018 80000000 		.word	128
  31 001c 41000000 		.word	65
  32 0020 01000000 		.word	1
  33 0024 C0000000 		.word	192
  34 0028 80000000 		.word	128
  35 002c 41000000 		.word	65
  36 0030 00000000 		.word	0
  37 0034 C1000000 		.word	193
  38 0038 81000000 		.word	129
  39 003c 40000000 		.word	64
  40 0040 01000000 		.word	1
  41 0044 C0000000 		.word	192
  42 0048 80000000 		.word	128
  43 004c 41000000 		.word	65
  44 0050 00000000 		.word	0
  45 0054 C1000000 		.word	193
  46 0058 81000000 		.word	129
  47 005c 40000000 		.word	64
  48 0060 00000000 		.word	0
  49 0064 C1000000 		.word	193
  50 0068 81000000 		.word	129
  51 006c 40000000 		.word	64
  52 0070 01000000 		.word	1
  53 0074 C0000000 		.word	192
  54 0078 80000000 		.word	128
  55 007c 41000000 		.word	65
  56 0080 01000000 		.word	1
  57 0084 C0000000 		.word	192
  58 0088 80000000 		.word	128
  59 008c 41000000 		.word	65
  60 0090 00000000 		.word	0
  61 0094 C1000000 		.word	193
  62 0098 81000000 		.word	129
  63 009c 40000000 		.word	64
  64 00a0 00000000 		.word	0
  65 00a4 C1000000 		.word	193
  66 00a8 81000000 		.word	129
  67 00ac 40000000 		.word	64
  68 00b0 01000000 		.word	1
  69 00b4 C0000000 		.word	192
  70 00b8 80000000 		.word	128
  71 00bc 41000000 		.word	65
  72 00c0 00000000 		.word	0
  73 00c4 C1000000 		.word	193
  74 00c8 81000000 		.word	129
  75 00cc 40000000 		.word	64
  76 00d0 01000000 		.word	1
  77 00d4 C0000000 		.word	192
  78 00d8 80000000 		.word	128
  79 00dc 41000000 		.word	65
  80 00e0 01000000 		.word	1
  81 00e4 C0000000 		.word	192
  82 00e8 80000000 		.word	128
  83 00ec 41000000 		.word	65
  84 00f0 00000000 		.word	0
  85 00f4 C1000000 		.word	193
  86 00f8 81000000 		.word	129
  87 00fc 40000000 		.word	64
  88 0100 01000000 		.word	1
  89 0104 C0000000 		.word	192
  90 0108 80000000 		.word	128
  91 010c 41000000 		.word	65
  92 0110 00000000 		.word	0
  93 0114 C1000000 		.word	193
  94 0118 81000000 		.word	129
  95 011c 40000000 		.word	64
  96 0120 00000000 		.word	0
  97 0124 C1000000 		.word	193
  98 0128 81000000 		.word	129
  99 012c 40000000 		.word	64
 100 0130 01000000 		.word	1
 101 0134 C0000000 		.word	192
 102 0138 80000000 		.word	128
 103 013c 41000000 		.word	65
 104 0140 00000000 		.word	0
 105 0144 C1000000 		.word	193
 106 0148 81000000 		.word	129
 107 014c 40000000 		.word	64
 108 0150 01000000 		.word	1
 109 0154 C0000000 		.word	192
 110 0158 80000000 		.word	128
 111 015c 41000000 		.word	65
 112 0160 01000000 		.word	1
 113 0164 C0000000 		.word	192
 114 0168 80000000 		.word	128
 115 016c 41000000 		.word	65
 116 0170 00000000 		.word	0
 117 0174 C1000000 		.word	193
 118 0178 81000000 		.word	129
 119 017c 40000000 		.word	64
 120 0180 00000000 		.word	0
 121 0184 C1000000 		.word	193
 122 0188 81000000 		.word	129
 123 018c 40000000 		.word	64
 124 0190 01000000 		.word	1
 125 0194 C0000000 		.word	192
 126 0198 80000000 		.word	128
 127 019c 41000000 		.word	65
 128 01a0 01000000 		.word	1
 129 01a4 C0000000 		.word	192
 130 01a8 80000000 		.word	128
 131 01ac 41000000 		.word	65
 132 01b0 00000000 		.word	0
 133 01b4 C1000000 		.word	193
 134 01b8 81000000 		.word	129
 135 01bc 40000000 		.word	64
 136 01c0 01000000 		.word	1
 137 01c4 C0000000 		.word	192
 138 01c8 80000000 		.word	128
 139 01cc 41000000 		.word	65
 140 01d0 00000000 		.word	0
 141 01d4 C1000000 		.word	193
 142 01d8 81000000 		.word	129
 143 01dc 40000000 		.word	64
 144 01e0 00000000 		.word	0
 145 01e4 C1000000 		.word	193
 146 01e8 81000000 		.word	129
 147 01ec 40000000 		.word	64
 148 01f0 01000000 		.word	1
 149 01f4 C0000000 		.word	192
 150 01f8 80000000 		.word	128
 151 01fc 41000000 		.word	65
 152 0200 01000000 		.word	1
 153 0204 C0000000 		.word	192
 154 0208 80000000 		.word	128
 155 020c 41000000 		.word	65
 156 0210 00000000 		.word	0
 157 0214 C1000000 		.word	193
 158 0218 81000000 		.word	129
 159 021c 40000000 		.word	64
 160 0220 00000000 		.word	0
 161 0224 C1000000 		.word	193
 162 0228 81000000 		.word	129
 163 022c 40000000 		.word	64
 164 0230 01000000 		.word	1
 165 0234 C0000000 		.word	192
 166 0238 80000000 		.word	128
 167 023c 41000000 		.word	65
 168 0240 00000000 		.word	0
 169 0244 C1000000 		.word	193
 170 0248 81000000 		.word	129
 171 024c 40000000 		.word	64
 172 0250 01000000 		.word	1
 173 0254 C0000000 		.word	192
 174 0258 80000000 		.word	128
 175 025c 41000000 		.word	65
 176 0260 01000000 		.word	1
 177 0264 C0000000 		.word	192
 178 0268 80000000 		.word	128
 179 026c 41000000 		.word	65
 180 0270 00000000 		.word	0
 181 0274 C1000000 		.word	193
 182 0278 81000000 		.word	129
 183 027c 40000000 		.word	64
 184 0280 00000000 		.word	0
 185 0284 C1000000 		.word	193
 186 0288 81000000 		.word	129
 187 028c 40000000 		.word	64
 188 0290 01000000 		.word	1
 189 0294 C0000000 		.word	192
 190 0298 80000000 		.word	128
 191 029c 41000000 		.word	65
 192 02a0 01000000 		.word	1
 193 02a4 C0000000 		.word	192
 194 02a8 80000000 		.word	128
 195 02ac 41000000 		.word	65
 196 02b0 00000000 		.word	0
 197 02b4 C1000000 		.word	193
 198 02b8 81000000 		.word	129
 199 02bc 40000000 		.word	64
 200 02c0 01000000 		.word	1
 201 02c4 C0000000 		.word	192
 202 02c8 80000000 		.word	128
 203 02cc 41000000 		.word	65
 204 02d0 00000000 		.word	0
 205 02d4 C1000000 		.word	193
 206 02d8 81000000 		.word	129
 207 02dc 40000000 		.word	64
 208 02e0 00000000 		.word	0
 209 02e4 C1000000 		.word	193
 210 02e8 81000000 		.word	129
 211 02ec 40000000 		.word	64
 212 02f0 01000000 		.word	1
 213 02f4 C0000000 		.word	192
 214 02f8 80000000 		.word	128
 215 02fc 41000000 		.word	65
 216 0300 00000000 		.word	0
 217 0304 C1000000 		.word	193
 218 0308 81000000 		.word	129
 219 030c 40000000 		.word	64
 220 0310 01000000 		.word	1
 221 0314 C0000000 		.word	192
 222 0318 80000000 		.word	128
 223 031c 41000000 		.word	65
 224 0320 01000000 		.word	1
 225 0324 C0000000 		.word	192
 226 0328 80000000 		.word	128
 227 032c 41000000 		.word	65
 228 0330 00000000 		.word	0
 229 0334 C1000000 		.word	193
 230 0338 81000000 		.word	129
 231 033c 40000000 		.word	64
 232 0340 01000000 		.word	1
 233 0344 C0000000 		.word	192
 234 0348 80000000 		.word	128
 235 034c 41000000 		.word	65
 236 0350 00000000 		.word	0
 237 0354 C1000000 		.word	193
 238 0358 81000000 		.word	129
 239 035c 40000000 		.word	64
 240 0360 00000000 		.word	0
 241 0364 C1000000 		.word	193
 242 0368 81000000 		.word	129
 243 036c 40000000 		.word	64
 244 0370 01000000 		.word	1
 245 0374 C0000000 		.word	192
 246 0378 80000000 		.word	128
 247 037c 41000000 		.word	65
 248 0380 01000000 		.word	1
 249 0384 C0000000 		.word	192
 250 0388 80000000 		.word	128
 251 038c 41000000 		.word	65
 252 0390 00000000 		.word	0
 253 0394 C1000000 		.word	193
 254 0398 81000000 		.word	129
 255 039c 40000000 		.word	64
 256 03a0 00000000 		.word	0
 257 03a4 C1000000 		.word	193
 258 03a8 81000000 		.word	129
 259 03ac 40000000 		.word	64
 260 03b0 01000000 		.word	1
 261 03b4 C0000000 		.word	192
 262 03b8 80000000 		.word	128
 263 03bc 41000000 		.word	65
 264 03c0 00000000 		.word	0
 265 03c4 C1000000 		.word	193
 266 03c8 81000000 		.word	129
 267 03cc 40000000 		.word	64
 268 03d0 01000000 		.word	1
 269 03d4 C0000000 		.word	192
 270 03d8 80000000 		.word	128
 271 03dc 41000000 		.word	65
 272 03e0 01000000 		.word	1
 273 03e4 C0000000 		.word	192
 274 03e8 80000000 		.word	128
 275 03ec 41000000 		.word	65
 276 03f0 00000000 		.word	0
 277 03f4 C1000000 		.word	193
 278 03f8 81000000 		.word	129
 279 03fc 40000000 		.word	64
 280              		.section	.rodata.crcLo,"a",%progbits
 281              		.align	2
 284              	crcLo:
 285 0000 00000000 		.word	0
 286 0004 C0000000 		.word	192
 287 0008 C1000000 		.word	193
 288 000c 01000000 		.word	1
 289 0010 C3000000 		.word	195
 290 0014 03000000 		.word	3
 291 0018 02000000 		.word	2
 292 001c C2000000 		.word	194
 293 0020 C6000000 		.word	198
 294 0024 06000000 		.word	6
 295 0028 07000000 		.word	7
 296 002c C7000000 		.word	199
 297 0030 05000000 		.word	5
 298 0034 C5000000 		.word	197
 299 0038 C4000000 		.word	196
 300 003c 04000000 		.word	4
 301 0040 CC000000 		.word	204
 302 0044 0C000000 		.word	12
 303 0048 0D000000 		.word	13
 304 004c CD000000 		.word	205
 305 0050 0F000000 		.word	15
 306 0054 CF000000 		.word	207
 307 0058 CE000000 		.word	206
 308 005c 0E000000 		.word	14
 309 0060 0A000000 		.word	10
 310 0064 CA000000 		.word	202
 311 0068 CB000000 		.word	203
 312 006c 0B000000 		.word	11
 313 0070 C9000000 		.word	201
 314 0074 09000000 		.word	9
 315 0078 08000000 		.word	8
 316 007c C8000000 		.word	200
 317 0080 D8000000 		.word	216
 318 0084 18000000 		.word	24
 319 0088 19000000 		.word	25
 320 008c D9000000 		.word	217
 321 0090 1B000000 		.word	27
 322 0094 DB000000 		.word	219
 323 0098 DA000000 		.word	218
 324 009c 1A000000 		.word	26
 325 00a0 1E000000 		.word	30
 326 00a4 DE000000 		.word	222
 327 00a8 DF000000 		.word	223
 328 00ac 1F000000 		.word	31
 329 00b0 DD000000 		.word	221
 330 00b4 1D000000 		.word	29
 331 00b8 1C000000 		.word	28
 332 00bc DC000000 		.word	220
 333 00c0 14000000 		.word	20
 334 00c4 D4000000 		.word	212
 335 00c8 D5000000 		.word	213
 336 00cc 15000000 		.word	21
 337 00d0 D7000000 		.word	215
 338 00d4 17000000 		.word	23
 339 00d8 16000000 		.word	22
 340 00dc D6000000 		.word	214
 341 00e0 D2000000 		.word	210
 342 00e4 12000000 		.word	18
 343 00e8 13000000 		.word	19
 344 00ec D3000000 		.word	211
 345 00f0 11000000 		.word	17
 346 00f4 D1000000 		.word	209
 347 00f8 D0000000 		.word	208
 348 00fc 10000000 		.word	16
 349 0100 F0000000 		.word	240
 350 0104 30000000 		.word	48
 351 0108 31000000 		.word	49
 352 010c F1000000 		.word	241
 353 0110 33000000 		.word	51
 354 0114 F3000000 		.word	243
 355 0118 F2000000 		.word	242
 356 011c 32000000 		.word	50
 357 0120 36000000 		.word	54
 358 0124 F6000000 		.word	246
 359 0128 F7000000 		.word	247
 360 012c 37000000 		.word	55
 361 0130 F5000000 		.word	245
 362 0134 35000000 		.word	53
 363 0138 34000000 		.word	52
 364 013c F4000000 		.word	244
 365 0140 3C000000 		.word	60
 366 0144 FC000000 		.word	252
 367 0148 FD000000 		.word	253
 368 014c 3D000000 		.word	61
 369 0150 FF000000 		.word	255
 370 0154 3F000000 		.word	63
 371 0158 3E000000 		.word	62
 372 015c FE000000 		.word	254
 373 0160 FA000000 		.word	250
 374 0164 3A000000 		.word	58
 375 0168 3B000000 		.word	59
 376 016c FB000000 		.word	251
 377 0170 39000000 		.word	57
 378 0174 F9000000 		.word	249
 379 0178 F8000000 		.word	248
 380 017c 38000000 		.word	56
 381 0180 28000000 		.word	40
 382 0184 E8000000 		.word	232
 383 0188 E9000000 		.word	233
 384 018c 29000000 		.word	41
 385 0190 EB000000 		.word	235
 386 0194 2B000000 		.word	43
 387 0198 2A000000 		.word	42
 388 019c EA000000 		.word	234
 389 01a0 EE000000 		.word	238
 390 01a4 2E000000 		.word	46
 391 01a8 2F000000 		.word	47
 392 01ac EF000000 		.word	239
 393 01b0 2D000000 		.word	45
 394 01b4 ED000000 		.word	237
 395 01b8 EC000000 		.word	236
 396 01bc 2C000000 		.word	44
 397 01c0 E4000000 		.word	228
 398 01c4 24000000 		.word	36
 399 01c8 25000000 		.word	37
 400 01cc E5000000 		.word	229
 401 01d0 27000000 		.word	39
 402 01d4 E7000000 		.word	231
 403 01d8 E6000000 		.word	230
 404 01dc 26000000 		.word	38
 405 01e0 22000000 		.word	34
 406 01e4 E2000000 		.word	226
 407 01e8 E3000000 		.word	227
 408 01ec 23000000 		.word	35
 409 01f0 E1000000 		.word	225
 410 01f4 21000000 		.word	33
 411 01f8 20000000 		.word	32
 412 01fc E0000000 		.word	224
 413 0200 A0000000 		.word	160
 414 0204 60000000 		.word	96
 415 0208 61000000 		.word	97
 416 020c A1000000 		.word	161
 417 0210 63000000 		.word	99
 418 0214 A3000000 		.word	163
 419 0218 A2000000 		.word	162
 420 021c 62000000 		.word	98
 421 0220 66000000 		.word	102
 422 0224 A6000000 		.word	166
 423 0228 A7000000 		.word	167
 424 022c 67000000 		.word	103
 425 0230 A5000000 		.word	165
 426 0234 65000000 		.word	101
 427 0238 64000000 		.word	100
 428 023c A4000000 		.word	164
 429 0240 6C000000 		.word	108
 430 0244 AC000000 		.word	172
 431 0248 AD000000 		.word	173
 432 024c 6D000000 		.word	109
 433 0250 AF000000 		.word	175
 434 0254 6F000000 		.word	111
 435 0258 6E000000 		.word	110
 436 025c AE000000 		.word	174
 437 0260 AA000000 		.word	170
 438 0264 6A000000 		.word	106
 439 0268 6B000000 		.word	107
 440 026c AB000000 		.word	171
 441 0270 69000000 		.word	105
 442 0274 A9000000 		.word	169
 443 0278 A8000000 		.word	168
 444 027c 68000000 		.word	104
 445 0280 78000000 		.word	120
 446 0284 B8000000 		.word	184
 447 0288 B9000000 		.word	185
 448 028c 79000000 		.word	121
 449 0290 BB000000 		.word	187
 450 0294 7B000000 		.word	123
 451 0298 7A000000 		.word	122
 452 029c BA000000 		.word	186
 453 02a0 BE000000 		.word	190
 454 02a4 7E000000 		.word	126
 455 02a8 7F000000 		.word	127
 456 02ac BF000000 		.word	191
 457 02b0 7D000000 		.word	125
 458 02b4 BD000000 		.word	189
 459 02b8 BC000000 		.word	188
 460 02bc 7C000000 		.word	124
 461 02c0 B4000000 		.word	180
 462 02c4 74000000 		.word	116
 463 02c8 75000000 		.word	117
 464 02cc B5000000 		.word	181
 465 02d0 77000000 		.word	119
 466 02d4 B7000000 		.word	183
 467 02d8 B6000000 		.word	182
 468 02dc 76000000 		.word	118
 469 02e0 72000000 		.word	114
 470 02e4 B2000000 		.word	178
 471 02e8 B3000000 		.word	179
 472 02ec 73000000 		.word	115
 473 02f0 B1000000 		.word	177
 474 02f4 71000000 		.word	113
 475 02f8 70000000 		.word	112
 476 02fc B0000000 		.word	176
 477 0300 50000000 		.word	80
 478 0304 90000000 		.word	144
 479 0308 91000000 		.word	145
 480 030c 51000000 		.word	81
 481 0310 93000000 		.word	147
 482 0314 53000000 		.word	83
 483 0318 52000000 		.word	82
 484 031c 92000000 		.word	146
 485 0320 96000000 		.word	150
 486 0324 56000000 		.word	86
 487 0328 57000000 		.word	87
 488 032c 97000000 		.word	151
 489 0330 55000000 		.word	85
 490 0334 95000000 		.word	149
 491 0338 94000000 		.word	148
 492 033c 54000000 		.word	84
 493 0340 9C000000 		.word	156
 494 0344 5C000000 		.word	92
 495 0348 5D000000 		.word	93
 496 034c 9D000000 		.word	157
 497 0350 5F000000 		.word	95
 498 0354 9F000000 		.word	159
 499 0358 9E000000 		.word	158
 500 035c 5E000000 		.word	94
 501 0360 5A000000 		.word	90
 502 0364 9A000000 		.word	154
 503 0368 9B000000 		.word	155
 504 036c 5B000000 		.word	91
 505 0370 99000000 		.word	153
 506 0374 59000000 		.word	89
 507 0378 58000000 		.word	88
 508 037c 98000000 		.word	152
 509 0380 88000000 		.word	136
 510 0384 48000000 		.word	72
 511 0388 49000000 		.word	73
 512 038c 89000000 		.word	137
 513 0390 4B000000 		.word	75
 514 0394 8B000000 		.word	139
 515 0398 8A000000 		.word	138
 516 039c 4A000000 		.word	74
 517 03a0 4E000000 		.word	78
 518 03a4 8E000000 		.word	142
 519 03a8 8F000000 		.word	143
 520 03ac 4F000000 		.word	79
 521 03b0 8D000000 		.word	141
 522 03b4 4D000000 		.word	77
 523 03b8 4C000000 		.word	76
 524 03bc 8C000000 		.word	140
 525 03c0 44000000 		.word	68
 526 03c4 84000000 		.word	132
 527 03c8 85000000 		.word	133
 528 03cc 45000000 		.word	69
 529 03d0 87000000 		.word	135
 530 03d4 47000000 		.word	71
 531 03d8 46000000 		.word	70
 532 03dc 86000000 		.word	134
 533 03e0 82000000 		.word	130
 534 03e4 42000000 		.word	66
 535 03e8 43000000 		.word	67
 536 03ec 83000000 		.word	131
 537 03f0 41000000 		.word	65
 538 03f4 81000000 		.word	129
 539 03f8 80000000 		.word	128
 540 03fc 40000000 		.word	64
 541              		.section	.text.storeReadCoilData,"ax",%progbits
 542              		.align	2
 543              		.global	storeReadCoilData
 544              		.thumb
 545              		.thumb_func
 547              	storeReadCoilData:
 548              	.LFB0:
 549              		.file 1 "src/test.c"
   1:src/test.c    **** /*
   2:src/test.c    ****  * test.c : To push data on Hash Table as per the function as of now. More intuitive way  is requir
   3:src/test.c    ****  *
   4:src/test.c    ****  *  Created on: 16-Dec-2012
   5:src/test.c    ****  *      Author: chetanpatil
   6:src/test.c    ****  */
   7:src/test.c    **** 
   8:src/test.c    **** #include "modbus.h"
   9:src/test.c    **** 
  10:src/test.c    **** void storeReadCoilData(uint32_t *ptr){
 550              		.loc 1 10 0
 551              		.cfi_startproc
 552              		@ args = 0, pretend = 0, frame = 24
 553              		@ frame_needed = 1, uses_anonymous_args = 0
 554 0000 80B5     		push	{r7, lr}
 555              	.LCFI0:
 556              		.cfi_def_cfa_offset 8
 557              		.cfi_offset 14, -4
 558              		.cfi_offset 7, -8
 559 0002 86B0     		sub	sp, sp, #24
 560              	.LCFI1:
 561              		.cfi_def_cfa_offset 32
 562 0004 00AF     		add	r7, sp, #0
 563              	.LCFI2:
 564              		.cfi_def_cfa_register 7
 565 0006 7860     		str	r0, [r7, #4]
  11:src/test.c    **** 
  12:src/test.c    **** 	int i;
  13:src/test.c    **** 	uint32_t id= 0x0000 | *ptr;
 566              		.loc 1 13 0
 567 0008 7B68     		ldr	r3, [r7, #4]
 568 000a 1B68     		ldr	r3, [r3, #0]
 569 000c 3B61     		str	r3, [r7, #16]
  14:src/test.c    **** 
  15:src/test.c    **** 	// 32 Bit data is stored
  16:src/test.c    **** 	uint32_t d=0x21117778;
 570              		.loc 1 16 0
 571 000e 47F27873 		movw	r3, #30584
 572 0012 C2F21113 		movt	r3, 8465
 573 0016 FB60     		str	r3, [r7, #12]
  17:src/test.c    **** 
  18:src/test.c    **** 	for (i=0;i<10;i++){
 574              		.loc 1 18 0
 575 0018 4FF00003 		mov	r3, #0
 576 001c 7B61     		str	r3, [r7, #20]
 577 001e 11E0     		b	.L2
 578              	.L3:
  19:src/test.c    **** 		addData(id++,d++);
 579              		.loc 1 19 0 discriminator 2
 580 0020 3A69     		ldr	r2, [r7, #16]
 581 0022 3B69     		ldr	r3, [r7, #16]
 582 0024 03F10103 		add	r3, r3, #1
 583 0028 3B61     		str	r3, [r7, #16]
 584 002a FB68     		ldr	r3, [r7, #12]
 585 002c F968     		ldr	r1, [r7, #12]
 586 002e 01F10101 		add	r1, r1, #1
 587 0032 F960     		str	r1, [r7, #12]
 588 0034 1046     		mov	r0, r2
 589 0036 1946     		mov	r1, r3
 590 0038 FFF7FEFF 		bl	addData
  18:src/test.c    **** 	for (i=0;i<10;i++){
 591              		.loc 1 18 0 discriminator 2
 592 003c 7B69     		ldr	r3, [r7, #20]
 593 003e 03F10103 		add	r3, r3, #1
 594 0042 7B61     		str	r3, [r7, #20]
 595              	.L2:
  18:src/test.c    **** 	for (i=0;i<10;i++){
 596              		.loc 1 18 0 is_stmt 0 discriminator 1
 597 0044 7B69     		ldr	r3, [r7, #20]
 598 0046 092B     		cmp	r3, #9
 599 0048 EADD     		ble	.L3
  20:src/test.c    **** 	}
  21:src/test.c    **** 	
  22:src/test.c    **** 	//Print the data stored in HASH MAP
  23:src/test.c    **** //	putData();
  24:src/test.c    **** 	return;
  25:src/test.c    **** }
 600              		.loc 1 25 0 is_stmt 1
 601 004a 07F11807 		add	r7, r7, #24
 602 004e BD46     		mov	sp, r7
 603 0050 80BD     		pop	{r7, pc}
 604              		.cfi_endproc
 605              	.LFE0:
 607 0052 00BF     		.section	.text.storeReadDiscreteInputsData,"ax",%progbits
 608              		.align	2
 609              		.global	storeReadDiscreteInputsData
 610              		.thumb
 611              		.thumb_func
 613              	storeReadDiscreteInputsData:
 614              	.LFB1:
  26:src/test.c    **** 
  27:src/test.c    **** void storeReadDiscreteInputsData(uint32_t *ptr){
 615              		.loc 1 27 0
 616              		.cfi_startproc
 617              		@ args = 0, pretend = 0, frame = 24
 618              		@ frame_needed = 1, uses_anonymous_args = 0
 619 0000 80B5     		push	{r7, lr}
 620              	.LCFI3:
 621              		.cfi_def_cfa_offset 8
 622              		.cfi_offset 14, -4
 623              		.cfi_offset 7, -8
 624 0002 86B0     		sub	sp, sp, #24
 625              	.LCFI4:
 626              		.cfi_def_cfa_offset 32
 627 0004 00AF     		add	r7, sp, #0
 628              	.LCFI5:
 629              		.cfi_def_cfa_register 7
 630 0006 7860     		str	r0, [r7, #4]
  28:src/test.c    **** 
  29:src/test.c    **** 	int i;
  30:src/test.c    **** 	uint32_t id= 0x2710 | *ptr;
 631              		.loc 1 30 0
 632 0008 7B68     		ldr	r3, [r7, #4]
 633 000a 1B68     		ldr	r3, [r3, #0]
 634 000c 43F41C53 		orr	r3, r3, #9984
 635 0010 43F01003 		orr	r3, r3, #16
 636 0014 3B61     		str	r3, [r7, #16]
  31:src/test.c    **** 
  32:src/test.c    **** 	// 32 Bit data is stored
  33:src/test.c    **** 	uint32_t d=0x26767678;
 637              		.loc 1 33 0
 638 0016 47F27863 		movw	r3, #30328
 639 001a C2F27663 		movt	r3, 9846
 640 001e FB60     		str	r3, [r7, #12]
  34:src/test.c    **** 
  35:src/test.c    **** 	for (i=0;i<10;i++){
 641              		.loc 1 35 0
 642 0020 4FF00003 		mov	r3, #0
 643 0024 7B61     		str	r3, [r7, #20]
 644 0026 11E0     		b	.L5
 645              	.L6:
  36:src/test.c    **** 		addData(id++,d++);
 646              		.loc 1 36 0 discriminator 2
 647 0028 3A69     		ldr	r2, [r7, #16]
 648 002a 3B69     		ldr	r3, [r7, #16]
 649 002c 03F10103 		add	r3, r3, #1
 650 0030 3B61     		str	r3, [r7, #16]
 651 0032 FB68     		ldr	r3, [r7, #12]
 652 0034 F968     		ldr	r1, [r7, #12]
 653 0036 01F10101 		add	r1, r1, #1
 654 003a F960     		str	r1, [r7, #12]
 655 003c 1046     		mov	r0, r2
 656 003e 1946     		mov	r1, r3
 657 0040 FFF7FEFF 		bl	addData
  35:src/test.c    **** 	for (i=0;i<10;i++){
 658              		.loc 1 35 0 discriminator 2
 659 0044 7B69     		ldr	r3, [r7, #20]
 660 0046 03F10103 		add	r3, r3, #1
 661 004a 7B61     		str	r3, [r7, #20]
 662              	.L5:
  35:src/test.c    **** 	for (i=0;i<10;i++){
 663              		.loc 1 35 0 is_stmt 0 discriminator 1
 664 004c 7B69     		ldr	r3, [r7, #20]
 665 004e 092B     		cmp	r3, #9
 666 0050 EADD     		ble	.L6
  37:src/test.c    **** 	}
  38:src/test.c    **** 
  39:src/test.c    **** 	//Print the data stored in HASH MAP
  40:src/test.c    **** //	putData();
  41:src/test.c    **** }
 667              		.loc 1 41 0 is_stmt 1
 668 0052 07F11807 		add	r7, r7, #24
 669 0056 BD46     		mov	sp, r7
 670 0058 80BD     		pop	{r7, pc}
 671              		.cfi_endproc
 672              	.LFE1:
 674 005a 00BF     		.section	.text.storeReadHoldingRegistersData,"ax",%progbits
 675              		.align	2
 676              		.global	storeReadHoldingRegistersData
 677              		.thumb
 678              		.thumb_func
 680              	storeReadHoldingRegistersData:
 681              	.LFB2:
  42:src/test.c    **** 
  43:src/test.c    **** void storeReadHoldingRegistersData(uint32_t *ptr){
 682              		.loc 1 43 0
 683              		.cfi_startproc
 684              		@ args = 0, pretend = 0, frame = 24
 685              		@ frame_needed = 1, uses_anonymous_args = 0
 686 0000 80B5     		push	{r7, lr}
 687              	.LCFI6:
 688              		.cfi_def_cfa_offset 8
 689              		.cfi_offset 14, -4
 690              		.cfi_offset 7, -8
 691 0002 86B0     		sub	sp, sp, #24
 692              	.LCFI7:
 693              		.cfi_def_cfa_offset 32
 694 0004 00AF     		add	r7, sp, #0
 695              	.LCFI8:
 696              		.cfi_def_cfa_register 7
 697 0006 7860     		str	r0, [r7, #4]
  44:src/test.c    **** 
  45:src/test.c    **** 	int i;
  46:src/test.c    **** 	uint32_t id = (0x9C40 | *ptr);
 698              		.loc 1 46 0
 699 0008 7B68     		ldr	r3, [r7, #4]
 700 000a 1B68     		ldr	r3, [r3, #0]
 701 000c 43F41C43 		orr	r3, r3, #39936
 702 0010 43F04003 		orr	r3, r3, #64
 703 0014 3B61     		str	r3, [r7, #16]
  47:src/test.c    **** 
  48:src/test.c    **** 	// 32 Bit data is stored
  49:src/test.c    **** 	uint32_t d=0x26767677;
 704              		.loc 1 49 0
 705 0016 47F27763 		movw	r3, #30327
 706 001a C2F27663 		movt	r3, 9846
 707 001e FB60     		str	r3, [r7, #12]
  50:src/test.c    **** 
  51:src/test.c    **** 	for (i=0;i<10;i++){
 708              		.loc 1 51 0
 709 0020 4FF00003 		mov	r3, #0
 710 0024 7B61     		str	r3, [r7, #20]
 711 0026 11E0     		b	.L8
 712              	.L9:
  52:src/test.c    **** 		addData(id++,d++);
 713              		.loc 1 52 0 discriminator 2
 714 0028 3A69     		ldr	r2, [r7, #16]
 715 002a 3B69     		ldr	r3, [r7, #16]
 716 002c 03F10103 		add	r3, r3, #1
 717 0030 3B61     		str	r3, [r7, #16]
 718 0032 FB68     		ldr	r3, [r7, #12]
 719 0034 F968     		ldr	r1, [r7, #12]
 720 0036 01F10101 		add	r1, r1, #1
 721 003a F960     		str	r1, [r7, #12]
 722 003c 1046     		mov	r0, r2
 723 003e 1946     		mov	r1, r3
 724 0040 FFF7FEFF 		bl	addData
  51:src/test.c    **** 	for (i=0;i<10;i++){
 725              		.loc 1 51 0 discriminator 2
 726 0044 7B69     		ldr	r3, [r7, #20]
 727 0046 03F10103 		add	r3, r3, #1
 728 004a 7B61     		str	r3, [r7, #20]
 729              	.L8:
  51:src/test.c    **** 	for (i=0;i<10;i++){
 730              		.loc 1 51 0 is_stmt 0 discriminator 1
 731 004c 7B69     		ldr	r3, [r7, #20]
 732 004e 092B     		cmp	r3, #9
 733 0050 EADD     		ble	.L9
  53:src/test.c    **** 	}
  54:src/test.c    **** 
  55:src/test.c    **** 	//Print the data stored in HASH MAP
  56:src/test.c    **** //	putData();
  57:src/test.c    **** }
 734              		.loc 1 57 0 is_stmt 1
 735 0052 07F11807 		add	r7, r7, #24
 736 0056 BD46     		mov	sp, r7
 737 0058 80BD     		pop	{r7, pc}
 738              		.cfi_endproc
 739              	.LFE2:
 741 005a 00BF     		.section	.text.storeReadInputRegistersData,"ax",%progbits
 742              		.align	2
 743              		.global	storeReadInputRegistersData
 744              		.thumb
 745              		.thumb_func
 747              	storeReadInputRegistersData:
 748              	.LFB3:
  58:src/test.c    **** 
  59:src/test.c    **** void storeReadInputRegistersData(uint32_t *ptr){
 749              		.loc 1 59 0
 750              		.cfi_startproc
 751              		@ args = 0, pretend = 0, frame = 24
 752              		@ frame_needed = 1, uses_anonymous_args = 0
 753 0000 80B5     		push	{r7, lr}
 754              	.LCFI9:
 755              		.cfi_def_cfa_offset 8
 756              		.cfi_offset 14, -4
 757              		.cfi_offset 7, -8
 758 0002 86B0     		sub	sp, sp, #24
 759              	.LCFI10:
 760              		.cfi_def_cfa_offset 32
 761 0004 00AF     		add	r7, sp, #0
 762              	.LCFI11:
 763              		.cfi_def_cfa_register 7
 764 0006 7860     		str	r0, [r7, #4]
  60:src/test.c    **** 
  61:src/test.c    **** 	int i;
  62:src/test.c    **** 	uint32_t id = (0x7530 | *ptr);
 765              		.loc 1 62 0
 766 0008 7B68     		ldr	r3, [r7, #4]
 767 000a 1B68     		ldr	r3, [r3, #0]
 768 000c 43F4EA43 		orr	r3, r3, #29952
 769 0010 43F03003 		orr	r3, r3, #48
 770 0014 3B61     		str	r3, [r7, #16]
  63:src/test.c    **** 
  64:src/test.c    **** 	// 32 Bit data is stored
  65:src/test.c    **** 	uint32_t d=0x26767677;
 771              		.loc 1 65 0
 772 0016 47F27763 		movw	r3, #30327
 773 001a C2F27663 		movt	r3, 9846
 774 001e FB60     		str	r3, [r7, #12]
  66:src/test.c    **** 
  67:src/test.c    **** 	for (i=0;i<10;i++){
 775              		.loc 1 67 0
 776 0020 4FF00003 		mov	r3, #0
 777 0024 7B61     		str	r3, [r7, #20]
 778 0026 11E0     		b	.L11
 779              	.L12:
  68:src/test.c    **** 		addData(id++,d++);
 780              		.loc 1 68 0 discriminator 2
 781 0028 3A69     		ldr	r2, [r7, #16]
 782 002a 3B69     		ldr	r3, [r7, #16]
 783 002c 03F10103 		add	r3, r3, #1
 784 0030 3B61     		str	r3, [r7, #16]
 785 0032 FB68     		ldr	r3, [r7, #12]
 786 0034 F968     		ldr	r1, [r7, #12]
 787 0036 01F10101 		add	r1, r1, #1
 788 003a F960     		str	r1, [r7, #12]
 789 003c 1046     		mov	r0, r2
 790 003e 1946     		mov	r1, r3
 791 0040 FFF7FEFF 		bl	addData
  67:src/test.c    **** 	for (i=0;i<10;i++){
 792              		.loc 1 67 0 discriminator 2
 793 0044 7B69     		ldr	r3, [r7, #20]
 794 0046 03F10103 		add	r3, r3, #1
 795 004a 7B61     		str	r3, [r7, #20]
 796              	.L11:
  67:src/test.c    **** 	for (i=0;i<10;i++){
 797              		.loc 1 67 0 is_stmt 0 discriminator 1
 798 004c 7B69     		ldr	r3, [r7, #20]
 799 004e 092B     		cmp	r3, #9
 800 0050 EADD     		ble	.L12
  69:src/test.c    **** 	}
  70:src/test.c    **** 	
  71:src/test.c    **** 	//Print the data stored in HASH MAP
  72:src/test.c    **** //	putData();
  73:src/test.c    **** }
 801              		.loc 1 73 0 is_stmt 1
 802 0052 07F11807 		add	r7, r7, #24
 803 0056 BD46     		mov	sp, r7
 804 0058 80BD     		pop	{r7, pc}
 805              		.cfi_endproc
 806              	.LFE3:
 808 005a 00BF     		.section	.text.storeWriteSingleCoilData,"ax",%progbits
 809              		.align	2
 810              		.global	storeWriteSingleCoilData
 811              		.thumb
 812              		.thumb_func
 814              	storeWriteSingleCoilData:
 815              	.LFB4:
  74:src/test.c    **** 
  75:src/test.c    **** void storeWriteSingleCoilData(uint32_t *ptr){
 816              		.loc 1 75 0
 817              		.cfi_startproc
 818              		@ args = 0, pretend = 0, frame = 24
 819              		@ frame_needed = 1, uses_anonymous_args = 0
 820 0000 80B5     		push	{r7, lr}
 821              	.LCFI12:
 822              		.cfi_def_cfa_offset 8
 823              		.cfi_offset 14, -4
 824              		.cfi_offset 7, -8
 825 0002 86B0     		sub	sp, sp, #24
 826              	.LCFI13:
 827              		.cfi_def_cfa_offset 32
 828 0004 00AF     		add	r7, sp, #0
 829              	.LCFI14:
 830              		.cfi_def_cfa_register 7
 831 0006 7860     		str	r0, [r7, #4]
  76:src/test.c    **** 
  77:src/test.c    **** 	int i;
  78:src/test.c    **** 	uint32_t id= 0x0000 | *ptr;
 832              		.loc 1 78 0
 833 0008 7B68     		ldr	r3, [r7, #4]
 834 000a 1B68     		ldr	r3, [r3, #0]
 835 000c 3B61     		str	r3, [r7, #16]
  79:src/test.c    **** 
  80:src/test.c    **** 	// 32 Bit data is stored
  81:src/test.c    **** 	uint32_t d=0x21117778;
 836              		.loc 1 81 0
 837 000e 47F27873 		movw	r3, #30584
 838 0012 C2F21113 		movt	r3, 8465
 839 0016 FB60     		str	r3, [r7, #12]
  82:src/test.c    **** 
  83:src/test.c    **** 	for (i=0;i<10;i++){
 840              		.loc 1 83 0
 841 0018 4FF00003 		mov	r3, #0
 842 001c 7B61     		str	r3, [r7, #20]
 843 001e 11E0     		b	.L14
 844              	.L15:
  84:src/test.c    **** 		addData(id++,d++);
 845              		.loc 1 84 0 discriminator 2
 846 0020 3A69     		ldr	r2, [r7, #16]
 847 0022 3B69     		ldr	r3, [r7, #16]
 848 0024 03F10103 		add	r3, r3, #1
 849 0028 3B61     		str	r3, [r7, #16]
 850 002a FB68     		ldr	r3, [r7, #12]
 851 002c F968     		ldr	r1, [r7, #12]
 852 002e 01F10101 		add	r1, r1, #1
 853 0032 F960     		str	r1, [r7, #12]
 854 0034 1046     		mov	r0, r2
 855 0036 1946     		mov	r1, r3
 856 0038 FFF7FEFF 		bl	addData
  83:src/test.c    **** 	for (i=0;i<10;i++){
 857              		.loc 1 83 0 discriminator 2
 858 003c 7B69     		ldr	r3, [r7, #20]
 859 003e 03F10103 		add	r3, r3, #1
 860 0042 7B61     		str	r3, [r7, #20]
 861              	.L14:
  83:src/test.c    **** 	for (i=0;i<10;i++){
 862              		.loc 1 83 0 is_stmt 0 discriminator 1
 863 0044 7B69     		ldr	r3, [r7, #20]
 864 0046 092B     		cmp	r3, #9
 865 0048 EADD     		ble	.L15
  85:src/test.c    **** 	}
  86:src/test.c    **** 	
  87:src/test.c    **** 	//Print the data stored in HASH MAP
  88:src/test.c    **** //	putData();
  89:src/test.c    **** }
 866              		.loc 1 89 0 is_stmt 1
 867 004a 07F11807 		add	r7, r7, #24
 868 004e BD46     		mov	sp, r7
 869 0050 80BD     		pop	{r7, pc}
 870              		.cfi_endproc
 871              	.LFE4:
 873 0052 00BF     		.section	.text.storeWriteSingleRegisterData,"ax",%progbits
 874              		.align	2
 875              		.global	storeWriteSingleRegisterData
 876              		.thumb
 877              		.thumb_func
 879              	storeWriteSingleRegisterData:
 880              	.LFB5:
  90:src/test.c    **** 
  91:src/test.c    **** void storeWriteSingleRegisterData(uint32_t *ptr){
 881              		.loc 1 91 0
 882              		.cfi_startproc
 883              		@ args = 0, pretend = 0, frame = 24
 884              		@ frame_needed = 1, uses_anonymous_args = 0
 885 0000 80B5     		push	{r7, lr}
 886              	.LCFI15:
 887              		.cfi_def_cfa_offset 8
 888              		.cfi_offset 14, -4
 889              		.cfi_offset 7, -8
 890 0002 86B0     		sub	sp, sp, #24
 891              	.LCFI16:
 892              		.cfi_def_cfa_offset 32
 893 0004 00AF     		add	r7, sp, #0
 894              	.LCFI17:
 895              		.cfi_def_cfa_register 7
 896 0006 7860     		str	r0, [r7, #4]
  92:src/test.c    **** 
  93:src/test.c    **** 	int i;
  94:src/test.c    **** 	uint32_t id= 0x9c40 | *ptr;
 897              		.loc 1 94 0
 898 0008 7B68     		ldr	r3, [r7, #4]
 899 000a 1B68     		ldr	r3, [r3, #0]
 900 000c 43F41C43 		orr	r3, r3, #39936
 901 0010 43F04003 		orr	r3, r3, #64
 902 0014 3B61     		str	r3, [r7, #16]
  95:src/test.c    **** 
  96:src/test.c    **** 	// 32 Bit data is stored
  97:src/test.c    **** 	uint32_t d=0x21117778;
 903              		.loc 1 97 0
 904 0016 47F27873 		movw	r3, #30584
 905 001a C2F21113 		movt	r3, 8465
 906 001e FB60     		str	r3, [r7, #12]
  98:src/test.c    **** 
  99:src/test.c    **** 	for (i=0;i<10;i++){
 907              		.loc 1 99 0
 908 0020 4FF00003 		mov	r3, #0
 909 0024 7B61     		str	r3, [r7, #20]
 910 0026 11E0     		b	.L17
 911              	.L18:
 100:src/test.c    **** 		addData(id++,d++);
 912              		.loc 1 100 0 discriminator 2
 913 0028 3A69     		ldr	r2, [r7, #16]
 914 002a 3B69     		ldr	r3, [r7, #16]
 915 002c 03F10103 		add	r3, r3, #1
 916 0030 3B61     		str	r3, [r7, #16]
 917 0032 FB68     		ldr	r3, [r7, #12]
 918 0034 F968     		ldr	r1, [r7, #12]
 919 0036 01F10101 		add	r1, r1, #1
 920 003a F960     		str	r1, [r7, #12]
 921 003c 1046     		mov	r0, r2
 922 003e 1946     		mov	r1, r3
 923 0040 FFF7FEFF 		bl	addData
  99:src/test.c    **** 	for (i=0;i<10;i++){
 924              		.loc 1 99 0 discriminator 2
 925 0044 7B69     		ldr	r3, [r7, #20]
 926 0046 03F10103 		add	r3, r3, #1
 927 004a 7B61     		str	r3, [r7, #20]
 928              	.L17:
  99:src/test.c    **** 	for (i=0;i<10;i++){
 929              		.loc 1 99 0 is_stmt 0 discriminator 1
 930 004c 7B69     		ldr	r3, [r7, #20]
 931 004e 092B     		cmp	r3, #9
 932 0050 EADD     		ble	.L18
 101:src/test.c    **** 	}
 102:src/test.c    **** 
 103:src/test.c    **** 	//Print the data stored in HASH MAP
 104:src/test.c    **** //	putData();
 105:src/test.c    **** 
 106:src/test.c    **** }
 933              		.loc 1 106 0 is_stmt 1
 934 0052 07F11807 		add	r7, r7, #24
 935 0056 BD46     		mov	sp, r7
 936 0058 80BD     		pop	{r7, pc}
 937              		.cfi_endproc
 938              	.LFE5:
 940 005a 00BF     		.section	.text.storeReadExceptionStatusData,"ax",%progbits
 941              		.align	2
 942              		.global	storeReadExceptionStatusData
 943              		.thumb
 944              		.thumb_func
 946              	storeReadExceptionStatusData:
 947              	.LFB6:
 107:src/test.c    **** 
 108:src/test.c    **** void storeReadExceptionStatusData(uint32_t *ptr){
 948              		.loc 1 108 0
 949              		.cfi_startproc
 950              		@ args = 0, pretend = 0, frame = 24
 951              		@ frame_needed = 1, uses_anonymous_args = 0
 952 0000 80B5     		push	{r7, lr}
 953              	.LCFI18:
 954              		.cfi_def_cfa_offset 8
 955              		.cfi_offset 14, -4
 956              		.cfi_offset 7, -8
 957 0002 86B0     		sub	sp, sp, #24
 958              	.LCFI19:
 959              		.cfi_def_cfa_offset 32
 960 0004 00AF     		add	r7, sp, #0
 961              	.LCFI20:
 962              		.cfi_def_cfa_register 7
 963 0006 7860     		str	r0, [r7, #4]
 109:src/test.c    **** 
 110:src/test.c    **** 	int i;
 111:src/test.c    **** 	uint32_t id= 0x0000 | *ptr;
 964              		.loc 1 111 0
 965 0008 7B68     		ldr	r3, [r7, #4]
 966 000a 1B68     		ldr	r3, [r3, #0]
 967 000c 3B61     		str	r3, [r7, #16]
 112:src/test.c    **** 
 113:src/test.c    **** 	// 32 Bit data is stored
 114:src/test.c    **** 	uint32_t d=0x21117778;
 968              		.loc 1 114 0
 969 000e 47F27873 		movw	r3, #30584
 970 0012 C2F21113 		movt	r3, 8465
 971 0016 FB60     		str	r3, [r7, #12]
 115:src/test.c    **** 
 116:src/test.c    **** 	for (i=0;i<10;i++){
 972              		.loc 1 116 0
 973 0018 4FF00003 		mov	r3, #0
 974 001c 7B61     		str	r3, [r7, #20]
 975 001e 11E0     		b	.L20
 976              	.L21:
 117:src/test.c    **** 		addData(id++,d++);
 977              		.loc 1 117 0 discriminator 2
 978 0020 3A69     		ldr	r2, [r7, #16]
 979 0022 3B69     		ldr	r3, [r7, #16]
 980 0024 03F10103 		add	r3, r3, #1
 981 0028 3B61     		str	r3, [r7, #16]
 982 002a FB68     		ldr	r3, [r7, #12]
 983 002c F968     		ldr	r1, [r7, #12]
 984 002e 01F10101 		add	r1, r1, #1
 985 0032 F960     		str	r1, [r7, #12]
 986 0034 1046     		mov	r0, r2
 987 0036 1946     		mov	r1, r3
 988 0038 FFF7FEFF 		bl	addData
 116:src/test.c    **** 	for (i=0;i<10;i++){
 989              		.loc 1 116 0 discriminator 2
 990 003c 7B69     		ldr	r3, [r7, #20]
 991 003e 03F10103 		add	r3, r3, #1
 992 0042 7B61     		str	r3, [r7, #20]
 993              	.L20:
 116:src/test.c    **** 	for (i=0;i<10;i++){
 994              		.loc 1 116 0 is_stmt 0 discriminator 1
 995 0044 7B69     		ldr	r3, [r7, #20]
 996 0046 092B     		cmp	r3, #9
 997 0048 EADD     		ble	.L21
 118:src/test.c    **** 	}
 119:src/test.c    **** 
 120:src/test.c    **** 	//putData();
 121:src/test.c    **** 
 122:src/test.c    **** }
 998              		.loc 1 122 0 is_stmt 1
 999 004a 07F11807 		add	r7, r7, #24
 1000 004e BD46     		mov	sp, r7
 1001 0050 80BD     		pop	{r7, pc}
 1002              		.cfi_endproc
 1003              	.LFE6:
 1005 0052 00BF     		.section	.text.storeWriteMultipleCoilsData,"ax",%progbits
 1006              		.align	2
 1007              		.global	storeWriteMultipleCoilsData
 1008              		.thumb
 1009              		.thumb_func
 1011              	storeWriteMultipleCoilsData:
 1012              	.LFB7:
 123:src/test.c    **** 
 124:src/test.c    **** void storeWriteMultipleCoilsData(uint32_t *ptr){
 1013              		.loc 1 124 0
 1014              		.cfi_startproc
 1015              		@ args = 0, pretend = 0, frame = 24
 1016              		@ frame_needed = 1, uses_anonymous_args = 0
 1017 0000 80B5     		push	{r7, lr}
 1018              	.LCFI21:
 1019              		.cfi_def_cfa_offset 8
 1020              		.cfi_offset 14, -4
 1021              		.cfi_offset 7, -8
 1022 0002 86B0     		sub	sp, sp, #24
 1023              	.LCFI22:
 1024              		.cfi_def_cfa_offset 32
 1025 0004 00AF     		add	r7, sp, #0
 1026              	.LCFI23:
 1027              		.cfi_def_cfa_register 7
 1028 0006 7860     		str	r0, [r7, #4]
 125:src/test.c    **** 
 126:src/test.c    **** 	int i;
 127:src/test.c    **** 	uint32_t id= 0x0000 | *ptr;
 1029              		.loc 1 127 0
 1030 0008 7B68     		ldr	r3, [r7, #4]
 1031 000a 1B68     		ldr	r3, [r3, #0]
 1032 000c 3B61     		str	r3, [r7, #16]
 128:src/test.c    **** 
 129:src/test.c    **** 	// 32 Bit data is stored
 130:src/test.c    **** 	uint32_t d=0x21117778;
 1033              		.loc 1 130 0
 1034 000e 47F27873 		movw	r3, #30584
 1035 0012 C2F21113 		movt	r3, 8465
 1036 0016 FB60     		str	r3, [r7, #12]
 131:src/test.c    **** 
 132:src/test.c    **** 	for (i=0;i<10;i++){
 1037              		.loc 1 132 0
 1038 0018 4FF00003 		mov	r3, #0
 1039 001c 7B61     		str	r3, [r7, #20]
 1040 001e 11E0     		b	.L23
 1041              	.L24:
 133:src/test.c    **** 		addData(id++,d++);
 1042              		.loc 1 133 0 discriminator 2
 1043 0020 3A69     		ldr	r2, [r7, #16]
 1044 0022 3B69     		ldr	r3, [r7, #16]
 1045 0024 03F10103 		add	r3, r3, #1
 1046 0028 3B61     		str	r3, [r7, #16]
 1047 002a FB68     		ldr	r3, [r7, #12]
 1048 002c F968     		ldr	r1, [r7, #12]
 1049 002e 01F10101 		add	r1, r1, #1
 1050 0032 F960     		str	r1, [r7, #12]
 1051 0034 1046     		mov	r0, r2
 1052 0036 1946     		mov	r1, r3
 1053 0038 FFF7FEFF 		bl	addData
 132:src/test.c    **** 	for (i=0;i<10;i++){
 1054              		.loc 1 132 0 discriminator 2
 1055 003c 7B69     		ldr	r3, [r7, #20]
 1056 003e 03F10103 		add	r3, r3, #1
 1057 0042 7B61     		str	r3, [r7, #20]
 1058              	.L23:
 132:src/test.c    **** 	for (i=0;i<10;i++){
 1059              		.loc 1 132 0 is_stmt 0 discriminator 1
 1060 0044 7B69     		ldr	r3, [r7, #20]
 1061 0046 092B     		cmp	r3, #9
 1062 0048 EADD     		ble	.L24
 134:src/test.c    **** 	}
 135:src/test.c    **** 
 136:src/test.c    **** //	putData();
 137:src/test.c    **** 
 138:src/test.c    **** }
 1063              		.loc 1 138 0 is_stmt 1
 1064 004a 07F11807 		add	r7, r7, #24
 1065 004e BD46     		mov	sp, r7
 1066 0050 80BD     		pop	{r7, pc}
 1067              		.cfi_endproc
 1068              	.LFE7:
 1070 0052 00BF     		.section	.text.storeWriteMultipleRegistersData,"ax",%progbits
 1071              		.align	2
 1072              		.global	storeWriteMultipleRegistersData
 1073              		.thumb
 1074              		.thumb_func
 1076              	storeWriteMultipleRegistersData:
 1077              	.LFB8:
 139:src/test.c    **** 
 140:src/test.c    **** void storeWriteMultipleRegistersData(uint32_t *ptr){
 1078              		.loc 1 140 0
 1079              		.cfi_startproc
 1080              		@ args = 0, pretend = 0, frame = 24
 1081              		@ frame_needed = 1, uses_anonymous_args = 0
 1082 0000 80B5     		push	{r7, lr}
 1083              	.LCFI24:
 1084              		.cfi_def_cfa_offset 8
 1085              		.cfi_offset 14, -4
 1086              		.cfi_offset 7, -8
 1087 0002 86B0     		sub	sp, sp, #24
 1088              	.LCFI25:
 1089              		.cfi_def_cfa_offset 32
 1090 0004 00AF     		add	r7, sp, #0
 1091              	.LCFI26:
 1092              		.cfi_def_cfa_register 7
 1093 0006 7860     		str	r0, [r7, #4]
 141:src/test.c    **** 
 142:src/test.c    **** 	int i;
 143:src/test.c    **** 	uint32_t id= 0x9c40 | *ptr;
 1094              		.loc 1 143 0
 1095 0008 7B68     		ldr	r3, [r7, #4]
 1096 000a 1B68     		ldr	r3, [r3, #0]
 1097 000c 43F41C43 		orr	r3, r3, #39936
 1098 0010 43F04003 		orr	r3, r3, #64
 1099 0014 3B61     		str	r3, [r7, #16]
 144:src/test.c    **** 
 145:src/test.c    **** 	// 32 Bit data is stored
 146:src/test.c    **** 	uint32_t d=0x21117778;
 1100              		.loc 1 146 0
 1101 0016 47F27873 		movw	r3, #30584
 1102 001a C2F21113 		movt	r3, 8465
 1103 001e FB60     		str	r3, [r7, #12]
 147:src/test.c    **** 
 148:src/test.c    **** 	for (i=0;i<10;i++){
 1104              		.loc 1 148 0
 1105 0020 4FF00003 		mov	r3, #0
 1106 0024 7B61     		str	r3, [r7, #20]
 1107 0026 11E0     		b	.L26
 1108              	.L27:
 149:src/test.c    **** 		addData(id++,d++);
 1109              		.loc 1 149 0 discriminator 2
 1110 0028 3A69     		ldr	r2, [r7, #16]
 1111 002a 3B69     		ldr	r3, [r7, #16]
 1112 002c 03F10103 		add	r3, r3, #1
 1113 0030 3B61     		str	r3, [r7, #16]
 1114 0032 FB68     		ldr	r3, [r7, #12]
 1115 0034 F968     		ldr	r1, [r7, #12]
 1116 0036 01F10101 		add	r1, r1, #1
 1117 003a F960     		str	r1, [r7, #12]
 1118 003c 1046     		mov	r0, r2
 1119 003e 1946     		mov	r1, r3
 1120 0040 FFF7FEFF 		bl	addData
 148:src/test.c    **** 	for (i=0;i<10;i++){
 1121              		.loc 1 148 0 discriminator 2
 1122 0044 7B69     		ldr	r3, [r7, #20]
 1123 0046 03F10103 		add	r3, r3, #1
 1124 004a 7B61     		str	r3, [r7, #20]
 1125              	.L26:
 148:src/test.c    **** 	for (i=0;i<10;i++){
 1126              		.loc 1 148 0 is_stmt 0 discriminator 1
 1127 004c 7B69     		ldr	r3, [r7, #20]
 1128 004e 092B     		cmp	r3, #9
 1129 0050 EADD     		ble	.L27
 150:src/test.c    **** 	}
 151:src/test.c    **** 
 152:src/test.c    **** //	putData();
 153:src/test.c    **** 
 154:src/test.c    **** }
 1130              		.loc 1 154 0 is_stmt 1
 1131 0052 07F11807 		add	r7, r7, #24
 1132 0056 BD46     		mov	sp, r7
 1133 0058 80BD     		pop	{r7, pc}
 1134              		.cfi_endproc
 1135              	.LFE8:
 1137 005a 00BF     		.text
 1138              	.Letext0:
 1139              		.file 2 "src/modbus.h"
 1140              		.file 3 "/usr/local/csl/arm-2012.03/bin/../lib/gcc/arm-none-eabi/4.6.3/../../../../arm-none-eabi/i
DEFINED SYMBOLS
                            *ABS*:00000000 test.c
     /tmp/ccP5mX3S.s:20     .rodata.crcHi:00000000 $d
     /tmp/ccP5mX3S.s:23     .rodata.crcHi:00000000 crcHi
     /tmp/ccP5mX3S.s:281    .rodata.crcLo:00000000 $d
     /tmp/ccP5mX3S.s:284    .rodata.crcLo:00000000 crcLo
     /tmp/ccP5mX3S.s:542    .text.storeReadCoilData:00000000 $t
     /tmp/ccP5mX3S.s:547    .text.storeReadCoilData:00000000 storeReadCoilData
     /tmp/ccP5mX3S.s:608    .text.storeReadDiscreteInputsData:00000000 $t
     /tmp/ccP5mX3S.s:613    .text.storeReadDiscreteInputsData:00000000 storeReadDiscreteInputsData
     /tmp/ccP5mX3S.s:675    .text.storeReadHoldingRegistersData:00000000 $t
     /tmp/ccP5mX3S.s:680    .text.storeReadHoldingRegistersData:00000000 storeReadHoldingRegistersData
     /tmp/ccP5mX3S.s:742    .text.storeReadInputRegistersData:00000000 $t
     /tmp/ccP5mX3S.s:747    .text.storeReadInputRegistersData:00000000 storeReadInputRegistersData
     /tmp/ccP5mX3S.s:809    .text.storeWriteSingleCoilData:00000000 $t
     /tmp/ccP5mX3S.s:814    .text.storeWriteSingleCoilData:00000000 storeWriteSingleCoilData
     /tmp/ccP5mX3S.s:874    .text.storeWriteSingleRegisterData:00000000 $t
     /tmp/ccP5mX3S.s:879    .text.storeWriteSingleRegisterData:00000000 storeWriteSingleRegisterData
     /tmp/ccP5mX3S.s:941    .text.storeReadExceptionStatusData:00000000 $t
     /tmp/ccP5mX3S.s:946    .text.storeReadExceptionStatusData:00000000 storeReadExceptionStatusData
     /tmp/ccP5mX3S.s:1006   .text.storeWriteMultipleCoilsData:00000000 $t
     /tmp/ccP5mX3S.s:1011   .text.storeWriteMultipleCoilsData:00000000 storeWriteMultipleCoilsData
     /tmp/ccP5mX3S.s:1071   .text.storeWriteMultipleRegistersData:00000000 $t
     /tmp/ccP5mX3S.s:1076   .text.storeWriteMultipleRegistersData:00000000 storeWriteMultipleRegistersData
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
addData
